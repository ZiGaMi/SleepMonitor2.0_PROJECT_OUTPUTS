
SLEEP_MONITOR_2.0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001a084  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000057fc  0801a258  0801a258  0002a258  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801fa54  0801fa54  00030328  2**0
                  CONTENTS
  4 .ARM          00000008  0801fa54  0801fa54  0002fa54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801fa5c  0801fa5c  00030328  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801fa5c  0801fa5c  0002fa5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801fa60  0801fa60  0002fa60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000328  20000000  0801fa64  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005550  20000328  0801fd8c  00030328  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20005878  0801fd8c  00035878  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030328  2**0
                  CONTENTS, READONLY
 12 .debug_info   0004a60d  00000000  00000000  00030358  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000a2dd  00000000  00000000  0007a965  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000029a8  00000000  00000000  00084c48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002570  00000000  00000000  000875f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000335f5  00000000  00000000  00089b60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0003b929  00000000  00000000  000bd155  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010fdf9  00000000  00000000  000f8a7e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00208877  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000bf8c  00000000  00000000  002088cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000328 	.word	0x20000328
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0801a23c 	.word	0x0801a23c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000032c 	.word	0x2000032c
 800020c:	0801a23c 	.word	0x0801a23c

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_drsub>:
 80002e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002e4:	e002      	b.n	80002ec <__adddf3>
 80002e6:	bf00      	nop

080002e8 <__aeabi_dsub>:
 80002e8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ec <__adddf3>:
 80002ec:	b530      	push	{r4, r5, lr}
 80002ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002f6:	ea94 0f05 	teq	r4, r5
 80002fa:	bf08      	it	eq
 80002fc:	ea90 0f02 	teqeq	r0, r2
 8000300:	bf1f      	itttt	ne
 8000302:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000306:	ea55 0c02 	orrsne.w	ip, r5, r2
 800030a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800030e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000312:	f000 80e2 	beq.w	80004da <__adddf3+0x1ee>
 8000316:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800031a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800031e:	bfb8      	it	lt
 8000320:	426d      	neglt	r5, r5
 8000322:	dd0c      	ble.n	800033e <__adddf3+0x52>
 8000324:	442c      	add	r4, r5
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	ea82 0000 	eor.w	r0, r2, r0
 8000332:	ea83 0101 	eor.w	r1, r3, r1
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	2d36      	cmp	r5, #54	; 0x36
 8000340:	bf88      	it	hi
 8000342:	bd30      	pophi	{r4, r5, pc}
 8000344:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000348:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800034c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000350:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000354:	d002      	beq.n	800035c <__adddf3+0x70>
 8000356:	4240      	negs	r0, r0
 8000358:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800035c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000360:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000364:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000368:	d002      	beq.n	8000370 <__adddf3+0x84>
 800036a:	4252      	negs	r2, r2
 800036c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000370:	ea94 0f05 	teq	r4, r5
 8000374:	f000 80a7 	beq.w	80004c6 <__adddf3+0x1da>
 8000378:	f1a4 0401 	sub.w	r4, r4, #1
 800037c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000380:	db0d      	blt.n	800039e <__adddf3+0xb2>
 8000382:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000386:	fa22 f205 	lsr.w	r2, r2, r5
 800038a:	1880      	adds	r0, r0, r2
 800038c:	f141 0100 	adc.w	r1, r1, #0
 8000390:	fa03 f20e 	lsl.w	r2, r3, lr
 8000394:	1880      	adds	r0, r0, r2
 8000396:	fa43 f305 	asr.w	r3, r3, r5
 800039a:	4159      	adcs	r1, r3
 800039c:	e00e      	b.n	80003bc <__adddf3+0xd0>
 800039e:	f1a5 0520 	sub.w	r5, r5, #32
 80003a2:	f10e 0e20 	add.w	lr, lr, #32
 80003a6:	2a01      	cmp	r2, #1
 80003a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003ac:	bf28      	it	cs
 80003ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003b2:	fa43 f305 	asr.w	r3, r3, r5
 80003b6:	18c0      	adds	r0, r0, r3
 80003b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003c0:	d507      	bpl.n	80003d2 <__adddf3+0xe6>
 80003c2:	f04f 0e00 	mov.w	lr, #0
 80003c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80003d2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003d6:	d31b      	bcc.n	8000410 <__adddf3+0x124>
 80003d8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003dc:	d30c      	bcc.n	80003f8 <__adddf3+0x10c>
 80003de:	0849      	lsrs	r1, r1, #1
 80003e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003e8:	f104 0401 	add.w	r4, r4, #1
 80003ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003f0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003f4:	f080 809a 	bcs.w	800052c <__adddf3+0x240>
 80003f8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003fc:	bf08      	it	eq
 80003fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000402:	f150 0000 	adcs.w	r0, r0, #0
 8000406:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800040a:	ea41 0105 	orr.w	r1, r1, r5
 800040e:	bd30      	pop	{r4, r5, pc}
 8000410:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000414:	4140      	adcs	r0, r0
 8000416:	eb41 0101 	adc.w	r1, r1, r1
 800041a:	3c01      	subs	r4, #1
 800041c:	bf28      	it	cs
 800041e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000422:	d2e9      	bcs.n	80003f8 <__adddf3+0x10c>
 8000424:	f091 0f00 	teq	r1, #0
 8000428:	bf04      	itt	eq
 800042a:	4601      	moveq	r1, r0
 800042c:	2000      	moveq	r0, #0
 800042e:	fab1 f381 	clz	r3, r1
 8000432:	bf08      	it	eq
 8000434:	3320      	addeq	r3, #32
 8000436:	f1a3 030b 	sub.w	r3, r3, #11
 800043a:	f1b3 0220 	subs.w	r2, r3, #32
 800043e:	da0c      	bge.n	800045a <__adddf3+0x16e>
 8000440:	320c      	adds	r2, #12
 8000442:	dd08      	ble.n	8000456 <__adddf3+0x16a>
 8000444:	f102 0c14 	add.w	ip, r2, #20
 8000448:	f1c2 020c 	rsb	r2, r2, #12
 800044c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000450:	fa21 f102 	lsr.w	r1, r1, r2
 8000454:	e00c      	b.n	8000470 <__adddf3+0x184>
 8000456:	f102 0214 	add.w	r2, r2, #20
 800045a:	bfd8      	it	le
 800045c:	f1c2 0c20 	rsble	ip, r2, #32
 8000460:	fa01 f102 	lsl.w	r1, r1, r2
 8000464:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000468:	bfdc      	itt	le
 800046a:	ea41 010c 	orrle.w	r1, r1, ip
 800046e:	4090      	lslle	r0, r2
 8000470:	1ae4      	subs	r4, r4, r3
 8000472:	bfa2      	ittt	ge
 8000474:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000478:	4329      	orrge	r1, r5
 800047a:	bd30      	popge	{r4, r5, pc}
 800047c:	ea6f 0404 	mvn.w	r4, r4
 8000480:	3c1f      	subs	r4, #31
 8000482:	da1c      	bge.n	80004be <__adddf3+0x1d2>
 8000484:	340c      	adds	r4, #12
 8000486:	dc0e      	bgt.n	80004a6 <__adddf3+0x1ba>
 8000488:	f104 0414 	add.w	r4, r4, #20
 800048c:	f1c4 0220 	rsb	r2, r4, #32
 8000490:	fa20 f004 	lsr.w	r0, r0, r4
 8000494:	fa01 f302 	lsl.w	r3, r1, r2
 8000498:	ea40 0003 	orr.w	r0, r0, r3
 800049c:	fa21 f304 	lsr.w	r3, r1, r4
 80004a0:	ea45 0103 	orr.w	r1, r5, r3
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f1c4 040c 	rsb	r4, r4, #12
 80004aa:	f1c4 0220 	rsb	r2, r4, #32
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 f304 	lsl.w	r3, r1, r4
 80004b6:	ea40 0003 	orr.w	r0, r0, r3
 80004ba:	4629      	mov	r1, r5
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	fa21 f004 	lsr.w	r0, r1, r4
 80004c2:	4629      	mov	r1, r5
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	f094 0f00 	teq	r4, #0
 80004ca:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ce:	bf06      	itte	eq
 80004d0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004d4:	3401      	addeq	r4, #1
 80004d6:	3d01      	subne	r5, #1
 80004d8:	e74e      	b.n	8000378 <__adddf3+0x8c>
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf18      	it	ne
 80004e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004e4:	d029      	beq.n	800053a <__adddf3+0x24e>
 80004e6:	ea94 0f05 	teq	r4, r5
 80004ea:	bf08      	it	eq
 80004ec:	ea90 0f02 	teqeq	r0, r2
 80004f0:	d005      	beq.n	80004fe <__adddf3+0x212>
 80004f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004f6:	bf04      	itt	eq
 80004f8:	4619      	moveq	r1, r3
 80004fa:	4610      	moveq	r0, r2
 80004fc:	bd30      	pop	{r4, r5, pc}
 80004fe:	ea91 0f03 	teq	r1, r3
 8000502:	bf1e      	ittt	ne
 8000504:	2100      	movne	r1, #0
 8000506:	2000      	movne	r0, #0
 8000508:	bd30      	popne	{r4, r5, pc}
 800050a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800050e:	d105      	bne.n	800051c <__adddf3+0x230>
 8000510:	0040      	lsls	r0, r0, #1
 8000512:	4149      	adcs	r1, r1
 8000514:	bf28      	it	cs
 8000516:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800051a:	bd30      	pop	{r4, r5, pc}
 800051c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000520:	bf3c      	itt	cc
 8000522:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000526:	bd30      	popcc	{r4, r5, pc}
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800052c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000530:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000534:	f04f 0000 	mov.w	r0, #0
 8000538:	bd30      	pop	{r4, r5, pc}
 800053a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800053e:	bf1a      	itte	ne
 8000540:	4619      	movne	r1, r3
 8000542:	4610      	movne	r0, r2
 8000544:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000548:	bf1c      	itt	ne
 800054a:	460b      	movne	r3, r1
 800054c:	4602      	movne	r2, r0
 800054e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000552:	bf06      	itte	eq
 8000554:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000558:	ea91 0f03 	teqeq	r1, r3
 800055c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000560:	bd30      	pop	{r4, r5, pc}
 8000562:	bf00      	nop

08000564 <__aeabi_ui2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f04f 0500 	mov.w	r5, #0
 800057c:	f04f 0100 	mov.w	r1, #0
 8000580:	e750      	b.n	8000424 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_i2d>:
 8000584:	f090 0f00 	teq	r0, #0
 8000588:	bf04      	itt	eq
 800058a:	2100      	moveq	r1, #0
 800058c:	4770      	bxeq	lr
 800058e:	b530      	push	{r4, r5, lr}
 8000590:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000594:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000598:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800059c:	bf48      	it	mi
 800059e:	4240      	negmi	r0, r0
 80005a0:	f04f 0100 	mov.w	r1, #0
 80005a4:	e73e      	b.n	8000424 <__adddf3+0x138>
 80005a6:	bf00      	nop

080005a8 <__aeabi_f2d>:
 80005a8:	0042      	lsls	r2, r0, #1
 80005aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80005b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005b6:	bf1f      	itttt	ne
 80005b8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005bc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005c0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005c4:	4770      	bxne	lr
 80005c6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ca:	bf08      	it	eq
 80005cc:	4770      	bxeq	lr
 80005ce:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005d2:	bf04      	itt	eq
 80005d4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005d8:	4770      	bxeq	lr
 80005da:	b530      	push	{r4, r5, lr}
 80005dc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e8:	e71c      	b.n	8000424 <__adddf3+0x138>
 80005ea:	bf00      	nop

080005ec <__aeabi_ul2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	e00a      	b.n	8000612 <__aeabi_l2d+0x16>

080005fc <__aeabi_l2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800060a:	d502      	bpl.n	8000612 <__aeabi_l2d+0x16>
 800060c:	4240      	negs	r0, r0
 800060e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000612:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000616:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800061a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800061e:	f43f aed8 	beq.w	80003d2 <__adddf3+0xe6>
 8000622:	f04f 0203 	mov.w	r2, #3
 8000626:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800062a:	bf18      	it	ne
 800062c:	3203      	addne	r2, #3
 800062e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000632:	bf18      	it	ne
 8000634:	3203      	addne	r2, #3
 8000636:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800063a:	f1c2 0320 	rsb	r3, r2, #32
 800063e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000642:	fa20 f002 	lsr.w	r0, r0, r2
 8000646:	fa01 fe03 	lsl.w	lr, r1, r3
 800064a:	ea40 000e 	orr.w	r0, r0, lr
 800064e:	fa21 f102 	lsr.w	r1, r1, r2
 8000652:	4414      	add	r4, r2
 8000654:	e6bd      	b.n	80003d2 <__adddf3+0xe6>
 8000656:	bf00      	nop

08000658 <__aeabi_dmul>:
 8000658:	b570      	push	{r4, r5, r6, lr}
 800065a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800065e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000662:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000666:	bf1d      	ittte	ne
 8000668:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800066c:	ea94 0f0c 	teqne	r4, ip
 8000670:	ea95 0f0c 	teqne	r5, ip
 8000674:	f000 f8de 	bleq	8000834 <__aeabi_dmul+0x1dc>
 8000678:	442c      	add	r4, r5
 800067a:	ea81 0603 	eor.w	r6, r1, r3
 800067e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000682:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000686:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800068a:	bf18      	it	ne
 800068c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000690:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000694:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000698:	d038      	beq.n	800070c <__aeabi_dmul+0xb4>
 800069a:	fba0 ce02 	umull	ip, lr, r0, r2
 800069e:	f04f 0500 	mov.w	r5, #0
 80006a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006a6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80006aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006ae:	f04f 0600 	mov.w	r6, #0
 80006b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006b6:	f09c 0f00 	teq	ip, #0
 80006ba:	bf18      	it	ne
 80006bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006c0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006c4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006c8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006cc:	d204      	bcs.n	80006d8 <__aeabi_dmul+0x80>
 80006ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006d2:	416d      	adcs	r5, r5
 80006d4:	eb46 0606 	adc.w	r6, r6, r6
 80006d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ec:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006f0:	bf88      	it	hi
 80006f2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006f6:	d81e      	bhi.n	8000736 <__aeabi_dmul+0xde>
 80006f8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006fc:	bf08      	it	eq
 80006fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000702:	f150 0000 	adcs.w	r0, r0, #0
 8000706:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000710:	ea46 0101 	orr.w	r1, r6, r1
 8000714:	ea40 0002 	orr.w	r0, r0, r2
 8000718:	ea81 0103 	eor.w	r1, r1, r3
 800071c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000720:	bfc2      	ittt	gt
 8000722:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000726:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800072a:	bd70      	popgt	{r4, r5, r6, pc}
 800072c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000730:	f04f 0e00 	mov.w	lr, #0
 8000734:	3c01      	subs	r4, #1
 8000736:	f300 80ab 	bgt.w	8000890 <__aeabi_dmul+0x238>
 800073a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800073e:	bfde      	ittt	le
 8000740:	2000      	movle	r0, #0
 8000742:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000746:	bd70      	pople	{r4, r5, r6, pc}
 8000748:	f1c4 0400 	rsb	r4, r4, #0
 800074c:	3c20      	subs	r4, #32
 800074e:	da35      	bge.n	80007bc <__aeabi_dmul+0x164>
 8000750:	340c      	adds	r4, #12
 8000752:	dc1b      	bgt.n	800078c <__aeabi_dmul+0x134>
 8000754:	f104 0414 	add.w	r4, r4, #20
 8000758:	f1c4 0520 	rsb	r5, r4, #32
 800075c:	fa00 f305 	lsl.w	r3, r0, r5
 8000760:	fa20 f004 	lsr.w	r0, r0, r4
 8000764:	fa01 f205 	lsl.w	r2, r1, r5
 8000768:	ea40 0002 	orr.w	r0, r0, r2
 800076c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000770:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000774:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000778:	fa21 f604 	lsr.w	r6, r1, r4
 800077c:	eb42 0106 	adc.w	r1, r2, r6
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 040c 	rsb	r4, r4, #12
 8000790:	f1c4 0520 	rsb	r5, r4, #32
 8000794:	fa00 f304 	lsl.w	r3, r0, r4
 8000798:	fa20 f005 	lsr.w	r0, r0, r5
 800079c:	fa01 f204 	lsl.w	r2, r1, r4
 80007a0:	ea40 0002 	orr.w	r0, r0, r2
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007ac:	f141 0100 	adc.w	r1, r1, #0
 80007b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007b4:	bf08      	it	eq
 80007b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ba:	bd70      	pop	{r4, r5, r6, pc}
 80007bc:	f1c4 0520 	rsb	r5, r4, #32
 80007c0:	fa00 f205 	lsl.w	r2, r0, r5
 80007c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007c8:	fa20 f304 	lsr.w	r3, r0, r4
 80007cc:	fa01 f205 	lsl.w	r2, r1, r5
 80007d0:	ea43 0302 	orr.w	r3, r3, r2
 80007d4:	fa21 f004 	lsr.w	r0, r1, r4
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007dc:	fa21 f204 	lsr.w	r2, r1, r4
 80007e0:	ea20 0002 	bic.w	r0, r0, r2
 80007e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ec:	bf08      	it	eq
 80007ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007f2:	bd70      	pop	{r4, r5, r6, pc}
 80007f4:	f094 0f00 	teq	r4, #0
 80007f8:	d10f      	bne.n	800081a <__aeabi_dmul+0x1c2>
 80007fa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007fe:	0040      	lsls	r0, r0, #1
 8000800:	eb41 0101 	adc.w	r1, r1, r1
 8000804:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3c01      	subeq	r4, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1a6>
 800080e:	ea41 0106 	orr.w	r1, r1, r6
 8000812:	f095 0f00 	teq	r5, #0
 8000816:	bf18      	it	ne
 8000818:	4770      	bxne	lr
 800081a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800081e:	0052      	lsls	r2, r2, #1
 8000820:	eb43 0303 	adc.w	r3, r3, r3
 8000824:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000828:	bf08      	it	eq
 800082a:	3d01      	subeq	r5, #1
 800082c:	d0f7      	beq.n	800081e <__aeabi_dmul+0x1c6>
 800082e:	ea43 0306 	orr.w	r3, r3, r6
 8000832:	4770      	bx	lr
 8000834:	ea94 0f0c 	teq	r4, ip
 8000838:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800083c:	bf18      	it	ne
 800083e:	ea95 0f0c 	teqne	r5, ip
 8000842:	d00c      	beq.n	800085e <__aeabi_dmul+0x206>
 8000844:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000848:	bf18      	it	ne
 800084a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084e:	d1d1      	bne.n	80007f4 <__aeabi_dmul+0x19c>
 8000850:	ea81 0103 	eor.w	r1, r1, r3
 8000854:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000858:	f04f 0000 	mov.w	r0, #0
 800085c:	bd70      	pop	{r4, r5, r6, pc}
 800085e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000862:	bf06      	itte	eq
 8000864:	4610      	moveq	r0, r2
 8000866:	4619      	moveq	r1, r3
 8000868:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800086c:	d019      	beq.n	80008a2 <__aeabi_dmul+0x24a>
 800086e:	ea94 0f0c 	teq	r4, ip
 8000872:	d102      	bne.n	800087a <__aeabi_dmul+0x222>
 8000874:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000878:	d113      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800087a:	ea95 0f0c 	teq	r5, ip
 800087e:	d105      	bne.n	800088c <__aeabi_dmul+0x234>
 8000880:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000884:	bf1c      	itt	ne
 8000886:	4610      	movne	r0, r2
 8000888:	4619      	movne	r1, r3
 800088a:	d10a      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800088c:	ea81 0103 	eor.w	r1, r1, r3
 8000890:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000894:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000898:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800089c:	f04f 0000 	mov.w	r0, #0
 80008a0:	bd70      	pop	{r4, r5, r6, pc}
 80008a2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008a6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80008aa:	bd70      	pop	{r4, r5, r6, pc}

080008ac <__aeabi_ddiv>:
 80008ac:	b570      	push	{r4, r5, r6, lr}
 80008ae:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008b2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ba:	bf1d      	ittte	ne
 80008bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008c0:	ea94 0f0c 	teqne	r4, ip
 80008c4:	ea95 0f0c 	teqne	r5, ip
 80008c8:	f000 f8a7 	bleq	8000a1a <__aeabi_ddiv+0x16e>
 80008cc:	eba4 0405 	sub.w	r4, r4, r5
 80008d0:	ea81 0e03 	eor.w	lr, r1, r3
 80008d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008dc:	f000 8088 	beq.w	80009f0 <__aeabi_ddiv+0x144>
 80008e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008e4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000900:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000904:	429d      	cmp	r5, r3
 8000906:	bf08      	it	eq
 8000908:	4296      	cmpeq	r6, r2
 800090a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800090e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000912:	d202      	bcs.n	800091a <__aeabi_ddiv+0x6e>
 8000914:	085b      	lsrs	r3, r3, #1
 8000916:	ea4f 0232 	mov.w	r2, r2, rrx
 800091a:	1ab6      	subs	r6, r6, r2
 800091c:	eb65 0503 	sbc.w	r5, r5, r3
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800092a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000970:	085b      	lsrs	r3, r3, #1
 8000972:	ea4f 0232 	mov.w	r2, r2, rrx
 8000976:	ebb6 0e02 	subs.w	lr, r6, r2
 800097a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800097e:	bf22      	ittt	cs
 8000980:	1ab6      	subcs	r6, r6, r2
 8000982:	4675      	movcs	r5, lr
 8000984:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000988:	ea55 0e06 	orrs.w	lr, r5, r6
 800098c:	d018      	beq.n	80009c0 <__aeabi_ddiv+0x114>
 800098e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000992:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000996:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800099a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800099e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009aa:	d1c0      	bne.n	800092e <__aeabi_ddiv+0x82>
 80009ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b0:	d10b      	bne.n	80009ca <__aeabi_ddiv+0x11e>
 80009b2:	ea41 0100 	orr.w	r1, r1, r0
 80009b6:	f04f 0000 	mov.w	r0, #0
 80009ba:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009be:	e7b6      	b.n	800092e <__aeabi_ddiv+0x82>
 80009c0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009c4:	bf04      	itt	eq
 80009c6:	4301      	orreq	r1, r0
 80009c8:	2000      	moveq	r0, #0
 80009ca:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ce:	bf88      	it	hi
 80009d0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009d4:	f63f aeaf 	bhi.w	8000736 <__aeabi_dmul+0xde>
 80009d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009dc:	bf04      	itt	eq
 80009de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009e6:	f150 0000 	adcs.w	r0, r0, #0
 80009ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ee:	bd70      	pop	{r4, r5, r6, pc}
 80009f0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009fc:	bfc2      	ittt	gt
 80009fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a02:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a06:	bd70      	popgt	{r4, r5, r6, pc}
 8000a08:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a0c:	f04f 0e00 	mov.w	lr, #0
 8000a10:	3c01      	subs	r4, #1
 8000a12:	e690      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a14:	ea45 0e06 	orr.w	lr, r5, r6
 8000a18:	e68d      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a1a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a1e:	ea94 0f0c 	teq	r4, ip
 8000a22:	bf08      	it	eq
 8000a24:	ea95 0f0c 	teqeq	r5, ip
 8000a28:	f43f af3b 	beq.w	80008a2 <__aeabi_dmul+0x24a>
 8000a2c:	ea94 0f0c 	teq	r4, ip
 8000a30:	d10a      	bne.n	8000a48 <__aeabi_ddiv+0x19c>
 8000a32:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a36:	f47f af34 	bne.w	80008a2 <__aeabi_dmul+0x24a>
 8000a3a:	ea95 0f0c 	teq	r5, ip
 8000a3e:	f47f af25 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a42:	4610      	mov	r0, r2
 8000a44:	4619      	mov	r1, r3
 8000a46:	e72c      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a48:	ea95 0f0c 	teq	r5, ip
 8000a4c:	d106      	bne.n	8000a5c <__aeabi_ddiv+0x1b0>
 8000a4e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a52:	f43f aefd 	beq.w	8000850 <__aeabi_dmul+0x1f8>
 8000a56:	4610      	mov	r0, r2
 8000a58:	4619      	mov	r1, r3
 8000a5a:	e722      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a5c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a66:	f47f aec5 	bne.w	80007f4 <__aeabi_dmul+0x19c>
 8000a6a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a6e:	f47f af0d 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a72:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a76:	f47f aeeb 	bne.w	8000850 <__aeabi_dmul+0x1f8>
 8000a7a:	e712      	b.n	80008a2 <__aeabi_dmul+0x24a>

08000a7c <__gedf2>:
 8000a7c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a80:	e006      	b.n	8000a90 <__cmpdf2+0x4>
 8000a82:	bf00      	nop

08000a84 <__ledf2>:
 8000a84:	f04f 0c01 	mov.w	ip, #1
 8000a88:	e002      	b.n	8000a90 <__cmpdf2+0x4>
 8000a8a:	bf00      	nop

08000a8c <__cmpdf2>:
 8000a8c:	f04f 0c01 	mov.w	ip, #1
 8000a90:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a94:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa0:	bf18      	it	ne
 8000aa2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000aa6:	d01b      	beq.n	8000ae0 <__cmpdf2+0x54>
 8000aa8:	b001      	add	sp, #4
 8000aaa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000aae:	bf0c      	ite	eq
 8000ab0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ab4:	ea91 0f03 	teqne	r1, r3
 8000ab8:	bf02      	ittt	eq
 8000aba:	ea90 0f02 	teqeq	r0, r2
 8000abe:	2000      	moveq	r0, #0
 8000ac0:	4770      	bxeq	lr
 8000ac2:	f110 0f00 	cmn.w	r0, #0
 8000ac6:	ea91 0f03 	teq	r1, r3
 8000aca:	bf58      	it	pl
 8000acc:	4299      	cmppl	r1, r3
 8000ace:	bf08      	it	eq
 8000ad0:	4290      	cmpeq	r0, r2
 8000ad2:	bf2c      	ite	cs
 8000ad4:	17d8      	asrcs	r0, r3, #31
 8000ad6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ada:	f040 0001 	orr.w	r0, r0, #1
 8000ade:	4770      	bx	lr
 8000ae0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d102      	bne.n	8000af0 <__cmpdf2+0x64>
 8000aea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aee:	d107      	bne.n	8000b00 <__cmpdf2+0x74>
 8000af0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af8:	d1d6      	bne.n	8000aa8 <__cmpdf2+0x1c>
 8000afa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afe:	d0d3      	beq.n	8000aa8 <__cmpdf2+0x1c>
 8000b00:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdrcmple>:
 8000b08:	4684      	mov	ip, r0
 8000b0a:	4610      	mov	r0, r2
 8000b0c:	4662      	mov	r2, ip
 8000b0e:	468c      	mov	ip, r1
 8000b10:	4619      	mov	r1, r3
 8000b12:	4663      	mov	r3, ip
 8000b14:	e000      	b.n	8000b18 <__aeabi_cdcmpeq>
 8000b16:	bf00      	nop

08000b18 <__aeabi_cdcmpeq>:
 8000b18:	b501      	push	{r0, lr}
 8000b1a:	f7ff ffb7 	bl	8000a8c <__cmpdf2>
 8000b1e:	2800      	cmp	r0, #0
 8000b20:	bf48      	it	mi
 8000b22:	f110 0f00 	cmnmi.w	r0, #0
 8000b26:	bd01      	pop	{r0, pc}

08000b28 <__aeabi_dcmpeq>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff fff4 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b30:	bf0c      	ite	eq
 8000b32:	2001      	moveq	r0, #1
 8000b34:	2000      	movne	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmplt>:
 8000b3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b40:	f7ff ffea 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b44:	bf34      	ite	cc
 8000b46:	2001      	movcc	r0, #1
 8000b48:	2000      	movcs	r0, #0
 8000b4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4e:	bf00      	nop

08000b50 <__aeabi_dcmple>:
 8000b50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b54:	f7ff ffe0 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b58:	bf94      	ite	ls
 8000b5a:	2001      	movls	r0, #1
 8000b5c:	2000      	movhi	r0, #0
 8000b5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b62:	bf00      	nop

08000b64 <__aeabi_dcmpge>:
 8000b64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b68:	f7ff ffce 	bl	8000b08 <__aeabi_cdrcmple>
 8000b6c:	bf94      	ite	ls
 8000b6e:	2001      	movls	r0, #1
 8000b70:	2000      	movhi	r0, #0
 8000b72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b76:	bf00      	nop

08000b78 <__aeabi_dcmpgt>:
 8000b78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b7c:	f7ff ffc4 	bl	8000b08 <__aeabi_cdrcmple>
 8000b80:	bf34      	ite	cc
 8000b82:	2001      	movcc	r0, #1
 8000b84:	2000      	movcs	r0, #0
 8000b86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b8a:	bf00      	nop

08000b8c <__aeabi_dcmpun>:
 8000b8c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x10>
 8000b96:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b9a:	d10a      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000b9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ba0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba4:	d102      	bne.n	8000bac <__aeabi_dcmpun+0x20>
 8000ba6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000baa:	d102      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000bac:	f04f 0000 	mov.w	r0, #0
 8000bb0:	4770      	bx	lr
 8000bb2:	f04f 0001 	mov.w	r0, #1
 8000bb6:	4770      	bx	lr

08000bb8 <__aeabi_d2iz>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d215      	bcs.n	8000bee <__aeabi_d2iz+0x36>
 8000bc2:	d511      	bpl.n	8000be8 <__aeabi_d2iz+0x30>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d912      	bls.n	8000bf4 <__aeabi_d2iz+0x3c>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bde:	fa23 f002 	lsr.w	r0, r3, r2
 8000be2:	bf18      	it	ne
 8000be4:	4240      	negne	r0, r0
 8000be6:	4770      	bx	lr
 8000be8:	f04f 0000 	mov.w	r0, #0
 8000bec:	4770      	bx	lr
 8000bee:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bf2:	d105      	bne.n	8000c00 <__aeabi_d2iz+0x48>
 8000bf4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	bf08      	it	eq
 8000bfa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop

08000c08 <__aeabi_d2uiz>:
 8000c08:	004a      	lsls	r2, r1, #1
 8000c0a:	d211      	bcs.n	8000c30 <__aeabi_d2uiz+0x28>
 8000c0c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c10:	d211      	bcs.n	8000c36 <__aeabi_d2uiz+0x2e>
 8000c12:	d50d      	bpl.n	8000c30 <__aeabi_d2uiz+0x28>
 8000c14:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c1c:	d40e      	bmi.n	8000c3c <__aeabi_d2uiz+0x34>
 8000c1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c22:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c2a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c2e:	4770      	bx	lr
 8000c30:	f04f 0000 	mov.w	r0, #0
 8000c34:	4770      	bx	lr
 8000c36:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c3a:	d102      	bne.n	8000c42 <__aeabi_d2uiz+0x3a>
 8000c3c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c40:	4770      	bx	lr
 8000c42:	f04f 0000 	mov.w	r0, #0
 8000c46:	4770      	bx	lr

08000c48 <__aeabi_d2f>:
 8000c48:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c4c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c50:	bf24      	itt	cs
 8000c52:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c56:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c5a:	d90d      	bls.n	8000c78 <__aeabi_d2f+0x30>
 8000c5c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c60:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c64:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c68:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c6c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c70:	bf08      	it	eq
 8000c72:	f020 0001 	biceq.w	r0, r0, #1
 8000c76:	4770      	bx	lr
 8000c78:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c7c:	d121      	bne.n	8000cc2 <__aeabi_d2f+0x7a>
 8000c7e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c82:	bfbc      	itt	lt
 8000c84:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c88:	4770      	bxlt	lr
 8000c8a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c8e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c92:	f1c2 0218 	rsb	r2, r2, #24
 8000c96:	f1c2 0c20 	rsb	ip, r2, #32
 8000c9a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c9e:	fa20 f002 	lsr.w	r0, r0, r2
 8000ca2:	bf18      	it	ne
 8000ca4:	f040 0001 	orrne.w	r0, r0, #1
 8000ca8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000cac:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000cb0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000cb4:	ea40 000c 	orr.w	r0, r0, ip
 8000cb8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cbc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cc0:	e7cc      	b.n	8000c5c <__aeabi_d2f+0x14>
 8000cc2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cc6:	d107      	bne.n	8000cd8 <__aeabi_d2f+0x90>
 8000cc8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ccc:	bf1e      	ittt	ne
 8000cce:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cd2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cd6:	4770      	bxne	lr
 8000cd8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cdc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ce0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ce4:	4770      	bx	lr
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_ldivmod>:
 8000ce8:	b97b      	cbnz	r3, 8000d0a <__aeabi_ldivmod+0x22>
 8000cea:	b972      	cbnz	r2, 8000d0a <__aeabi_ldivmod+0x22>
 8000cec:	2900      	cmp	r1, #0
 8000cee:	bfbe      	ittt	lt
 8000cf0:	2000      	movlt	r0, #0
 8000cf2:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000cf6:	e006      	blt.n	8000d06 <__aeabi_ldivmod+0x1e>
 8000cf8:	bf08      	it	eq
 8000cfa:	2800      	cmpeq	r0, #0
 8000cfc:	bf1c      	itt	ne
 8000cfe:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000d02:	f04f 30ff 	movne.w	r0, #4294967295
 8000d06:	f000 b9ef 	b.w	80010e8 <__aeabi_idiv0>
 8000d0a:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d0e:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d12:	2900      	cmp	r1, #0
 8000d14:	db09      	blt.n	8000d2a <__aeabi_ldivmod+0x42>
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	db1a      	blt.n	8000d50 <__aeabi_ldivmod+0x68>
 8000d1a:	f000 f883 	bl	8000e24 <__udivmoddi4>
 8000d1e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d22:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d26:	b004      	add	sp, #16
 8000d28:	4770      	bx	lr
 8000d2a:	4240      	negs	r0, r0
 8000d2c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	db1b      	blt.n	8000d6c <__aeabi_ldivmod+0x84>
 8000d34:	f000 f876 	bl	8000e24 <__udivmoddi4>
 8000d38:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d3c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d40:	b004      	add	sp, #16
 8000d42:	4240      	negs	r0, r0
 8000d44:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d48:	4252      	negs	r2, r2
 8000d4a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d4e:	4770      	bx	lr
 8000d50:	4252      	negs	r2, r2
 8000d52:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d56:	f000 f865 	bl	8000e24 <__udivmoddi4>
 8000d5a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d5e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d62:	b004      	add	sp, #16
 8000d64:	4240      	negs	r0, r0
 8000d66:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d6a:	4770      	bx	lr
 8000d6c:	4252      	negs	r2, r2
 8000d6e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d72:	f000 f857 	bl	8000e24 <__udivmoddi4>
 8000d76:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d7a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d7e:	b004      	add	sp, #16
 8000d80:	4252      	negs	r2, r2
 8000d82:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d86:	4770      	bx	lr

08000d88 <__aeabi_uldivmod>:
 8000d88:	b953      	cbnz	r3, 8000da0 <__aeabi_uldivmod+0x18>
 8000d8a:	b94a      	cbnz	r2, 8000da0 <__aeabi_uldivmod+0x18>
 8000d8c:	2900      	cmp	r1, #0
 8000d8e:	bf08      	it	eq
 8000d90:	2800      	cmpeq	r0, #0
 8000d92:	bf1c      	itt	ne
 8000d94:	f04f 31ff 	movne.w	r1, #4294967295
 8000d98:	f04f 30ff 	movne.w	r0, #4294967295
 8000d9c:	f000 b9a4 	b.w	80010e8 <__aeabi_idiv0>
 8000da0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000da4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000da8:	f000 f83c 	bl	8000e24 <__udivmoddi4>
 8000dac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000db0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000db4:	b004      	add	sp, #16
 8000db6:	4770      	bx	lr

08000db8 <__aeabi_d2lz>:
 8000db8:	b538      	push	{r3, r4, r5, lr}
 8000dba:	2200      	movs	r2, #0
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	4604      	mov	r4, r0
 8000dc0:	460d      	mov	r5, r1
 8000dc2:	f7ff febb 	bl	8000b3c <__aeabi_dcmplt>
 8000dc6:	b928      	cbnz	r0, 8000dd4 <__aeabi_d2lz+0x1c>
 8000dc8:	4620      	mov	r0, r4
 8000dca:	4629      	mov	r1, r5
 8000dcc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000dd0:	f000 b80a 	b.w	8000de8 <__aeabi_d2ulz>
 8000dd4:	4620      	mov	r0, r4
 8000dd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000dda:	f000 f805 	bl	8000de8 <__aeabi_d2ulz>
 8000dde:	4240      	negs	r0, r0
 8000de0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000de4:	bd38      	pop	{r3, r4, r5, pc}
 8000de6:	bf00      	nop

08000de8 <__aeabi_d2ulz>:
 8000de8:	b5d0      	push	{r4, r6, r7, lr}
 8000dea:	4b0c      	ldr	r3, [pc, #48]	; (8000e1c <__aeabi_d2ulz+0x34>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	4606      	mov	r6, r0
 8000df0:	460f      	mov	r7, r1
 8000df2:	f7ff fc31 	bl	8000658 <__aeabi_dmul>
 8000df6:	f7ff ff07 	bl	8000c08 <__aeabi_d2uiz>
 8000dfa:	4604      	mov	r4, r0
 8000dfc:	f7ff fbb2 	bl	8000564 <__aeabi_ui2d>
 8000e00:	4b07      	ldr	r3, [pc, #28]	; (8000e20 <__aeabi_d2ulz+0x38>)
 8000e02:	2200      	movs	r2, #0
 8000e04:	f7ff fc28 	bl	8000658 <__aeabi_dmul>
 8000e08:	4602      	mov	r2, r0
 8000e0a:	460b      	mov	r3, r1
 8000e0c:	4630      	mov	r0, r6
 8000e0e:	4639      	mov	r1, r7
 8000e10:	f7ff fa6a 	bl	80002e8 <__aeabi_dsub>
 8000e14:	f7ff fef8 	bl	8000c08 <__aeabi_d2uiz>
 8000e18:	4621      	mov	r1, r4
 8000e1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000e1c:	3df00000 	.word	0x3df00000
 8000e20:	41f00000 	.word	0x41f00000

08000e24 <__udivmoddi4>:
 8000e24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000e28:	9d08      	ldr	r5, [sp, #32]
 8000e2a:	4604      	mov	r4, r0
 8000e2c:	468c      	mov	ip, r1
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	f040 8083 	bne.w	8000f3a <__udivmoddi4+0x116>
 8000e34:	428a      	cmp	r2, r1
 8000e36:	4617      	mov	r7, r2
 8000e38:	d947      	bls.n	8000eca <__udivmoddi4+0xa6>
 8000e3a:	fab2 f282 	clz	r2, r2
 8000e3e:	b142      	cbz	r2, 8000e52 <__udivmoddi4+0x2e>
 8000e40:	f1c2 0020 	rsb	r0, r2, #32
 8000e44:	fa24 f000 	lsr.w	r0, r4, r0
 8000e48:	4091      	lsls	r1, r2
 8000e4a:	4097      	lsls	r7, r2
 8000e4c:	ea40 0c01 	orr.w	ip, r0, r1
 8000e50:	4094      	lsls	r4, r2
 8000e52:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000e56:	0c23      	lsrs	r3, r4, #16
 8000e58:	fbbc f6f8 	udiv	r6, ip, r8
 8000e5c:	fa1f fe87 	uxth.w	lr, r7
 8000e60:	fb08 c116 	mls	r1, r8, r6, ip
 8000e64:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e68:	fb06 f10e 	mul.w	r1, r6, lr
 8000e6c:	4299      	cmp	r1, r3
 8000e6e:	d909      	bls.n	8000e84 <__udivmoddi4+0x60>
 8000e70:	18fb      	adds	r3, r7, r3
 8000e72:	f106 30ff 	add.w	r0, r6, #4294967295
 8000e76:	f080 8119 	bcs.w	80010ac <__udivmoddi4+0x288>
 8000e7a:	4299      	cmp	r1, r3
 8000e7c:	f240 8116 	bls.w	80010ac <__udivmoddi4+0x288>
 8000e80:	3e02      	subs	r6, #2
 8000e82:	443b      	add	r3, r7
 8000e84:	1a5b      	subs	r3, r3, r1
 8000e86:	b2a4      	uxth	r4, r4
 8000e88:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e8c:	fb08 3310 	mls	r3, r8, r0, r3
 8000e90:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e94:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e98:	45a6      	cmp	lr, r4
 8000e9a:	d909      	bls.n	8000eb0 <__udivmoddi4+0x8c>
 8000e9c:	193c      	adds	r4, r7, r4
 8000e9e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ea2:	f080 8105 	bcs.w	80010b0 <__udivmoddi4+0x28c>
 8000ea6:	45a6      	cmp	lr, r4
 8000ea8:	f240 8102 	bls.w	80010b0 <__udivmoddi4+0x28c>
 8000eac:	3802      	subs	r0, #2
 8000eae:	443c      	add	r4, r7
 8000eb0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000eb4:	eba4 040e 	sub.w	r4, r4, lr
 8000eb8:	2600      	movs	r6, #0
 8000eba:	b11d      	cbz	r5, 8000ec4 <__udivmoddi4+0xa0>
 8000ebc:	40d4      	lsrs	r4, r2
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	e9c5 4300 	strd	r4, r3, [r5]
 8000ec4:	4631      	mov	r1, r6
 8000ec6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eca:	b902      	cbnz	r2, 8000ece <__udivmoddi4+0xaa>
 8000ecc:	deff      	udf	#255	; 0xff
 8000ece:	fab2 f282 	clz	r2, r2
 8000ed2:	2a00      	cmp	r2, #0
 8000ed4:	d150      	bne.n	8000f78 <__udivmoddi4+0x154>
 8000ed6:	1bcb      	subs	r3, r1, r7
 8000ed8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000edc:	fa1f f887 	uxth.w	r8, r7
 8000ee0:	2601      	movs	r6, #1
 8000ee2:	fbb3 fcfe 	udiv	ip, r3, lr
 8000ee6:	0c21      	lsrs	r1, r4, #16
 8000ee8:	fb0e 331c 	mls	r3, lr, ip, r3
 8000eec:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ef0:	fb08 f30c 	mul.w	r3, r8, ip
 8000ef4:	428b      	cmp	r3, r1
 8000ef6:	d907      	bls.n	8000f08 <__udivmoddi4+0xe4>
 8000ef8:	1879      	adds	r1, r7, r1
 8000efa:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000efe:	d202      	bcs.n	8000f06 <__udivmoddi4+0xe2>
 8000f00:	428b      	cmp	r3, r1
 8000f02:	f200 80e9 	bhi.w	80010d8 <__udivmoddi4+0x2b4>
 8000f06:	4684      	mov	ip, r0
 8000f08:	1ac9      	subs	r1, r1, r3
 8000f0a:	b2a3      	uxth	r3, r4
 8000f0c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f10:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f14:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000f18:	fb08 f800 	mul.w	r8, r8, r0
 8000f1c:	45a0      	cmp	r8, r4
 8000f1e:	d907      	bls.n	8000f30 <__udivmoddi4+0x10c>
 8000f20:	193c      	adds	r4, r7, r4
 8000f22:	f100 33ff 	add.w	r3, r0, #4294967295
 8000f26:	d202      	bcs.n	8000f2e <__udivmoddi4+0x10a>
 8000f28:	45a0      	cmp	r8, r4
 8000f2a:	f200 80d9 	bhi.w	80010e0 <__udivmoddi4+0x2bc>
 8000f2e:	4618      	mov	r0, r3
 8000f30:	eba4 0408 	sub.w	r4, r4, r8
 8000f34:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000f38:	e7bf      	b.n	8000eba <__udivmoddi4+0x96>
 8000f3a:	428b      	cmp	r3, r1
 8000f3c:	d909      	bls.n	8000f52 <__udivmoddi4+0x12e>
 8000f3e:	2d00      	cmp	r5, #0
 8000f40:	f000 80b1 	beq.w	80010a6 <__udivmoddi4+0x282>
 8000f44:	2600      	movs	r6, #0
 8000f46:	e9c5 0100 	strd	r0, r1, [r5]
 8000f4a:	4630      	mov	r0, r6
 8000f4c:	4631      	mov	r1, r6
 8000f4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f52:	fab3 f683 	clz	r6, r3
 8000f56:	2e00      	cmp	r6, #0
 8000f58:	d14a      	bne.n	8000ff0 <__udivmoddi4+0x1cc>
 8000f5a:	428b      	cmp	r3, r1
 8000f5c:	d302      	bcc.n	8000f64 <__udivmoddi4+0x140>
 8000f5e:	4282      	cmp	r2, r0
 8000f60:	f200 80b8 	bhi.w	80010d4 <__udivmoddi4+0x2b0>
 8000f64:	1a84      	subs	r4, r0, r2
 8000f66:	eb61 0103 	sbc.w	r1, r1, r3
 8000f6a:	2001      	movs	r0, #1
 8000f6c:	468c      	mov	ip, r1
 8000f6e:	2d00      	cmp	r5, #0
 8000f70:	d0a8      	beq.n	8000ec4 <__udivmoddi4+0xa0>
 8000f72:	e9c5 4c00 	strd	r4, ip, [r5]
 8000f76:	e7a5      	b.n	8000ec4 <__udivmoddi4+0xa0>
 8000f78:	f1c2 0320 	rsb	r3, r2, #32
 8000f7c:	fa20 f603 	lsr.w	r6, r0, r3
 8000f80:	4097      	lsls	r7, r2
 8000f82:	fa01 f002 	lsl.w	r0, r1, r2
 8000f86:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f8a:	40d9      	lsrs	r1, r3
 8000f8c:	4330      	orrs	r0, r6
 8000f8e:	0c03      	lsrs	r3, r0, #16
 8000f90:	fbb1 f6fe 	udiv	r6, r1, lr
 8000f94:	fa1f f887 	uxth.w	r8, r7
 8000f98:	fb0e 1116 	mls	r1, lr, r6, r1
 8000f9c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000fa0:	fb06 f108 	mul.w	r1, r6, r8
 8000fa4:	4299      	cmp	r1, r3
 8000fa6:	fa04 f402 	lsl.w	r4, r4, r2
 8000faa:	d909      	bls.n	8000fc0 <__udivmoddi4+0x19c>
 8000fac:	18fb      	adds	r3, r7, r3
 8000fae:	f106 3cff 	add.w	ip, r6, #4294967295
 8000fb2:	f080 808d 	bcs.w	80010d0 <__udivmoddi4+0x2ac>
 8000fb6:	4299      	cmp	r1, r3
 8000fb8:	f240 808a 	bls.w	80010d0 <__udivmoddi4+0x2ac>
 8000fbc:	3e02      	subs	r6, #2
 8000fbe:	443b      	add	r3, r7
 8000fc0:	1a5b      	subs	r3, r3, r1
 8000fc2:	b281      	uxth	r1, r0
 8000fc4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000fc8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000fcc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fd0:	fb00 f308 	mul.w	r3, r0, r8
 8000fd4:	428b      	cmp	r3, r1
 8000fd6:	d907      	bls.n	8000fe8 <__udivmoddi4+0x1c4>
 8000fd8:	1879      	adds	r1, r7, r1
 8000fda:	f100 3cff 	add.w	ip, r0, #4294967295
 8000fde:	d273      	bcs.n	80010c8 <__udivmoddi4+0x2a4>
 8000fe0:	428b      	cmp	r3, r1
 8000fe2:	d971      	bls.n	80010c8 <__udivmoddi4+0x2a4>
 8000fe4:	3802      	subs	r0, #2
 8000fe6:	4439      	add	r1, r7
 8000fe8:	1acb      	subs	r3, r1, r3
 8000fea:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000fee:	e778      	b.n	8000ee2 <__udivmoddi4+0xbe>
 8000ff0:	f1c6 0c20 	rsb	ip, r6, #32
 8000ff4:	fa03 f406 	lsl.w	r4, r3, r6
 8000ff8:	fa22 f30c 	lsr.w	r3, r2, ip
 8000ffc:	431c      	orrs	r4, r3
 8000ffe:	fa20 f70c 	lsr.w	r7, r0, ip
 8001002:	fa01 f306 	lsl.w	r3, r1, r6
 8001006:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800100a:	fa21 f10c 	lsr.w	r1, r1, ip
 800100e:	431f      	orrs	r7, r3
 8001010:	0c3b      	lsrs	r3, r7, #16
 8001012:	fbb1 f9fe 	udiv	r9, r1, lr
 8001016:	fa1f f884 	uxth.w	r8, r4
 800101a:	fb0e 1119 	mls	r1, lr, r9, r1
 800101e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8001022:	fb09 fa08 	mul.w	sl, r9, r8
 8001026:	458a      	cmp	sl, r1
 8001028:	fa02 f206 	lsl.w	r2, r2, r6
 800102c:	fa00 f306 	lsl.w	r3, r0, r6
 8001030:	d908      	bls.n	8001044 <__udivmoddi4+0x220>
 8001032:	1861      	adds	r1, r4, r1
 8001034:	f109 30ff 	add.w	r0, r9, #4294967295
 8001038:	d248      	bcs.n	80010cc <__udivmoddi4+0x2a8>
 800103a:	458a      	cmp	sl, r1
 800103c:	d946      	bls.n	80010cc <__udivmoddi4+0x2a8>
 800103e:	f1a9 0902 	sub.w	r9, r9, #2
 8001042:	4421      	add	r1, r4
 8001044:	eba1 010a 	sub.w	r1, r1, sl
 8001048:	b2bf      	uxth	r7, r7
 800104a:	fbb1 f0fe 	udiv	r0, r1, lr
 800104e:	fb0e 1110 	mls	r1, lr, r0, r1
 8001052:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8001056:	fb00 f808 	mul.w	r8, r0, r8
 800105a:	45b8      	cmp	r8, r7
 800105c:	d907      	bls.n	800106e <__udivmoddi4+0x24a>
 800105e:	19e7      	adds	r7, r4, r7
 8001060:	f100 31ff 	add.w	r1, r0, #4294967295
 8001064:	d22e      	bcs.n	80010c4 <__udivmoddi4+0x2a0>
 8001066:	45b8      	cmp	r8, r7
 8001068:	d92c      	bls.n	80010c4 <__udivmoddi4+0x2a0>
 800106a:	3802      	subs	r0, #2
 800106c:	4427      	add	r7, r4
 800106e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8001072:	eba7 0708 	sub.w	r7, r7, r8
 8001076:	fba0 8902 	umull	r8, r9, r0, r2
 800107a:	454f      	cmp	r7, r9
 800107c:	46c6      	mov	lr, r8
 800107e:	4649      	mov	r1, r9
 8001080:	d31a      	bcc.n	80010b8 <__udivmoddi4+0x294>
 8001082:	d017      	beq.n	80010b4 <__udivmoddi4+0x290>
 8001084:	b15d      	cbz	r5, 800109e <__udivmoddi4+0x27a>
 8001086:	ebb3 020e 	subs.w	r2, r3, lr
 800108a:	eb67 0701 	sbc.w	r7, r7, r1
 800108e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8001092:	40f2      	lsrs	r2, r6
 8001094:	ea4c 0202 	orr.w	r2, ip, r2
 8001098:	40f7      	lsrs	r7, r6
 800109a:	e9c5 2700 	strd	r2, r7, [r5]
 800109e:	2600      	movs	r6, #0
 80010a0:	4631      	mov	r1, r6
 80010a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80010a6:	462e      	mov	r6, r5
 80010a8:	4628      	mov	r0, r5
 80010aa:	e70b      	b.n	8000ec4 <__udivmoddi4+0xa0>
 80010ac:	4606      	mov	r6, r0
 80010ae:	e6e9      	b.n	8000e84 <__udivmoddi4+0x60>
 80010b0:	4618      	mov	r0, r3
 80010b2:	e6fd      	b.n	8000eb0 <__udivmoddi4+0x8c>
 80010b4:	4543      	cmp	r3, r8
 80010b6:	d2e5      	bcs.n	8001084 <__udivmoddi4+0x260>
 80010b8:	ebb8 0e02 	subs.w	lr, r8, r2
 80010bc:	eb69 0104 	sbc.w	r1, r9, r4
 80010c0:	3801      	subs	r0, #1
 80010c2:	e7df      	b.n	8001084 <__udivmoddi4+0x260>
 80010c4:	4608      	mov	r0, r1
 80010c6:	e7d2      	b.n	800106e <__udivmoddi4+0x24a>
 80010c8:	4660      	mov	r0, ip
 80010ca:	e78d      	b.n	8000fe8 <__udivmoddi4+0x1c4>
 80010cc:	4681      	mov	r9, r0
 80010ce:	e7b9      	b.n	8001044 <__udivmoddi4+0x220>
 80010d0:	4666      	mov	r6, ip
 80010d2:	e775      	b.n	8000fc0 <__udivmoddi4+0x19c>
 80010d4:	4630      	mov	r0, r6
 80010d6:	e74a      	b.n	8000f6e <__udivmoddi4+0x14a>
 80010d8:	f1ac 0c02 	sub.w	ip, ip, #2
 80010dc:	4439      	add	r1, r7
 80010de:	e713      	b.n	8000f08 <__udivmoddi4+0xe4>
 80010e0:	3802      	subs	r0, #2
 80010e2:	443c      	add	r4, r7
 80010e4:	e724      	b.n	8000f30 <__udivmoddi4+0x10c>
 80010e6:	bf00      	nop

080010e8 <__aeabi_idiv0>:
 80010e8:	4770      	bx	lr
 80010ea:	bf00      	nop

080010ec <HAL_ADC_MspInit>:
  /* USER CODE END ADC1_Init 2 */

}

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b08a      	sub	sp, #40	; 0x28
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010f4:	f107 0314 	add.w	r3, r7, #20
 80010f8:	2200      	movs	r2, #0
 80010fa:	601a      	str	r2, [r3, #0]
 80010fc:	605a      	str	r2, [r3, #4]
 80010fe:	609a      	str	r2, [r3, #8]
 8001100:	60da      	str	r2, [r3, #12]
 8001102:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	4a15      	ldr	r2, [pc, #84]	; (8001160 <HAL_ADC_MspInit+0x74>)
 800110a:	4293      	cmp	r3, r2
 800110c:	d123      	bne.n	8001156 <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800110e:	4b15      	ldr	r3, [pc, #84]	; (8001164 <HAL_ADC_MspInit+0x78>)
 8001110:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001112:	4a14      	ldr	r2, [pc, #80]	; (8001164 <HAL_ADC_MspInit+0x78>)
 8001114:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001118:	6453      	str	r3, [r2, #68]	; 0x44
 800111a:	4b12      	ldr	r3, [pc, #72]	; (8001164 <HAL_ADC_MspInit+0x78>)
 800111c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800111e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001122:	613b      	str	r3, [r7, #16]
 8001124:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001126:	4b0f      	ldr	r3, [pc, #60]	; (8001164 <HAL_ADC_MspInit+0x78>)
 8001128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800112a:	4a0e      	ldr	r2, [pc, #56]	; (8001164 <HAL_ADC_MspInit+0x78>)
 800112c:	f043 0301 	orr.w	r3, r3, #1
 8001130:	6313      	str	r3, [r2, #48]	; 0x30
 8001132:	4b0c      	ldr	r3, [pc, #48]	; (8001164 <HAL_ADC_MspInit+0x78>)
 8001134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001136:	f003 0301 	and.w	r3, r3, #1
 800113a:	60fb      	str	r3, [r7, #12]
 800113c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0/WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800113e:	2301      	movs	r3, #1
 8001140:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001142:	2303      	movs	r3, #3
 8001144:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001146:	2300      	movs	r3, #0
 8001148:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800114a:	f107 0314 	add.w	r3, r7, #20
 800114e:	4619      	mov	r1, r3
 8001150:	4805      	ldr	r0, [pc, #20]	; (8001168 <HAL_ADC_MspInit+0x7c>)
 8001152:	f001 faff 	bl	8002754 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001156:	bf00      	nop
 8001158:	3728      	adds	r7, #40	; 0x28
 800115a:	46bd      	mov	sp, r7
 800115c:	bd80      	pop	{r7, pc}
 800115e:	bf00      	nop
 8001160:	40012000 	.word	0x40012000
 8001164:	40023800 	.word	0x40023800
 8001168:	40020000 	.word	0x40020000

0800116c <vApplicationIdleHook>:
/* Hook prototypes */
void vApplicationIdleHook(void);

/* USER CODE BEGIN 2 */
void vApplicationIdleHook( void )
{
 800116c:	b480      	push	{r7}
 800116e:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 8001170:	bf00      	nop
 8001172:	46bd      	mov	sp, r7
 8001174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001178:	4770      	bx	lr
	...

0800117c <HAL_I2C_MspInit>:
  /* USER CODE END I2C4_Init 2 */

}

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b08a      	sub	sp, #40	; 0x28
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001184:	f107 0314 	add.w	r3, r7, #20
 8001188:	2200      	movs	r2, #0
 800118a:	601a      	str	r2, [r3, #0]
 800118c:	605a      	str	r2, [r3, #4]
 800118e:	609a      	str	r2, [r3, #8]
 8001190:	60da      	str	r2, [r3, #12]
 8001192:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C4)
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	4a17      	ldr	r2, [pc, #92]	; (80011f8 <HAL_I2C_MspInit+0x7c>)
 800119a:	4293      	cmp	r3, r2
 800119c:	d128      	bne.n	80011f0 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C4_MspInit 0 */

  /* USER CODE END I2C4_MspInit 0 */

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800119e:	4b17      	ldr	r3, [pc, #92]	; (80011fc <HAL_I2C_MspInit+0x80>)
 80011a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011a2:	4a16      	ldr	r2, [pc, #88]	; (80011fc <HAL_I2C_MspInit+0x80>)
 80011a4:	f043 0308 	orr.w	r3, r3, #8
 80011a8:	6313      	str	r3, [r2, #48]	; 0x30
 80011aa:	4b14      	ldr	r3, [pc, #80]	; (80011fc <HAL_I2C_MspInit+0x80>)
 80011ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ae:	f003 0308 	and.w	r3, r3, #8
 80011b2:	613b      	str	r3, [r7, #16]
 80011b4:	693b      	ldr	r3, [r7, #16]
    /**I2C4 GPIO Configuration
    PD12     ------> I2C4_SCL
    PD13     ------> I2C4_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 80011b6:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80011ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80011bc:	2312      	movs	r3, #18
 80011be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011c0:	2301      	movs	r3, #1
 80011c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011c4:	2303      	movs	r3, #3
 80011c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 80011c8:	2304      	movs	r3, #4
 80011ca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80011cc:	f107 0314 	add.w	r3, r7, #20
 80011d0:	4619      	mov	r1, r3
 80011d2:	480b      	ldr	r0, [pc, #44]	; (8001200 <HAL_I2C_MspInit+0x84>)
 80011d4:	f001 fabe 	bl	8002754 <HAL_GPIO_Init>

    /* I2C4 clock enable */
    __HAL_RCC_I2C4_CLK_ENABLE();
 80011d8:	4b08      	ldr	r3, [pc, #32]	; (80011fc <HAL_I2C_MspInit+0x80>)
 80011da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011dc:	4a07      	ldr	r2, [pc, #28]	; (80011fc <HAL_I2C_MspInit+0x80>)
 80011de:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80011e2:	6413      	str	r3, [r2, #64]	; 0x40
 80011e4:	4b05      	ldr	r3, [pc, #20]	; (80011fc <HAL_I2C_MspInit+0x80>)
 80011e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011e8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80011ec:	60fb      	str	r3, [r7, #12]
 80011ee:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }
}
 80011f0:	bf00      	nop
 80011f2:	3728      	adds	r7, #40	; 0x28
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bd80      	pop	{r7, pc}
 80011f8:	40006000 	.word	0x40006000
 80011fc:	40023800 	.word	0x40023800
 8001200:	40020c00 	.word	0x40020c00

08001204 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b0b4      	sub	sp, #208	; 0xd0
 8001208:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800120a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800120e:	2230      	movs	r2, #48	; 0x30
 8001210:	2100      	movs	r1, #0
 8001212:	4618      	mov	r0, r3
 8001214:	f013 ff56 	bl	80150c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001218:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800121c:	2200      	movs	r2, #0
 800121e:	601a      	str	r2, [r3, #0]
 8001220:	605a      	str	r2, [r3, #4]
 8001222:	609a      	str	r2, [r3, #8]
 8001224:	60da      	str	r2, [r3, #12]
 8001226:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001228:	f107 0308 	add.w	r3, r7, #8
 800122c:	2284      	movs	r2, #132	; 0x84
 800122e:	2100      	movs	r1, #0
 8001230:	4618      	mov	r0, r3
 8001232:	f013 ff47 	bl	80150c4 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001236:	f002 f9f7 	bl	8003628 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800123a:	4b37      	ldr	r3, [pc, #220]	; (8001318 <SystemClock_Config+0x114>)
 800123c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800123e:	4a36      	ldr	r2, [pc, #216]	; (8001318 <SystemClock_Config+0x114>)
 8001240:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001244:	6413      	str	r3, [r2, #64]	; 0x40
 8001246:	4b34      	ldr	r3, [pc, #208]	; (8001318 <SystemClock_Config+0x114>)
 8001248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800124a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800124e:	607b      	str	r3, [r7, #4]
 8001250:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001252:	4b32      	ldr	r3, [pc, #200]	; (800131c <SystemClock_Config+0x118>)
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800125a:	4a30      	ldr	r2, [pc, #192]	; (800131c <SystemClock_Config+0x118>)
 800125c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001260:	6013      	str	r3, [r2, #0]
 8001262:	4b2e      	ldr	r3, [pc, #184]	; (800131c <SystemClock_Config+0x118>)
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800126a:	603b      	str	r3, [r7, #0]
 800126c:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800126e:	2302      	movs	r3, #2
 8001270:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001274:	2301      	movs	r3, #1
 8001276:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800127a:	2310      	movs	r3, #16
 800127c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001280:	2302      	movs	r3, #2
 8001282:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001286:	2300      	movs	r3, #0
 8001288:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 8;
 800128c:	2308      	movs	r3, #8
 800128e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 160;
 8001292:	23a0      	movs	r3, #160	; 0xa0
 8001294:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001298:	2302      	movs	r3, #2
 800129a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800129e:	2302      	movs	r3, #2
 80012a0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012a4:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80012a8:	4618      	mov	r0, r3
 80012aa:	f002 f9cd 	bl	8003648 <HAL_RCC_OscConfig>
 80012ae:	4603      	mov	r3, r0
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d001      	beq.n	80012b8 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80012b4:	f000 f8ac 	bl	8001410 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012b8:	230f      	movs	r3, #15
 80012ba:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012be:	2302      	movs	r3, #2
 80012c0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012c4:	2300      	movs	r3, #0
 80012c6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80012ca:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80012ce:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80012d2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012d6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80012da:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80012de:	2105      	movs	r1, #5
 80012e0:	4618      	mov	r0, r3
 80012e2:	f002 fc55 	bl	8003b90 <HAL_RCC_ClockConfig>
 80012e6:	4603      	mov	r3, r0
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d001      	beq.n	80012f0 <SystemClock_Config+0xec>
  {
    Error_Handler();
 80012ec:	f000 f890 	bl	8001410 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C4;
 80012f0:	4b0b      	ldr	r3, [pc, #44]	; (8001320 <SystemClock_Config+0x11c>)
 80012f2:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80012f4:	2300      	movs	r3, #0
 80012f6:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_PCLK1;
 80012f8:	2300      	movs	r3, #0
 80012fa:	67bb      	str	r3, [r7, #120]	; 0x78
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80012fc:	f107 0308 	add.w	r3, r7, #8
 8001300:	4618      	mov	r0, r3
 8001302:	f002 fe1b 	bl	8003f3c <HAL_RCCEx_PeriphCLKConfig>
 8001306:	4603      	mov	r3, r0
 8001308:	2b00      	cmp	r3, #0
 800130a:	d001      	beq.n	8001310 <SystemClock_Config+0x10c>
  {
    Error_Handler();
 800130c:	f000 f880 	bl	8001410 <Error_Handler>
  }
}
 8001310:	bf00      	nop
 8001312:	37d0      	adds	r7, #208	; 0xd0
 8001314:	46bd      	mov	sp, r7
 8001316:	bd80      	pop	{r7, pc}
 8001318:	40023800 	.word	0x40023800
 800131c:	40007000 	.word	0x40007000
 8001320:	00020040 	.word	0x00020040

08001324 <main>:
*
* @return 	0
*/
////////////////////////////////////////////////////////////////////////////////
int main(void)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	af00      	add	r7, sp, #0
	// Mandatory system init before OS kernel start
 	HAL_Init();
 8001328:	f000 fa83 	bl	8001832 <HAL_Init>
	SystemClock_Config();
 800132c:	f7ff ff6a 	bl	8001204 <SystemClock_Config>

    // OS init
    osKernelInitialize();
 8001330:	f005 fc56 	bl	8006be0 <osKernelInitialize>

    // Create init thread
    g_thread_init_id = osThreadNew( main_init_thread, NULL, &g_thread_init_attr );
 8001334:	4a05      	ldr	r2, [pc, #20]	; (800134c <main+0x28>)
 8001336:	2100      	movs	r1, #0
 8001338:	4805      	ldr	r0, [pc, #20]	; (8001350 <main+0x2c>)
 800133a:	f005 fcbb 	bl	8006cb4 <osThreadNew>
 800133e:	4603      	mov	r3, r0
 8001340:	4a04      	ldr	r2, [pc, #16]	; (8001354 <main+0x30>)
 8001342:	6013      	str	r3, [r2, #0]

    // OS start
    osKernelStart();
 8001344:	f005 fc80 	bl	8006c48 <osKernelStart>

    while (1)
 8001348:	e7fe      	b.n	8001348 <main+0x24>
 800134a:	bf00      	nop
 800134c:	0801b010 	.word	0x0801b010
 8001350:	08001359 	.word	0x08001359
 8001354:	20000344 	.word	0x20000344

08001358 <main_init_thread>:
* @param[in] 	args		- Optional arguments at creation
* @return 		void
*/
////////////////////////////////////////////////////////////////////////////////
static void main_init_thread(void * args)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b082      	sub	sp, #8
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
	// System components init
	shell_init();
 8001360:	f010 fd4a 	bl	8011df8 <shell_init>
	app_low_init();
 8001364:	f009 fdc2 	bl	800aeec <app_low_init>
	display_init();
 8001368:	f009 feb4 	bl	800b0d4 <display_init>

	// Create threads
	g_thread_background_id = osThreadNew( background_thread, NULL, &g_thread_background_attr	);
 800136c:	4a08      	ldr	r2, [pc, #32]	; (8001390 <main_init_thread+0x38>)
 800136e:	2100      	movs	r1, #0
 8001370:	4808      	ldr	r0, [pc, #32]	; (8001394 <main_init_thread+0x3c>)
 8001372:	f005 fc9f 	bl	8006cb4 <osThreadNew>
 8001376:	4603      	mov	r3, r0
 8001378:	4a07      	ldr	r2, [pc, #28]	; (8001398 <main_init_thread+0x40>)
 800137a:	6013      	str	r3, [r2, #0]

	// Delete thread
	osThreadTerminate( g_thread_init_id );
 800137c:	4b07      	ldr	r3, [pc, #28]	; (800139c <main_init_thread+0x44>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	4618      	mov	r0, r3
 8001382:	f005 fd3d 	bl	8006e00 <osThreadTerminate>
}
 8001386:	bf00      	nop
 8001388:	3708      	adds	r7, #8
 800138a:	46bd      	mov	sp, r7
 800138c:	bd80      	pop	{r7, pc}
 800138e:	bf00      	nop
 8001390:	0801b034 	.word	0x0801b034
 8001394:	080013a1 	.word	0x080013a1
 8001398:	20000348 	.word	0x20000348
 800139c:	20000344 	.word	0x20000344

080013a0 <background_thread>:
* @param[in] 	args		- Optional arguments at creation
* @return 		void
*/
////////////////////////////////////////////////////////////////////////////////
static void background_thread(void * args)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b084      	sub	sp, #16
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
	uint32_t flags;

	// Create timer
	g_timer_background_id = osTimerNew( background_timer_callback, osTimerPeriodic, NULL, NULL );
 80013a8:	2300      	movs	r3, #0
 80013aa:	2200      	movs	r2, #0
 80013ac:	2101      	movs	r1, #1
 80013ae:	480e      	ldr	r0, [pc, #56]	; (80013e8 <background_thread+0x48>)
 80013b0:	f005 fe70 	bl	8007094 <osTimerNew>
 80013b4:	4603      	mov	r3, r0
 80013b6:	4a0d      	ldr	r2, [pc, #52]	; (80013ec <background_thread+0x4c>)
 80013b8:	6013      	str	r3, [r2, #0]
    osTimerStart( g_timer_background_id, 1000 );
 80013ba:	4b0c      	ldr	r3, [pc, #48]	; (80013ec <background_thread+0x4c>)
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80013c2:	4618      	mov	r0, r3
 80013c4:	f005 feea 	bl	800719c <osTimerStart>

    while(1)
    {
    	// Get flags
    	flags = osThreadFlagsWait( 0x01, osFlagsWaitAny, osWaitForever );
 80013c8:	f04f 32ff 	mov.w	r2, #4294967295
 80013cc:	2100      	movs	r1, #0
 80013ce:	2001      	movs	r0, #1
 80013d0:	f005 fdb6 	bl	8006f40 <osThreadFlagsWait>
 80013d4:	60f8      	str	r0, [r7, #12]

    	if ( flags & 0x01 )
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	f003 0301 	and.w	r3, r3, #1
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d0f3      	beq.n	80013c8 <background_thread+0x28>
    	{
    		// Do not touch this!
    		gpio_toggle( eGPIO_DEBUG_LED );
 80013e0:	2016      	movs	r0, #22
 80013e2:	f00f f9d3 	bl	801078c <gpio_toggle>
    	flags = osThreadFlagsWait( 0x01, osFlagsWaitAny, osWaitForever );
 80013e6:	e7ef      	b.n	80013c8 <background_thread+0x28>
 80013e8:	080013f1 	.word	0x080013f1
 80013ec:	2000034c 	.word	0x2000034c

080013f0 <background_timer_callback>:
* @param[in] 	args	- Optional arguments at creation
* @return 		void
*/
////////////////////////////////////////////////////////////////////////////////
static void background_timer_callback(void *arg)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b082      	sub	sp, #8
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
    osThreadFlagsSet( g_thread_background_id, 0x01 );
 80013f8:	4b04      	ldr	r3, [pc, #16]	; (800140c <background_timer_callback+0x1c>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	2101      	movs	r1, #1
 80013fe:	4618      	mov	r0, r3
 8001400:	f005 fd3e 	bl	8006e80 <osThreadFlagsSet>
}
 8001404:	bf00      	nop
 8001406:	3708      	adds	r7, #8
 8001408:	46bd      	mov	sp, r7
 800140a:	bd80      	pop	{r7, pc}
 800140c:	20000348 	.word	0x20000348

08001410 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b082      	sub	sp, #8
 8001414:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001416:	b672      	cpsid	i
}
 8001418:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  gpio_init();
 800141a:	f00f f865 	bl	80104e8 <gpio_init>
  while (1)
  {
	  gpio_toggle( eGPIO_DEBUG_LED );
 800141e:	2016      	movs	r0, #22
 8001420:	f00f f9b4 	bl	801078c <gpio_toggle>

	  volatile uint32_t dummy = 0;
 8001424:	2300      	movs	r3, #0
 8001426:	603b      	str	r3, [r7, #0]
	  for (uint32_t i = 0; i < 500000; i++)
 8001428:	2300      	movs	r3, #0
 800142a:	607b      	str	r3, [r7, #4]
 800142c:	e006      	b.n	800143c <Error_Handler+0x2c>
	  {
		  __NOP();
 800142e:	bf00      	nop
		  dummy++;
 8001430:	683b      	ldr	r3, [r7, #0]
 8001432:	3301      	adds	r3, #1
 8001434:	603b      	str	r3, [r7, #0]
	  for (uint32_t i = 0; i < 500000; i++)
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	3301      	adds	r3, #1
 800143a:	607b      	str	r3, [r7, #4]
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	4a02      	ldr	r2, [pc, #8]	; (8001448 <Error_Handler+0x38>)
 8001440:	4293      	cmp	r3, r2
 8001442:	d9f4      	bls.n	800142e <Error_Handler+0x1e>
  {
 8001444:	e7eb      	b.n	800141e <Error_Handler+0xe>
 8001446:	bf00      	nop
 8001448:	0007a11f 	.word	0x0007a11f

0800144c <HAL_SPI_MspInit>:
  /* USER CODE END SPI1_Init 2 */

}

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b08a      	sub	sp, #40	; 0x28
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001454:	f107 0314 	add.w	r3, r7, #20
 8001458:	2200      	movs	r2, #0
 800145a:	601a      	str	r2, [r3, #0]
 800145c:	605a      	str	r2, [r3, #4]
 800145e:	609a      	str	r2, [r3, #8]
 8001460:	60da      	str	r2, [r3, #12]
 8001462:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	4a17      	ldr	r2, [pc, #92]	; (80014c8 <HAL_SPI_MspInit+0x7c>)
 800146a:	4293      	cmp	r3, r2
 800146c:	d127      	bne.n	80014be <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800146e:	4b17      	ldr	r3, [pc, #92]	; (80014cc <HAL_SPI_MspInit+0x80>)
 8001470:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001472:	4a16      	ldr	r2, [pc, #88]	; (80014cc <HAL_SPI_MspInit+0x80>)
 8001474:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001478:	6453      	str	r3, [r2, #68]	; 0x44
 800147a:	4b14      	ldr	r3, [pc, #80]	; (80014cc <HAL_SPI_MspInit+0x80>)
 800147c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800147e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001482:	613b      	str	r3, [r7, #16]
 8001484:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001486:	4b11      	ldr	r3, [pc, #68]	; (80014cc <HAL_SPI_MspInit+0x80>)
 8001488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800148a:	4a10      	ldr	r2, [pc, #64]	; (80014cc <HAL_SPI_MspInit+0x80>)
 800148c:	f043 0301 	orr.w	r3, r3, #1
 8001490:	6313      	str	r3, [r2, #48]	; 0x30
 8001492:	4b0e      	ldr	r3, [pc, #56]	; (80014cc <HAL_SPI_MspInit+0x80>)
 8001494:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001496:	f003 0301 	and.w	r3, r3, #1
 800149a:	60fb      	str	r3, [r7, #12]
 800149c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800149e:	23e0      	movs	r3, #224	; 0xe0
 80014a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014a2:	2302      	movs	r3, #2
 80014a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a6:	2300      	movs	r3, #0
 80014a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014aa:	2303      	movs	r3, #3
 80014ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80014ae:	2305      	movs	r3, #5
 80014b0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014b2:	f107 0314 	add.w	r3, r7, #20
 80014b6:	4619      	mov	r1, r3
 80014b8:	4805      	ldr	r0, [pc, #20]	; (80014d0 <HAL_SPI_MspInit+0x84>)
 80014ba:	f001 f94b 	bl	8002754 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80014be:	bf00      	nop
 80014c0:	3728      	adds	r7, #40	; 0x28
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bd80      	pop	{r7, pc}
 80014c6:	bf00      	nop
 80014c8:	40013000 	.word	0x40013000
 80014cc:	40023800 	.word	0x40023800
 80014d0:	40020000 	.word	0x40020000

080014d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b082      	sub	sp, #8
 80014d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80014da:	4b11      	ldr	r3, [pc, #68]	; (8001520 <HAL_MspInit+0x4c>)
 80014dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014de:	4a10      	ldr	r2, [pc, #64]	; (8001520 <HAL_MspInit+0x4c>)
 80014e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014e4:	6413      	str	r3, [r2, #64]	; 0x40
 80014e6:	4b0e      	ldr	r3, [pc, #56]	; (8001520 <HAL_MspInit+0x4c>)
 80014e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014ee:	607b      	str	r3, [r7, #4]
 80014f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014f2:	4b0b      	ldr	r3, [pc, #44]	; (8001520 <HAL_MspInit+0x4c>)
 80014f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014f6:	4a0a      	ldr	r2, [pc, #40]	; (8001520 <HAL_MspInit+0x4c>)
 80014f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014fc:	6453      	str	r3, [r2, #68]	; 0x44
 80014fe:	4b08      	ldr	r3, [pc, #32]	; (8001520 <HAL_MspInit+0x4c>)
 8001500:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001502:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001506:	603b      	str	r3, [r7, #0]
 8001508:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800150a:	2200      	movs	r2, #0
 800150c:	210f      	movs	r1, #15
 800150e:	f06f 0001 	mvn.w	r0, #1
 8001512:	f000 ff04 	bl	800231e <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001516:	bf00      	nop
 8001518:	3708      	adds	r7, #8
 800151a:	46bd      	mov	sp, r7
 800151c:	bd80      	pop	{r7, pc}
 800151e:	bf00      	nop
 8001520:	40023800 	.word	0x40023800

08001524 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001524:	b480      	push	{r7}
 8001526:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001528:	e7fe      	b.n	8001528 <NMI_Handler+0x4>

0800152a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800152a:	b480      	push	{r7}
 800152c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800152e:	e7fe      	b.n	800152e <HardFault_Handler+0x4>

08001530 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001530:	b480      	push	{r7}
 8001532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001534:	e7fe      	b.n	8001534 <MemManage_Handler+0x4>

08001536 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001536:	b480      	push	{r7}
 8001538:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800153a:	e7fe      	b.n	800153a <BusFault_Handler+0x4>

0800153c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800153c:	b480      	push	{r7}
 800153e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001540:	e7fe      	b.n	8001540 <UsageFault_Handler+0x4>

08001542 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001542:	b480      	push	{r7}
 8001544:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001546:	bf00      	nop
 8001548:	46bd      	mov	sp, r7
 800154a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154e:	4770      	bx	lr

08001550 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001554:	f000 f9aa 	bl	80018ac <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8001558:	f008 f8aa 	bl	80096b0 <xTaskGetSchedulerState>
 800155c:	4603      	mov	r3, r0
 800155e:	2b01      	cmp	r3, #1
 8001560:	d001      	beq.n	8001566 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8001562:	f009 fa49 	bl	800a9f8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001566:	bf00      	nop
 8001568:	bd80      	pop	{r7, pc}

0800156a <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800156a:	b480      	push	{r7}
 800156c:	af00      	add	r7, sp, #0
	return 1;
 800156e:	2301      	movs	r3, #1
}
 8001570:	4618      	mov	r0, r3
 8001572:	46bd      	mov	sp, r7
 8001574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001578:	4770      	bx	lr

0800157a <_kill>:

int _kill(int pid, int sig)
{
 800157a:	b580      	push	{r7, lr}
 800157c:	b082      	sub	sp, #8
 800157e:	af00      	add	r7, sp, #0
 8001580:	6078      	str	r0, [r7, #4]
 8001582:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001584:	f013 fd50 	bl	8015028 <__errno>
 8001588:	4603      	mov	r3, r0
 800158a:	2216      	movs	r2, #22
 800158c:	601a      	str	r2, [r3, #0]
	return -1;
 800158e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001592:	4618      	mov	r0, r3
 8001594:	3708      	adds	r7, #8
 8001596:	46bd      	mov	sp, r7
 8001598:	bd80      	pop	{r7, pc}

0800159a <_exit>:

void _exit (int status)
{
 800159a:	b580      	push	{r7, lr}
 800159c:	b082      	sub	sp, #8
 800159e:	af00      	add	r7, sp, #0
 80015a0:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80015a2:	f04f 31ff 	mov.w	r1, #4294967295
 80015a6:	6878      	ldr	r0, [r7, #4]
 80015a8:	f7ff ffe7 	bl	800157a <_kill>
	while (1) {}		/* Make sure we hang here */
 80015ac:	e7fe      	b.n	80015ac <_exit+0x12>

080015ae <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80015ae:	b580      	push	{r7, lr}
 80015b0:	b086      	sub	sp, #24
 80015b2:	af00      	add	r7, sp, #0
 80015b4:	60f8      	str	r0, [r7, #12]
 80015b6:	60b9      	str	r1, [r7, #8]
 80015b8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015ba:	2300      	movs	r3, #0
 80015bc:	617b      	str	r3, [r7, #20]
 80015be:	e00a      	b.n	80015d6 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80015c0:	f3af 8000 	nop.w
 80015c4:	4601      	mov	r1, r0
 80015c6:	68bb      	ldr	r3, [r7, #8]
 80015c8:	1c5a      	adds	r2, r3, #1
 80015ca:	60ba      	str	r2, [r7, #8]
 80015cc:	b2ca      	uxtb	r2, r1
 80015ce:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015d0:	697b      	ldr	r3, [r7, #20]
 80015d2:	3301      	adds	r3, #1
 80015d4:	617b      	str	r3, [r7, #20]
 80015d6:	697a      	ldr	r2, [r7, #20]
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	429a      	cmp	r2, r3
 80015dc:	dbf0      	blt.n	80015c0 <_read+0x12>
	}

return len;
 80015de:	687b      	ldr	r3, [r7, #4]
}
 80015e0:	4618      	mov	r0, r3
 80015e2:	3718      	adds	r7, #24
 80015e4:	46bd      	mov	sp, r7
 80015e6:	bd80      	pop	{r7, pc}

080015e8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b086      	sub	sp, #24
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	60f8      	str	r0, [r7, #12]
 80015f0:	60b9      	str	r1, [r7, #8]
 80015f2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015f4:	2300      	movs	r3, #0
 80015f6:	617b      	str	r3, [r7, #20]
 80015f8:	e009      	b.n	800160e <_write+0x26>
	{
		__io_putchar(*ptr++);
 80015fa:	68bb      	ldr	r3, [r7, #8]
 80015fc:	1c5a      	adds	r2, r3, #1
 80015fe:	60ba      	str	r2, [r7, #8]
 8001600:	781b      	ldrb	r3, [r3, #0]
 8001602:	4618      	mov	r0, r3
 8001604:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001608:	697b      	ldr	r3, [r7, #20]
 800160a:	3301      	adds	r3, #1
 800160c:	617b      	str	r3, [r7, #20]
 800160e:	697a      	ldr	r2, [r7, #20]
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	429a      	cmp	r2, r3
 8001614:	dbf1      	blt.n	80015fa <_write+0x12>
	}
	return len;
 8001616:	687b      	ldr	r3, [r7, #4]
}
 8001618:	4618      	mov	r0, r3
 800161a:	3718      	adds	r7, #24
 800161c:	46bd      	mov	sp, r7
 800161e:	bd80      	pop	{r7, pc}

08001620 <_close>:

int _close(int file)
{
 8001620:	b480      	push	{r7}
 8001622:	b083      	sub	sp, #12
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
	return -1;
 8001628:	f04f 33ff 	mov.w	r3, #4294967295
}
 800162c:	4618      	mov	r0, r3
 800162e:	370c      	adds	r7, #12
 8001630:	46bd      	mov	sp, r7
 8001632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001636:	4770      	bx	lr

08001638 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001638:	b480      	push	{r7}
 800163a:	b083      	sub	sp, #12
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
 8001640:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001642:	683b      	ldr	r3, [r7, #0]
 8001644:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001648:	605a      	str	r2, [r3, #4]
	return 0;
 800164a:	2300      	movs	r3, #0
}
 800164c:	4618      	mov	r0, r3
 800164e:	370c      	adds	r7, #12
 8001650:	46bd      	mov	sp, r7
 8001652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001656:	4770      	bx	lr

08001658 <_isatty>:

int _isatty(int file)
{
 8001658:	b480      	push	{r7}
 800165a:	b083      	sub	sp, #12
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
	return 1;
 8001660:	2301      	movs	r3, #1
}
 8001662:	4618      	mov	r0, r3
 8001664:	370c      	adds	r7, #12
 8001666:	46bd      	mov	sp, r7
 8001668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166c:	4770      	bx	lr

0800166e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800166e:	b480      	push	{r7}
 8001670:	b085      	sub	sp, #20
 8001672:	af00      	add	r7, sp, #0
 8001674:	60f8      	str	r0, [r7, #12]
 8001676:	60b9      	str	r1, [r7, #8]
 8001678:	607a      	str	r2, [r7, #4]
	return 0;
 800167a:	2300      	movs	r3, #0
}
 800167c:	4618      	mov	r0, r3
 800167e:	3714      	adds	r7, #20
 8001680:	46bd      	mov	sp, r7
 8001682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001686:	4770      	bx	lr

08001688 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b086      	sub	sp, #24
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001690:	4a14      	ldr	r2, [pc, #80]	; (80016e4 <_sbrk+0x5c>)
 8001692:	4b15      	ldr	r3, [pc, #84]	; (80016e8 <_sbrk+0x60>)
 8001694:	1ad3      	subs	r3, r2, r3
 8001696:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001698:	697b      	ldr	r3, [r7, #20]
 800169a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800169c:	4b13      	ldr	r3, [pc, #76]	; (80016ec <_sbrk+0x64>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d102      	bne.n	80016aa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80016a4:	4b11      	ldr	r3, [pc, #68]	; (80016ec <_sbrk+0x64>)
 80016a6:	4a12      	ldr	r2, [pc, #72]	; (80016f0 <_sbrk+0x68>)
 80016a8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80016aa:	4b10      	ldr	r3, [pc, #64]	; (80016ec <_sbrk+0x64>)
 80016ac:	681a      	ldr	r2, [r3, #0]
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	4413      	add	r3, r2
 80016b2:	693a      	ldr	r2, [r7, #16]
 80016b4:	429a      	cmp	r2, r3
 80016b6:	d207      	bcs.n	80016c8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80016b8:	f013 fcb6 	bl	8015028 <__errno>
 80016bc:	4603      	mov	r3, r0
 80016be:	220c      	movs	r2, #12
 80016c0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80016c2:	f04f 33ff 	mov.w	r3, #4294967295
 80016c6:	e009      	b.n	80016dc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80016c8:	4b08      	ldr	r3, [pc, #32]	; (80016ec <_sbrk+0x64>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80016ce:	4b07      	ldr	r3, [pc, #28]	; (80016ec <_sbrk+0x64>)
 80016d0:	681a      	ldr	r2, [r3, #0]
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	4413      	add	r3, r2
 80016d6:	4a05      	ldr	r2, [pc, #20]	; (80016ec <_sbrk+0x64>)
 80016d8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80016da:	68fb      	ldr	r3, [r7, #12]
}
 80016dc:	4618      	mov	r0, r3
 80016de:	3718      	adds	r7, #24
 80016e0:	46bd      	mov	sp, r7
 80016e2:	bd80      	pop	{r7, pc}
 80016e4:	20050000 	.word	0x20050000
 80016e8:	00000400 	.word	0x00000400
 80016ec:	20000350 	.word	0x20000350
 80016f0:	20005878 	.word	0x20005878

080016f4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80016f4:	b480      	push	{r7}
 80016f6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80016f8:	4b06      	ldr	r3, [pc, #24]	; (8001714 <SystemInit+0x20>)
 80016fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80016fe:	4a05      	ldr	r2, [pc, #20]	; (8001714 <SystemInit+0x20>)
 8001700:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001704:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001708:	bf00      	nop
 800170a:	46bd      	mov	sp, r7
 800170c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001710:	4770      	bx	lr
 8001712:	bf00      	nop
 8001714:	e000ed00 	.word	0xe000ed00

08001718 <HAL_TIM_Base_MspInit>:
  /* USER CODE END TIM1_Init 2 */

}

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001718:	b480      	push	{r7}
 800171a:	b085      	sub	sp, #20
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	4a0a      	ldr	r2, [pc, #40]	; (8001750 <HAL_TIM_Base_MspInit+0x38>)
 8001726:	4293      	cmp	r3, r2
 8001728:	d10b      	bne.n	8001742 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800172a:	4b0a      	ldr	r3, [pc, #40]	; (8001754 <HAL_TIM_Base_MspInit+0x3c>)
 800172c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800172e:	4a09      	ldr	r2, [pc, #36]	; (8001754 <HAL_TIM_Base_MspInit+0x3c>)
 8001730:	f043 0301 	orr.w	r3, r3, #1
 8001734:	6453      	str	r3, [r2, #68]	; 0x44
 8001736:	4b07      	ldr	r3, [pc, #28]	; (8001754 <HAL_TIM_Base_MspInit+0x3c>)
 8001738:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800173a:	f003 0301 	and.w	r3, r3, #1
 800173e:	60fb      	str	r3, [r7, #12]
 8001740:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8001742:	bf00      	nop
 8001744:	3714      	adds	r7, #20
 8001746:	46bd      	mov	sp, r7
 8001748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174c:	4770      	bx	lr
 800174e:	bf00      	nop
 8001750:	40010000 	.word	0x40010000
 8001754:	40023800 	.word	0x40023800

08001758 <HAL_UART_MspInit>:
  /* USER CODE END USART1_Init 2 */

}

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b08a      	sub	sp, #40	; 0x28
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001760:	f107 0314 	add.w	r3, r7, #20
 8001764:	2200      	movs	r2, #0
 8001766:	601a      	str	r2, [r3, #0]
 8001768:	605a      	str	r2, [r3, #4]
 800176a:	609a      	str	r2, [r3, #8]
 800176c:	60da      	str	r2, [r3, #12]
 800176e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	4a17      	ldr	r2, [pc, #92]	; (80017d4 <HAL_UART_MspInit+0x7c>)
 8001776:	4293      	cmp	r3, r2
 8001778:	d128      	bne.n	80017cc <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800177a:	4b17      	ldr	r3, [pc, #92]	; (80017d8 <HAL_UART_MspInit+0x80>)
 800177c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800177e:	4a16      	ldr	r2, [pc, #88]	; (80017d8 <HAL_UART_MspInit+0x80>)
 8001780:	f043 0310 	orr.w	r3, r3, #16
 8001784:	6453      	str	r3, [r2, #68]	; 0x44
 8001786:	4b14      	ldr	r3, [pc, #80]	; (80017d8 <HAL_UART_MspInit+0x80>)
 8001788:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800178a:	f003 0310 	and.w	r3, r3, #16
 800178e:	613b      	str	r3, [r7, #16]
 8001790:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001792:	4b11      	ldr	r3, [pc, #68]	; (80017d8 <HAL_UART_MspInit+0x80>)
 8001794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001796:	4a10      	ldr	r2, [pc, #64]	; (80017d8 <HAL_UART_MspInit+0x80>)
 8001798:	f043 0301 	orr.w	r3, r3, #1
 800179c:	6313      	str	r3, [r2, #48]	; 0x30
 800179e:	4b0e      	ldr	r3, [pc, #56]	; (80017d8 <HAL_UART_MspInit+0x80>)
 80017a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017a2:	f003 0301 	and.w	r3, r3, #1
 80017a6:	60fb      	str	r3, [r7, #12]
 80017a8:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80017aa:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80017ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017b0:	2302      	movs	r3, #2
 80017b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017b4:	2300      	movs	r3, #0
 80017b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017b8:	2303      	movs	r3, #3
 80017ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80017bc:	2307      	movs	r3, #7
 80017be:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017c0:	f107 0314 	add.w	r3, r7, #20
 80017c4:	4619      	mov	r1, r3
 80017c6:	4805      	ldr	r0, [pc, #20]	; (80017dc <HAL_UART_MspInit+0x84>)
 80017c8:	f000 ffc4 	bl	8002754 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80017cc:	bf00      	nop
 80017ce:	3728      	adds	r7, #40	; 0x28
 80017d0:	46bd      	mov	sp, r7
 80017d2:	bd80      	pop	{r7, pc}
 80017d4:	40011000 	.word	0x40011000
 80017d8:	40023800 	.word	0x40023800
 80017dc:	40020000 	.word	0x40020000

080017e0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80017e0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001818 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80017e4:	480d      	ldr	r0, [pc, #52]	; (800181c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80017e6:	490e      	ldr	r1, [pc, #56]	; (8001820 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80017e8:	4a0e      	ldr	r2, [pc, #56]	; (8001824 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80017ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017ec:	e002      	b.n	80017f4 <LoopCopyDataInit>

080017ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017f2:	3304      	adds	r3, #4

080017f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017f8:	d3f9      	bcc.n	80017ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017fa:	4a0b      	ldr	r2, [pc, #44]	; (8001828 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80017fc:	4c0b      	ldr	r4, [pc, #44]	; (800182c <LoopFillZerobss+0x26>)
  movs r3, #0
 80017fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001800:	e001      	b.n	8001806 <LoopFillZerobss>

08001802 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001802:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001804:	3204      	adds	r2, #4

08001806 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001806:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001808:	d3fb      	bcc.n	8001802 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800180a:	f7ff ff73 	bl	80016f4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800180e:	f013 fc11 	bl	8015034 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001812:	f7ff fd87 	bl	8001324 <main>
  bx  lr    
 8001816:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001818:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 800181c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001820:	20000328 	.word	0x20000328
  ldr r2, =_sidata
 8001824:	0801fa64 	.word	0x0801fa64
  ldr r2, =_sbss
 8001828:	20000328 	.word	0x20000328
  ldr r4, =_ebss
 800182c:	20005878 	.word	0x20005878

08001830 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001830:	e7fe      	b.n	8001830 <ADC_IRQHandler>

08001832 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001832:	b580      	push	{r7, lr}
 8001834:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001836:	2003      	movs	r0, #3
 8001838:	f000 fd66 	bl	8002308 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800183c:	200f      	movs	r0, #15
 800183e:	f000 f805 	bl	800184c <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8001842:	f7ff fe47 	bl	80014d4 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8001846:	2300      	movs	r3, #0
}
 8001848:	4618      	mov	r0, r3
 800184a:	bd80      	pop	{r7, pc}

0800184c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b082      	sub	sp, #8
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001854:	4b12      	ldr	r3, [pc, #72]	; (80018a0 <HAL_InitTick+0x54>)
 8001856:	681a      	ldr	r2, [r3, #0]
 8001858:	4b12      	ldr	r3, [pc, #72]	; (80018a4 <HAL_InitTick+0x58>)
 800185a:	781b      	ldrb	r3, [r3, #0]
 800185c:	4619      	mov	r1, r3
 800185e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001862:	fbb3 f3f1 	udiv	r3, r3, r1
 8001866:	fbb2 f3f3 	udiv	r3, r2, r3
 800186a:	4618      	mov	r0, r3
 800186c:	f000 fd77 	bl	800235e <HAL_SYSTICK_Config>
 8001870:	4603      	mov	r3, r0
 8001872:	2b00      	cmp	r3, #0
 8001874:	d001      	beq.n	800187a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001876:	2301      	movs	r3, #1
 8001878:	e00e      	b.n	8001898 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	2b0f      	cmp	r3, #15
 800187e:	d80a      	bhi.n	8001896 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001880:	2200      	movs	r2, #0
 8001882:	6879      	ldr	r1, [r7, #4]
 8001884:	f04f 30ff 	mov.w	r0, #4294967295
 8001888:	f000 fd49 	bl	800231e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800188c:	4a06      	ldr	r2, [pc, #24]	; (80018a8 <HAL_InitTick+0x5c>)
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001892:	2300      	movs	r3, #0
 8001894:	e000      	b.n	8001898 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001896:	2301      	movs	r3, #1
}
 8001898:	4618      	mov	r0, r3
 800189a:	3708      	adds	r7, #8
 800189c:	46bd      	mov	sp, r7
 800189e:	bd80      	pop	{r7, pc}
 80018a0:	20000000 	.word	0x20000000
 80018a4:	20000008 	.word	0x20000008
 80018a8:	20000004 	.word	0x20000004

080018ac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018ac:	b480      	push	{r7}
 80018ae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80018b0:	4b06      	ldr	r3, [pc, #24]	; (80018cc <HAL_IncTick+0x20>)
 80018b2:	781b      	ldrb	r3, [r3, #0]
 80018b4:	461a      	mov	r2, r3
 80018b6:	4b06      	ldr	r3, [pc, #24]	; (80018d0 <HAL_IncTick+0x24>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	4413      	add	r3, r2
 80018bc:	4a04      	ldr	r2, [pc, #16]	; (80018d0 <HAL_IncTick+0x24>)
 80018be:	6013      	str	r3, [r2, #0]
}
 80018c0:	bf00      	nop
 80018c2:	46bd      	mov	sp, r7
 80018c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c8:	4770      	bx	lr
 80018ca:	bf00      	nop
 80018cc:	20000008 	.word	0x20000008
 80018d0:	20005824 	.word	0x20005824

080018d4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018d4:	b480      	push	{r7}
 80018d6:	af00      	add	r7, sp, #0
  return uwTick;
 80018d8:	4b03      	ldr	r3, [pc, #12]	; (80018e8 <HAL_GetTick+0x14>)
 80018da:	681b      	ldr	r3, [r3, #0]
}
 80018dc:	4618      	mov	r0, r3
 80018de:	46bd      	mov	sp, r7
 80018e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e4:	4770      	bx	lr
 80018e6:	bf00      	nop
 80018e8:	20005824 	.word	0x20005824

080018ec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b084      	sub	sp, #16
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80018f4:	f7ff ffee 	bl	80018d4 <HAL_GetTick>
 80018f8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001904:	d005      	beq.n	8001912 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001906:	4b0a      	ldr	r3, [pc, #40]	; (8001930 <HAL_Delay+0x44>)
 8001908:	781b      	ldrb	r3, [r3, #0]
 800190a:	461a      	mov	r2, r3
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	4413      	add	r3, r2
 8001910:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001912:	bf00      	nop
 8001914:	f7ff ffde 	bl	80018d4 <HAL_GetTick>
 8001918:	4602      	mov	r2, r0
 800191a:	68bb      	ldr	r3, [r7, #8]
 800191c:	1ad3      	subs	r3, r2, r3
 800191e:	68fa      	ldr	r2, [r7, #12]
 8001920:	429a      	cmp	r2, r3
 8001922:	d8f7      	bhi.n	8001914 <HAL_Delay+0x28>
  {
  }
}
 8001924:	bf00      	nop
 8001926:	bf00      	nop
 8001928:	3710      	adds	r7, #16
 800192a:	46bd      	mov	sp, r7
 800192c:	bd80      	pop	{r7, pc}
 800192e:	bf00      	nop
 8001930:	20000008 	.word	0x20000008

08001934 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b084      	sub	sp, #16
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800193c:	2300      	movs	r3, #0
 800193e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	2b00      	cmp	r3, #0
 8001944:	d101      	bne.n	800194a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001946:	2301      	movs	r3, #1
 8001948:	e031      	b.n	80019ae <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800194e:	2b00      	cmp	r3, #0
 8001950:	d109      	bne.n	8001966 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001952:	6878      	ldr	r0, [r7, #4]
 8001954:	f7ff fbca 	bl	80010ec <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	2200      	movs	r2, #0
 800195c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	2200      	movs	r2, #0
 8001962:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800196a:	f003 0310 	and.w	r3, r3, #16
 800196e:	2b00      	cmp	r3, #0
 8001970:	d116      	bne.n	80019a0 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001976:	4b10      	ldr	r3, [pc, #64]	; (80019b8 <HAL_ADC_Init+0x84>)
 8001978:	4013      	ands	r3, r2
 800197a:	f043 0202 	orr.w	r2, r3, #2
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001982:	6878      	ldr	r0, [r7, #4]
 8001984:	f000 fa7c 	bl	8001e80 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	2200      	movs	r2, #0
 800198c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001992:	f023 0303 	bic.w	r3, r3, #3
 8001996:	f043 0201 	orr.w	r2, r3, #1
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	641a      	str	r2, [r3, #64]	; 0x40
 800199e:	e001      	b.n	80019a4 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80019a0:	2301      	movs	r3, #1
 80019a2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	2200      	movs	r2, #0
 80019a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80019ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80019ae:	4618      	mov	r0, r3
 80019b0:	3710      	adds	r7, #16
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bd80      	pop	{r7, pc}
 80019b6:	bf00      	nop
 80019b8:	ffffeefd 	.word	0xffffeefd

080019bc <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b086      	sub	sp, #24
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	60f8      	str	r0, [r7, #12]
 80019c4:	60b9      	str	r1, [r7, #8]
 80019c6:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0;
 80019c8:	2300      	movs	r3, #0
 80019ca:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80019d2:	2b01      	cmp	r3, #1
 80019d4:	d101      	bne.n	80019da <HAL_ADC_Start_DMA+0x1e>
 80019d6:	2302      	movs	r3, #2
 80019d8:	e0d4      	b.n	8001b84 <HAL_ADC_Start_DMA+0x1c8>
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	2201      	movs	r2, #1
 80019de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	689b      	ldr	r3, [r3, #8]
 80019e8:	f003 0301 	and.w	r3, r3, #1
 80019ec:	2b01      	cmp	r3, #1
 80019ee:	d018      	beq.n	8001a22 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	689a      	ldr	r2, [r3, #8]
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f042 0201 	orr.w	r2, r2, #1
 80019fe:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8001a00:	4b62      	ldr	r3, [pc, #392]	; (8001b8c <HAL_ADC_Start_DMA+0x1d0>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	4a62      	ldr	r2, [pc, #392]	; (8001b90 <HAL_ADC_Start_DMA+0x1d4>)
 8001a06:	fba2 2303 	umull	r2, r3, r2, r3
 8001a0a:	0c9a      	lsrs	r2, r3, #18
 8001a0c:	4613      	mov	r3, r2
 8001a0e:	005b      	lsls	r3, r3, #1
 8001a10:	4413      	add	r3, r2
 8001a12:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 8001a14:	e002      	b.n	8001a1c <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8001a16:	697b      	ldr	r3, [r7, #20]
 8001a18:	3b01      	subs	r3, #1
 8001a1a:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 8001a1c:	697b      	ldr	r3, [r7, #20]
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d1f9      	bne.n	8001a16 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	689b      	ldr	r3, [r3, #8]
 8001a28:	f003 0301 	and.w	r3, r3, #1
 8001a2c:	2b01      	cmp	r3, #1
 8001a2e:	f040 809c 	bne.w	8001b6a <HAL_ADC_Start_DMA+0x1ae>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001a36:	4b57      	ldr	r3, [pc, #348]	; (8001b94 <HAL_ADC_Start_DMA+0x1d8>)
 8001a38:	4013      	ands	r3, r2
 8001a3a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	685b      	ldr	r3, [r3, #4]
 8001a48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d007      	beq.n	8001a60 <HAL_ADC_Start_DMA+0xa4>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a54:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001a58:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a64:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a68:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001a6c:	d106      	bne.n	8001a7c <HAL_ADC_Start_DMA+0xc0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a72:	f023 0206 	bic.w	r2, r3, #6
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	645a      	str	r2, [r3, #68]	; 0x44
 8001a7a:	e002      	b.n	8001a82 <HAL_ADC_Start_DMA+0xc6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	2200      	movs	r2, #0
 8001a80:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	2200      	movs	r2, #0
 8001a86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a8e:	4a42      	ldr	r2, [pc, #264]	; (8001b98 <HAL_ADC_Start_DMA+0x1dc>)
 8001a90:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a96:	4a41      	ldr	r2, [pc, #260]	; (8001b9c <HAL_ADC_Start_DMA+0x1e0>)
 8001a98:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a9e:	4a40      	ldr	r2, [pc, #256]	; (8001ba0 <HAL_ADC_Start_DMA+0x1e4>)
 8001aa0:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001aaa:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	685a      	ldr	r2, [r3, #4]
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8001aba:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	689a      	ldr	r2, [r3, #8]
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001aca:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	334c      	adds	r3, #76	; 0x4c
 8001ad6:	4619      	mov	r1, r3
 8001ad8:	68ba      	ldr	r2, [r7, #8]
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	f000 fcfa 	bl	80024d4 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8001ae0:	4b30      	ldr	r3, [pc, #192]	; (8001ba4 <HAL_ADC_Start_DMA+0x1e8>)
 8001ae2:	685b      	ldr	r3, [r3, #4]
 8001ae4:	f003 031f 	and.w	r3, r3, #31
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d10f      	bne.n	8001b0c <HAL_ADC_Start_DMA+0x150>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	689b      	ldr	r3, [r3, #8]
 8001af2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d143      	bne.n	8001b82 <HAL_ADC_Start_DMA+0x1c6>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	689a      	ldr	r2, [r3, #8]
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001b08:	609a      	str	r2, [r3, #8]
 8001b0a:	e03a      	b.n	8001b82 <HAL_ADC_Start_DMA+0x1c6>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	4a25      	ldr	r2, [pc, #148]	; (8001ba8 <HAL_ADC_Start_DMA+0x1ec>)
 8001b12:	4293      	cmp	r3, r2
 8001b14:	d10e      	bne.n	8001b34 <HAL_ADC_Start_DMA+0x178>
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	689b      	ldr	r3, [r3, #8]
 8001b1c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d107      	bne.n	8001b34 <HAL_ADC_Start_DMA+0x178>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	689a      	ldr	r2, [r3, #8]
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001b32:	609a      	str	r2, [r3, #8]
      }
      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8001b34:	4b1b      	ldr	r3, [pc, #108]	; (8001ba4 <HAL_ADC_Start_DMA+0x1e8>)
 8001b36:	685b      	ldr	r3, [r3, #4]
 8001b38:	f003 0310 	and.w	r3, r3, #16
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d120      	bne.n	8001b82 <HAL_ADC_Start_DMA+0x1c6>
      {
        /* if instance of handle correspond to ADC3 and  no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	4a19      	ldr	r2, [pc, #100]	; (8001bac <HAL_ADC_Start_DMA+0x1f0>)
 8001b46:	4293      	cmp	r3, r2
 8001b48:	d11b      	bne.n	8001b82 <HAL_ADC_Start_DMA+0x1c6>
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	689b      	ldr	r3, [r3, #8]
 8001b50:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d114      	bne.n	8001b82 <HAL_ADC_Start_DMA+0x1c6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	689a      	ldr	r2, [r3, #8]
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001b66:	609a      	str	r2, [r3, #8]
 8001b68:	e00b      	b.n	8001b82 <HAL_ADC_Start_DMA+0x1c6>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b6e:	f043 0210 	orr.w	r2, r3, #16
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b7a:	f043 0201 	orr.w	r2, r3, #1
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001b82:	2300      	movs	r3, #0
}
 8001b84:	4618      	mov	r0, r3
 8001b86:	3718      	adds	r7, #24
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	bd80      	pop	{r7, pc}
 8001b8c:	20000000 	.word	0x20000000
 8001b90:	431bde83 	.word	0x431bde83
 8001b94:	fffff8fe 	.word	0xfffff8fe
 8001b98:	08002075 	.word	0x08002075
 8001b9c:	0800212f 	.word	0x0800212f
 8001ba0:	0800214b 	.word	0x0800214b
 8001ba4:	40012300 	.word	0x40012300
 8001ba8:	40012000 	.word	0x40012000
 8001bac:	40012200 	.word	0x40012200

08001bb0 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	b083      	sub	sp, #12
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8001bb8:	bf00      	nop
 8001bba:	370c      	adds	r7, #12
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc2:	4770      	bx	lr

08001bc4 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	b083      	sub	sp, #12
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8001bcc:	bf00      	nop
 8001bce:	370c      	adds	r7, #12
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd6:	4770      	bx	lr

08001bd8 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	b083      	sub	sp, #12
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001be0:	bf00      	nop
 8001be2:	370c      	adds	r7, #12
 8001be4:	46bd      	mov	sp, r7
 8001be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bea:	4770      	bx	lr

08001bec <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001bec:	b480      	push	{r7}
 8001bee:	b085      	sub	sp, #20
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
 8001bf4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001c00:	2b01      	cmp	r3, #1
 8001c02:	d101      	bne.n	8001c08 <HAL_ADC_ConfigChannel+0x1c>
 8001c04:	2302      	movs	r3, #2
 8001c06:	e12a      	b.n	8001e5e <HAL_ADC_ConfigChannel+0x272>
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	2201      	movs	r2, #1
 8001c0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	2b09      	cmp	r3, #9
 8001c16:	d93a      	bls.n	8001c8e <HAL_ADC_ConfigChannel+0xa2>
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001c20:	d035      	beq.n	8001c8e <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	68d9      	ldr	r1, [r3, #12]
 8001c28:	683b      	ldr	r3, [r7, #0]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	b29b      	uxth	r3, r3
 8001c2e:	461a      	mov	r2, r3
 8001c30:	4613      	mov	r3, r2
 8001c32:	005b      	lsls	r3, r3, #1
 8001c34:	4413      	add	r3, r2
 8001c36:	3b1e      	subs	r3, #30
 8001c38:	2207      	movs	r2, #7
 8001c3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c3e:	43da      	mvns	r2, r3
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	400a      	ands	r2, r1
 8001c46:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001c48:	683b      	ldr	r3, [r7, #0]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	4a87      	ldr	r2, [pc, #540]	; (8001e6c <HAL_ADC_ConfigChannel+0x280>)
 8001c4e:	4293      	cmp	r3, r2
 8001c50:	d10a      	bne.n	8001c68 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	68d9      	ldr	r1, [r3, #12]
 8001c58:	683b      	ldr	r3, [r7, #0]
 8001c5a:	689b      	ldr	r3, [r3, #8]
 8001c5c:	061a      	lsls	r2, r3, #24
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	430a      	orrs	r2, r1
 8001c64:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001c66:	e035      	b.n	8001cd4 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	68d9      	ldr	r1, [r3, #12]
 8001c6e:	683b      	ldr	r3, [r7, #0]
 8001c70:	689a      	ldr	r2, [r3, #8]
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	b29b      	uxth	r3, r3
 8001c78:	4618      	mov	r0, r3
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	005b      	lsls	r3, r3, #1
 8001c7e:	4403      	add	r3, r0
 8001c80:	3b1e      	subs	r3, #30
 8001c82:	409a      	lsls	r2, r3
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	430a      	orrs	r2, r1
 8001c8a:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001c8c:	e022      	b.n	8001cd4 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	6919      	ldr	r1, [r3, #16]
 8001c94:	683b      	ldr	r3, [r7, #0]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	b29b      	uxth	r3, r3
 8001c9a:	461a      	mov	r2, r3
 8001c9c:	4613      	mov	r3, r2
 8001c9e:	005b      	lsls	r3, r3, #1
 8001ca0:	4413      	add	r3, r2
 8001ca2:	2207      	movs	r2, #7
 8001ca4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca8:	43da      	mvns	r2, r3
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	400a      	ands	r2, r1
 8001cb0:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	6919      	ldr	r1, [r3, #16]
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	689a      	ldr	r2, [r3, #8]
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	b29b      	uxth	r3, r3
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	005b      	lsls	r3, r3, #1
 8001cc8:	4403      	add	r3, r0
 8001cca:	409a      	lsls	r2, r3
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	430a      	orrs	r2, r1
 8001cd2:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8001cd4:	683b      	ldr	r3, [r7, #0]
 8001cd6:	685b      	ldr	r3, [r3, #4]
 8001cd8:	2b06      	cmp	r3, #6
 8001cda:	d824      	bhi.n	8001d26 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	685a      	ldr	r2, [r3, #4]
 8001ce6:	4613      	mov	r3, r2
 8001ce8:	009b      	lsls	r3, r3, #2
 8001cea:	4413      	add	r3, r2
 8001cec:	3b05      	subs	r3, #5
 8001cee:	221f      	movs	r2, #31
 8001cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf4:	43da      	mvns	r2, r3
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	400a      	ands	r2, r1
 8001cfc:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	b29b      	uxth	r3, r3
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	685a      	ldr	r2, [r3, #4]
 8001d10:	4613      	mov	r3, r2
 8001d12:	009b      	lsls	r3, r3, #2
 8001d14:	4413      	add	r3, r2
 8001d16:	3b05      	subs	r3, #5
 8001d18:	fa00 f203 	lsl.w	r2, r0, r3
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	430a      	orrs	r2, r1
 8001d22:	635a      	str	r2, [r3, #52]	; 0x34
 8001d24:	e04c      	b.n	8001dc0 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8001d26:	683b      	ldr	r3, [r7, #0]
 8001d28:	685b      	ldr	r3, [r3, #4]
 8001d2a:	2b0c      	cmp	r3, #12
 8001d2c:	d824      	bhi.n	8001d78 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	685a      	ldr	r2, [r3, #4]
 8001d38:	4613      	mov	r3, r2
 8001d3a:	009b      	lsls	r3, r3, #2
 8001d3c:	4413      	add	r3, r2
 8001d3e:	3b23      	subs	r3, #35	; 0x23
 8001d40:	221f      	movs	r2, #31
 8001d42:	fa02 f303 	lsl.w	r3, r2, r3
 8001d46:	43da      	mvns	r2, r3
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	400a      	ands	r2, r1
 8001d4e:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001d56:	683b      	ldr	r3, [r7, #0]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	b29b      	uxth	r3, r3
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	683b      	ldr	r3, [r7, #0]
 8001d60:	685a      	ldr	r2, [r3, #4]
 8001d62:	4613      	mov	r3, r2
 8001d64:	009b      	lsls	r3, r3, #2
 8001d66:	4413      	add	r3, r2
 8001d68:	3b23      	subs	r3, #35	; 0x23
 8001d6a:	fa00 f203 	lsl.w	r2, r0, r3
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	430a      	orrs	r2, r1
 8001d74:	631a      	str	r2, [r3, #48]	; 0x30
 8001d76:	e023      	b.n	8001dc0 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001d7e:	683b      	ldr	r3, [r7, #0]
 8001d80:	685a      	ldr	r2, [r3, #4]
 8001d82:	4613      	mov	r3, r2
 8001d84:	009b      	lsls	r3, r3, #2
 8001d86:	4413      	add	r3, r2
 8001d88:	3b41      	subs	r3, #65	; 0x41
 8001d8a:	221f      	movs	r2, #31
 8001d8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d90:	43da      	mvns	r2, r3
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	400a      	ands	r2, r1
 8001d98:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	b29b      	uxth	r3, r3
 8001da6:	4618      	mov	r0, r3
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	685a      	ldr	r2, [r3, #4]
 8001dac:	4613      	mov	r3, r2
 8001dae:	009b      	lsls	r3, r3, #2
 8001db0:	4413      	add	r3, r2
 8001db2:	3b41      	subs	r3, #65	; 0x41
 8001db4:	fa00 f203 	lsl.w	r2, r0, r3
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	430a      	orrs	r2, r1
 8001dbe:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	4a2a      	ldr	r2, [pc, #168]	; (8001e70 <HAL_ADC_ConfigChannel+0x284>)
 8001dc6:	4293      	cmp	r3, r2
 8001dc8:	d10a      	bne.n	8001de0 <HAL_ADC_ConfigChannel+0x1f4>
 8001dca:	683b      	ldr	r3, [r7, #0]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001dd2:	d105      	bne.n	8001de0 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8001dd4:	4b27      	ldr	r3, [pc, #156]	; (8001e74 <HAL_ADC_ConfigChannel+0x288>)
 8001dd6:	685b      	ldr	r3, [r3, #4]
 8001dd8:	4a26      	ldr	r2, [pc, #152]	; (8001e74 <HAL_ADC_ConfigChannel+0x288>)
 8001dda:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8001dde:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	4a22      	ldr	r2, [pc, #136]	; (8001e70 <HAL_ADC_ConfigChannel+0x284>)
 8001de6:	4293      	cmp	r3, r2
 8001de8:	d109      	bne.n	8001dfe <HAL_ADC_ConfigChannel+0x212>
 8001dea:	683b      	ldr	r3, [r7, #0]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	2b12      	cmp	r3, #18
 8001df0:	d105      	bne.n	8001dfe <HAL_ADC_ConfigChannel+0x212>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8001df2:	4b20      	ldr	r3, [pc, #128]	; (8001e74 <HAL_ADC_ConfigChannel+0x288>)
 8001df4:	685b      	ldr	r3, [r3, #4]
 8001df6:	4a1f      	ldr	r2, [pc, #124]	; (8001e74 <HAL_ADC_ConfigChannel+0x288>)
 8001df8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001dfc:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	4a1b      	ldr	r2, [pc, #108]	; (8001e70 <HAL_ADC_ConfigChannel+0x284>)
 8001e04:	4293      	cmp	r3, r2
 8001e06:	d125      	bne.n	8001e54 <HAL_ADC_ConfigChannel+0x268>
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	4a17      	ldr	r2, [pc, #92]	; (8001e6c <HAL_ADC_ConfigChannel+0x280>)
 8001e0e:	4293      	cmp	r3, r2
 8001e10:	d003      	beq.n	8001e1a <HAL_ADC_ConfigChannel+0x22e>
 8001e12:	683b      	ldr	r3, [r7, #0]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	2b11      	cmp	r3, #17
 8001e18:	d11c      	bne.n	8001e54 <HAL_ADC_ConfigChannel+0x268>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8001e1a:	4b16      	ldr	r3, [pc, #88]	; (8001e74 <HAL_ADC_ConfigChannel+0x288>)
 8001e1c:	685b      	ldr	r3, [r3, #4]
 8001e1e:	4a15      	ldr	r2, [pc, #84]	; (8001e74 <HAL_ADC_ConfigChannel+0x288>)
 8001e20:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001e24:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001e26:	683b      	ldr	r3, [r7, #0]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	4a10      	ldr	r2, [pc, #64]	; (8001e6c <HAL_ADC_ConfigChannel+0x280>)
 8001e2c:	4293      	cmp	r3, r2
 8001e2e:	d111      	bne.n	8001e54 <HAL_ADC_ConfigChannel+0x268>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8001e30:	4b11      	ldr	r3, [pc, #68]	; (8001e78 <HAL_ADC_ConfigChannel+0x28c>)
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	4a11      	ldr	r2, [pc, #68]	; (8001e7c <HAL_ADC_ConfigChannel+0x290>)
 8001e36:	fba2 2303 	umull	r2, r3, r2, r3
 8001e3a:	0c9a      	lsrs	r2, r3, #18
 8001e3c:	4613      	mov	r3, r2
 8001e3e:	009b      	lsls	r3, r3, #2
 8001e40:	4413      	add	r3, r2
 8001e42:	005b      	lsls	r3, r3, #1
 8001e44:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8001e46:	e002      	b.n	8001e4e <HAL_ADC_ConfigChannel+0x262>
      {
        counter--;
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	3b01      	subs	r3, #1
 8001e4c:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d1f9      	bne.n	8001e48 <HAL_ADC_ConfigChannel+0x25c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	2200      	movs	r2, #0
 8001e58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001e5c:	2300      	movs	r3, #0
}
 8001e5e:	4618      	mov	r0, r3
 8001e60:	3714      	adds	r7, #20
 8001e62:	46bd      	mov	sp, r7
 8001e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e68:	4770      	bx	lr
 8001e6a:	bf00      	nop
 8001e6c:	10000012 	.word	0x10000012
 8001e70:	40012000 	.word	0x40012000
 8001e74:	40012300 	.word	0x40012300
 8001e78:	20000000 	.word	0x20000000
 8001e7c:	431bde83 	.word	0x431bde83

08001e80 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001e80:	b480      	push	{r7}
 8001e82:	b083      	sub	sp, #12
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8001e88:	4b78      	ldr	r3, [pc, #480]	; (800206c <ADC_Init+0x1ec>)
 8001e8a:	685b      	ldr	r3, [r3, #4]
 8001e8c:	4a77      	ldr	r2, [pc, #476]	; (800206c <ADC_Init+0x1ec>)
 8001e8e:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8001e92:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8001e94:	4b75      	ldr	r3, [pc, #468]	; (800206c <ADC_Init+0x1ec>)
 8001e96:	685a      	ldr	r2, [r3, #4]
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	685b      	ldr	r3, [r3, #4]
 8001e9c:	4973      	ldr	r1, [pc, #460]	; (800206c <ADC_Init+0x1ec>)
 8001e9e:	4313      	orrs	r3, r2
 8001ea0:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	685a      	ldr	r2, [r3, #4]
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001eb0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	6859      	ldr	r1, [r3, #4]
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	691b      	ldr	r3, [r3, #16]
 8001ebc:	021a      	lsls	r2, r3, #8
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	430a      	orrs	r2, r1
 8001ec4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	685a      	ldr	r2, [r3, #4]
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001ed4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	6859      	ldr	r1, [r3, #4]
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	689a      	ldr	r2, [r3, #8]
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	430a      	orrs	r2, r1
 8001ee6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	689a      	ldr	r2, [r3, #8]
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001ef6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	6899      	ldr	r1, [r3, #8]
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	68da      	ldr	r2, [r3, #12]
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	430a      	orrs	r2, r1
 8001f08:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f0e:	4a58      	ldr	r2, [pc, #352]	; (8002070 <ADC_Init+0x1f0>)
 8001f10:	4293      	cmp	r3, r2
 8001f12:	d022      	beq.n	8001f5a <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	689a      	ldr	r2, [r3, #8]
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001f22:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	6899      	ldr	r1, [r3, #8]
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	430a      	orrs	r2, r1
 8001f34:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	689a      	ldr	r2, [r3, #8]
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001f44:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	6899      	ldr	r1, [r3, #8]
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	430a      	orrs	r2, r1
 8001f56:	609a      	str	r2, [r3, #8]
 8001f58:	e00f      	b.n	8001f7a <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	689a      	ldr	r2, [r3, #8]
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001f68:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	689a      	ldr	r2, [r3, #8]
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001f78:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	689a      	ldr	r2, [r3, #8]
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f022 0202 	bic.w	r2, r2, #2
 8001f88:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	6899      	ldr	r1, [r3, #8]
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	699b      	ldr	r3, [r3, #24]
 8001f94:	005a      	lsls	r2, r3, #1
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	430a      	orrs	r2, r1
 8001f9c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d01b      	beq.n	8001fe0 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	685a      	ldr	r2, [r3, #4]
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001fb6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	685a      	ldr	r2, [r3, #4]
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001fc6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	6859      	ldr	r1, [r3, #4]
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fd2:	3b01      	subs	r3, #1
 8001fd4:	035a      	lsls	r2, r3, #13
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	430a      	orrs	r2, r1
 8001fdc:	605a      	str	r2, [r3, #4]
 8001fde:	e007      	b.n	8001ff0 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	685a      	ldr	r2, [r3, #4]
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001fee:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001ffe:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	69db      	ldr	r3, [r3, #28]
 800200a:	3b01      	subs	r3, #1
 800200c:	051a      	lsls	r2, r3, #20
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	430a      	orrs	r2, r1
 8002014:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	689a      	ldr	r2, [r3, #8]
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002024:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	6899      	ldr	r1, [r3, #8]
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002032:	025a      	lsls	r2, r3, #9
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	430a      	orrs	r2, r1
 800203a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	689a      	ldr	r2, [r3, #8]
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800204a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	6899      	ldr	r1, [r3, #8]
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	695b      	ldr	r3, [r3, #20]
 8002056:	029a      	lsls	r2, r3, #10
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	430a      	orrs	r2, r1
 800205e:	609a      	str	r2, [r3, #8]
}
 8002060:	bf00      	nop
 8002062:	370c      	adds	r7, #12
 8002064:	46bd      	mov	sp, r7
 8002066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206a:	4770      	bx	lr
 800206c:	40012300 	.word	0x40012300
 8002070:	0f000001 	.word	0x0f000001

08002074 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b084      	sub	sp, #16
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002080:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002086:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800208a:	2b00      	cmp	r3, #0
 800208c:	d13c      	bne.n	8002108 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002092:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	689b      	ldr	r3, [r3, #8]
 80020a0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d12b      	bne.n	8002100 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d127      	bne.n	8002100 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020b6:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d006      	beq.n	80020cc <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	689b      	ldr	r3, [r3, #8]
 80020c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d119      	bne.n	8002100 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	685a      	ldr	r2, [r3, #4]
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f022 0220 	bic.w	r2, r2, #32
 80020da:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020e0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d105      	bne.n	8002100 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020f8:	f043 0201 	orr.w	r2, r3, #1
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002100:	68f8      	ldr	r0, [r7, #12]
 8002102:	f7ff fd55 	bl	8001bb0 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002106:	e00e      	b.n	8002126 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800210c:	f003 0310 	and.w	r3, r3, #16
 8002110:	2b00      	cmp	r3, #0
 8002112:	d003      	beq.n	800211c <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8002114:	68f8      	ldr	r0, [r7, #12]
 8002116:	f7ff fd5f 	bl	8001bd8 <HAL_ADC_ErrorCallback>
}
 800211a:	e004      	b.n	8002126 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002120:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002122:	6878      	ldr	r0, [r7, #4]
 8002124:	4798      	blx	r3
}
 8002126:	bf00      	nop
 8002128:	3710      	adds	r7, #16
 800212a:	46bd      	mov	sp, r7
 800212c:	bd80      	pop	{r7, pc}

0800212e <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800212e:	b580      	push	{r7, lr}
 8002130:	b084      	sub	sp, #16
 8002132:	af00      	add	r7, sp, #0
 8002134:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800213a:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800213c:	68f8      	ldr	r0, [r7, #12]
 800213e:	f7ff fd41 	bl	8001bc4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002142:	bf00      	nop
 8002144:	3710      	adds	r7, #16
 8002146:	46bd      	mov	sp, r7
 8002148:	bd80      	pop	{r7, pc}

0800214a <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800214a:	b580      	push	{r7, lr}
 800214c:	b084      	sub	sp, #16
 800214e:	af00      	add	r7, sp, #0
 8002150:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002156:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	2240      	movs	r2, #64	; 0x40
 800215c:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002162:	f043 0204 	orr.w	r2, r3, #4
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	645a      	str	r2, [r3, #68]	; 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800216a:	68f8      	ldr	r0, [r7, #12]
 800216c:	f7ff fd34 	bl	8001bd8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002170:	bf00      	nop
 8002172:	3710      	adds	r7, #16
 8002174:	46bd      	mov	sp, r7
 8002176:	bd80      	pop	{r7, pc}

08002178 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002178:	b480      	push	{r7}
 800217a:	b085      	sub	sp, #20
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	f003 0307 	and.w	r3, r3, #7
 8002186:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002188:	4b0b      	ldr	r3, [pc, #44]	; (80021b8 <__NVIC_SetPriorityGrouping+0x40>)
 800218a:	68db      	ldr	r3, [r3, #12]
 800218c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800218e:	68ba      	ldr	r2, [r7, #8]
 8002190:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002194:	4013      	ands	r3, r2
 8002196:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800219c:	68bb      	ldr	r3, [r7, #8]
 800219e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80021a0:	4b06      	ldr	r3, [pc, #24]	; (80021bc <__NVIC_SetPriorityGrouping+0x44>)
 80021a2:	4313      	orrs	r3, r2
 80021a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80021a6:	4a04      	ldr	r2, [pc, #16]	; (80021b8 <__NVIC_SetPriorityGrouping+0x40>)
 80021a8:	68bb      	ldr	r3, [r7, #8]
 80021aa:	60d3      	str	r3, [r2, #12]
}
 80021ac:	bf00      	nop
 80021ae:	3714      	adds	r7, #20
 80021b0:	46bd      	mov	sp, r7
 80021b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b6:	4770      	bx	lr
 80021b8:	e000ed00 	.word	0xe000ed00
 80021bc:	05fa0000 	.word	0x05fa0000

080021c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80021c0:	b480      	push	{r7}
 80021c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80021c4:	4b04      	ldr	r3, [pc, #16]	; (80021d8 <__NVIC_GetPriorityGrouping+0x18>)
 80021c6:	68db      	ldr	r3, [r3, #12]
 80021c8:	0a1b      	lsrs	r3, r3, #8
 80021ca:	f003 0307 	and.w	r3, r3, #7
}
 80021ce:	4618      	mov	r0, r3
 80021d0:	46bd      	mov	sp, r7
 80021d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d6:	4770      	bx	lr
 80021d8:	e000ed00 	.word	0xe000ed00

080021dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80021dc:	b480      	push	{r7}
 80021de:	b083      	sub	sp, #12
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	4603      	mov	r3, r0
 80021e4:	6039      	str	r1, [r7, #0]
 80021e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	db0a      	blt.n	8002206 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	b2da      	uxtb	r2, r3
 80021f4:	490c      	ldr	r1, [pc, #48]	; (8002228 <__NVIC_SetPriority+0x4c>)
 80021f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021fa:	0112      	lsls	r2, r2, #4
 80021fc:	b2d2      	uxtb	r2, r2
 80021fe:	440b      	add	r3, r1
 8002200:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002204:	e00a      	b.n	800221c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002206:	683b      	ldr	r3, [r7, #0]
 8002208:	b2da      	uxtb	r2, r3
 800220a:	4908      	ldr	r1, [pc, #32]	; (800222c <__NVIC_SetPriority+0x50>)
 800220c:	79fb      	ldrb	r3, [r7, #7]
 800220e:	f003 030f 	and.w	r3, r3, #15
 8002212:	3b04      	subs	r3, #4
 8002214:	0112      	lsls	r2, r2, #4
 8002216:	b2d2      	uxtb	r2, r2
 8002218:	440b      	add	r3, r1
 800221a:	761a      	strb	r2, [r3, #24]
}
 800221c:	bf00      	nop
 800221e:	370c      	adds	r7, #12
 8002220:	46bd      	mov	sp, r7
 8002222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002226:	4770      	bx	lr
 8002228:	e000e100 	.word	0xe000e100
 800222c:	e000ed00 	.word	0xe000ed00

08002230 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002230:	b480      	push	{r7}
 8002232:	b089      	sub	sp, #36	; 0x24
 8002234:	af00      	add	r7, sp, #0
 8002236:	60f8      	str	r0, [r7, #12]
 8002238:	60b9      	str	r1, [r7, #8]
 800223a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	f003 0307 	and.w	r3, r3, #7
 8002242:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002244:	69fb      	ldr	r3, [r7, #28]
 8002246:	f1c3 0307 	rsb	r3, r3, #7
 800224a:	2b04      	cmp	r3, #4
 800224c:	bf28      	it	cs
 800224e:	2304      	movcs	r3, #4
 8002250:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002252:	69fb      	ldr	r3, [r7, #28]
 8002254:	3304      	adds	r3, #4
 8002256:	2b06      	cmp	r3, #6
 8002258:	d902      	bls.n	8002260 <NVIC_EncodePriority+0x30>
 800225a:	69fb      	ldr	r3, [r7, #28]
 800225c:	3b03      	subs	r3, #3
 800225e:	e000      	b.n	8002262 <NVIC_EncodePriority+0x32>
 8002260:	2300      	movs	r3, #0
 8002262:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002264:	f04f 32ff 	mov.w	r2, #4294967295
 8002268:	69bb      	ldr	r3, [r7, #24]
 800226a:	fa02 f303 	lsl.w	r3, r2, r3
 800226e:	43da      	mvns	r2, r3
 8002270:	68bb      	ldr	r3, [r7, #8]
 8002272:	401a      	ands	r2, r3
 8002274:	697b      	ldr	r3, [r7, #20]
 8002276:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002278:	f04f 31ff 	mov.w	r1, #4294967295
 800227c:	697b      	ldr	r3, [r7, #20]
 800227e:	fa01 f303 	lsl.w	r3, r1, r3
 8002282:	43d9      	mvns	r1, r3
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002288:	4313      	orrs	r3, r2
         );
}
 800228a:	4618      	mov	r0, r3
 800228c:	3724      	adds	r7, #36	; 0x24
 800228e:	46bd      	mov	sp, r7
 8002290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002294:	4770      	bx	lr
	...

08002298 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8002298:	b480      	push	{r7}
 800229a:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800229c:	f3bf 8f4f 	dsb	sy
}
 80022a0:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80022a2:	4b06      	ldr	r3, [pc, #24]	; (80022bc <__NVIC_SystemReset+0x24>)
 80022a4:	68db      	ldr	r3, [r3, #12]
 80022a6:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80022aa:	4904      	ldr	r1, [pc, #16]	; (80022bc <__NVIC_SystemReset+0x24>)
 80022ac:	4b04      	ldr	r3, [pc, #16]	; (80022c0 <__NVIC_SystemReset+0x28>)
 80022ae:	4313      	orrs	r3, r2
 80022b0:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80022b2:	f3bf 8f4f 	dsb	sy
}
 80022b6:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80022b8:	bf00      	nop
 80022ba:	e7fd      	b.n	80022b8 <__NVIC_SystemReset+0x20>
 80022bc:	e000ed00 	.word	0xe000ed00
 80022c0:	05fa0004 	.word	0x05fa0004

080022c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b082      	sub	sp, #8
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	3b01      	subs	r3, #1
 80022d0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80022d4:	d301      	bcc.n	80022da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80022d6:	2301      	movs	r3, #1
 80022d8:	e00f      	b.n	80022fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80022da:	4a0a      	ldr	r2, [pc, #40]	; (8002304 <SysTick_Config+0x40>)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	3b01      	subs	r3, #1
 80022e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80022e2:	210f      	movs	r1, #15
 80022e4:	f04f 30ff 	mov.w	r0, #4294967295
 80022e8:	f7ff ff78 	bl	80021dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80022ec:	4b05      	ldr	r3, [pc, #20]	; (8002304 <SysTick_Config+0x40>)
 80022ee:	2200      	movs	r2, #0
 80022f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80022f2:	4b04      	ldr	r3, [pc, #16]	; (8002304 <SysTick_Config+0x40>)
 80022f4:	2207      	movs	r2, #7
 80022f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80022f8:	2300      	movs	r3, #0
}
 80022fa:	4618      	mov	r0, r3
 80022fc:	3708      	adds	r7, #8
 80022fe:	46bd      	mov	sp, r7
 8002300:	bd80      	pop	{r7, pc}
 8002302:	bf00      	nop
 8002304:	e000e010 	.word	0xe000e010

08002308 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b082      	sub	sp, #8
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002310:	6878      	ldr	r0, [r7, #4]
 8002312:	f7ff ff31 	bl	8002178 <__NVIC_SetPriorityGrouping>
}
 8002316:	bf00      	nop
 8002318:	3708      	adds	r7, #8
 800231a:	46bd      	mov	sp, r7
 800231c:	bd80      	pop	{r7, pc}

0800231e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800231e:	b580      	push	{r7, lr}
 8002320:	b086      	sub	sp, #24
 8002322:	af00      	add	r7, sp, #0
 8002324:	4603      	mov	r3, r0
 8002326:	60b9      	str	r1, [r7, #8]
 8002328:	607a      	str	r2, [r7, #4]
 800232a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800232c:	2300      	movs	r3, #0
 800232e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002330:	f7ff ff46 	bl	80021c0 <__NVIC_GetPriorityGrouping>
 8002334:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002336:	687a      	ldr	r2, [r7, #4]
 8002338:	68b9      	ldr	r1, [r7, #8]
 800233a:	6978      	ldr	r0, [r7, #20]
 800233c:	f7ff ff78 	bl	8002230 <NVIC_EncodePriority>
 8002340:	4602      	mov	r2, r0
 8002342:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002346:	4611      	mov	r1, r2
 8002348:	4618      	mov	r0, r3
 800234a:	f7ff ff47 	bl	80021dc <__NVIC_SetPriority>
}
 800234e:	bf00      	nop
 8002350:	3718      	adds	r7, #24
 8002352:	46bd      	mov	sp, r7
 8002354:	bd80      	pop	{r7, pc}

08002356 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8002356:	b580      	push	{r7, lr}
 8002358:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 800235a:	f7ff ff9d 	bl	8002298 <__NVIC_SystemReset>

0800235e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800235e:	b580      	push	{r7, lr}
 8002360:	b082      	sub	sp, #8
 8002362:	af00      	add	r7, sp, #0
 8002364:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002366:	6878      	ldr	r0, [r7, #4]
 8002368:	f7ff ffac 	bl	80022c4 <SysTick_Config>
 800236c:	4603      	mov	r3, r0
}
 800236e:	4618      	mov	r0, r3
 8002370:	3708      	adds	r7, #8
 8002372:	46bd      	mov	sp, r7
 8002374:	bd80      	pop	{r7, pc}
	...

08002378 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b086      	sub	sp, #24
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002380:	2300      	movs	r3, #0
 8002382:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002384:	f7ff faa6 	bl	80018d4 <HAL_GetTick>
 8002388:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	2b00      	cmp	r3, #0
 800238e:	d101      	bne.n	8002394 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002390:	2301      	movs	r3, #1
 8002392:	e099      	b.n	80024c8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	2200      	movs	r2, #0
 8002398:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	2202      	movs	r2, #2
 80023a0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	681a      	ldr	r2, [r3, #0]
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f022 0201 	bic.w	r2, r2, #1
 80023b2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80023b4:	e00f      	b.n	80023d6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80023b6:	f7ff fa8d 	bl	80018d4 <HAL_GetTick>
 80023ba:	4602      	mov	r2, r0
 80023bc:	693b      	ldr	r3, [r7, #16]
 80023be:	1ad3      	subs	r3, r2, r3
 80023c0:	2b05      	cmp	r3, #5
 80023c2:	d908      	bls.n	80023d6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	2220      	movs	r2, #32
 80023c8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	2203      	movs	r2, #3
 80023ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80023d2:	2303      	movs	r3, #3
 80023d4:	e078      	b.n	80024c8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f003 0301 	and.w	r3, r3, #1
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d1e8      	bne.n	80023b6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80023ec:	697a      	ldr	r2, [r7, #20]
 80023ee:	4b38      	ldr	r3, [pc, #224]	; (80024d0 <HAL_DMA_Init+0x158>)
 80023f0:	4013      	ands	r3, r2
 80023f2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	685a      	ldr	r2, [r3, #4]
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	689b      	ldr	r3, [r3, #8]
 80023fc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002402:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	691b      	ldr	r3, [r3, #16]
 8002408:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800240e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	699b      	ldr	r3, [r3, #24]
 8002414:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800241a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	6a1b      	ldr	r3, [r3, #32]
 8002420:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002422:	697a      	ldr	r2, [r7, #20]
 8002424:	4313      	orrs	r3, r2
 8002426:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800242c:	2b04      	cmp	r3, #4
 800242e:	d107      	bne.n	8002440 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002438:	4313      	orrs	r3, r2
 800243a:	697a      	ldr	r2, [r7, #20]
 800243c:	4313      	orrs	r3, r2
 800243e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	697a      	ldr	r2, [r7, #20]
 8002446:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	695b      	ldr	r3, [r3, #20]
 800244e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002450:	697b      	ldr	r3, [r7, #20]
 8002452:	f023 0307 	bic.w	r3, r3, #7
 8002456:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800245c:	697a      	ldr	r2, [r7, #20]
 800245e:	4313      	orrs	r3, r2
 8002460:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002466:	2b04      	cmp	r3, #4
 8002468:	d117      	bne.n	800249a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800246e:	697a      	ldr	r2, [r7, #20]
 8002470:	4313      	orrs	r3, r2
 8002472:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002478:	2b00      	cmp	r3, #0
 800247a:	d00e      	beq.n	800249a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800247c:	6878      	ldr	r0, [r7, #4]
 800247e:	f000 f8ed 	bl	800265c <DMA_CheckFifoParam>
 8002482:	4603      	mov	r3, r0
 8002484:	2b00      	cmp	r3, #0
 8002486:	d008      	beq.n	800249a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	2240      	movs	r2, #64	; 0x40
 800248c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	2201      	movs	r2, #1
 8002492:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002496:	2301      	movs	r3, #1
 8002498:	e016      	b.n	80024c8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	697a      	ldr	r2, [r7, #20]
 80024a0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80024a2:	6878      	ldr	r0, [r7, #4]
 80024a4:	f000 f8a4 	bl	80025f0 <DMA_CalcBaseAndBitshift>
 80024a8:	4603      	mov	r3, r0
 80024aa:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024b0:	223f      	movs	r2, #63	; 0x3f
 80024b2:	409a      	lsls	r2, r3
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	2200      	movs	r2, #0
 80024bc:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	2201      	movs	r2, #1
 80024c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80024c6:	2300      	movs	r3, #0
}
 80024c8:	4618      	mov	r0, r3
 80024ca:	3718      	adds	r7, #24
 80024cc:	46bd      	mov	sp, r7
 80024ce:	bd80      	pop	{r7, pc}
 80024d0:	f010803f 	.word	0xf010803f

080024d4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b086      	sub	sp, #24
 80024d8:	af00      	add	r7, sp, #0
 80024da:	60f8      	str	r0, [r7, #12]
 80024dc:	60b9      	str	r1, [r7, #8]
 80024de:	607a      	str	r2, [r7, #4]
 80024e0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80024e2:	2300      	movs	r3, #0
 80024e4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024ea:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80024f2:	2b01      	cmp	r3, #1
 80024f4:	d101      	bne.n	80024fa <HAL_DMA_Start_IT+0x26>
 80024f6:	2302      	movs	r3, #2
 80024f8:	e048      	b.n	800258c <HAL_DMA_Start_IT+0xb8>
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	2201      	movs	r2, #1
 80024fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002508:	b2db      	uxtb	r3, r3
 800250a:	2b01      	cmp	r3, #1
 800250c:	d137      	bne.n	800257e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	2202      	movs	r2, #2
 8002512:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	2200      	movs	r2, #0
 800251a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	687a      	ldr	r2, [r7, #4]
 8002520:	68b9      	ldr	r1, [r7, #8]
 8002522:	68f8      	ldr	r0, [r7, #12]
 8002524:	f000 f836 	bl	8002594 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800252c:	223f      	movs	r2, #63	; 0x3f
 800252e:	409a      	lsls	r2, r3
 8002530:	693b      	ldr	r3, [r7, #16]
 8002532:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	681a      	ldr	r2, [r3, #0]
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f042 0216 	orr.w	r2, r2, #22
 8002542:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	695a      	ldr	r2, [r3, #20]
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002552:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002558:	2b00      	cmp	r3, #0
 800255a:	d007      	beq.n	800256c <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	681a      	ldr	r2, [r3, #0]
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f042 0208 	orr.w	r2, r2, #8
 800256a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	681a      	ldr	r2, [r3, #0]
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f042 0201 	orr.w	r2, r2, #1
 800257a:	601a      	str	r2, [r3, #0]
 800257c:	e005      	b.n	800258a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	2200      	movs	r2, #0
 8002582:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002586:	2302      	movs	r3, #2
 8002588:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800258a:	7dfb      	ldrb	r3, [r7, #23]
}
 800258c:	4618      	mov	r0, r3
 800258e:	3718      	adds	r7, #24
 8002590:	46bd      	mov	sp, r7
 8002592:	bd80      	pop	{r7, pc}

08002594 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002594:	b480      	push	{r7}
 8002596:	b085      	sub	sp, #20
 8002598:	af00      	add	r7, sp, #0
 800259a:	60f8      	str	r0, [r7, #12]
 800259c:	60b9      	str	r1, [r7, #8]
 800259e:	607a      	str	r2, [r7, #4]
 80025a0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	681a      	ldr	r2, [r3, #0]
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80025b0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	683a      	ldr	r2, [r7, #0]
 80025b8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	689b      	ldr	r3, [r3, #8]
 80025be:	2b40      	cmp	r3, #64	; 0x40
 80025c0:	d108      	bne.n	80025d4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	687a      	ldr	r2, [r7, #4]
 80025c8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	68ba      	ldr	r2, [r7, #8]
 80025d0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80025d2:	e007      	b.n	80025e4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	68ba      	ldr	r2, [r7, #8]
 80025da:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	687a      	ldr	r2, [r7, #4]
 80025e2:	60da      	str	r2, [r3, #12]
}
 80025e4:	bf00      	nop
 80025e6:	3714      	adds	r7, #20
 80025e8:	46bd      	mov	sp, r7
 80025ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ee:	4770      	bx	lr

080025f0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80025f0:	b480      	push	{r7}
 80025f2:	b085      	sub	sp, #20
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	b2db      	uxtb	r3, r3
 80025fe:	3b10      	subs	r3, #16
 8002600:	4a13      	ldr	r2, [pc, #76]	; (8002650 <DMA_CalcBaseAndBitshift+0x60>)
 8002602:	fba2 2303 	umull	r2, r3, r2, r3
 8002606:	091b      	lsrs	r3, r3, #4
 8002608:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800260a:	4a12      	ldr	r2, [pc, #72]	; (8002654 <DMA_CalcBaseAndBitshift+0x64>)
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	4413      	add	r3, r2
 8002610:	781b      	ldrb	r3, [r3, #0]
 8002612:	461a      	mov	r2, r3
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	2b03      	cmp	r3, #3
 800261c:	d908      	bls.n	8002630 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	461a      	mov	r2, r3
 8002624:	4b0c      	ldr	r3, [pc, #48]	; (8002658 <DMA_CalcBaseAndBitshift+0x68>)
 8002626:	4013      	ands	r3, r2
 8002628:	1d1a      	adds	r2, r3, #4
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	659a      	str	r2, [r3, #88]	; 0x58
 800262e:	e006      	b.n	800263e <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	461a      	mov	r2, r3
 8002636:	4b08      	ldr	r3, [pc, #32]	; (8002658 <DMA_CalcBaseAndBitshift+0x68>)
 8002638:	4013      	ands	r3, r2
 800263a:	687a      	ldr	r2, [r7, #4]
 800263c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002642:	4618      	mov	r0, r3
 8002644:	3714      	adds	r7, #20
 8002646:	46bd      	mov	sp, r7
 8002648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264c:	4770      	bx	lr
 800264e:	bf00      	nop
 8002650:	aaaaaaab 	.word	0xaaaaaaab
 8002654:	0801b070 	.word	0x0801b070
 8002658:	fffffc00 	.word	0xfffffc00

0800265c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800265c:	b480      	push	{r7}
 800265e:	b085      	sub	sp, #20
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002664:	2300      	movs	r3, #0
 8002666:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800266c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	699b      	ldr	r3, [r3, #24]
 8002672:	2b00      	cmp	r3, #0
 8002674:	d11f      	bne.n	80026b6 <DMA_CheckFifoParam+0x5a>
 8002676:	68bb      	ldr	r3, [r7, #8]
 8002678:	2b03      	cmp	r3, #3
 800267a:	d856      	bhi.n	800272a <DMA_CheckFifoParam+0xce>
 800267c:	a201      	add	r2, pc, #4	; (adr r2, 8002684 <DMA_CheckFifoParam+0x28>)
 800267e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002682:	bf00      	nop
 8002684:	08002695 	.word	0x08002695
 8002688:	080026a7 	.word	0x080026a7
 800268c:	08002695 	.word	0x08002695
 8002690:	0800272b 	.word	0x0800272b
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002698:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800269c:	2b00      	cmp	r3, #0
 800269e:	d046      	beq.n	800272e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80026a0:	2301      	movs	r3, #1
 80026a2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80026a4:	e043      	b.n	800272e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026aa:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80026ae:	d140      	bne.n	8002732 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80026b0:	2301      	movs	r3, #1
 80026b2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80026b4:	e03d      	b.n	8002732 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	699b      	ldr	r3, [r3, #24]
 80026ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80026be:	d121      	bne.n	8002704 <DMA_CheckFifoParam+0xa8>
 80026c0:	68bb      	ldr	r3, [r7, #8]
 80026c2:	2b03      	cmp	r3, #3
 80026c4:	d837      	bhi.n	8002736 <DMA_CheckFifoParam+0xda>
 80026c6:	a201      	add	r2, pc, #4	; (adr r2, 80026cc <DMA_CheckFifoParam+0x70>)
 80026c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026cc:	080026dd 	.word	0x080026dd
 80026d0:	080026e3 	.word	0x080026e3
 80026d4:	080026dd 	.word	0x080026dd
 80026d8:	080026f5 	.word	0x080026f5
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80026dc:	2301      	movs	r3, #1
 80026de:	73fb      	strb	r3, [r7, #15]
      break;
 80026e0:	e030      	b.n	8002744 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026e6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d025      	beq.n	800273a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80026ee:	2301      	movs	r3, #1
 80026f0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80026f2:	e022      	b.n	800273a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026f8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80026fc:	d11f      	bne.n	800273e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80026fe:	2301      	movs	r3, #1
 8002700:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002702:	e01c      	b.n	800273e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002704:	68bb      	ldr	r3, [r7, #8]
 8002706:	2b02      	cmp	r3, #2
 8002708:	d903      	bls.n	8002712 <DMA_CheckFifoParam+0xb6>
 800270a:	68bb      	ldr	r3, [r7, #8]
 800270c:	2b03      	cmp	r3, #3
 800270e:	d003      	beq.n	8002718 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002710:	e018      	b.n	8002744 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002712:	2301      	movs	r3, #1
 8002714:	73fb      	strb	r3, [r7, #15]
      break;
 8002716:	e015      	b.n	8002744 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800271c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002720:	2b00      	cmp	r3, #0
 8002722:	d00e      	beq.n	8002742 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002724:	2301      	movs	r3, #1
 8002726:	73fb      	strb	r3, [r7, #15]
      break;
 8002728:	e00b      	b.n	8002742 <DMA_CheckFifoParam+0xe6>
      break;
 800272a:	bf00      	nop
 800272c:	e00a      	b.n	8002744 <DMA_CheckFifoParam+0xe8>
      break;
 800272e:	bf00      	nop
 8002730:	e008      	b.n	8002744 <DMA_CheckFifoParam+0xe8>
      break;
 8002732:	bf00      	nop
 8002734:	e006      	b.n	8002744 <DMA_CheckFifoParam+0xe8>
      break;
 8002736:	bf00      	nop
 8002738:	e004      	b.n	8002744 <DMA_CheckFifoParam+0xe8>
      break;
 800273a:	bf00      	nop
 800273c:	e002      	b.n	8002744 <DMA_CheckFifoParam+0xe8>
      break;   
 800273e:	bf00      	nop
 8002740:	e000      	b.n	8002744 <DMA_CheckFifoParam+0xe8>
      break;
 8002742:	bf00      	nop
    }
  } 
  
  return status; 
 8002744:	7bfb      	ldrb	r3, [r7, #15]
}
 8002746:	4618      	mov	r0, r3
 8002748:	3714      	adds	r7, #20
 800274a:	46bd      	mov	sp, r7
 800274c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002750:	4770      	bx	lr
 8002752:	bf00      	nop

08002754 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002754:	b480      	push	{r7}
 8002756:	b089      	sub	sp, #36	; 0x24
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
 800275c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800275e:	2300      	movs	r3, #0
 8002760:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002762:	2300      	movs	r3, #0
 8002764:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002766:	2300      	movs	r3, #0
 8002768:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800276a:	2300      	movs	r3, #0
 800276c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800276e:	2300      	movs	r3, #0
 8002770:	61fb      	str	r3, [r7, #28]
 8002772:	e175      	b.n	8002a60 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002774:	2201      	movs	r2, #1
 8002776:	69fb      	ldr	r3, [r7, #28]
 8002778:	fa02 f303 	lsl.w	r3, r2, r3
 800277c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800277e:	683b      	ldr	r3, [r7, #0]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	697a      	ldr	r2, [r7, #20]
 8002784:	4013      	ands	r3, r2
 8002786:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002788:	693a      	ldr	r2, [r7, #16]
 800278a:	697b      	ldr	r3, [r7, #20]
 800278c:	429a      	cmp	r2, r3
 800278e:	f040 8164 	bne.w	8002a5a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002792:	683b      	ldr	r3, [r7, #0]
 8002794:	685b      	ldr	r3, [r3, #4]
 8002796:	2b01      	cmp	r3, #1
 8002798:	d00b      	beq.n	80027b2 <HAL_GPIO_Init+0x5e>
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	685b      	ldr	r3, [r3, #4]
 800279e:	2b02      	cmp	r3, #2
 80027a0:	d007      	beq.n	80027b2 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80027a2:	683b      	ldr	r3, [r7, #0]
 80027a4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80027a6:	2b11      	cmp	r3, #17
 80027a8:	d003      	beq.n	80027b2 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80027aa:	683b      	ldr	r3, [r7, #0]
 80027ac:	685b      	ldr	r3, [r3, #4]
 80027ae:	2b12      	cmp	r3, #18
 80027b0:	d130      	bne.n	8002814 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	689b      	ldr	r3, [r3, #8]
 80027b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80027b8:	69fb      	ldr	r3, [r7, #28]
 80027ba:	005b      	lsls	r3, r3, #1
 80027bc:	2203      	movs	r2, #3
 80027be:	fa02 f303 	lsl.w	r3, r2, r3
 80027c2:	43db      	mvns	r3, r3
 80027c4:	69ba      	ldr	r2, [r7, #24]
 80027c6:	4013      	ands	r3, r2
 80027c8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80027ca:	683b      	ldr	r3, [r7, #0]
 80027cc:	68da      	ldr	r2, [r3, #12]
 80027ce:	69fb      	ldr	r3, [r7, #28]
 80027d0:	005b      	lsls	r3, r3, #1
 80027d2:	fa02 f303 	lsl.w	r3, r2, r3
 80027d6:	69ba      	ldr	r2, [r7, #24]
 80027d8:	4313      	orrs	r3, r2
 80027da:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	69ba      	ldr	r2, [r7, #24]
 80027e0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	685b      	ldr	r3, [r3, #4]
 80027e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80027e8:	2201      	movs	r2, #1
 80027ea:	69fb      	ldr	r3, [r7, #28]
 80027ec:	fa02 f303 	lsl.w	r3, r2, r3
 80027f0:	43db      	mvns	r3, r3
 80027f2:	69ba      	ldr	r2, [r7, #24]
 80027f4:	4013      	ands	r3, r2
 80027f6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	685b      	ldr	r3, [r3, #4]
 80027fc:	091b      	lsrs	r3, r3, #4
 80027fe:	f003 0201 	and.w	r2, r3, #1
 8002802:	69fb      	ldr	r3, [r7, #28]
 8002804:	fa02 f303 	lsl.w	r3, r2, r3
 8002808:	69ba      	ldr	r2, [r7, #24]
 800280a:	4313      	orrs	r3, r2
 800280c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	69ba      	ldr	r2, [r7, #24]
 8002812:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	68db      	ldr	r3, [r3, #12]
 8002818:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800281a:	69fb      	ldr	r3, [r7, #28]
 800281c:	005b      	lsls	r3, r3, #1
 800281e:	2203      	movs	r2, #3
 8002820:	fa02 f303 	lsl.w	r3, r2, r3
 8002824:	43db      	mvns	r3, r3
 8002826:	69ba      	ldr	r2, [r7, #24]
 8002828:	4013      	ands	r3, r2
 800282a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	689a      	ldr	r2, [r3, #8]
 8002830:	69fb      	ldr	r3, [r7, #28]
 8002832:	005b      	lsls	r3, r3, #1
 8002834:	fa02 f303 	lsl.w	r3, r2, r3
 8002838:	69ba      	ldr	r2, [r7, #24]
 800283a:	4313      	orrs	r3, r2
 800283c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	69ba      	ldr	r2, [r7, #24]
 8002842:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	685b      	ldr	r3, [r3, #4]
 8002848:	2b02      	cmp	r3, #2
 800284a:	d003      	beq.n	8002854 <HAL_GPIO_Init+0x100>
 800284c:	683b      	ldr	r3, [r7, #0]
 800284e:	685b      	ldr	r3, [r3, #4]
 8002850:	2b12      	cmp	r3, #18
 8002852:	d123      	bne.n	800289c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002854:	69fb      	ldr	r3, [r7, #28]
 8002856:	08da      	lsrs	r2, r3, #3
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	3208      	adds	r2, #8
 800285c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002860:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002862:	69fb      	ldr	r3, [r7, #28]
 8002864:	f003 0307 	and.w	r3, r3, #7
 8002868:	009b      	lsls	r3, r3, #2
 800286a:	220f      	movs	r2, #15
 800286c:	fa02 f303 	lsl.w	r3, r2, r3
 8002870:	43db      	mvns	r3, r3
 8002872:	69ba      	ldr	r2, [r7, #24]
 8002874:	4013      	ands	r3, r2
 8002876:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	691a      	ldr	r2, [r3, #16]
 800287c:	69fb      	ldr	r3, [r7, #28]
 800287e:	f003 0307 	and.w	r3, r3, #7
 8002882:	009b      	lsls	r3, r3, #2
 8002884:	fa02 f303 	lsl.w	r3, r2, r3
 8002888:	69ba      	ldr	r2, [r7, #24]
 800288a:	4313      	orrs	r3, r2
 800288c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800288e:	69fb      	ldr	r3, [r7, #28]
 8002890:	08da      	lsrs	r2, r3, #3
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	3208      	adds	r2, #8
 8002896:	69b9      	ldr	r1, [r7, #24]
 8002898:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80028a2:	69fb      	ldr	r3, [r7, #28]
 80028a4:	005b      	lsls	r3, r3, #1
 80028a6:	2203      	movs	r2, #3
 80028a8:	fa02 f303 	lsl.w	r3, r2, r3
 80028ac:	43db      	mvns	r3, r3
 80028ae:	69ba      	ldr	r2, [r7, #24]
 80028b0:	4013      	ands	r3, r2
 80028b2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	685b      	ldr	r3, [r3, #4]
 80028b8:	f003 0203 	and.w	r2, r3, #3
 80028bc:	69fb      	ldr	r3, [r7, #28]
 80028be:	005b      	lsls	r3, r3, #1
 80028c0:	fa02 f303 	lsl.w	r3, r2, r3
 80028c4:	69ba      	ldr	r2, [r7, #24]
 80028c6:	4313      	orrs	r3, r2
 80028c8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	69ba      	ldr	r2, [r7, #24]
 80028ce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	685b      	ldr	r3, [r3, #4]
 80028d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028d8:	2b00      	cmp	r3, #0
 80028da:	f000 80be 	beq.w	8002a5a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80028de:	4b66      	ldr	r3, [pc, #408]	; (8002a78 <HAL_GPIO_Init+0x324>)
 80028e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028e2:	4a65      	ldr	r2, [pc, #404]	; (8002a78 <HAL_GPIO_Init+0x324>)
 80028e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80028e8:	6453      	str	r3, [r2, #68]	; 0x44
 80028ea:	4b63      	ldr	r3, [pc, #396]	; (8002a78 <HAL_GPIO_Init+0x324>)
 80028ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80028f2:	60fb      	str	r3, [r7, #12]
 80028f4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80028f6:	4a61      	ldr	r2, [pc, #388]	; (8002a7c <HAL_GPIO_Init+0x328>)
 80028f8:	69fb      	ldr	r3, [r7, #28]
 80028fa:	089b      	lsrs	r3, r3, #2
 80028fc:	3302      	adds	r3, #2
 80028fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002902:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002904:	69fb      	ldr	r3, [r7, #28]
 8002906:	f003 0303 	and.w	r3, r3, #3
 800290a:	009b      	lsls	r3, r3, #2
 800290c:	220f      	movs	r2, #15
 800290e:	fa02 f303 	lsl.w	r3, r2, r3
 8002912:	43db      	mvns	r3, r3
 8002914:	69ba      	ldr	r2, [r7, #24]
 8002916:	4013      	ands	r3, r2
 8002918:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	4a58      	ldr	r2, [pc, #352]	; (8002a80 <HAL_GPIO_Init+0x32c>)
 800291e:	4293      	cmp	r3, r2
 8002920:	d037      	beq.n	8002992 <HAL_GPIO_Init+0x23e>
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	4a57      	ldr	r2, [pc, #348]	; (8002a84 <HAL_GPIO_Init+0x330>)
 8002926:	4293      	cmp	r3, r2
 8002928:	d031      	beq.n	800298e <HAL_GPIO_Init+0x23a>
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	4a56      	ldr	r2, [pc, #344]	; (8002a88 <HAL_GPIO_Init+0x334>)
 800292e:	4293      	cmp	r3, r2
 8002930:	d02b      	beq.n	800298a <HAL_GPIO_Init+0x236>
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	4a55      	ldr	r2, [pc, #340]	; (8002a8c <HAL_GPIO_Init+0x338>)
 8002936:	4293      	cmp	r3, r2
 8002938:	d025      	beq.n	8002986 <HAL_GPIO_Init+0x232>
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	4a54      	ldr	r2, [pc, #336]	; (8002a90 <HAL_GPIO_Init+0x33c>)
 800293e:	4293      	cmp	r3, r2
 8002940:	d01f      	beq.n	8002982 <HAL_GPIO_Init+0x22e>
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	4a53      	ldr	r2, [pc, #332]	; (8002a94 <HAL_GPIO_Init+0x340>)
 8002946:	4293      	cmp	r3, r2
 8002948:	d019      	beq.n	800297e <HAL_GPIO_Init+0x22a>
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	4a52      	ldr	r2, [pc, #328]	; (8002a98 <HAL_GPIO_Init+0x344>)
 800294e:	4293      	cmp	r3, r2
 8002950:	d013      	beq.n	800297a <HAL_GPIO_Init+0x226>
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	4a51      	ldr	r2, [pc, #324]	; (8002a9c <HAL_GPIO_Init+0x348>)
 8002956:	4293      	cmp	r3, r2
 8002958:	d00d      	beq.n	8002976 <HAL_GPIO_Init+0x222>
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	4a50      	ldr	r2, [pc, #320]	; (8002aa0 <HAL_GPIO_Init+0x34c>)
 800295e:	4293      	cmp	r3, r2
 8002960:	d007      	beq.n	8002972 <HAL_GPIO_Init+0x21e>
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	4a4f      	ldr	r2, [pc, #316]	; (8002aa4 <HAL_GPIO_Init+0x350>)
 8002966:	4293      	cmp	r3, r2
 8002968:	d101      	bne.n	800296e <HAL_GPIO_Init+0x21a>
 800296a:	2309      	movs	r3, #9
 800296c:	e012      	b.n	8002994 <HAL_GPIO_Init+0x240>
 800296e:	230a      	movs	r3, #10
 8002970:	e010      	b.n	8002994 <HAL_GPIO_Init+0x240>
 8002972:	2308      	movs	r3, #8
 8002974:	e00e      	b.n	8002994 <HAL_GPIO_Init+0x240>
 8002976:	2307      	movs	r3, #7
 8002978:	e00c      	b.n	8002994 <HAL_GPIO_Init+0x240>
 800297a:	2306      	movs	r3, #6
 800297c:	e00a      	b.n	8002994 <HAL_GPIO_Init+0x240>
 800297e:	2305      	movs	r3, #5
 8002980:	e008      	b.n	8002994 <HAL_GPIO_Init+0x240>
 8002982:	2304      	movs	r3, #4
 8002984:	e006      	b.n	8002994 <HAL_GPIO_Init+0x240>
 8002986:	2303      	movs	r3, #3
 8002988:	e004      	b.n	8002994 <HAL_GPIO_Init+0x240>
 800298a:	2302      	movs	r3, #2
 800298c:	e002      	b.n	8002994 <HAL_GPIO_Init+0x240>
 800298e:	2301      	movs	r3, #1
 8002990:	e000      	b.n	8002994 <HAL_GPIO_Init+0x240>
 8002992:	2300      	movs	r3, #0
 8002994:	69fa      	ldr	r2, [r7, #28]
 8002996:	f002 0203 	and.w	r2, r2, #3
 800299a:	0092      	lsls	r2, r2, #2
 800299c:	4093      	lsls	r3, r2
 800299e:	69ba      	ldr	r2, [r7, #24]
 80029a0:	4313      	orrs	r3, r2
 80029a2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80029a4:	4935      	ldr	r1, [pc, #212]	; (8002a7c <HAL_GPIO_Init+0x328>)
 80029a6:	69fb      	ldr	r3, [r7, #28]
 80029a8:	089b      	lsrs	r3, r3, #2
 80029aa:	3302      	adds	r3, #2
 80029ac:	69ba      	ldr	r2, [r7, #24]
 80029ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80029b2:	4b3d      	ldr	r3, [pc, #244]	; (8002aa8 <HAL_GPIO_Init+0x354>)
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029b8:	693b      	ldr	r3, [r7, #16]
 80029ba:	43db      	mvns	r3, r3
 80029bc:	69ba      	ldr	r2, [r7, #24]
 80029be:	4013      	ands	r3, r2
 80029c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80029c2:	683b      	ldr	r3, [r7, #0]
 80029c4:	685b      	ldr	r3, [r3, #4]
 80029c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d003      	beq.n	80029d6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80029ce:	69ba      	ldr	r2, [r7, #24]
 80029d0:	693b      	ldr	r3, [r7, #16]
 80029d2:	4313      	orrs	r3, r2
 80029d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80029d6:	4a34      	ldr	r2, [pc, #208]	; (8002aa8 <HAL_GPIO_Init+0x354>)
 80029d8:	69bb      	ldr	r3, [r7, #24]
 80029da:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80029dc:	4b32      	ldr	r3, [pc, #200]	; (8002aa8 <HAL_GPIO_Init+0x354>)
 80029de:	685b      	ldr	r3, [r3, #4]
 80029e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029e2:	693b      	ldr	r3, [r7, #16]
 80029e4:	43db      	mvns	r3, r3
 80029e6:	69ba      	ldr	r2, [r7, #24]
 80029e8:	4013      	ands	r3, r2
 80029ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	685b      	ldr	r3, [r3, #4]
 80029f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d003      	beq.n	8002a00 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80029f8:	69ba      	ldr	r2, [r7, #24]
 80029fa:	693b      	ldr	r3, [r7, #16]
 80029fc:	4313      	orrs	r3, r2
 80029fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002a00:	4a29      	ldr	r2, [pc, #164]	; (8002aa8 <HAL_GPIO_Init+0x354>)
 8002a02:	69bb      	ldr	r3, [r7, #24]
 8002a04:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002a06:	4b28      	ldr	r3, [pc, #160]	; (8002aa8 <HAL_GPIO_Init+0x354>)
 8002a08:	689b      	ldr	r3, [r3, #8]
 8002a0a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a0c:	693b      	ldr	r3, [r7, #16]
 8002a0e:	43db      	mvns	r3, r3
 8002a10:	69ba      	ldr	r2, [r7, #24]
 8002a12:	4013      	ands	r3, r2
 8002a14:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002a16:	683b      	ldr	r3, [r7, #0]
 8002a18:	685b      	ldr	r3, [r3, #4]
 8002a1a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d003      	beq.n	8002a2a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002a22:	69ba      	ldr	r2, [r7, #24]
 8002a24:	693b      	ldr	r3, [r7, #16]
 8002a26:	4313      	orrs	r3, r2
 8002a28:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002a2a:	4a1f      	ldr	r2, [pc, #124]	; (8002aa8 <HAL_GPIO_Init+0x354>)
 8002a2c:	69bb      	ldr	r3, [r7, #24]
 8002a2e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002a30:	4b1d      	ldr	r3, [pc, #116]	; (8002aa8 <HAL_GPIO_Init+0x354>)
 8002a32:	68db      	ldr	r3, [r3, #12]
 8002a34:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a36:	693b      	ldr	r3, [r7, #16]
 8002a38:	43db      	mvns	r3, r3
 8002a3a:	69ba      	ldr	r2, [r7, #24]
 8002a3c:	4013      	ands	r3, r2
 8002a3e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002a40:	683b      	ldr	r3, [r7, #0]
 8002a42:	685b      	ldr	r3, [r3, #4]
 8002a44:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d003      	beq.n	8002a54 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002a4c:	69ba      	ldr	r2, [r7, #24]
 8002a4e:	693b      	ldr	r3, [r7, #16]
 8002a50:	4313      	orrs	r3, r2
 8002a52:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002a54:	4a14      	ldr	r2, [pc, #80]	; (8002aa8 <HAL_GPIO_Init+0x354>)
 8002a56:	69bb      	ldr	r3, [r7, #24]
 8002a58:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002a5a:	69fb      	ldr	r3, [r7, #28]
 8002a5c:	3301      	adds	r3, #1
 8002a5e:	61fb      	str	r3, [r7, #28]
 8002a60:	69fb      	ldr	r3, [r7, #28]
 8002a62:	2b0f      	cmp	r3, #15
 8002a64:	f67f ae86 	bls.w	8002774 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002a68:	bf00      	nop
 8002a6a:	bf00      	nop
 8002a6c:	3724      	adds	r7, #36	; 0x24
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a74:	4770      	bx	lr
 8002a76:	bf00      	nop
 8002a78:	40023800 	.word	0x40023800
 8002a7c:	40013800 	.word	0x40013800
 8002a80:	40020000 	.word	0x40020000
 8002a84:	40020400 	.word	0x40020400
 8002a88:	40020800 	.word	0x40020800
 8002a8c:	40020c00 	.word	0x40020c00
 8002a90:	40021000 	.word	0x40021000
 8002a94:	40021400 	.word	0x40021400
 8002a98:	40021800 	.word	0x40021800
 8002a9c:	40021c00 	.word	0x40021c00
 8002aa0:	40022000 	.word	0x40022000
 8002aa4:	40022400 	.word	0x40022400
 8002aa8:	40013c00 	.word	0x40013c00

08002aac <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002aac:	b480      	push	{r7}
 8002aae:	b085      	sub	sp, #20
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
 8002ab4:	460b      	mov	r3, r1
 8002ab6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	691a      	ldr	r2, [r3, #16]
 8002abc:	887b      	ldrh	r3, [r7, #2]
 8002abe:	4013      	ands	r3, r2
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d002      	beq.n	8002aca <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002ac4:	2301      	movs	r3, #1
 8002ac6:	73fb      	strb	r3, [r7, #15]
 8002ac8:	e001      	b.n	8002ace <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002aca:	2300      	movs	r3, #0
 8002acc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002ace:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	3714      	adds	r7, #20
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ada:	4770      	bx	lr

08002adc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002adc:	b480      	push	{r7}
 8002ade:	b083      	sub	sp, #12
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
 8002ae4:	460b      	mov	r3, r1
 8002ae6:	807b      	strh	r3, [r7, #2]
 8002ae8:	4613      	mov	r3, r2
 8002aea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002aec:	787b      	ldrb	r3, [r7, #1]
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d003      	beq.n	8002afa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002af2:	887a      	ldrh	r2, [r7, #2]
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002af8:	e003      	b.n	8002b02 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002afa:	887b      	ldrh	r3, [r7, #2]
 8002afc:	041a      	lsls	r2, r3, #16
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	619a      	str	r2, [r3, #24]
}
 8002b02:	bf00      	nop
 8002b04:	370c      	adds	r7, #12
 8002b06:	46bd      	mov	sp, r7
 8002b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0c:	4770      	bx	lr

08002b0e <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002b0e:	b480      	push	{r7}
 8002b10:	b085      	sub	sp, #20
 8002b12:	af00      	add	r7, sp, #0
 8002b14:	6078      	str	r0, [r7, #4]
 8002b16:	460b      	mov	r3, r1
 8002b18:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	695b      	ldr	r3, [r3, #20]
 8002b1e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002b20:	887a      	ldrh	r2, [r7, #2]
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	4013      	ands	r3, r2
 8002b26:	041a      	lsls	r2, r3, #16
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	43d9      	mvns	r1, r3
 8002b2c:	887b      	ldrh	r3, [r7, #2]
 8002b2e:	400b      	ands	r3, r1
 8002b30:	431a      	orrs	r2, r3
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	619a      	str	r2, [r3, #24]
}
 8002b36:	bf00      	nop
 8002b38:	3714      	adds	r7, #20
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b40:	4770      	bx	lr
	...

08002b44 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	b082      	sub	sp, #8
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d101      	bne.n	8002b56 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002b52:	2301      	movs	r3, #1
 8002b54:	e07f      	b.n	8002c56 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b5c:	b2db      	uxtb	r3, r3
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d106      	bne.n	8002b70 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	2200      	movs	r2, #0
 8002b66:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002b6a:	6878      	ldr	r0, [r7, #4]
 8002b6c:	f7fe fb06 	bl	800117c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	2224      	movs	r2, #36	; 0x24
 8002b74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	681a      	ldr	r2, [r3, #0]
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f022 0201 	bic.w	r2, r2, #1
 8002b86:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	685a      	ldr	r2, [r3, #4]
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002b94:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	689a      	ldr	r2, [r3, #8]
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002ba4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	68db      	ldr	r3, [r3, #12]
 8002baa:	2b01      	cmp	r3, #1
 8002bac:	d107      	bne.n	8002bbe <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	689a      	ldr	r2, [r3, #8]
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002bba:	609a      	str	r2, [r3, #8]
 8002bbc:	e006      	b.n	8002bcc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	689a      	ldr	r2, [r3, #8]
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002bca:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	68db      	ldr	r3, [r3, #12]
 8002bd0:	2b02      	cmp	r3, #2
 8002bd2:	d104      	bne.n	8002bde <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002bdc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	6859      	ldr	r1, [r3, #4]
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681a      	ldr	r2, [r3, #0]
 8002be8:	4b1d      	ldr	r3, [pc, #116]	; (8002c60 <HAL_I2C_Init+0x11c>)
 8002bea:	430b      	orrs	r3, r1
 8002bec:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	68da      	ldr	r2, [r3, #12]
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002bfc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	691a      	ldr	r2, [r3, #16]
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	695b      	ldr	r3, [r3, #20]
 8002c06:	ea42 0103 	orr.w	r1, r2, r3
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	699b      	ldr	r3, [r3, #24]
 8002c0e:	021a      	lsls	r2, r3, #8
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	430a      	orrs	r2, r1
 8002c16:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	69d9      	ldr	r1, [r3, #28]
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	6a1a      	ldr	r2, [r3, #32]
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	430a      	orrs	r2, r1
 8002c26:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	681a      	ldr	r2, [r3, #0]
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f042 0201 	orr.w	r2, r2, #1
 8002c36:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	2220      	movs	r2, #32
 8002c42:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	2200      	movs	r2, #0
 8002c4a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	2200      	movs	r2, #0
 8002c50:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002c54:	2300      	movs	r3, #0
}
 8002c56:	4618      	mov	r0, r3
 8002c58:	3708      	adds	r7, #8
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	bd80      	pop	{r7, pc}
 8002c5e:	bf00      	nop
 8002c60:	02008000 	.word	0x02008000

08002c64 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b088      	sub	sp, #32
 8002c68:	af02      	add	r7, sp, #8
 8002c6a:	60f8      	str	r0, [r7, #12]
 8002c6c:	4608      	mov	r0, r1
 8002c6e:	4611      	mov	r1, r2
 8002c70:	461a      	mov	r2, r3
 8002c72:	4603      	mov	r3, r0
 8002c74:	817b      	strh	r3, [r7, #10]
 8002c76:	460b      	mov	r3, r1
 8002c78:	813b      	strh	r3, [r7, #8]
 8002c7a:	4613      	mov	r3, r2
 8002c7c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002c84:	b2db      	uxtb	r3, r3
 8002c86:	2b20      	cmp	r3, #32
 8002c88:	f040 80f9 	bne.w	8002e7e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002c8c:	6a3b      	ldr	r3, [r7, #32]
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d002      	beq.n	8002c98 <HAL_I2C_Mem_Write+0x34>
 8002c92:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d105      	bne.n	8002ca4 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002c9e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002ca0:	2301      	movs	r3, #1
 8002ca2:	e0ed      	b.n	8002e80 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002caa:	2b01      	cmp	r3, #1
 8002cac:	d101      	bne.n	8002cb2 <HAL_I2C_Mem_Write+0x4e>
 8002cae:	2302      	movs	r3, #2
 8002cb0:	e0e6      	b.n	8002e80 <HAL_I2C_Mem_Write+0x21c>
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	2201      	movs	r2, #1
 8002cb6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002cba:	f7fe fe0b 	bl	80018d4 <HAL_GetTick>
 8002cbe:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002cc0:	697b      	ldr	r3, [r7, #20]
 8002cc2:	9300      	str	r3, [sp, #0]
 8002cc4:	2319      	movs	r3, #25
 8002cc6:	2201      	movs	r2, #1
 8002cc8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002ccc:	68f8      	ldr	r0, [r7, #12]
 8002cce:	f000 fac3 	bl	8003258 <I2C_WaitOnFlagUntilTimeout>
 8002cd2:	4603      	mov	r3, r0
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d001      	beq.n	8002cdc <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8002cd8:	2301      	movs	r3, #1
 8002cda:	e0d1      	b.n	8002e80 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	2221      	movs	r2, #33	; 0x21
 8002ce0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	2240      	movs	r2, #64	; 0x40
 8002ce8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	2200      	movs	r2, #0
 8002cf0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	6a3a      	ldr	r2, [r7, #32]
 8002cf6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002cfc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	2200      	movs	r2, #0
 8002d02:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002d04:	88f8      	ldrh	r0, [r7, #6]
 8002d06:	893a      	ldrh	r2, [r7, #8]
 8002d08:	8979      	ldrh	r1, [r7, #10]
 8002d0a:	697b      	ldr	r3, [r7, #20]
 8002d0c:	9301      	str	r3, [sp, #4]
 8002d0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d10:	9300      	str	r3, [sp, #0]
 8002d12:	4603      	mov	r3, r0
 8002d14:	68f8      	ldr	r0, [r7, #12]
 8002d16:	f000 f9d3 	bl	80030c0 <I2C_RequestMemoryWrite>
 8002d1a:	4603      	mov	r3, r0
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d005      	beq.n	8002d2c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	2200      	movs	r2, #0
 8002d24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002d28:	2301      	movs	r3, #1
 8002d2a:	e0a9      	b.n	8002e80 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d30:	b29b      	uxth	r3, r3
 8002d32:	2bff      	cmp	r3, #255	; 0xff
 8002d34:	d90e      	bls.n	8002d54 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	22ff      	movs	r2, #255	; 0xff
 8002d3a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d40:	b2da      	uxtb	r2, r3
 8002d42:	8979      	ldrh	r1, [r7, #10]
 8002d44:	2300      	movs	r3, #0
 8002d46:	9300      	str	r3, [sp, #0]
 8002d48:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002d4c:	68f8      	ldr	r0, [r7, #12]
 8002d4e:	f000 fba5 	bl	800349c <I2C_TransferConfig>
 8002d52:	e00f      	b.n	8002d74 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d58:	b29a      	uxth	r2, r3
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d62:	b2da      	uxtb	r2, r3
 8002d64:	8979      	ldrh	r1, [r7, #10]
 8002d66:	2300      	movs	r3, #0
 8002d68:	9300      	str	r3, [sp, #0]
 8002d6a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002d6e:	68f8      	ldr	r0, [r7, #12]
 8002d70:	f000 fb94 	bl	800349c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d74:	697a      	ldr	r2, [r7, #20]
 8002d76:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002d78:	68f8      	ldr	r0, [r7, #12]
 8002d7a:	f000 faad 	bl	80032d8 <I2C_WaitOnTXISFlagUntilTimeout>
 8002d7e:	4603      	mov	r3, r0
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d001      	beq.n	8002d88 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8002d84:	2301      	movs	r3, #1
 8002d86:	e07b      	b.n	8002e80 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d8c:	781a      	ldrb	r2, [r3, #0]
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d98:	1c5a      	adds	r2, r3, #1
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002da2:	b29b      	uxth	r3, r3
 8002da4:	3b01      	subs	r3, #1
 8002da6:	b29a      	uxth	r2, r3
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002db0:	3b01      	subs	r3, #1
 8002db2:	b29a      	uxth	r2, r3
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dbc:	b29b      	uxth	r3, r3
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d034      	beq.n	8002e2c <HAL_I2C_Mem_Write+0x1c8>
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d130      	bne.n	8002e2c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002dca:	697b      	ldr	r3, [r7, #20]
 8002dcc:	9300      	str	r3, [sp, #0]
 8002dce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	2180      	movs	r1, #128	; 0x80
 8002dd4:	68f8      	ldr	r0, [r7, #12]
 8002dd6:	f000 fa3f 	bl	8003258 <I2C_WaitOnFlagUntilTimeout>
 8002dda:	4603      	mov	r3, r0
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d001      	beq.n	8002de4 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8002de0:	2301      	movs	r3, #1
 8002de2:	e04d      	b.n	8002e80 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002de8:	b29b      	uxth	r3, r3
 8002dea:	2bff      	cmp	r3, #255	; 0xff
 8002dec:	d90e      	bls.n	8002e0c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	22ff      	movs	r2, #255	; 0xff
 8002df2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002df8:	b2da      	uxtb	r2, r3
 8002dfa:	8979      	ldrh	r1, [r7, #10]
 8002dfc:	2300      	movs	r3, #0
 8002dfe:	9300      	str	r3, [sp, #0]
 8002e00:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002e04:	68f8      	ldr	r0, [r7, #12]
 8002e06:	f000 fb49 	bl	800349c <I2C_TransferConfig>
 8002e0a:	e00f      	b.n	8002e2c <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e10:	b29a      	uxth	r2, r3
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e1a:	b2da      	uxtb	r2, r3
 8002e1c:	8979      	ldrh	r1, [r7, #10]
 8002e1e:	2300      	movs	r3, #0
 8002e20:	9300      	str	r3, [sp, #0]
 8002e22:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002e26:	68f8      	ldr	r0, [r7, #12]
 8002e28:	f000 fb38 	bl	800349c <I2C_TransferConfig>
        }
      }

    } while (hi2c->XferCount > 0U);
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e30:	b29b      	uxth	r3, r3
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d19e      	bne.n	8002d74 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e36:	697a      	ldr	r2, [r7, #20]
 8002e38:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002e3a:	68f8      	ldr	r0, [r7, #12]
 8002e3c:	f000 fa8c 	bl	8003358 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002e40:	4603      	mov	r3, r0
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d001      	beq.n	8002e4a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8002e46:	2301      	movs	r3, #1
 8002e48:	e01a      	b.n	8002e80 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	2220      	movs	r2, #32
 8002e50:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	6859      	ldr	r1, [r3, #4]
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	681a      	ldr	r2, [r3, #0]
 8002e5c:	4b0a      	ldr	r3, [pc, #40]	; (8002e88 <HAL_I2C_Mem_Write+0x224>)
 8002e5e:	400b      	ands	r3, r1
 8002e60:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	2220      	movs	r2, #32
 8002e66:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	2200      	movs	r2, #0
 8002e76:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	e000      	b.n	8002e80 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8002e7e:	2302      	movs	r3, #2
  }
}
 8002e80:	4618      	mov	r0, r3
 8002e82:	3718      	adds	r7, #24
 8002e84:	46bd      	mov	sp, r7
 8002e86:	bd80      	pop	{r7, pc}
 8002e88:	fe00e800 	.word	0xfe00e800

08002e8c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	b088      	sub	sp, #32
 8002e90:	af02      	add	r7, sp, #8
 8002e92:	60f8      	str	r0, [r7, #12]
 8002e94:	4608      	mov	r0, r1
 8002e96:	4611      	mov	r1, r2
 8002e98:	461a      	mov	r2, r3
 8002e9a:	4603      	mov	r3, r0
 8002e9c:	817b      	strh	r3, [r7, #10]
 8002e9e:	460b      	mov	r3, r1
 8002ea0:	813b      	strh	r3, [r7, #8]
 8002ea2:	4613      	mov	r3, r2
 8002ea4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002eac:	b2db      	uxtb	r3, r3
 8002eae:	2b20      	cmp	r3, #32
 8002eb0:	f040 80fd 	bne.w	80030ae <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8002eb4:	6a3b      	ldr	r3, [r7, #32]
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d002      	beq.n	8002ec0 <HAL_I2C_Mem_Read+0x34>
 8002eba:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d105      	bne.n	8002ecc <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002ec6:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002ec8:	2301      	movs	r3, #1
 8002eca:	e0f1      	b.n	80030b0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002ed2:	2b01      	cmp	r3, #1
 8002ed4:	d101      	bne.n	8002eda <HAL_I2C_Mem_Read+0x4e>
 8002ed6:	2302      	movs	r3, #2
 8002ed8:	e0ea      	b.n	80030b0 <HAL_I2C_Mem_Read+0x224>
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	2201      	movs	r2, #1
 8002ede:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002ee2:	f7fe fcf7 	bl	80018d4 <HAL_GetTick>
 8002ee6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002ee8:	697b      	ldr	r3, [r7, #20]
 8002eea:	9300      	str	r3, [sp, #0]
 8002eec:	2319      	movs	r3, #25
 8002eee:	2201      	movs	r2, #1
 8002ef0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002ef4:	68f8      	ldr	r0, [r7, #12]
 8002ef6:	f000 f9af 	bl	8003258 <I2C_WaitOnFlagUntilTimeout>
 8002efa:	4603      	mov	r3, r0
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d001      	beq.n	8002f04 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8002f00:	2301      	movs	r3, #1
 8002f02:	e0d5      	b.n	80030b0 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	2222      	movs	r2, #34	; 0x22
 8002f08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	2240      	movs	r2, #64	; 0x40
 8002f10:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	2200      	movs	r2, #0
 8002f18:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	6a3a      	ldr	r2, [r7, #32]
 8002f1e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002f24:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	2200      	movs	r2, #0
 8002f2a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002f2c:	88f8      	ldrh	r0, [r7, #6]
 8002f2e:	893a      	ldrh	r2, [r7, #8]
 8002f30:	8979      	ldrh	r1, [r7, #10]
 8002f32:	697b      	ldr	r3, [r7, #20]
 8002f34:	9301      	str	r3, [sp, #4]
 8002f36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f38:	9300      	str	r3, [sp, #0]
 8002f3a:	4603      	mov	r3, r0
 8002f3c:	68f8      	ldr	r0, [r7, #12]
 8002f3e:	f000 f913 	bl	8003168 <I2C_RequestMemoryRead>
 8002f42:	4603      	mov	r3, r0
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d005      	beq.n	8002f54 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002f50:	2301      	movs	r3, #1
 8002f52:	e0ad      	b.n	80030b0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f58:	b29b      	uxth	r3, r3
 8002f5a:	2bff      	cmp	r3, #255	; 0xff
 8002f5c:	d90e      	bls.n	8002f7c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	22ff      	movs	r2, #255	; 0xff
 8002f62:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f68:	b2da      	uxtb	r2, r3
 8002f6a:	8979      	ldrh	r1, [r7, #10]
 8002f6c:	4b52      	ldr	r3, [pc, #328]	; (80030b8 <HAL_I2C_Mem_Read+0x22c>)
 8002f6e:	9300      	str	r3, [sp, #0]
 8002f70:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002f74:	68f8      	ldr	r0, [r7, #12]
 8002f76:	f000 fa91 	bl	800349c <I2C_TransferConfig>
 8002f7a:	e00f      	b.n	8002f9c <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f80:	b29a      	uxth	r2, r3
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f8a:	b2da      	uxtb	r2, r3
 8002f8c:	8979      	ldrh	r1, [r7, #10]
 8002f8e:	4b4a      	ldr	r3, [pc, #296]	; (80030b8 <HAL_I2C_Mem_Read+0x22c>)
 8002f90:	9300      	str	r3, [sp, #0]
 8002f92:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002f96:	68f8      	ldr	r0, [r7, #12]
 8002f98:	f000 fa80 	bl	800349c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002f9c:	697b      	ldr	r3, [r7, #20]
 8002f9e:	9300      	str	r3, [sp, #0]
 8002fa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	2104      	movs	r1, #4
 8002fa6:	68f8      	ldr	r0, [r7, #12]
 8002fa8:	f000 f956 	bl	8003258 <I2C_WaitOnFlagUntilTimeout>
 8002fac:	4603      	mov	r3, r0
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d001      	beq.n	8002fb6 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8002fb2:	2301      	movs	r3, #1
 8002fb4:	e07c      	b.n	80030b0 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fc0:	b2d2      	uxtb	r2, r2
 8002fc2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fc8:	1c5a      	adds	r2, r3, #1
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fd2:	3b01      	subs	r3, #1
 8002fd4:	b29a      	uxth	r2, r3
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fde:	b29b      	uxth	r3, r3
 8002fe0:	3b01      	subs	r3, #1
 8002fe2:	b29a      	uxth	r2, r3
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fec:	b29b      	uxth	r3, r3
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d034      	beq.n	800305c <HAL_I2C_Mem_Read+0x1d0>
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d130      	bne.n	800305c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002ffa:	697b      	ldr	r3, [r7, #20]
 8002ffc:	9300      	str	r3, [sp, #0]
 8002ffe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003000:	2200      	movs	r2, #0
 8003002:	2180      	movs	r1, #128	; 0x80
 8003004:	68f8      	ldr	r0, [r7, #12]
 8003006:	f000 f927 	bl	8003258 <I2C_WaitOnFlagUntilTimeout>
 800300a:	4603      	mov	r3, r0
 800300c:	2b00      	cmp	r3, #0
 800300e:	d001      	beq.n	8003014 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8003010:	2301      	movs	r3, #1
 8003012:	e04d      	b.n	80030b0 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003018:	b29b      	uxth	r3, r3
 800301a:	2bff      	cmp	r3, #255	; 0xff
 800301c:	d90e      	bls.n	800303c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	22ff      	movs	r2, #255	; 0xff
 8003022:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003028:	b2da      	uxtb	r2, r3
 800302a:	8979      	ldrh	r1, [r7, #10]
 800302c:	2300      	movs	r3, #0
 800302e:	9300      	str	r3, [sp, #0]
 8003030:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003034:	68f8      	ldr	r0, [r7, #12]
 8003036:	f000 fa31 	bl	800349c <I2C_TransferConfig>
 800303a:	e00f      	b.n	800305c <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003040:	b29a      	uxth	r2, r3
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800304a:	b2da      	uxtb	r2, r3
 800304c:	8979      	ldrh	r1, [r7, #10]
 800304e:	2300      	movs	r3, #0
 8003050:	9300      	str	r3, [sp, #0]
 8003052:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003056:	68f8      	ldr	r0, [r7, #12]
 8003058:	f000 fa20 	bl	800349c <I2C_TransferConfig>
        }
      }
    } while (hi2c->XferCount > 0U);
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003060:	b29b      	uxth	r3, r3
 8003062:	2b00      	cmp	r3, #0
 8003064:	d19a      	bne.n	8002f9c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003066:	697a      	ldr	r2, [r7, #20]
 8003068:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800306a:	68f8      	ldr	r0, [r7, #12]
 800306c:	f000 f974 	bl	8003358 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003070:	4603      	mov	r3, r0
 8003072:	2b00      	cmp	r3, #0
 8003074:	d001      	beq.n	800307a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8003076:	2301      	movs	r3, #1
 8003078:	e01a      	b.n	80030b0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	2220      	movs	r2, #32
 8003080:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	6859      	ldr	r1, [r3, #4]
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	681a      	ldr	r2, [r3, #0]
 800308c:	4b0b      	ldr	r3, [pc, #44]	; (80030bc <HAL_I2C_Mem_Read+0x230>)
 800308e:	400b      	ands	r3, r1
 8003090:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	2220      	movs	r2, #32
 8003096:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	2200      	movs	r2, #0
 800309e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	2200      	movs	r2, #0
 80030a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80030aa:	2300      	movs	r3, #0
 80030ac:	e000      	b.n	80030b0 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80030ae:	2302      	movs	r3, #2
  }
}
 80030b0:	4618      	mov	r0, r3
 80030b2:	3718      	adds	r7, #24
 80030b4:	46bd      	mov	sp, r7
 80030b6:	bd80      	pop	{r7, pc}
 80030b8:	80002400 	.word	0x80002400
 80030bc:	fe00e800 	.word	0xfe00e800

080030c0 <I2C_RequestMemoryWrite>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                                uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80030c0:	b580      	push	{r7, lr}
 80030c2:	b086      	sub	sp, #24
 80030c4:	af02      	add	r7, sp, #8
 80030c6:	60f8      	str	r0, [r7, #12]
 80030c8:	4608      	mov	r0, r1
 80030ca:	4611      	mov	r1, r2
 80030cc:	461a      	mov	r2, r3
 80030ce:	4603      	mov	r3, r0
 80030d0:	817b      	strh	r3, [r7, #10]
 80030d2:	460b      	mov	r3, r1
 80030d4:	813b      	strh	r3, [r7, #8]
 80030d6:	4613      	mov	r3, r2
 80030d8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80030da:	88fb      	ldrh	r3, [r7, #6]
 80030dc:	b2da      	uxtb	r2, r3
 80030de:	8979      	ldrh	r1, [r7, #10]
 80030e0:	4b20      	ldr	r3, [pc, #128]	; (8003164 <I2C_RequestMemoryWrite+0xa4>)
 80030e2:	9300      	str	r3, [sp, #0]
 80030e4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80030e8:	68f8      	ldr	r0, [r7, #12]
 80030ea:	f000 f9d7 	bl	800349c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80030ee:	69fa      	ldr	r2, [r7, #28]
 80030f0:	69b9      	ldr	r1, [r7, #24]
 80030f2:	68f8      	ldr	r0, [r7, #12]
 80030f4:	f000 f8f0 	bl	80032d8 <I2C_WaitOnTXISFlagUntilTimeout>
 80030f8:	4603      	mov	r3, r0
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d001      	beq.n	8003102 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80030fe:	2301      	movs	r3, #1
 8003100:	e02c      	b.n	800315c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003102:	88fb      	ldrh	r3, [r7, #6]
 8003104:	2b01      	cmp	r3, #1
 8003106:	d105      	bne.n	8003114 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003108:	893b      	ldrh	r3, [r7, #8]
 800310a:	b2da      	uxtb	r2, r3
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	629a      	str	r2, [r3, #40]	; 0x28
 8003112:	e015      	b.n	8003140 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003114:	893b      	ldrh	r3, [r7, #8]
 8003116:	0a1b      	lsrs	r3, r3, #8
 8003118:	b29b      	uxth	r3, r3
 800311a:	b2da      	uxtb	r2, r3
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003122:	69fa      	ldr	r2, [r7, #28]
 8003124:	69b9      	ldr	r1, [r7, #24]
 8003126:	68f8      	ldr	r0, [r7, #12]
 8003128:	f000 f8d6 	bl	80032d8 <I2C_WaitOnTXISFlagUntilTimeout>
 800312c:	4603      	mov	r3, r0
 800312e:	2b00      	cmp	r3, #0
 8003130:	d001      	beq.n	8003136 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8003132:	2301      	movs	r3, #1
 8003134:	e012      	b.n	800315c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003136:	893b      	ldrh	r3, [r7, #8]
 8003138:	b2da      	uxtb	r2, r3
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003140:	69fb      	ldr	r3, [r7, #28]
 8003142:	9300      	str	r3, [sp, #0]
 8003144:	69bb      	ldr	r3, [r7, #24]
 8003146:	2200      	movs	r2, #0
 8003148:	2180      	movs	r1, #128	; 0x80
 800314a:	68f8      	ldr	r0, [r7, #12]
 800314c:	f000 f884 	bl	8003258 <I2C_WaitOnFlagUntilTimeout>
 8003150:	4603      	mov	r3, r0
 8003152:	2b00      	cmp	r3, #0
 8003154:	d001      	beq.n	800315a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8003156:	2301      	movs	r3, #1
 8003158:	e000      	b.n	800315c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800315a:	2300      	movs	r3, #0
}
 800315c:	4618      	mov	r0, r3
 800315e:	3710      	adds	r7, #16
 8003160:	46bd      	mov	sp, r7
 8003162:	bd80      	pop	{r7, pc}
 8003164:	80002000 	.word	0x80002000

08003168 <I2C_RequestMemoryRead>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                               uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003168:	b580      	push	{r7, lr}
 800316a:	b086      	sub	sp, #24
 800316c:	af02      	add	r7, sp, #8
 800316e:	60f8      	str	r0, [r7, #12]
 8003170:	4608      	mov	r0, r1
 8003172:	4611      	mov	r1, r2
 8003174:	461a      	mov	r2, r3
 8003176:	4603      	mov	r3, r0
 8003178:	817b      	strh	r3, [r7, #10]
 800317a:	460b      	mov	r3, r1
 800317c:	813b      	strh	r3, [r7, #8]
 800317e:	4613      	mov	r3, r2
 8003180:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8003182:	88fb      	ldrh	r3, [r7, #6]
 8003184:	b2da      	uxtb	r2, r3
 8003186:	8979      	ldrh	r1, [r7, #10]
 8003188:	4b20      	ldr	r3, [pc, #128]	; (800320c <I2C_RequestMemoryRead+0xa4>)
 800318a:	9300      	str	r3, [sp, #0]
 800318c:	2300      	movs	r3, #0
 800318e:	68f8      	ldr	r0, [r7, #12]
 8003190:	f000 f984 	bl	800349c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003194:	69fa      	ldr	r2, [r7, #28]
 8003196:	69b9      	ldr	r1, [r7, #24]
 8003198:	68f8      	ldr	r0, [r7, #12]
 800319a:	f000 f89d 	bl	80032d8 <I2C_WaitOnTXISFlagUntilTimeout>
 800319e:	4603      	mov	r3, r0
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d001      	beq.n	80031a8 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80031a4:	2301      	movs	r3, #1
 80031a6:	e02c      	b.n	8003202 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80031a8:	88fb      	ldrh	r3, [r7, #6]
 80031aa:	2b01      	cmp	r3, #1
 80031ac:	d105      	bne.n	80031ba <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80031ae:	893b      	ldrh	r3, [r7, #8]
 80031b0:	b2da      	uxtb	r2, r3
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	629a      	str	r2, [r3, #40]	; 0x28
 80031b8:	e015      	b.n	80031e6 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80031ba:	893b      	ldrh	r3, [r7, #8]
 80031bc:	0a1b      	lsrs	r3, r3, #8
 80031be:	b29b      	uxth	r3, r3
 80031c0:	b2da      	uxtb	r2, r3
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80031c8:	69fa      	ldr	r2, [r7, #28]
 80031ca:	69b9      	ldr	r1, [r7, #24]
 80031cc:	68f8      	ldr	r0, [r7, #12]
 80031ce:	f000 f883 	bl	80032d8 <I2C_WaitOnTXISFlagUntilTimeout>
 80031d2:	4603      	mov	r3, r0
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d001      	beq.n	80031dc <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80031d8:	2301      	movs	r3, #1
 80031da:	e012      	b.n	8003202 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80031dc:	893b      	ldrh	r3, [r7, #8]
 80031de:	b2da      	uxtb	r2, r3
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80031e6:	69fb      	ldr	r3, [r7, #28]
 80031e8:	9300      	str	r3, [sp, #0]
 80031ea:	69bb      	ldr	r3, [r7, #24]
 80031ec:	2200      	movs	r2, #0
 80031ee:	2140      	movs	r1, #64	; 0x40
 80031f0:	68f8      	ldr	r0, [r7, #12]
 80031f2:	f000 f831 	bl	8003258 <I2C_WaitOnFlagUntilTimeout>
 80031f6:	4603      	mov	r3, r0
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d001      	beq.n	8003200 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80031fc:	2301      	movs	r3, #1
 80031fe:	e000      	b.n	8003202 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8003200:	2300      	movs	r3, #0
}
 8003202:	4618      	mov	r0, r3
 8003204:	3710      	adds	r7, #16
 8003206:	46bd      	mov	sp, r7
 8003208:	bd80      	pop	{r7, pc}
 800320a:	bf00      	nop
 800320c:	80002000 	.word	0x80002000

08003210 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003210:	b480      	push	{r7}
 8003212:	b083      	sub	sp, #12
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	699b      	ldr	r3, [r3, #24]
 800321e:	f003 0302 	and.w	r3, r3, #2
 8003222:	2b02      	cmp	r3, #2
 8003224:	d103      	bne.n	800322e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	2200      	movs	r2, #0
 800322c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	699b      	ldr	r3, [r3, #24]
 8003234:	f003 0301 	and.w	r3, r3, #1
 8003238:	2b01      	cmp	r3, #1
 800323a:	d007      	beq.n	800324c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	699a      	ldr	r2, [r3, #24]
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f042 0201 	orr.w	r2, r2, #1
 800324a:	619a      	str	r2, [r3, #24]
  }
}
 800324c:	bf00      	nop
 800324e:	370c      	adds	r7, #12
 8003250:	46bd      	mov	sp, r7
 8003252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003256:	4770      	bx	lr

08003258 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003258:	b580      	push	{r7, lr}
 800325a:	b084      	sub	sp, #16
 800325c:	af00      	add	r7, sp, #0
 800325e:	60f8      	str	r0, [r7, #12]
 8003260:	60b9      	str	r1, [r7, #8]
 8003262:	603b      	str	r3, [r7, #0]
 8003264:	4613      	mov	r3, r2
 8003266:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003268:	e022      	b.n	80032b0 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800326a:	683b      	ldr	r3, [r7, #0]
 800326c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003270:	d01e      	beq.n	80032b0 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003272:	f7fe fb2f 	bl	80018d4 <HAL_GetTick>
 8003276:	4602      	mov	r2, r0
 8003278:	69bb      	ldr	r3, [r7, #24]
 800327a:	1ad3      	subs	r3, r2, r3
 800327c:	683a      	ldr	r2, [r7, #0]
 800327e:	429a      	cmp	r2, r3
 8003280:	d302      	bcc.n	8003288 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003282:	683b      	ldr	r3, [r7, #0]
 8003284:	2b00      	cmp	r3, #0
 8003286:	d113      	bne.n	80032b0 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800328c:	f043 0220 	orr.w	r2, r3, #32
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	2220      	movs	r2, #32
 8003298:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	2200      	movs	r2, #0
 80032a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	2200      	movs	r2, #0
 80032a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80032ac:	2301      	movs	r3, #1
 80032ae:	e00f      	b.n	80032d0 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	699a      	ldr	r2, [r3, #24]
 80032b6:	68bb      	ldr	r3, [r7, #8]
 80032b8:	4013      	ands	r3, r2
 80032ba:	68ba      	ldr	r2, [r7, #8]
 80032bc:	429a      	cmp	r2, r3
 80032be:	bf0c      	ite	eq
 80032c0:	2301      	moveq	r3, #1
 80032c2:	2300      	movne	r3, #0
 80032c4:	b2db      	uxtb	r3, r3
 80032c6:	461a      	mov	r2, r3
 80032c8:	79fb      	ldrb	r3, [r7, #7]
 80032ca:	429a      	cmp	r2, r3
 80032cc:	d0cd      	beq.n	800326a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80032ce:	2300      	movs	r3, #0
}
 80032d0:	4618      	mov	r0, r3
 80032d2:	3710      	adds	r7, #16
 80032d4:	46bd      	mov	sp, r7
 80032d6:	bd80      	pop	{r7, pc}

080032d8 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80032d8:	b580      	push	{r7, lr}
 80032da:	b084      	sub	sp, #16
 80032dc:	af00      	add	r7, sp, #0
 80032de:	60f8      	str	r0, [r7, #12]
 80032e0:	60b9      	str	r1, [r7, #8]
 80032e2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80032e4:	e02c      	b.n	8003340 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80032e6:	687a      	ldr	r2, [r7, #4]
 80032e8:	68b9      	ldr	r1, [r7, #8]
 80032ea:	68f8      	ldr	r0, [r7, #12]
 80032ec:	f000 f870 	bl	80033d0 <I2C_IsAcknowledgeFailed>
 80032f0:	4603      	mov	r3, r0
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d001      	beq.n	80032fa <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80032f6:	2301      	movs	r3, #1
 80032f8:	e02a      	b.n	8003350 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80032fa:	68bb      	ldr	r3, [r7, #8]
 80032fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003300:	d01e      	beq.n	8003340 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003302:	f7fe fae7 	bl	80018d4 <HAL_GetTick>
 8003306:	4602      	mov	r2, r0
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	1ad3      	subs	r3, r2, r3
 800330c:	68ba      	ldr	r2, [r7, #8]
 800330e:	429a      	cmp	r2, r3
 8003310:	d302      	bcc.n	8003318 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003312:	68bb      	ldr	r3, [r7, #8]
 8003314:	2b00      	cmp	r3, #0
 8003316:	d113      	bne.n	8003340 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800331c:	f043 0220 	orr.w	r2, r3, #32
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	2220      	movs	r2, #32
 8003328:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	2200      	movs	r2, #0
 8003330:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	2200      	movs	r2, #0
 8003338:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800333c:	2301      	movs	r3, #1
 800333e:	e007      	b.n	8003350 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	699b      	ldr	r3, [r3, #24]
 8003346:	f003 0302 	and.w	r3, r3, #2
 800334a:	2b02      	cmp	r3, #2
 800334c:	d1cb      	bne.n	80032e6 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800334e:	2300      	movs	r3, #0
}
 8003350:	4618      	mov	r0, r3
 8003352:	3710      	adds	r7, #16
 8003354:	46bd      	mov	sp, r7
 8003356:	bd80      	pop	{r7, pc}

08003358 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003358:	b580      	push	{r7, lr}
 800335a:	b084      	sub	sp, #16
 800335c:	af00      	add	r7, sp, #0
 800335e:	60f8      	str	r0, [r7, #12]
 8003360:	60b9      	str	r1, [r7, #8]
 8003362:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003364:	e028      	b.n	80033b8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003366:	687a      	ldr	r2, [r7, #4]
 8003368:	68b9      	ldr	r1, [r7, #8]
 800336a:	68f8      	ldr	r0, [r7, #12]
 800336c:	f000 f830 	bl	80033d0 <I2C_IsAcknowledgeFailed>
 8003370:	4603      	mov	r3, r0
 8003372:	2b00      	cmp	r3, #0
 8003374:	d001      	beq.n	800337a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003376:	2301      	movs	r3, #1
 8003378:	e026      	b.n	80033c8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800337a:	f7fe faab 	bl	80018d4 <HAL_GetTick>
 800337e:	4602      	mov	r2, r0
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	1ad3      	subs	r3, r2, r3
 8003384:	68ba      	ldr	r2, [r7, #8]
 8003386:	429a      	cmp	r2, r3
 8003388:	d302      	bcc.n	8003390 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800338a:	68bb      	ldr	r3, [r7, #8]
 800338c:	2b00      	cmp	r3, #0
 800338e:	d113      	bne.n	80033b8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003394:	f043 0220 	orr.w	r2, r3, #32
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	2220      	movs	r2, #32
 80033a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	2200      	movs	r2, #0
 80033a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	2200      	movs	r2, #0
 80033b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80033b4:	2301      	movs	r3, #1
 80033b6:	e007      	b.n	80033c8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	699b      	ldr	r3, [r3, #24]
 80033be:	f003 0320 	and.w	r3, r3, #32
 80033c2:	2b20      	cmp	r3, #32
 80033c4:	d1cf      	bne.n	8003366 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80033c6:	2300      	movs	r3, #0
}
 80033c8:	4618      	mov	r0, r3
 80033ca:	3710      	adds	r7, #16
 80033cc:	46bd      	mov	sp, r7
 80033ce:	bd80      	pop	{r7, pc}

080033d0 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80033d0:	b580      	push	{r7, lr}
 80033d2:	b084      	sub	sp, #16
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	60f8      	str	r0, [r7, #12]
 80033d8:	60b9      	str	r1, [r7, #8]
 80033da:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	699b      	ldr	r3, [r3, #24]
 80033e2:	f003 0310 	and.w	r3, r3, #16
 80033e6:	2b10      	cmp	r3, #16
 80033e8:	d151      	bne.n	800348e <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80033ea:	e022      	b.n	8003432 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80033ec:	68bb      	ldr	r3, [r7, #8]
 80033ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033f2:	d01e      	beq.n	8003432 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033f4:	f7fe fa6e 	bl	80018d4 <HAL_GetTick>
 80033f8:	4602      	mov	r2, r0
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	1ad3      	subs	r3, r2, r3
 80033fe:	68ba      	ldr	r2, [r7, #8]
 8003400:	429a      	cmp	r2, r3
 8003402:	d302      	bcc.n	800340a <I2C_IsAcknowledgeFailed+0x3a>
 8003404:	68bb      	ldr	r3, [r7, #8]
 8003406:	2b00      	cmp	r3, #0
 8003408:	d113      	bne.n	8003432 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800340e:	f043 0220 	orr.w	r2, r3, #32
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	2220      	movs	r2, #32
 800341a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	2200      	movs	r2, #0
 8003422:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	2200      	movs	r2, #0
 800342a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800342e:	2301      	movs	r3, #1
 8003430:	e02e      	b.n	8003490 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	699b      	ldr	r3, [r3, #24]
 8003438:	f003 0320 	and.w	r3, r3, #32
 800343c:	2b20      	cmp	r3, #32
 800343e:	d1d5      	bne.n	80033ec <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	2210      	movs	r2, #16
 8003446:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	2220      	movs	r2, #32
 800344e:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003450:	68f8      	ldr	r0, [r7, #12]
 8003452:	f7ff fedd 	bl	8003210 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	6859      	ldr	r1, [r3, #4]
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	681a      	ldr	r2, [r3, #0]
 8003460:	4b0d      	ldr	r3, [pc, #52]	; (8003498 <I2C_IsAcknowledgeFailed+0xc8>)
 8003462:	400b      	ands	r3, r1
 8003464:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800346a:	f043 0204 	orr.w	r2, r3, #4
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	2220      	movs	r2, #32
 8003476:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	2200      	movs	r2, #0
 800347e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	2200      	movs	r2, #0
 8003486:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800348a:	2301      	movs	r3, #1
 800348c:	e000      	b.n	8003490 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 800348e:	2300      	movs	r3, #0
}
 8003490:	4618      	mov	r0, r3
 8003492:	3710      	adds	r7, #16
 8003494:	46bd      	mov	sp, r7
 8003496:	bd80      	pop	{r7, pc}
 8003498:	fe00e800 	.word	0xfe00e800

0800349c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800349c:	b480      	push	{r7}
 800349e:	b085      	sub	sp, #20
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	60f8      	str	r0, [r7, #12]
 80034a4:	607b      	str	r3, [r7, #4]
 80034a6:	460b      	mov	r3, r1
 80034a8:	817b      	strh	r3, [r7, #10]
 80034aa:	4613      	mov	r3, r2
 80034ac:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	685a      	ldr	r2, [r3, #4]
 80034b4:	69bb      	ldr	r3, [r7, #24]
 80034b6:	0d5b      	lsrs	r3, r3, #21
 80034b8:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80034bc:	4b0d      	ldr	r3, [pc, #52]	; (80034f4 <I2C_TransferConfig+0x58>)
 80034be:	430b      	orrs	r3, r1
 80034c0:	43db      	mvns	r3, r3
 80034c2:	ea02 0103 	and.w	r1, r2, r3
 80034c6:	897b      	ldrh	r3, [r7, #10]
 80034c8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80034cc:	7a7b      	ldrb	r3, [r7, #9]
 80034ce:	041b      	lsls	r3, r3, #16
 80034d0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80034d4:	431a      	orrs	r2, r3
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	431a      	orrs	r2, r3
 80034da:	69bb      	ldr	r3, [r7, #24]
 80034dc:	431a      	orrs	r2, r3
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	430a      	orrs	r2, r1
 80034e4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 80034e6:	bf00      	nop
 80034e8:	3714      	adds	r7, #20
 80034ea:	46bd      	mov	sp, r7
 80034ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f0:	4770      	bx	lr
 80034f2:	bf00      	nop
 80034f4:	03ff63ff 	.word	0x03ff63ff

080034f8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80034f8:	b480      	push	{r7}
 80034fa:	b083      	sub	sp, #12
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
 8003500:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003508:	b2db      	uxtb	r3, r3
 800350a:	2b20      	cmp	r3, #32
 800350c:	d138      	bne.n	8003580 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003514:	2b01      	cmp	r3, #1
 8003516:	d101      	bne.n	800351c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003518:	2302      	movs	r3, #2
 800351a:	e032      	b.n	8003582 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2201      	movs	r2, #1
 8003520:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2224      	movs	r2, #36	; 0x24
 8003528:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	681a      	ldr	r2, [r3, #0]
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f022 0201 	bic.w	r2, r2, #1
 800353a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	681a      	ldr	r2, [r3, #0]
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800354a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	6819      	ldr	r1, [r3, #0]
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	683a      	ldr	r2, [r7, #0]
 8003558:	430a      	orrs	r2, r1
 800355a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	681a      	ldr	r2, [r3, #0]
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f042 0201 	orr.w	r2, r2, #1
 800356a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	2220      	movs	r2, #32
 8003570:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	2200      	movs	r2, #0
 8003578:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800357c:	2300      	movs	r3, #0
 800357e:	e000      	b.n	8003582 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003580:	2302      	movs	r3, #2
  }
}
 8003582:	4618      	mov	r0, r3
 8003584:	370c      	adds	r7, #12
 8003586:	46bd      	mov	sp, r7
 8003588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358c:	4770      	bx	lr

0800358e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800358e:	b480      	push	{r7}
 8003590:	b085      	sub	sp, #20
 8003592:	af00      	add	r7, sp, #0
 8003594:	6078      	str	r0, [r7, #4]
 8003596:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800359e:	b2db      	uxtb	r3, r3
 80035a0:	2b20      	cmp	r3, #32
 80035a2:	d139      	bne.n	8003618 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80035aa:	2b01      	cmp	r3, #1
 80035ac:	d101      	bne.n	80035b2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80035ae:	2302      	movs	r3, #2
 80035b0:	e033      	b.n	800361a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	2201      	movs	r2, #1
 80035b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	2224      	movs	r2, #36	; 0x24
 80035be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	681a      	ldr	r2, [r3, #0]
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f022 0201 	bic.w	r2, r2, #1
 80035d0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80035e0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80035e2:	683b      	ldr	r3, [r7, #0]
 80035e4:	021b      	lsls	r3, r3, #8
 80035e6:	68fa      	ldr	r2, [r7, #12]
 80035e8:	4313      	orrs	r3, r2
 80035ea:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	68fa      	ldr	r2, [r7, #12]
 80035f2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	681a      	ldr	r2, [r3, #0]
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f042 0201 	orr.w	r2, r2, #1
 8003602:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	2220      	movs	r2, #32
 8003608:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2200      	movs	r2, #0
 8003610:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003614:	2300      	movs	r3, #0
 8003616:	e000      	b.n	800361a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003618:	2302      	movs	r3, #2
  }
}
 800361a:	4618      	mov	r0, r3
 800361c:	3714      	adds	r7, #20
 800361e:	46bd      	mov	sp, r7
 8003620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003624:	4770      	bx	lr
	...

08003628 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003628:	b480      	push	{r7}
 800362a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800362c:	4b05      	ldr	r3, [pc, #20]	; (8003644 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	4a04      	ldr	r2, [pc, #16]	; (8003644 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003632:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003636:	6013      	str	r3, [r2, #0]
}
 8003638:	bf00      	nop
 800363a:	46bd      	mov	sp, r7
 800363c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003640:	4770      	bx	lr
 8003642:	bf00      	nop
 8003644:	40007000 	.word	0x40007000

08003648 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003648:	b580      	push	{r7, lr}
 800364a:	b086      	sub	sp, #24
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003650:	2300      	movs	r3, #0
 8003652:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2b00      	cmp	r3, #0
 8003658:	d101      	bne.n	800365e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800365a:	2301      	movs	r3, #1
 800365c:	e291      	b.n	8003b82 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f003 0301 	and.w	r3, r3, #1
 8003666:	2b00      	cmp	r3, #0
 8003668:	f000 8087 	beq.w	800377a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800366c:	4b96      	ldr	r3, [pc, #600]	; (80038c8 <HAL_RCC_OscConfig+0x280>)
 800366e:	689b      	ldr	r3, [r3, #8]
 8003670:	f003 030c 	and.w	r3, r3, #12
 8003674:	2b04      	cmp	r3, #4
 8003676:	d00c      	beq.n	8003692 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003678:	4b93      	ldr	r3, [pc, #588]	; (80038c8 <HAL_RCC_OscConfig+0x280>)
 800367a:	689b      	ldr	r3, [r3, #8]
 800367c:	f003 030c 	and.w	r3, r3, #12
 8003680:	2b08      	cmp	r3, #8
 8003682:	d112      	bne.n	80036aa <HAL_RCC_OscConfig+0x62>
 8003684:	4b90      	ldr	r3, [pc, #576]	; (80038c8 <HAL_RCC_OscConfig+0x280>)
 8003686:	685b      	ldr	r3, [r3, #4]
 8003688:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800368c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003690:	d10b      	bne.n	80036aa <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003692:	4b8d      	ldr	r3, [pc, #564]	; (80038c8 <HAL_RCC_OscConfig+0x280>)
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800369a:	2b00      	cmp	r3, #0
 800369c:	d06c      	beq.n	8003778 <HAL_RCC_OscConfig+0x130>
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	685b      	ldr	r3, [r3, #4]
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d168      	bne.n	8003778 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80036a6:	2301      	movs	r3, #1
 80036a8:	e26b      	b.n	8003b82 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	685b      	ldr	r3, [r3, #4]
 80036ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80036b2:	d106      	bne.n	80036c2 <HAL_RCC_OscConfig+0x7a>
 80036b4:	4b84      	ldr	r3, [pc, #528]	; (80038c8 <HAL_RCC_OscConfig+0x280>)
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	4a83      	ldr	r2, [pc, #524]	; (80038c8 <HAL_RCC_OscConfig+0x280>)
 80036ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036be:	6013      	str	r3, [r2, #0]
 80036c0:	e02e      	b.n	8003720 <HAL_RCC_OscConfig+0xd8>
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	685b      	ldr	r3, [r3, #4]
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d10c      	bne.n	80036e4 <HAL_RCC_OscConfig+0x9c>
 80036ca:	4b7f      	ldr	r3, [pc, #508]	; (80038c8 <HAL_RCC_OscConfig+0x280>)
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	4a7e      	ldr	r2, [pc, #504]	; (80038c8 <HAL_RCC_OscConfig+0x280>)
 80036d0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80036d4:	6013      	str	r3, [r2, #0]
 80036d6:	4b7c      	ldr	r3, [pc, #496]	; (80038c8 <HAL_RCC_OscConfig+0x280>)
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	4a7b      	ldr	r2, [pc, #492]	; (80038c8 <HAL_RCC_OscConfig+0x280>)
 80036dc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80036e0:	6013      	str	r3, [r2, #0]
 80036e2:	e01d      	b.n	8003720 <HAL_RCC_OscConfig+0xd8>
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	685b      	ldr	r3, [r3, #4]
 80036e8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80036ec:	d10c      	bne.n	8003708 <HAL_RCC_OscConfig+0xc0>
 80036ee:	4b76      	ldr	r3, [pc, #472]	; (80038c8 <HAL_RCC_OscConfig+0x280>)
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	4a75      	ldr	r2, [pc, #468]	; (80038c8 <HAL_RCC_OscConfig+0x280>)
 80036f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80036f8:	6013      	str	r3, [r2, #0]
 80036fa:	4b73      	ldr	r3, [pc, #460]	; (80038c8 <HAL_RCC_OscConfig+0x280>)
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	4a72      	ldr	r2, [pc, #456]	; (80038c8 <HAL_RCC_OscConfig+0x280>)
 8003700:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003704:	6013      	str	r3, [r2, #0]
 8003706:	e00b      	b.n	8003720 <HAL_RCC_OscConfig+0xd8>
 8003708:	4b6f      	ldr	r3, [pc, #444]	; (80038c8 <HAL_RCC_OscConfig+0x280>)
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	4a6e      	ldr	r2, [pc, #440]	; (80038c8 <HAL_RCC_OscConfig+0x280>)
 800370e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003712:	6013      	str	r3, [r2, #0]
 8003714:	4b6c      	ldr	r3, [pc, #432]	; (80038c8 <HAL_RCC_OscConfig+0x280>)
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	4a6b      	ldr	r2, [pc, #428]	; (80038c8 <HAL_RCC_OscConfig+0x280>)
 800371a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800371e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	685b      	ldr	r3, [r3, #4]
 8003724:	2b00      	cmp	r3, #0
 8003726:	d013      	beq.n	8003750 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003728:	f7fe f8d4 	bl	80018d4 <HAL_GetTick>
 800372c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800372e:	e008      	b.n	8003742 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003730:	f7fe f8d0 	bl	80018d4 <HAL_GetTick>
 8003734:	4602      	mov	r2, r0
 8003736:	693b      	ldr	r3, [r7, #16]
 8003738:	1ad3      	subs	r3, r2, r3
 800373a:	2b64      	cmp	r3, #100	; 0x64
 800373c:	d901      	bls.n	8003742 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800373e:	2303      	movs	r3, #3
 8003740:	e21f      	b.n	8003b82 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003742:	4b61      	ldr	r3, [pc, #388]	; (80038c8 <HAL_RCC_OscConfig+0x280>)
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800374a:	2b00      	cmp	r3, #0
 800374c:	d0f0      	beq.n	8003730 <HAL_RCC_OscConfig+0xe8>
 800374e:	e014      	b.n	800377a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003750:	f7fe f8c0 	bl	80018d4 <HAL_GetTick>
 8003754:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003756:	e008      	b.n	800376a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003758:	f7fe f8bc 	bl	80018d4 <HAL_GetTick>
 800375c:	4602      	mov	r2, r0
 800375e:	693b      	ldr	r3, [r7, #16]
 8003760:	1ad3      	subs	r3, r2, r3
 8003762:	2b64      	cmp	r3, #100	; 0x64
 8003764:	d901      	bls.n	800376a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003766:	2303      	movs	r3, #3
 8003768:	e20b      	b.n	8003b82 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800376a:	4b57      	ldr	r3, [pc, #348]	; (80038c8 <HAL_RCC_OscConfig+0x280>)
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003772:	2b00      	cmp	r3, #0
 8003774:	d1f0      	bne.n	8003758 <HAL_RCC_OscConfig+0x110>
 8003776:	e000      	b.n	800377a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003778:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f003 0302 	and.w	r3, r3, #2
 8003782:	2b00      	cmp	r3, #0
 8003784:	d069      	beq.n	800385a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003786:	4b50      	ldr	r3, [pc, #320]	; (80038c8 <HAL_RCC_OscConfig+0x280>)
 8003788:	689b      	ldr	r3, [r3, #8]
 800378a:	f003 030c 	and.w	r3, r3, #12
 800378e:	2b00      	cmp	r3, #0
 8003790:	d00b      	beq.n	80037aa <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003792:	4b4d      	ldr	r3, [pc, #308]	; (80038c8 <HAL_RCC_OscConfig+0x280>)
 8003794:	689b      	ldr	r3, [r3, #8]
 8003796:	f003 030c 	and.w	r3, r3, #12
 800379a:	2b08      	cmp	r3, #8
 800379c:	d11c      	bne.n	80037d8 <HAL_RCC_OscConfig+0x190>
 800379e:	4b4a      	ldr	r3, [pc, #296]	; (80038c8 <HAL_RCC_OscConfig+0x280>)
 80037a0:	685b      	ldr	r3, [r3, #4]
 80037a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d116      	bne.n	80037d8 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80037aa:	4b47      	ldr	r3, [pc, #284]	; (80038c8 <HAL_RCC_OscConfig+0x280>)
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f003 0302 	and.w	r3, r3, #2
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d005      	beq.n	80037c2 <HAL_RCC_OscConfig+0x17a>
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	68db      	ldr	r3, [r3, #12]
 80037ba:	2b01      	cmp	r3, #1
 80037bc:	d001      	beq.n	80037c2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80037be:	2301      	movs	r3, #1
 80037c0:	e1df      	b.n	8003b82 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037c2:	4b41      	ldr	r3, [pc, #260]	; (80038c8 <HAL_RCC_OscConfig+0x280>)
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	691b      	ldr	r3, [r3, #16]
 80037ce:	00db      	lsls	r3, r3, #3
 80037d0:	493d      	ldr	r1, [pc, #244]	; (80038c8 <HAL_RCC_OscConfig+0x280>)
 80037d2:	4313      	orrs	r3, r2
 80037d4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80037d6:	e040      	b.n	800385a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	68db      	ldr	r3, [r3, #12]
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d023      	beq.n	8003828 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80037e0:	4b39      	ldr	r3, [pc, #228]	; (80038c8 <HAL_RCC_OscConfig+0x280>)
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	4a38      	ldr	r2, [pc, #224]	; (80038c8 <HAL_RCC_OscConfig+0x280>)
 80037e6:	f043 0301 	orr.w	r3, r3, #1
 80037ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037ec:	f7fe f872 	bl	80018d4 <HAL_GetTick>
 80037f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037f2:	e008      	b.n	8003806 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80037f4:	f7fe f86e 	bl	80018d4 <HAL_GetTick>
 80037f8:	4602      	mov	r2, r0
 80037fa:	693b      	ldr	r3, [r7, #16]
 80037fc:	1ad3      	subs	r3, r2, r3
 80037fe:	2b02      	cmp	r3, #2
 8003800:	d901      	bls.n	8003806 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003802:	2303      	movs	r3, #3
 8003804:	e1bd      	b.n	8003b82 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003806:	4b30      	ldr	r3, [pc, #192]	; (80038c8 <HAL_RCC_OscConfig+0x280>)
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f003 0302 	and.w	r3, r3, #2
 800380e:	2b00      	cmp	r3, #0
 8003810:	d0f0      	beq.n	80037f4 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003812:	4b2d      	ldr	r3, [pc, #180]	; (80038c8 <HAL_RCC_OscConfig+0x280>)
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	691b      	ldr	r3, [r3, #16]
 800381e:	00db      	lsls	r3, r3, #3
 8003820:	4929      	ldr	r1, [pc, #164]	; (80038c8 <HAL_RCC_OscConfig+0x280>)
 8003822:	4313      	orrs	r3, r2
 8003824:	600b      	str	r3, [r1, #0]
 8003826:	e018      	b.n	800385a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003828:	4b27      	ldr	r3, [pc, #156]	; (80038c8 <HAL_RCC_OscConfig+0x280>)
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	4a26      	ldr	r2, [pc, #152]	; (80038c8 <HAL_RCC_OscConfig+0x280>)
 800382e:	f023 0301 	bic.w	r3, r3, #1
 8003832:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003834:	f7fe f84e 	bl	80018d4 <HAL_GetTick>
 8003838:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800383a:	e008      	b.n	800384e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800383c:	f7fe f84a 	bl	80018d4 <HAL_GetTick>
 8003840:	4602      	mov	r2, r0
 8003842:	693b      	ldr	r3, [r7, #16]
 8003844:	1ad3      	subs	r3, r2, r3
 8003846:	2b02      	cmp	r3, #2
 8003848:	d901      	bls.n	800384e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800384a:	2303      	movs	r3, #3
 800384c:	e199      	b.n	8003b82 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800384e:	4b1e      	ldr	r3, [pc, #120]	; (80038c8 <HAL_RCC_OscConfig+0x280>)
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f003 0302 	and.w	r3, r3, #2
 8003856:	2b00      	cmp	r3, #0
 8003858:	d1f0      	bne.n	800383c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f003 0308 	and.w	r3, r3, #8
 8003862:	2b00      	cmp	r3, #0
 8003864:	d038      	beq.n	80038d8 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	695b      	ldr	r3, [r3, #20]
 800386a:	2b00      	cmp	r3, #0
 800386c:	d019      	beq.n	80038a2 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800386e:	4b16      	ldr	r3, [pc, #88]	; (80038c8 <HAL_RCC_OscConfig+0x280>)
 8003870:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003872:	4a15      	ldr	r2, [pc, #84]	; (80038c8 <HAL_RCC_OscConfig+0x280>)
 8003874:	f043 0301 	orr.w	r3, r3, #1
 8003878:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800387a:	f7fe f82b 	bl	80018d4 <HAL_GetTick>
 800387e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003880:	e008      	b.n	8003894 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003882:	f7fe f827 	bl	80018d4 <HAL_GetTick>
 8003886:	4602      	mov	r2, r0
 8003888:	693b      	ldr	r3, [r7, #16]
 800388a:	1ad3      	subs	r3, r2, r3
 800388c:	2b02      	cmp	r3, #2
 800388e:	d901      	bls.n	8003894 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003890:	2303      	movs	r3, #3
 8003892:	e176      	b.n	8003b82 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003894:	4b0c      	ldr	r3, [pc, #48]	; (80038c8 <HAL_RCC_OscConfig+0x280>)
 8003896:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003898:	f003 0302 	and.w	r3, r3, #2
 800389c:	2b00      	cmp	r3, #0
 800389e:	d0f0      	beq.n	8003882 <HAL_RCC_OscConfig+0x23a>
 80038a0:	e01a      	b.n	80038d8 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80038a2:	4b09      	ldr	r3, [pc, #36]	; (80038c8 <HAL_RCC_OscConfig+0x280>)
 80038a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80038a6:	4a08      	ldr	r2, [pc, #32]	; (80038c8 <HAL_RCC_OscConfig+0x280>)
 80038a8:	f023 0301 	bic.w	r3, r3, #1
 80038ac:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038ae:	f7fe f811 	bl	80018d4 <HAL_GetTick>
 80038b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80038b4:	e00a      	b.n	80038cc <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80038b6:	f7fe f80d 	bl	80018d4 <HAL_GetTick>
 80038ba:	4602      	mov	r2, r0
 80038bc:	693b      	ldr	r3, [r7, #16]
 80038be:	1ad3      	subs	r3, r2, r3
 80038c0:	2b02      	cmp	r3, #2
 80038c2:	d903      	bls.n	80038cc <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80038c4:	2303      	movs	r3, #3
 80038c6:	e15c      	b.n	8003b82 <HAL_RCC_OscConfig+0x53a>
 80038c8:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80038cc:	4b91      	ldr	r3, [pc, #580]	; (8003b14 <HAL_RCC_OscConfig+0x4cc>)
 80038ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80038d0:	f003 0302 	and.w	r3, r3, #2
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d1ee      	bne.n	80038b6 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f003 0304 	and.w	r3, r3, #4
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	f000 80a4 	beq.w	8003a2e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80038e6:	4b8b      	ldr	r3, [pc, #556]	; (8003b14 <HAL_RCC_OscConfig+0x4cc>)
 80038e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d10d      	bne.n	800390e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80038f2:	4b88      	ldr	r3, [pc, #544]	; (8003b14 <HAL_RCC_OscConfig+0x4cc>)
 80038f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038f6:	4a87      	ldr	r2, [pc, #540]	; (8003b14 <HAL_RCC_OscConfig+0x4cc>)
 80038f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038fc:	6413      	str	r3, [r2, #64]	; 0x40
 80038fe:	4b85      	ldr	r3, [pc, #532]	; (8003b14 <HAL_RCC_OscConfig+0x4cc>)
 8003900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003902:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003906:	60bb      	str	r3, [r7, #8]
 8003908:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800390a:	2301      	movs	r3, #1
 800390c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800390e:	4b82      	ldr	r3, [pc, #520]	; (8003b18 <HAL_RCC_OscConfig+0x4d0>)
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003916:	2b00      	cmp	r3, #0
 8003918:	d118      	bne.n	800394c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800391a:	4b7f      	ldr	r3, [pc, #508]	; (8003b18 <HAL_RCC_OscConfig+0x4d0>)
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	4a7e      	ldr	r2, [pc, #504]	; (8003b18 <HAL_RCC_OscConfig+0x4d0>)
 8003920:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003924:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003926:	f7fd ffd5 	bl	80018d4 <HAL_GetTick>
 800392a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800392c:	e008      	b.n	8003940 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800392e:	f7fd ffd1 	bl	80018d4 <HAL_GetTick>
 8003932:	4602      	mov	r2, r0
 8003934:	693b      	ldr	r3, [r7, #16]
 8003936:	1ad3      	subs	r3, r2, r3
 8003938:	2b64      	cmp	r3, #100	; 0x64
 800393a:	d901      	bls.n	8003940 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800393c:	2303      	movs	r3, #3
 800393e:	e120      	b.n	8003b82 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003940:	4b75      	ldr	r3, [pc, #468]	; (8003b18 <HAL_RCC_OscConfig+0x4d0>)
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003948:	2b00      	cmp	r3, #0
 800394a:	d0f0      	beq.n	800392e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	689b      	ldr	r3, [r3, #8]
 8003950:	2b01      	cmp	r3, #1
 8003952:	d106      	bne.n	8003962 <HAL_RCC_OscConfig+0x31a>
 8003954:	4b6f      	ldr	r3, [pc, #444]	; (8003b14 <HAL_RCC_OscConfig+0x4cc>)
 8003956:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003958:	4a6e      	ldr	r2, [pc, #440]	; (8003b14 <HAL_RCC_OscConfig+0x4cc>)
 800395a:	f043 0301 	orr.w	r3, r3, #1
 800395e:	6713      	str	r3, [r2, #112]	; 0x70
 8003960:	e02d      	b.n	80039be <HAL_RCC_OscConfig+0x376>
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	689b      	ldr	r3, [r3, #8]
 8003966:	2b00      	cmp	r3, #0
 8003968:	d10c      	bne.n	8003984 <HAL_RCC_OscConfig+0x33c>
 800396a:	4b6a      	ldr	r3, [pc, #424]	; (8003b14 <HAL_RCC_OscConfig+0x4cc>)
 800396c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800396e:	4a69      	ldr	r2, [pc, #420]	; (8003b14 <HAL_RCC_OscConfig+0x4cc>)
 8003970:	f023 0301 	bic.w	r3, r3, #1
 8003974:	6713      	str	r3, [r2, #112]	; 0x70
 8003976:	4b67      	ldr	r3, [pc, #412]	; (8003b14 <HAL_RCC_OscConfig+0x4cc>)
 8003978:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800397a:	4a66      	ldr	r2, [pc, #408]	; (8003b14 <HAL_RCC_OscConfig+0x4cc>)
 800397c:	f023 0304 	bic.w	r3, r3, #4
 8003980:	6713      	str	r3, [r2, #112]	; 0x70
 8003982:	e01c      	b.n	80039be <HAL_RCC_OscConfig+0x376>
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	689b      	ldr	r3, [r3, #8]
 8003988:	2b05      	cmp	r3, #5
 800398a:	d10c      	bne.n	80039a6 <HAL_RCC_OscConfig+0x35e>
 800398c:	4b61      	ldr	r3, [pc, #388]	; (8003b14 <HAL_RCC_OscConfig+0x4cc>)
 800398e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003990:	4a60      	ldr	r2, [pc, #384]	; (8003b14 <HAL_RCC_OscConfig+0x4cc>)
 8003992:	f043 0304 	orr.w	r3, r3, #4
 8003996:	6713      	str	r3, [r2, #112]	; 0x70
 8003998:	4b5e      	ldr	r3, [pc, #376]	; (8003b14 <HAL_RCC_OscConfig+0x4cc>)
 800399a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800399c:	4a5d      	ldr	r2, [pc, #372]	; (8003b14 <HAL_RCC_OscConfig+0x4cc>)
 800399e:	f043 0301 	orr.w	r3, r3, #1
 80039a2:	6713      	str	r3, [r2, #112]	; 0x70
 80039a4:	e00b      	b.n	80039be <HAL_RCC_OscConfig+0x376>
 80039a6:	4b5b      	ldr	r3, [pc, #364]	; (8003b14 <HAL_RCC_OscConfig+0x4cc>)
 80039a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039aa:	4a5a      	ldr	r2, [pc, #360]	; (8003b14 <HAL_RCC_OscConfig+0x4cc>)
 80039ac:	f023 0301 	bic.w	r3, r3, #1
 80039b0:	6713      	str	r3, [r2, #112]	; 0x70
 80039b2:	4b58      	ldr	r3, [pc, #352]	; (8003b14 <HAL_RCC_OscConfig+0x4cc>)
 80039b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039b6:	4a57      	ldr	r2, [pc, #348]	; (8003b14 <HAL_RCC_OscConfig+0x4cc>)
 80039b8:	f023 0304 	bic.w	r3, r3, #4
 80039bc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	689b      	ldr	r3, [r3, #8]
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d015      	beq.n	80039f2 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039c6:	f7fd ff85 	bl	80018d4 <HAL_GetTick>
 80039ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039cc:	e00a      	b.n	80039e4 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80039ce:	f7fd ff81 	bl	80018d4 <HAL_GetTick>
 80039d2:	4602      	mov	r2, r0
 80039d4:	693b      	ldr	r3, [r7, #16]
 80039d6:	1ad3      	subs	r3, r2, r3
 80039d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80039dc:	4293      	cmp	r3, r2
 80039de:	d901      	bls.n	80039e4 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80039e0:	2303      	movs	r3, #3
 80039e2:	e0ce      	b.n	8003b82 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039e4:	4b4b      	ldr	r3, [pc, #300]	; (8003b14 <HAL_RCC_OscConfig+0x4cc>)
 80039e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039e8:	f003 0302 	and.w	r3, r3, #2
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d0ee      	beq.n	80039ce <HAL_RCC_OscConfig+0x386>
 80039f0:	e014      	b.n	8003a1c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039f2:	f7fd ff6f 	bl	80018d4 <HAL_GetTick>
 80039f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80039f8:	e00a      	b.n	8003a10 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80039fa:	f7fd ff6b 	bl	80018d4 <HAL_GetTick>
 80039fe:	4602      	mov	r2, r0
 8003a00:	693b      	ldr	r3, [r7, #16]
 8003a02:	1ad3      	subs	r3, r2, r3
 8003a04:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a08:	4293      	cmp	r3, r2
 8003a0a:	d901      	bls.n	8003a10 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003a0c:	2303      	movs	r3, #3
 8003a0e:	e0b8      	b.n	8003b82 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a10:	4b40      	ldr	r3, [pc, #256]	; (8003b14 <HAL_RCC_OscConfig+0x4cc>)
 8003a12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a14:	f003 0302 	and.w	r3, r3, #2
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d1ee      	bne.n	80039fa <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003a1c:	7dfb      	ldrb	r3, [r7, #23]
 8003a1e:	2b01      	cmp	r3, #1
 8003a20:	d105      	bne.n	8003a2e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a22:	4b3c      	ldr	r3, [pc, #240]	; (8003b14 <HAL_RCC_OscConfig+0x4cc>)
 8003a24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a26:	4a3b      	ldr	r2, [pc, #236]	; (8003b14 <HAL_RCC_OscConfig+0x4cc>)
 8003a28:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a2c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	699b      	ldr	r3, [r3, #24]
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	f000 80a4 	beq.w	8003b80 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003a38:	4b36      	ldr	r3, [pc, #216]	; (8003b14 <HAL_RCC_OscConfig+0x4cc>)
 8003a3a:	689b      	ldr	r3, [r3, #8]
 8003a3c:	f003 030c 	and.w	r3, r3, #12
 8003a40:	2b08      	cmp	r3, #8
 8003a42:	d06b      	beq.n	8003b1c <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	699b      	ldr	r3, [r3, #24]
 8003a48:	2b02      	cmp	r3, #2
 8003a4a:	d149      	bne.n	8003ae0 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a4c:	4b31      	ldr	r3, [pc, #196]	; (8003b14 <HAL_RCC_OscConfig+0x4cc>)
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	4a30      	ldr	r2, [pc, #192]	; (8003b14 <HAL_RCC_OscConfig+0x4cc>)
 8003a52:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003a56:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a58:	f7fd ff3c 	bl	80018d4 <HAL_GetTick>
 8003a5c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a5e:	e008      	b.n	8003a72 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a60:	f7fd ff38 	bl	80018d4 <HAL_GetTick>
 8003a64:	4602      	mov	r2, r0
 8003a66:	693b      	ldr	r3, [r7, #16]
 8003a68:	1ad3      	subs	r3, r2, r3
 8003a6a:	2b02      	cmp	r3, #2
 8003a6c:	d901      	bls.n	8003a72 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003a6e:	2303      	movs	r3, #3
 8003a70:	e087      	b.n	8003b82 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a72:	4b28      	ldr	r3, [pc, #160]	; (8003b14 <HAL_RCC_OscConfig+0x4cc>)
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d1f0      	bne.n	8003a60 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	69da      	ldr	r2, [r3, #28]
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	6a1b      	ldr	r3, [r3, #32]
 8003a86:	431a      	orrs	r2, r3
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a8c:	019b      	lsls	r3, r3, #6
 8003a8e:	431a      	orrs	r2, r3
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a94:	085b      	lsrs	r3, r3, #1
 8003a96:	3b01      	subs	r3, #1
 8003a98:	041b      	lsls	r3, r3, #16
 8003a9a:	431a      	orrs	r2, r3
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aa0:	061b      	lsls	r3, r3, #24
 8003aa2:	4313      	orrs	r3, r2
 8003aa4:	4a1b      	ldr	r2, [pc, #108]	; (8003b14 <HAL_RCC_OscConfig+0x4cc>)
 8003aa6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003aaa:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003aac:	4b19      	ldr	r3, [pc, #100]	; (8003b14 <HAL_RCC_OscConfig+0x4cc>)
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	4a18      	ldr	r2, [pc, #96]	; (8003b14 <HAL_RCC_OscConfig+0x4cc>)
 8003ab2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003ab6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ab8:	f7fd ff0c 	bl	80018d4 <HAL_GetTick>
 8003abc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003abe:	e008      	b.n	8003ad2 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ac0:	f7fd ff08 	bl	80018d4 <HAL_GetTick>
 8003ac4:	4602      	mov	r2, r0
 8003ac6:	693b      	ldr	r3, [r7, #16]
 8003ac8:	1ad3      	subs	r3, r2, r3
 8003aca:	2b02      	cmp	r3, #2
 8003acc:	d901      	bls.n	8003ad2 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8003ace:	2303      	movs	r3, #3
 8003ad0:	e057      	b.n	8003b82 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ad2:	4b10      	ldr	r3, [pc, #64]	; (8003b14 <HAL_RCC_OscConfig+0x4cc>)
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d0f0      	beq.n	8003ac0 <HAL_RCC_OscConfig+0x478>
 8003ade:	e04f      	b.n	8003b80 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ae0:	4b0c      	ldr	r3, [pc, #48]	; (8003b14 <HAL_RCC_OscConfig+0x4cc>)
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	4a0b      	ldr	r2, [pc, #44]	; (8003b14 <HAL_RCC_OscConfig+0x4cc>)
 8003ae6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003aea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003aec:	f7fd fef2 	bl	80018d4 <HAL_GetTick>
 8003af0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003af2:	e008      	b.n	8003b06 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003af4:	f7fd feee 	bl	80018d4 <HAL_GetTick>
 8003af8:	4602      	mov	r2, r0
 8003afa:	693b      	ldr	r3, [r7, #16]
 8003afc:	1ad3      	subs	r3, r2, r3
 8003afe:	2b02      	cmp	r3, #2
 8003b00:	d901      	bls.n	8003b06 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8003b02:	2303      	movs	r3, #3
 8003b04:	e03d      	b.n	8003b82 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b06:	4b03      	ldr	r3, [pc, #12]	; (8003b14 <HAL_RCC_OscConfig+0x4cc>)
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d1f0      	bne.n	8003af4 <HAL_RCC_OscConfig+0x4ac>
 8003b12:	e035      	b.n	8003b80 <HAL_RCC_OscConfig+0x538>
 8003b14:	40023800 	.word	0x40023800
 8003b18:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003b1c:	4b1b      	ldr	r3, [pc, #108]	; (8003b8c <HAL_RCC_OscConfig+0x544>)
 8003b1e:	685b      	ldr	r3, [r3, #4]
 8003b20:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	699b      	ldr	r3, [r3, #24]
 8003b26:	2b01      	cmp	r3, #1
 8003b28:	d028      	beq.n	8003b7c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003b34:	429a      	cmp	r2, r3
 8003b36:	d121      	bne.n	8003b7c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b42:	429a      	cmp	r2, r3
 8003b44:	d11a      	bne.n	8003b7c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003b46:	68fa      	ldr	r2, [r7, #12]
 8003b48:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003b4c:	4013      	ands	r3, r2
 8003b4e:	687a      	ldr	r2, [r7, #4]
 8003b50:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003b52:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003b54:	4293      	cmp	r3, r2
 8003b56:	d111      	bne.n	8003b7c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b62:	085b      	lsrs	r3, r3, #1
 8003b64:	3b01      	subs	r3, #1
 8003b66:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003b68:	429a      	cmp	r2, r3
 8003b6a:	d107      	bne.n	8003b7c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b76:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003b78:	429a      	cmp	r2, r3
 8003b7a:	d001      	beq.n	8003b80 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8003b7c:	2301      	movs	r3, #1
 8003b7e:	e000      	b.n	8003b82 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8003b80:	2300      	movs	r3, #0
}
 8003b82:	4618      	mov	r0, r3
 8003b84:	3718      	adds	r7, #24
 8003b86:	46bd      	mov	sp, r7
 8003b88:	bd80      	pop	{r7, pc}
 8003b8a:	bf00      	nop
 8003b8c:	40023800 	.word	0x40023800

08003b90 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003b90:	b580      	push	{r7, lr}
 8003b92:	b084      	sub	sp, #16
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]
 8003b98:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003b9a:	2300      	movs	r3, #0
 8003b9c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d101      	bne.n	8003ba8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003ba4:	2301      	movs	r3, #1
 8003ba6:	e0d0      	b.n	8003d4a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003ba8:	4b6a      	ldr	r3, [pc, #424]	; (8003d54 <HAL_RCC_ClockConfig+0x1c4>)
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f003 030f 	and.w	r3, r3, #15
 8003bb0:	683a      	ldr	r2, [r7, #0]
 8003bb2:	429a      	cmp	r2, r3
 8003bb4:	d910      	bls.n	8003bd8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003bb6:	4b67      	ldr	r3, [pc, #412]	; (8003d54 <HAL_RCC_ClockConfig+0x1c4>)
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f023 020f 	bic.w	r2, r3, #15
 8003bbe:	4965      	ldr	r1, [pc, #404]	; (8003d54 <HAL_RCC_ClockConfig+0x1c4>)
 8003bc0:	683b      	ldr	r3, [r7, #0]
 8003bc2:	4313      	orrs	r3, r2
 8003bc4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003bc6:	4b63      	ldr	r3, [pc, #396]	; (8003d54 <HAL_RCC_ClockConfig+0x1c4>)
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f003 030f 	and.w	r3, r3, #15
 8003bce:	683a      	ldr	r2, [r7, #0]
 8003bd0:	429a      	cmp	r2, r3
 8003bd2:	d001      	beq.n	8003bd8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003bd4:	2301      	movs	r3, #1
 8003bd6:	e0b8      	b.n	8003d4a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f003 0302 	and.w	r3, r3, #2
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d020      	beq.n	8003c26 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f003 0304 	and.w	r3, r3, #4
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d005      	beq.n	8003bfc <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003bf0:	4b59      	ldr	r3, [pc, #356]	; (8003d58 <HAL_RCC_ClockConfig+0x1c8>)
 8003bf2:	689b      	ldr	r3, [r3, #8]
 8003bf4:	4a58      	ldr	r2, [pc, #352]	; (8003d58 <HAL_RCC_ClockConfig+0x1c8>)
 8003bf6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003bfa:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f003 0308 	and.w	r3, r3, #8
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d005      	beq.n	8003c14 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003c08:	4b53      	ldr	r3, [pc, #332]	; (8003d58 <HAL_RCC_ClockConfig+0x1c8>)
 8003c0a:	689b      	ldr	r3, [r3, #8]
 8003c0c:	4a52      	ldr	r2, [pc, #328]	; (8003d58 <HAL_RCC_ClockConfig+0x1c8>)
 8003c0e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003c12:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c14:	4b50      	ldr	r3, [pc, #320]	; (8003d58 <HAL_RCC_ClockConfig+0x1c8>)
 8003c16:	689b      	ldr	r3, [r3, #8]
 8003c18:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	689b      	ldr	r3, [r3, #8]
 8003c20:	494d      	ldr	r1, [pc, #308]	; (8003d58 <HAL_RCC_ClockConfig+0x1c8>)
 8003c22:	4313      	orrs	r3, r2
 8003c24:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f003 0301 	and.w	r3, r3, #1
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d040      	beq.n	8003cb4 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	685b      	ldr	r3, [r3, #4]
 8003c36:	2b01      	cmp	r3, #1
 8003c38:	d107      	bne.n	8003c4a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c3a:	4b47      	ldr	r3, [pc, #284]	; (8003d58 <HAL_RCC_ClockConfig+0x1c8>)
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d115      	bne.n	8003c72 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003c46:	2301      	movs	r3, #1
 8003c48:	e07f      	b.n	8003d4a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	685b      	ldr	r3, [r3, #4]
 8003c4e:	2b02      	cmp	r3, #2
 8003c50:	d107      	bne.n	8003c62 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c52:	4b41      	ldr	r3, [pc, #260]	; (8003d58 <HAL_RCC_ClockConfig+0x1c8>)
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d109      	bne.n	8003c72 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003c5e:	2301      	movs	r3, #1
 8003c60:	e073      	b.n	8003d4a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c62:	4b3d      	ldr	r3, [pc, #244]	; (8003d58 <HAL_RCC_ClockConfig+0x1c8>)
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f003 0302 	and.w	r3, r3, #2
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d101      	bne.n	8003c72 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003c6e:	2301      	movs	r3, #1
 8003c70:	e06b      	b.n	8003d4a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003c72:	4b39      	ldr	r3, [pc, #228]	; (8003d58 <HAL_RCC_ClockConfig+0x1c8>)
 8003c74:	689b      	ldr	r3, [r3, #8]
 8003c76:	f023 0203 	bic.w	r2, r3, #3
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	685b      	ldr	r3, [r3, #4]
 8003c7e:	4936      	ldr	r1, [pc, #216]	; (8003d58 <HAL_RCC_ClockConfig+0x1c8>)
 8003c80:	4313      	orrs	r3, r2
 8003c82:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c84:	f7fd fe26 	bl	80018d4 <HAL_GetTick>
 8003c88:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c8a:	e00a      	b.n	8003ca2 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c8c:	f7fd fe22 	bl	80018d4 <HAL_GetTick>
 8003c90:	4602      	mov	r2, r0
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	1ad3      	subs	r3, r2, r3
 8003c96:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c9a:	4293      	cmp	r3, r2
 8003c9c:	d901      	bls.n	8003ca2 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003c9e:	2303      	movs	r3, #3
 8003ca0:	e053      	b.n	8003d4a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ca2:	4b2d      	ldr	r3, [pc, #180]	; (8003d58 <HAL_RCC_ClockConfig+0x1c8>)
 8003ca4:	689b      	ldr	r3, [r3, #8]
 8003ca6:	f003 020c 	and.w	r2, r3, #12
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	685b      	ldr	r3, [r3, #4]
 8003cae:	009b      	lsls	r3, r3, #2
 8003cb0:	429a      	cmp	r2, r3
 8003cb2:	d1eb      	bne.n	8003c8c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003cb4:	4b27      	ldr	r3, [pc, #156]	; (8003d54 <HAL_RCC_ClockConfig+0x1c4>)
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f003 030f 	and.w	r3, r3, #15
 8003cbc:	683a      	ldr	r2, [r7, #0]
 8003cbe:	429a      	cmp	r2, r3
 8003cc0:	d210      	bcs.n	8003ce4 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003cc2:	4b24      	ldr	r3, [pc, #144]	; (8003d54 <HAL_RCC_ClockConfig+0x1c4>)
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f023 020f 	bic.w	r2, r3, #15
 8003cca:	4922      	ldr	r1, [pc, #136]	; (8003d54 <HAL_RCC_ClockConfig+0x1c4>)
 8003ccc:	683b      	ldr	r3, [r7, #0]
 8003cce:	4313      	orrs	r3, r2
 8003cd0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003cd2:	4b20      	ldr	r3, [pc, #128]	; (8003d54 <HAL_RCC_ClockConfig+0x1c4>)
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f003 030f 	and.w	r3, r3, #15
 8003cda:	683a      	ldr	r2, [r7, #0]
 8003cdc:	429a      	cmp	r2, r3
 8003cde:	d001      	beq.n	8003ce4 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003ce0:	2301      	movs	r3, #1
 8003ce2:	e032      	b.n	8003d4a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f003 0304 	and.w	r3, r3, #4
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d008      	beq.n	8003d02 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003cf0:	4b19      	ldr	r3, [pc, #100]	; (8003d58 <HAL_RCC_ClockConfig+0x1c8>)
 8003cf2:	689b      	ldr	r3, [r3, #8]
 8003cf4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	68db      	ldr	r3, [r3, #12]
 8003cfc:	4916      	ldr	r1, [pc, #88]	; (8003d58 <HAL_RCC_ClockConfig+0x1c8>)
 8003cfe:	4313      	orrs	r3, r2
 8003d00:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f003 0308 	and.w	r3, r3, #8
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d009      	beq.n	8003d22 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003d0e:	4b12      	ldr	r3, [pc, #72]	; (8003d58 <HAL_RCC_ClockConfig+0x1c8>)
 8003d10:	689b      	ldr	r3, [r3, #8]
 8003d12:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	691b      	ldr	r3, [r3, #16]
 8003d1a:	00db      	lsls	r3, r3, #3
 8003d1c:	490e      	ldr	r1, [pc, #56]	; (8003d58 <HAL_RCC_ClockConfig+0x1c8>)
 8003d1e:	4313      	orrs	r3, r2
 8003d20:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003d22:	f000 f821 	bl	8003d68 <HAL_RCC_GetSysClockFreq>
 8003d26:	4602      	mov	r2, r0
 8003d28:	4b0b      	ldr	r3, [pc, #44]	; (8003d58 <HAL_RCC_ClockConfig+0x1c8>)
 8003d2a:	689b      	ldr	r3, [r3, #8]
 8003d2c:	091b      	lsrs	r3, r3, #4
 8003d2e:	f003 030f 	and.w	r3, r3, #15
 8003d32:	490a      	ldr	r1, [pc, #40]	; (8003d5c <HAL_RCC_ClockConfig+0x1cc>)
 8003d34:	5ccb      	ldrb	r3, [r1, r3]
 8003d36:	fa22 f303 	lsr.w	r3, r2, r3
 8003d3a:	4a09      	ldr	r2, [pc, #36]	; (8003d60 <HAL_RCC_ClockConfig+0x1d0>)
 8003d3c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003d3e:	4b09      	ldr	r3, [pc, #36]	; (8003d64 <HAL_RCC_ClockConfig+0x1d4>)
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	4618      	mov	r0, r3
 8003d44:	f7fd fd82 	bl	800184c <HAL_InitTick>

  return HAL_OK;
 8003d48:	2300      	movs	r3, #0
}
 8003d4a:	4618      	mov	r0, r3
 8003d4c:	3710      	adds	r7, #16
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	bd80      	pop	{r7, pc}
 8003d52:	bf00      	nop
 8003d54:	40023c00 	.word	0x40023c00
 8003d58:	40023800 	.word	0x40023800
 8003d5c:	0801b058 	.word	0x0801b058
 8003d60:	20000000 	.word	0x20000000
 8003d64:	20000004 	.word	0x20000004

08003d68 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003d68:	b5b0      	push	{r4, r5, r7, lr}
 8003d6a:	b084      	sub	sp, #16
 8003d6c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003d6e:	2100      	movs	r1, #0
 8003d70:	6079      	str	r1, [r7, #4]
 8003d72:	2100      	movs	r1, #0
 8003d74:	60f9      	str	r1, [r7, #12]
 8003d76:	2100      	movs	r1, #0
 8003d78:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0;
 8003d7a:	2100      	movs	r1, #0
 8003d7c:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003d7e:	4952      	ldr	r1, [pc, #328]	; (8003ec8 <HAL_RCC_GetSysClockFreq+0x160>)
 8003d80:	6889      	ldr	r1, [r1, #8]
 8003d82:	f001 010c 	and.w	r1, r1, #12
 8003d86:	2908      	cmp	r1, #8
 8003d88:	d00d      	beq.n	8003da6 <HAL_RCC_GetSysClockFreq+0x3e>
 8003d8a:	2908      	cmp	r1, #8
 8003d8c:	f200 8094 	bhi.w	8003eb8 <HAL_RCC_GetSysClockFreq+0x150>
 8003d90:	2900      	cmp	r1, #0
 8003d92:	d002      	beq.n	8003d9a <HAL_RCC_GetSysClockFreq+0x32>
 8003d94:	2904      	cmp	r1, #4
 8003d96:	d003      	beq.n	8003da0 <HAL_RCC_GetSysClockFreq+0x38>
 8003d98:	e08e      	b.n	8003eb8 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003d9a:	4b4c      	ldr	r3, [pc, #304]	; (8003ecc <HAL_RCC_GetSysClockFreq+0x164>)
 8003d9c:	60bb      	str	r3, [r7, #8]
      break;
 8003d9e:	e08e      	b.n	8003ebe <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003da0:	4b4b      	ldr	r3, [pc, #300]	; (8003ed0 <HAL_RCC_GetSysClockFreq+0x168>)
 8003da2:	60bb      	str	r3, [r7, #8]
      break;
 8003da4:	e08b      	b.n	8003ebe <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003da6:	4948      	ldr	r1, [pc, #288]	; (8003ec8 <HAL_RCC_GetSysClockFreq+0x160>)
 8003da8:	6849      	ldr	r1, [r1, #4]
 8003daa:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8003dae:	6079      	str	r1, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003db0:	4945      	ldr	r1, [pc, #276]	; (8003ec8 <HAL_RCC_GetSysClockFreq+0x160>)
 8003db2:	6849      	ldr	r1, [r1, #4]
 8003db4:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8003db8:	2900      	cmp	r1, #0
 8003dba:	d024      	beq.n	8003e06 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003dbc:	4942      	ldr	r1, [pc, #264]	; (8003ec8 <HAL_RCC_GetSysClockFreq+0x160>)
 8003dbe:	6849      	ldr	r1, [r1, #4]
 8003dc0:	0989      	lsrs	r1, r1, #6
 8003dc2:	4608      	mov	r0, r1
 8003dc4:	f04f 0100 	mov.w	r1, #0
 8003dc8:	f240 14ff 	movw	r4, #511	; 0x1ff
 8003dcc:	f04f 0500 	mov.w	r5, #0
 8003dd0:	ea00 0204 	and.w	r2, r0, r4
 8003dd4:	ea01 0305 	and.w	r3, r1, r5
 8003dd8:	493d      	ldr	r1, [pc, #244]	; (8003ed0 <HAL_RCC_GetSysClockFreq+0x168>)
 8003dda:	fb01 f003 	mul.w	r0, r1, r3
 8003dde:	2100      	movs	r1, #0
 8003de0:	fb01 f102 	mul.w	r1, r1, r2
 8003de4:	1844      	adds	r4, r0, r1
 8003de6:	493a      	ldr	r1, [pc, #232]	; (8003ed0 <HAL_RCC_GetSysClockFreq+0x168>)
 8003de8:	fba2 0101 	umull	r0, r1, r2, r1
 8003dec:	1863      	adds	r3, r4, r1
 8003dee:	4619      	mov	r1, r3
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	461a      	mov	r2, r3
 8003df4:	f04f 0300 	mov.w	r3, #0
 8003df8:	f7fc ffc6 	bl	8000d88 <__aeabi_uldivmod>
 8003dfc:	4602      	mov	r2, r0
 8003dfe:	460b      	mov	r3, r1
 8003e00:	4613      	mov	r3, r2
 8003e02:	60fb      	str	r3, [r7, #12]
 8003e04:	e04a      	b.n	8003e9c <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e06:	4b30      	ldr	r3, [pc, #192]	; (8003ec8 <HAL_RCC_GetSysClockFreq+0x160>)
 8003e08:	685b      	ldr	r3, [r3, #4]
 8003e0a:	099b      	lsrs	r3, r3, #6
 8003e0c:	461a      	mov	r2, r3
 8003e0e:	f04f 0300 	mov.w	r3, #0
 8003e12:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003e16:	f04f 0100 	mov.w	r1, #0
 8003e1a:	ea02 0400 	and.w	r4, r2, r0
 8003e1e:	ea03 0501 	and.w	r5, r3, r1
 8003e22:	4620      	mov	r0, r4
 8003e24:	4629      	mov	r1, r5
 8003e26:	f04f 0200 	mov.w	r2, #0
 8003e2a:	f04f 0300 	mov.w	r3, #0
 8003e2e:	014b      	lsls	r3, r1, #5
 8003e30:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003e34:	0142      	lsls	r2, r0, #5
 8003e36:	4610      	mov	r0, r2
 8003e38:	4619      	mov	r1, r3
 8003e3a:	1b00      	subs	r0, r0, r4
 8003e3c:	eb61 0105 	sbc.w	r1, r1, r5
 8003e40:	f04f 0200 	mov.w	r2, #0
 8003e44:	f04f 0300 	mov.w	r3, #0
 8003e48:	018b      	lsls	r3, r1, #6
 8003e4a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003e4e:	0182      	lsls	r2, r0, #6
 8003e50:	1a12      	subs	r2, r2, r0
 8003e52:	eb63 0301 	sbc.w	r3, r3, r1
 8003e56:	f04f 0000 	mov.w	r0, #0
 8003e5a:	f04f 0100 	mov.w	r1, #0
 8003e5e:	00d9      	lsls	r1, r3, #3
 8003e60:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003e64:	00d0      	lsls	r0, r2, #3
 8003e66:	4602      	mov	r2, r0
 8003e68:	460b      	mov	r3, r1
 8003e6a:	1912      	adds	r2, r2, r4
 8003e6c:	eb45 0303 	adc.w	r3, r5, r3
 8003e70:	f04f 0000 	mov.w	r0, #0
 8003e74:	f04f 0100 	mov.w	r1, #0
 8003e78:	0299      	lsls	r1, r3, #10
 8003e7a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003e7e:	0290      	lsls	r0, r2, #10
 8003e80:	4602      	mov	r2, r0
 8003e82:	460b      	mov	r3, r1
 8003e84:	4610      	mov	r0, r2
 8003e86:	4619      	mov	r1, r3
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	461a      	mov	r2, r3
 8003e8c:	f04f 0300 	mov.w	r3, #0
 8003e90:	f7fc ff7a 	bl	8000d88 <__aeabi_uldivmod>
 8003e94:	4602      	mov	r2, r0
 8003e96:	460b      	mov	r3, r1
 8003e98:	4613      	mov	r3, r2
 8003e9a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003e9c:	4b0a      	ldr	r3, [pc, #40]	; (8003ec8 <HAL_RCC_GetSysClockFreq+0x160>)
 8003e9e:	685b      	ldr	r3, [r3, #4]
 8003ea0:	0c1b      	lsrs	r3, r3, #16
 8003ea2:	f003 0303 	and.w	r3, r3, #3
 8003ea6:	3301      	adds	r3, #1
 8003ea8:	005b      	lsls	r3, r3, #1
 8003eaa:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8003eac:	68fa      	ldr	r2, [r7, #12]
 8003eae:	683b      	ldr	r3, [r7, #0]
 8003eb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003eb4:	60bb      	str	r3, [r7, #8]
      break;
 8003eb6:	e002      	b.n	8003ebe <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003eb8:	4b04      	ldr	r3, [pc, #16]	; (8003ecc <HAL_RCC_GetSysClockFreq+0x164>)
 8003eba:	60bb      	str	r3, [r7, #8]
      break;
 8003ebc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003ebe:	68bb      	ldr	r3, [r7, #8]
}
 8003ec0:	4618      	mov	r0, r3
 8003ec2:	3710      	adds	r7, #16
 8003ec4:	46bd      	mov	sp, r7
 8003ec6:	bdb0      	pop	{r4, r5, r7, pc}
 8003ec8:	40023800 	.word	0x40023800
 8003ecc:	00f42400 	.word	0x00f42400
 8003ed0:	017d7840 	.word	0x017d7840

08003ed4 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003ed4:	b480      	push	{r7}
 8003ed6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003ed8:	4b03      	ldr	r3, [pc, #12]	; (8003ee8 <HAL_RCC_GetHCLKFreq+0x14>)
 8003eda:	681b      	ldr	r3, [r3, #0]
}
 8003edc:	4618      	mov	r0, r3
 8003ede:	46bd      	mov	sp, r7
 8003ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee4:	4770      	bx	lr
 8003ee6:	bf00      	nop
 8003ee8:	20000000 	.word	0x20000000

08003eec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003eec:	b580      	push	{r7, lr}
 8003eee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003ef0:	f7ff fff0 	bl	8003ed4 <HAL_RCC_GetHCLKFreq>
 8003ef4:	4602      	mov	r2, r0
 8003ef6:	4b05      	ldr	r3, [pc, #20]	; (8003f0c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003ef8:	689b      	ldr	r3, [r3, #8]
 8003efa:	0a9b      	lsrs	r3, r3, #10
 8003efc:	f003 0307 	and.w	r3, r3, #7
 8003f00:	4903      	ldr	r1, [pc, #12]	; (8003f10 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003f02:	5ccb      	ldrb	r3, [r1, r3]
 8003f04:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f08:	4618      	mov	r0, r3
 8003f0a:	bd80      	pop	{r7, pc}
 8003f0c:	40023800 	.word	0x40023800
 8003f10:	0801b068 	.word	0x0801b068

08003f14 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003f14:	b580      	push	{r7, lr}
 8003f16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003f18:	f7ff ffdc 	bl	8003ed4 <HAL_RCC_GetHCLKFreq>
 8003f1c:	4602      	mov	r2, r0
 8003f1e:	4b05      	ldr	r3, [pc, #20]	; (8003f34 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003f20:	689b      	ldr	r3, [r3, #8]
 8003f22:	0b5b      	lsrs	r3, r3, #13
 8003f24:	f003 0307 	and.w	r3, r3, #7
 8003f28:	4903      	ldr	r1, [pc, #12]	; (8003f38 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003f2a:	5ccb      	ldrb	r3, [r1, r3]
 8003f2c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f30:	4618      	mov	r0, r3
 8003f32:	bd80      	pop	{r7, pc}
 8003f34:	40023800 	.word	0x40023800
 8003f38:	0801b068 	.word	0x0801b068

08003f3c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003f3c:	b580      	push	{r7, lr}
 8003f3e:	b088      	sub	sp, #32
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003f44:	2300      	movs	r3, #0
 8003f46:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003f48:	2300      	movs	r3, #0
 8003f4a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003f4c:	2300      	movs	r3, #0
 8003f4e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003f50:	2300      	movs	r3, #0
 8003f52:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003f54:	2300      	movs	r3, #0
 8003f56:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f003 0301 	and.w	r3, r3, #1
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d012      	beq.n	8003f8a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003f64:	4b69      	ldr	r3, [pc, #420]	; (800410c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f66:	689b      	ldr	r3, [r3, #8]
 8003f68:	4a68      	ldr	r2, [pc, #416]	; (800410c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f6a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003f6e:	6093      	str	r3, [r2, #8]
 8003f70:	4b66      	ldr	r3, [pc, #408]	; (800410c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f72:	689a      	ldr	r2, [r3, #8]
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f78:	4964      	ldr	r1, [pc, #400]	; (800410c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f7a:	4313      	orrs	r3, r2
 8003f7c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d101      	bne.n	8003f8a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8003f86:	2301      	movs	r3, #1
 8003f88:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d017      	beq.n	8003fc6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003f96:	4b5d      	ldr	r3, [pc, #372]	; (800410c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f98:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003f9c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fa4:	4959      	ldr	r1, [pc, #356]	; (800410c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003fa6:	4313      	orrs	r3, r2
 8003fa8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fb0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003fb4:	d101      	bne.n	8003fba <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8003fb6:	2301      	movs	r3, #1
 8003fb8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d101      	bne.n	8003fc6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8003fc2:	2301      	movs	r3, #1
 8003fc4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d017      	beq.n	8004002 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003fd2:	4b4e      	ldr	r3, [pc, #312]	; (800410c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003fd4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003fd8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fe0:	494a      	ldr	r1, [pc, #296]	; (800410c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003fe2:	4313      	orrs	r3, r2
 8003fe4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fec:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003ff0:	d101      	bne.n	8003ff6 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8003ff2:	2301      	movs	r3, #1
 8003ff4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d101      	bne.n	8004002 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8003ffe:	2301      	movs	r3, #1
 8004000:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800400a:	2b00      	cmp	r3, #0
 800400c:	d001      	beq.n	8004012 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800400e:	2301      	movs	r3, #1
 8004010:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f003 0320 	and.w	r3, r3, #32
 800401a:	2b00      	cmp	r3, #0
 800401c:	f000 808b 	beq.w	8004136 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004020:	4b3a      	ldr	r3, [pc, #232]	; (800410c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004022:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004024:	4a39      	ldr	r2, [pc, #228]	; (800410c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004026:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800402a:	6413      	str	r3, [r2, #64]	; 0x40
 800402c:	4b37      	ldr	r3, [pc, #220]	; (800410c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800402e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004030:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004034:	60bb      	str	r3, [r7, #8]
 8004036:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004038:	4b35      	ldr	r3, [pc, #212]	; (8004110 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	4a34      	ldr	r2, [pc, #208]	; (8004110 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800403e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004042:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004044:	f7fd fc46 	bl	80018d4 <HAL_GetTick>
 8004048:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800404a:	e008      	b.n	800405e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800404c:	f7fd fc42 	bl	80018d4 <HAL_GetTick>
 8004050:	4602      	mov	r2, r0
 8004052:	697b      	ldr	r3, [r7, #20]
 8004054:	1ad3      	subs	r3, r2, r3
 8004056:	2b64      	cmp	r3, #100	; 0x64
 8004058:	d901      	bls.n	800405e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800405a:	2303      	movs	r3, #3
 800405c:	e357      	b.n	800470e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800405e:	4b2c      	ldr	r3, [pc, #176]	; (8004110 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004066:	2b00      	cmp	r3, #0
 8004068:	d0f0      	beq.n	800404c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800406a:	4b28      	ldr	r3, [pc, #160]	; (800410c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800406c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800406e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004072:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004074:	693b      	ldr	r3, [r7, #16]
 8004076:	2b00      	cmp	r3, #0
 8004078:	d035      	beq.n	80040e6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800407e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004082:	693a      	ldr	r2, [r7, #16]
 8004084:	429a      	cmp	r2, r3
 8004086:	d02e      	beq.n	80040e6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004088:	4b20      	ldr	r3, [pc, #128]	; (800410c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800408a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800408c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004090:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004092:	4b1e      	ldr	r3, [pc, #120]	; (800410c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004094:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004096:	4a1d      	ldr	r2, [pc, #116]	; (800410c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004098:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800409c:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800409e:	4b1b      	ldr	r3, [pc, #108]	; (800410c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80040a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040a2:	4a1a      	ldr	r2, [pc, #104]	; (800410c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80040a4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80040a8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80040aa:	4a18      	ldr	r2, [pc, #96]	; (800410c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80040ac:	693b      	ldr	r3, [r7, #16]
 80040ae:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80040b0:	4b16      	ldr	r3, [pc, #88]	; (800410c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80040b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040b4:	f003 0301 	and.w	r3, r3, #1
 80040b8:	2b01      	cmp	r3, #1
 80040ba:	d114      	bne.n	80040e6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040bc:	f7fd fc0a 	bl	80018d4 <HAL_GetTick>
 80040c0:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040c2:	e00a      	b.n	80040da <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80040c4:	f7fd fc06 	bl	80018d4 <HAL_GetTick>
 80040c8:	4602      	mov	r2, r0
 80040ca:	697b      	ldr	r3, [r7, #20]
 80040cc:	1ad3      	subs	r3, r2, r3
 80040ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80040d2:	4293      	cmp	r3, r2
 80040d4:	d901      	bls.n	80040da <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80040d6:	2303      	movs	r3, #3
 80040d8:	e319      	b.n	800470e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040da:	4b0c      	ldr	r3, [pc, #48]	; (800410c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80040dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040de:	f003 0302 	and.w	r3, r3, #2
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d0ee      	beq.n	80040c4 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80040ee:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80040f2:	d111      	bne.n	8004118 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80040f4:	4b05      	ldr	r3, [pc, #20]	; (800410c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80040f6:	689b      	ldr	r3, [r3, #8]
 80040f8:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004100:	4b04      	ldr	r3, [pc, #16]	; (8004114 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004102:	400b      	ands	r3, r1
 8004104:	4901      	ldr	r1, [pc, #4]	; (800410c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004106:	4313      	orrs	r3, r2
 8004108:	608b      	str	r3, [r1, #8]
 800410a:	e00b      	b.n	8004124 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800410c:	40023800 	.word	0x40023800
 8004110:	40007000 	.word	0x40007000
 8004114:	0ffffcff 	.word	0x0ffffcff
 8004118:	4bb1      	ldr	r3, [pc, #708]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800411a:	689b      	ldr	r3, [r3, #8]
 800411c:	4ab0      	ldr	r2, [pc, #704]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800411e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004122:	6093      	str	r3, [r2, #8]
 8004124:	4bae      	ldr	r3, [pc, #696]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004126:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800412c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004130:	49ab      	ldr	r1, [pc, #684]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004132:	4313      	orrs	r3, r2
 8004134:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f003 0310 	and.w	r3, r3, #16
 800413e:	2b00      	cmp	r3, #0
 8004140:	d010      	beq.n	8004164 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004142:	4ba7      	ldr	r3, [pc, #668]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004144:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004148:	4aa5      	ldr	r2, [pc, #660]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800414a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800414e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8004152:	4ba3      	ldr	r3, [pc, #652]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004154:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800415c:	49a0      	ldr	r1, [pc, #640]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800415e:	4313      	orrs	r3, r2
 8004160:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800416c:	2b00      	cmp	r3, #0
 800416e:	d00a      	beq.n	8004186 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004170:	4b9b      	ldr	r3, [pc, #620]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004172:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004176:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800417e:	4998      	ldr	r1, [pc, #608]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004180:	4313      	orrs	r3, r2
 8004182:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800418e:	2b00      	cmp	r3, #0
 8004190:	d00a      	beq.n	80041a8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004192:	4b93      	ldr	r3, [pc, #588]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004194:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004198:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80041a0:	498f      	ldr	r1, [pc, #572]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80041a2:	4313      	orrs	r3, r2
 80041a4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d00a      	beq.n	80041ca <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80041b4:	4b8a      	ldr	r3, [pc, #552]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80041b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041ba:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80041c2:	4987      	ldr	r1, [pc, #540]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80041c4:	4313      	orrs	r3, r2
 80041c6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d00a      	beq.n	80041ec <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80041d6:	4b82      	ldr	r3, [pc, #520]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80041d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041dc:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041e4:	497e      	ldr	r1, [pc, #504]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80041e6:	4313      	orrs	r3, r2
 80041e8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d00a      	beq.n	800420e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80041f8:	4b79      	ldr	r3, [pc, #484]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80041fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041fe:	f023 0203 	bic.w	r2, r3, #3
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004206:	4976      	ldr	r1, [pc, #472]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004208:	4313      	orrs	r3, r2
 800420a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004216:	2b00      	cmp	r3, #0
 8004218:	d00a      	beq.n	8004230 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800421a:	4b71      	ldr	r3, [pc, #452]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800421c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004220:	f023 020c 	bic.w	r2, r3, #12
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004228:	496d      	ldr	r1, [pc, #436]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800422a:	4313      	orrs	r3, r2
 800422c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004238:	2b00      	cmp	r3, #0
 800423a:	d00a      	beq.n	8004252 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800423c:	4b68      	ldr	r3, [pc, #416]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800423e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004242:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800424a:	4965      	ldr	r1, [pc, #404]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800424c:	4313      	orrs	r3, r2
 800424e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800425a:	2b00      	cmp	r3, #0
 800425c:	d00a      	beq.n	8004274 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800425e:	4b60      	ldr	r3, [pc, #384]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004260:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004264:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800426c:	495c      	ldr	r1, [pc, #368]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800426e:	4313      	orrs	r3, r2
 8004270:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800427c:	2b00      	cmp	r3, #0
 800427e:	d00a      	beq.n	8004296 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004280:	4b57      	ldr	r3, [pc, #348]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004282:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004286:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800428e:	4954      	ldr	r1, [pc, #336]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004290:	4313      	orrs	r3, r2
 8004292:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d00a      	beq.n	80042b8 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80042a2:	4b4f      	ldr	r3, [pc, #316]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80042a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042a8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042b0:	494b      	ldr	r1, [pc, #300]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80042b2:	4313      	orrs	r3, r2
 80042b4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d00a      	beq.n	80042da <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80042c4:	4b46      	ldr	r3, [pc, #280]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80042c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042ca:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042d2:	4943      	ldr	r1, [pc, #268]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80042d4:	4313      	orrs	r3, r2
 80042d6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d00a      	beq.n	80042fc <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80042e6:	4b3e      	ldr	r3, [pc, #248]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80042e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042ec:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80042f4:	493a      	ldr	r1, [pc, #232]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80042f6:	4313      	orrs	r3, r2
 80042f8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004304:	2b00      	cmp	r3, #0
 8004306:	d00a      	beq.n	800431e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004308:	4b35      	ldr	r3, [pc, #212]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800430a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800430e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004316:	4932      	ldr	r1, [pc, #200]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004318:	4313      	orrs	r3, r2
 800431a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004326:	2b00      	cmp	r3, #0
 8004328:	d011      	beq.n	800434e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800432a:	4b2d      	ldr	r3, [pc, #180]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800432c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004330:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004338:	4929      	ldr	r1, [pc, #164]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800433a:	4313      	orrs	r3, r2
 800433c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004344:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004348:	d101      	bne.n	800434e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800434a:	2301      	movs	r3, #1
 800434c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f003 0308 	and.w	r3, r3, #8
 8004356:	2b00      	cmp	r3, #0
 8004358:	d001      	beq.n	800435e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800435a:	2301      	movs	r3, #1
 800435c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004366:	2b00      	cmp	r3, #0
 8004368:	d00a      	beq.n	8004380 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800436a:	4b1d      	ldr	r3, [pc, #116]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800436c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004370:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004378:	4919      	ldr	r1, [pc, #100]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800437a:	4313      	orrs	r3, r2
 800437c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004388:	2b00      	cmp	r3, #0
 800438a:	d00b      	beq.n	80043a4 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800438c:	4b14      	ldr	r3, [pc, #80]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800438e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004392:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800439c:	4910      	ldr	r1, [pc, #64]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800439e:	4313      	orrs	r3, r2
 80043a0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80043a4:	69fb      	ldr	r3, [r7, #28]
 80043a6:	2b01      	cmp	r3, #1
 80043a8:	d006      	beq.n	80043b8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	f000 80d9 	beq.w	800456a <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80043b8:	4b09      	ldr	r3, [pc, #36]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	4a08      	ldr	r2, [pc, #32]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80043be:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80043c2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80043c4:	f7fd fa86 	bl	80018d4 <HAL_GetTick>
 80043c8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80043ca:	e00b      	b.n	80043e4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80043cc:	f7fd fa82 	bl	80018d4 <HAL_GetTick>
 80043d0:	4602      	mov	r2, r0
 80043d2:	697b      	ldr	r3, [r7, #20]
 80043d4:	1ad3      	subs	r3, r2, r3
 80043d6:	2b64      	cmp	r3, #100	; 0x64
 80043d8:	d904      	bls.n	80043e4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80043da:	2303      	movs	r3, #3
 80043dc:	e197      	b.n	800470e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 80043de:	bf00      	nop
 80043e0:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80043e4:	4b6c      	ldr	r3, [pc, #432]	; (8004598 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d1ed      	bne.n	80043cc <HAL_RCCEx_PeriphCLKConfig+0x490>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f003 0301 	and.w	r3, r3, #1
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d021      	beq.n	8004440 <HAL_RCCEx_PeriphCLKConfig+0x504>
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004400:	2b00      	cmp	r3, #0
 8004402:	d11d      	bne.n	8004440 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004404:	4b64      	ldr	r3, [pc, #400]	; (8004598 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004406:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800440a:	0c1b      	lsrs	r3, r3, #16
 800440c:	f003 0303 	and.w	r3, r3, #3
 8004410:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004412:	4b61      	ldr	r3, [pc, #388]	; (8004598 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004414:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004418:	0e1b      	lsrs	r3, r3, #24
 800441a:	f003 030f 	and.w	r3, r3, #15
 800441e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	685b      	ldr	r3, [r3, #4]
 8004424:	019a      	lsls	r2, r3, #6
 8004426:	693b      	ldr	r3, [r7, #16]
 8004428:	041b      	lsls	r3, r3, #16
 800442a:	431a      	orrs	r2, r3
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	061b      	lsls	r3, r3, #24
 8004430:	431a      	orrs	r2, r3
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	689b      	ldr	r3, [r3, #8]
 8004436:	071b      	lsls	r3, r3, #28
 8004438:	4957      	ldr	r1, [pc, #348]	; (8004598 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800443a:	4313      	orrs	r3, r2
 800443c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004448:	2b00      	cmp	r3, #0
 800444a:	d004      	beq.n	8004456 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004450:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004454:	d00a      	beq.n	800446c <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800445e:	2b00      	cmp	r3, #0
 8004460:	d02e      	beq.n	80044c0 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004466:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800446a:	d129      	bne.n	80044c0 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800446c:	4b4a      	ldr	r3, [pc, #296]	; (8004598 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800446e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004472:	0c1b      	lsrs	r3, r3, #16
 8004474:	f003 0303 	and.w	r3, r3, #3
 8004478:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800447a:	4b47      	ldr	r3, [pc, #284]	; (8004598 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800447c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004480:	0f1b      	lsrs	r3, r3, #28
 8004482:	f003 0307 	and.w	r3, r3, #7
 8004486:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	685b      	ldr	r3, [r3, #4]
 800448c:	019a      	lsls	r2, r3, #6
 800448e:	693b      	ldr	r3, [r7, #16]
 8004490:	041b      	lsls	r3, r3, #16
 8004492:	431a      	orrs	r2, r3
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	68db      	ldr	r3, [r3, #12]
 8004498:	061b      	lsls	r3, r3, #24
 800449a:	431a      	orrs	r2, r3
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	071b      	lsls	r3, r3, #28
 80044a0:	493d      	ldr	r1, [pc, #244]	; (8004598 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80044a2:	4313      	orrs	r3, r2
 80044a4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80044a8:	4b3b      	ldr	r3, [pc, #236]	; (8004598 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80044aa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80044ae:	f023 021f 	bic.w	r2, r3, #31
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044b6:	3b01      	subs	r3, #1
 80044b8:	4937      	ldr	r1, [pc, #220]	; (8004598 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80044ba:	4313      	orrs	r3, r2
 80044bc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d01d      	beq.n	8004508 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80044cc:	4b32      	ldr	r3, [pc, #200]	; (8004598 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80044ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80044d2:	0e1b      	lsrs	r3, r3, #24
 80044d4:	f003 030f 	and.w	r3, r3, #15
 80044d8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80044da:	4b2f      	ldr	r3, [pc, #188]	; (8004598 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80044dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80044e0:	0f1b      	lsrs	r3, r3, #28
 80044e2:	f003 0307 	and.w	r3, r3, #7
 80044e6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	685b      	ldr	r3, [r3, #4]
 80044ec:	019a      	lsls	r2, r3, #6
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	691b      	ldr	r3, [r3, #16]
 80044f2:	041b      	lsls	r3, r3, #16
 80044f4:	431a      	orrs	r2, r3
 80044f6:	693b      	ldr	r3, [r7, #16]
 80044f8:	061b      	lsls	r3, r3, #24
 80044fa:	431a      	orrs	r2, r3
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	071b      	lsls	r3, r3, #28
 8004500:	4925      	ldr	r1, [pc, #148]	; (8004598 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004502:	4313      	orrs	r3, r2
 8004504:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004510:	2b00      	cmp	r3, #0
 8004512:	d011      	beq.n	8004538 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	685b      	ldr	r3, [r3, #4]
 8004518:	019a      	lsls	r2, r3, #6
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	691b      	ldr	r3, [r3, #16]
 800451e:	041b      	lsls	r3, r3, #16
 8004520:	431a      	orrs	r2, r3
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	68db      	ldr	r3, [r3, #12]
 8004526:	061b      	lsls	r3, r3, #24
 8004528:	431a      	orrs	r2, r3
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	689b      	ldr	r3, [r3, #8]
 800452e:	071b      	lsls	r3, r3, #28
 8004530:	4919      	ldr	r1, [pc, #100]	; (8004598 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004532:	4313      	orrs	r3, r2
 8004534:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004538:	4b17      	ldr	r3, [pc, #92]	; (8004598 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	4a16      	ldr	r2, [pc, #88]	; (8004598 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800453e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004542:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004544:	f7fd f9c6 	bl	80018d4 <HAL_GetTick>
 8004548:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800454a:	e008      	b.n	800455e <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800454c:	f7fd f9c2 	bl	80018d4 <HAL_GetTick>
 8004550:	4602      	mov	r2, r0
 8004552:	697b      	ldr	r3, [r7, #20]
 8004554:	1ad3      	subs	r3, r2, r3
 8004556:	2b64      	cmp	r3, #100	; 0x64
 8004558:	d901      	bls.n	800455e <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800455a:	2303      	movs	r3, #3
 800455c:	e0d7      	b.n	800470e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800455e:	4b0e      	ldr	r3, [pc, #56]	; (8004598 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004566:	2b00      	cmp	r3, #0
 8004568:	d0f0      	beq.n	800454c <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800456a:	69bb      	ldr	r3, [r7, #24]
 800456c:	2b01      	cmp	r3, #1
 800456e:	f040 80cd 	bne.w	800470c <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004572:	4b09      	ldr	r3, [pc, #36]	; (8004598 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	4a08      	ldr	r2, [pc, #32]	; (8004598 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004578:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800457c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800457e:	f7fd f9a9 	bl	80018d4 <HAL_GetTick>
 8004582:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004584:	e00a      	b.n	800459c <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004586:	f7fd f9a5 	bl	80018d4 <HAL_GetTick>
 800458a:	4602      	mov	r2, r0
 800458c:	697b      	ldr	r3, [r7, #20]
 800458e:	1ad3      	subs	r3, r2, r3
 8004590:	2b64      	cmp	r3, #100	; 0x64
 8004592:	d903      	bls.n	800459c <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004594:	2303      	movs	r3, #3
 8004596:	e0ba      	b.n	800470e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8004598:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800459c:	4b5e      	ldr	r3, [pc, #376]	; (8004718 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80045a4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80045a8:	d0ed      	beq.n	8004586 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d003      	beq.n	80045be <HAL_RCCEx_PeriphCLKConfig+0x682>
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d009      	beq.n	80045d2 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d02e      	beq.n	8004628 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d12a      	bne.n	8004628 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80045d2:	4b51      	ldr	r3, [pc, #324]	; (8004718 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80045d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045d8:	0c1b      	lsrs	r3, r3, #16
 80045da:	f003 0303 	and.w	r3, r3, #3
 80045de:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80045e0:	4b4d      	ldr	r3, [pc, #308]	; (8004718 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80045e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045e6:	0f1b      	lsrs	r3, r3, #28
 80045e8:	f003 0307 	and.w	r3, r3, #7
 80045ec:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	695b      	ldr	r3, [r3, #20]
 80045f2:	019a      	lsls	r2, r3, #6
 80045f4:	693b      	ldr	r3, [r7, #16]
 80045f6:	041b      	lsls	r3, r3, #16
 80045f8:	431a      	orrs	r2, r3
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	699b      	ldr	r3, [r3, #24]
 80045fe:	061b      	lsls	r3, r3, #24
 8004600:	431a      	orrs	r2, r3
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	071b      	lsls	r3, r3, #28
 8004606:	4944      	ldr	r1, [pc, #272]	; (8004718 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004608:	4313      	orrs	r3, r2
 800460a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800460e:	4b42      	ldr	r3, [pc, #264]	; (8004718 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004610:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004614:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800461c:	3b01      	subs	r3, #1
 800461e:	021b      	lsls	r3, r3, #8
 8004620:	493d      	ldr	r1, [pc, #244]	; (8004718 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004622:	4313      	orrs	r3, r2
 8004624:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004630:	2b00      	cmp	r3, #0
 8004632:	d022      	beq.n	800467a <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004638:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800463c:	d11d      	bne.n	800467a <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800463e:	4b36      	ldr	r3, [pc, #216]	; (8004718 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004640:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004644:	0e1b      	lsrs	r3, r3, #24
 8004646:	f003 030f 	and.w	r3, r3, #15
 800464a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800464c:	4b32      	ldr	r3, [pc, #200]	; (8004718 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800464e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004652:	0f1b      	lsrs	r3, r3, #28
 8004654:	f003 0307 	and.w	r3, r3, #7
 8004658:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	695b      	ldr	r3, [r3, #20]
 800465e:	019a      	lsls	r2, r3, #6
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	6a1b      	ldr	r3, [r3, #32]
 8004664:	041b      	lsls	r3, r3, #16
 8004666:	431a      	orrs	r2, r3
 8004668:	693b      	ldr	r3, [r7, #16]
 800466a:	061b      	lsls	r3, r3, #24
 800466c:	431a      	orrs	r2, r3
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	071b      	lsls	r3, r3, #28
 8004672:	4929      	ldr	r1, [pc, #164]	; (8004718 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004674:	4313      	orrs	r3, r2
 8004676:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f003 0308 	and.w	r3, r3, #8
 8004682:	2b00      	cmp	r3, #0
 8004684:	d028      	beq.n	80046d8 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004686:	4b24      	ldr	r3, [pc, #144]	; (8004718 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004688:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800468c:	0e1b      	lsrs	r3, r3, #24
 800468e:	f003 030f 	and.w	r3, r3, #15
 8004692:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004694:	4b20      	ldr	r3, [pc, #128]	; (8004718 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004696:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800469a:	0c1b      	lsrs	r3, r3, #16
 800469c:	f003 0303 	and.w	r3, r3, #3
 80046a0:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	695b      	ldr	r3, [r3, #20]
 80046a6:	019a      	lsls	r2, r3, #6
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	041b      	lsls	r3, r3, #16
 80046ac:	431a      	orrs	r2, r3
 80046ae:	693b      	ldr	r3, [r7, #16]
 80046b0:	061b      	lsls	r3, r3, #24
 80046b2:	431a      	orrs	r2, r3
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	69db      	ldr	r3, [r3, #28]
 80046b8:	071b      	lsls	r3, r3, #28
 80046ba:	4917      	ldr	r1, [pc, #92]	; (8004718 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80046bc:	4313      	orrs	r3, r2
 80046be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80046c2:	4b15      	ldr	r3, [pc, #84]	; (8004718 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80046c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80046c8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046d0:	4911      	ldr	r1, [pc, #68]	; (8004718 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80046d2:	4313      	orrs	r3, r2
 80046d4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80046d8:	4b0f      	ldr	r3, [pc, #60]	; (8004718 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	4a0e      	ldr	r2, [pc, #56]	; (8004718 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80046de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80046e2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80046e4:	f7fd f8f6 	bl	80018d4 <HAL_GetTick>
 80046e8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80046ea:	e008      	b.n	80046fe <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80046ec:	f7fd f8f2 	bl	80018d4 <HAL_GetTick>
 80046f0:	4602      	mov	r2, r0
 80046f2:	697b      	ldr	r3, [r7, #20]
 80046f4:	1ad3      	subs	r3, r2, r3
 80046f6:	2b64      	cmp	r3, #100	; 0x64
 80046f8:	d901      	bls.n	80046fe <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80046fa:	2303      	movs	r3, #3
 80046fc:	e007      	b.n	800470e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80046fe:	4b06      	ldr	r3, [pc, #24]	; (8004718 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004706:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800470a:	d1ef      	bne.n	80046ec <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 800470c:	2300      	movs	r3, #0
}
 800470e:	4618      	mov	r0, r3
 8004710:	3720      	adds	r7, #32
 8004712:	46bd      	mov	sp, r7
 8004714:	bd80      	pop	{r7, pc}
 8004716:	bf00      	nop
 8004718:	40023800 	.word	0x40023800

0800471c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800471c:	b580      	push	{r7, lr}
 800471e:	b084      	sub	sp, #16
 8004720:	af00      	add	r7, sp, #0
 8004722:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	2b00      	cmp	r3, #0
 8004728:	d101      	bne.n	800472e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800472a:	2301      	movs	r3, #1
 800472c:	e09d      	b.n	800486a <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004732:	2b00      	cmp	r3, #0
 8004734:	d108      	bne.n	8004748 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	685b      	ldr	r3, [r3, #4]
 800473a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800473e:	d009      	beq.n	8004754 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	2200      	movs	r2, #0
 8004744:	61da      	str	r2, [r3, #28]
 8004746:	e005      	b.n	8004754 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	2200      	movs	r2, #0
 800474c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	2200      	movs	r2, #0
 8004752:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	2200      	movs	r2, #0
 8004758:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004760:	b2db      	uxtb	r3, r3
 8004762:	2b00      	cmp	r3, #0
 8004764:	d106      	bne.n	8004774 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	2200      	movs	r2, #0
 800476a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800476e:	6878      	ldr	r0, [r7, #4]
 8004770:	f7fc fe6c 	bl	800144c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	2202      	movs	r2, #2
 8004778:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	681a      	ldr	r2, [r3, #0]
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800478a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	68db      	ldr	r3, [r3, #12]
 8004790:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004794:	d902      	bls.n	800479c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004796:	2300      	movs	r3, #0
 8004798:	60fb      	str	r3, [r7, #12]
 800479a:	e002      	b.n	80047a2 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800479c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80047a0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	68db      	ldr	r3, [r3, #12]
 80047a6:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80047aa:	d007      	beq.n	80047bc <HAL_SPI_Init+0xa0>
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	68db      	ldr	r3, [r3, #12]
 80047b0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80047b4:	d002      	beq.n	80047bc <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	2200      	movs	r2, #0
 80047ba:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	685b      	ldr	r3, [r3, #4]
 80047c0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	689b      	ldr	r3, [r3, #8]
 80047c8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80047cc:	431a      	orrs	r2, r3
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	691b      	ldr	r3, [r3, #16]
 80047d2:	f003 0302 	and.w	r3, r3, #2
 80047d6:	431a      	orrs	r2, r3
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	695b      	ldr	r3, [r3, #20]
 80047dc:	f003 0301 	and.w	r3, r3, #1
 80047e0:	431a      	orrs	r2, r3
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	699b      	ldr	r3, [r3, #24]
 80047e6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80047ea:	431a      	orrs	r2, r3
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	69db      	ldr	r3, [r3, #28]
 80047f0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80047f4:	431a      	orrs	r2, r3
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	6a1b      	ldr	r3, [r3, #32]
 80047fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047fe:	ea42 0103 	orr.w	r1, r2, r3
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004806:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	430a      	orrs	r2, r1
 8004810:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	699b      	ldr	r3, [r3, #24]
 8004816:	0c1b      	lsrs	r3, r3, #16
 8004818:	f003 0204 	and.w	r2, r3, #4
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004820:	f003 0310 	and.w	r3, r3, #16
 8004824:	431a      	orrs	r2, r3
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800482a:	f003 0308 	and.w	r3, r3, #8
 800482e:	431a      	orrs	r2, r3
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	68db      	ldr	r3, [r3, #12]
 8004834:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004838:	ea42 0103 	orr.w	r1, r2, r3
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	430a      	orrs	r2, r1
 8004848:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	69da      	ldr	r2, [r3, #28]
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004858:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	2200      	movs	r2, #0
 800485e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	2201      	movs	r2, #1
 8004864:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004868:	2300      	movs	r3, #0
}
 800486a:	4618      	mov	r0, r3
 800486c:	3710      	adds	r7, #16
 800486e:	46bd      	mov	sp, r7
 8004870:	bd80      	pop	{r7, pc}

08004872 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004872:	b580      	push	{r7, lr}
 8004874:	b088      	sub	sp, #32
 8004876:	af00      	add	r7, sp, #0
 8004878:	60f8      	str	r0, [r7, #12]
 800487a:	60b9      	str	r1, [r7, #8]
 800487c:	603b      	str	r3, [r7, #0]
 800487e:	4613      	mov	r3, r2
 8004880:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004882:	2300      	movs	r3, #0
 8004884:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800488c:	2b01      	cmp	r3, #1
 800488e:	d101      	bne.n	8004894 <HAL_SPI_Transmit+0x22>
 8004890:	2302      	movs	r3, #2
 8004892:	e158      	b.n	8004b46 <HAL_SPI_Transmit+0x2d4>
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	2201      	movs	r2, #1
 8004898:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800489c:	f7fd f81a 	bl	80018d4 <HAL_GetTick>
 80048a0:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80048a2:	88fb      	ldrh	r3, [r7, #6]
 80048a4:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80048ac:	b2db      	uxtb	r3, r3
 80048ae:	2b01      	cmp	r3, #1
 80048b0:	d002      	beq.n	80048b8 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80048b2:	2302      	movs	r3, #2
 80048b4:	77fb      	strb	r3, [r7, #31]
    goto error;
 80048b6:	e13d      	b.n	8004b34 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 80048b8:	68bb      	ldr	r3, [r7, #8]
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d002      	beq.n	80048c4 <HAL_SPI_Transmit+0x52>
 80048be:	88fb      	ldrh	r3, [r7, #6]
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d102      	bne.n	80048ca <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80048c4:	2301      	movs	r3, #1
 80048c6:	77fb      	strb	r3, [r7, #31]
    goto error;
 80048c8:	e134      	b.n	8004b34 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	2203      	movs	r2, #3
 80048ce:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	2200      	movs	r2, #0
 80048d6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	68ba      	ldr	r2, [r7, #8]
 80048dc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	88fa      	ldrh	r2, [r7, #6]
 80048e2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	88fa      	ldrh	r2, [r7, #6]
 80048e8:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	2200      	movs	r2, #0
 80048ee:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	2200      	movs	r2, #0
 80048f4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	2200      	movs	r2, #0
 80048fc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	2200      	movs	r2, #0
 8004904:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	2200      	movs	r2, #0
 800490a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	689b      	ldr	r3, [r3, #8]
 8004910:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004914:	d10f      	bne.n	8004936 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	681a      	ldr	r2, [r3, #0]
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004924:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	681a      	ldr	r2, [r3, #0]
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004934:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004940:	2b40      	cmp	r3, #64	; 0x40
 8004942:	d007      	beq.n	8004954 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	681a      	ldr	r2, [r3, #0]
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004952:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	68db      	ldr	r3, [r3, #12]
 8004958:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800495c:	d94b      	bls.n	80049f6 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	685b      	ldr	r3, [r3, #4]
 8004962:	2b00      	cmp	r3, #0
 8004964:	d002      	beq.n	800496c <HAL_SPI_Transmit+0xfa>
 8004966:	8afb      	ldrh	r3, [r7, #22]
 8004968:	2b01      	cmp	r3, #1
 800496a:	d13e      	bne.n	80049ea <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004970:	881a      	ldrh	r2, [r3, #0]
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800497c:	1c9a      	adds	r2, r3, #2
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004986:	b29b      	uxth	r3, r3
 8004988:	3b01      	subs	r3, #1
 800498a:	b29a      	uxth	r2, r3
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004990:	e02b      	b.n	80049ea <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	689b      	ldr	r3, [r3, #8]
 8004998:	f003 0302 	and.w	r3, r3, #2
 800499c:	2b02      	cmp	r3, #2
 800499e:	d112      	bne.n	80049c6 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049a4:	881a      	ldrh	r2, [r3, #0]
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049b0:	1c9a      	adds	r2, r3, #2
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80049ba:	b29b      	uxth	r3, r3
 80049bc:	3b01      	subs	r3, #1
 80049be:	b29a      	uxth	r2, r3
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80049c4:	e011      	b.n	80049ea <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80049c6:	f7fc ff85 	bl	80018d4 <HAL_GetTick>
 80049ca:	4602      	mov	r2, r0
 80049cc:	69bb      	ldr	r3, [r7, #24]
 80049ce:	1ad3      	subs	r3, r2, r3
 80049d0:	683a      	ldr	r2, [r7, #0]
 80049d2:	429a      	cmp	r2, r3
 80049d4:	d803      	bhi.n	80049de <HAL_SPI_Transmit+0x16c>
 80049d6:	683b      	ldr	r3, [r7, #0]
 80049d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049dc:	d102      	bne.n	80049e4 <HAL_SPI_Transmit+0x172>
 80049de:	683b      	ldr	r3, [r7, #0]
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d102      	bne.n	80049ea <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 80049e4:	2303      	movs	r3, #3
 80049e6:	77fb      	strb	r3, [r7, #31]
          goto error;
 80049e8:	e0a4      	b.n	8004b34 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80049ee:	b29b      	uxth	r3, r3
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d1ce      	bne.n	8004992 <HAL_SPI_Transmit+0x120>
 80049f4:	e07c      	b.n	8004af0 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	685b      	ldr	r3, [r3, #4]
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d002      	beq.n	8004a04 <HAL_SPI_Transmit+0x192>
 80049fe:	8afb      	ldrh	r3, [r7, #22]
 8004a00:	2b01      	cmp	r3, #1
 8004a02:	d170      	bne.n	8004ae6 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a08:	b29b      	uxth	r3, r3
 8004a0a:	2b01      	cmp	r3, #1
 8004a0c:	d912      	bls.n	8004a34 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a12:	881a      	ldrh	r2, [r3, #0]
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a1e:	1c9a      	adds	r2, r3, #2
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a28:	b29b      	uxth	r3, r3
 8004a2a:	3b02      	subs	r3, #2
 8004a2c:	b29a      	uxth	r2, r3
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004a32:	e058      	b.n	8004ae6 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	330c      	adds	r3, #12
 8004a3e:	7812      	ldrb	r2, [r2, #0]
 8004a40:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a46:	1c5a      	adds	r2, r3, #1
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a50:	b29b      	uxth	r3, r3
 8004a52:	3b01      	subs	r3, #1
 8004a54:	b29a      	uxth	r2, r3
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8004a5a:	e044      	b.n	8004ae6 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	689b      	ldr	r3, [r3, #8]
 8004a62:	f003 0302 	and.w	r3, r3, #2
 8004a66:	2b02      	cmp	r3, #2
 8004a68:	d12b      	bne.n	8004ac2 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a6e:	b29b      	uxth	r3, r3
 8004a70:	2b01      	cmp	r3, #1
 8004a72:	d912      	bls.n	8004a9a <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a78:	881a      	ldrh	r2, [r3, #0]
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a84:	1c9a      	adds	r2, r3, #2
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a8e:	b29b      	uxth	r3, r3
 8004a90:	3b02      	subs	r3, #2
 8004a92:	b29a      	uxth	r2, r3
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004a98:	e025      	b.n	8004ae6 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	330c      	adds	r3, #12
 8004aa4:	7812      	ldrb	r2, [r2, #0]
 8004aa6:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004aac:	1c5a      	adds	r2, r3, #1
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ab6:	b29b      	uxth	r3, r3
 8004ab8:	3b01      	subs	r3, #1
 8004aba:	b29a      	uxth	r2, r3
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004ac0:	e011      	b.n	8004ae6 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004ac2:	f7fc ff07 	bl	80018d4 <HAL_GetTick>
 8004ac6:	4602      	mov	r2, r0
 8004ac8:	69bb      	ldr	r3, [r7, #24]
 8004aca:	1ad3      	subs	r3, r2, r3
 8004acc:	683a      	ldr	r2, [r7, #0]
 8004ace:	429a      	cmp	r2, r3
 8004ad0:	d803      	bhi.n	8004ada <HAL_SPI_Transmit+0x268>
 8004ad2:	683b      	ldr	r3, [r7, #0]
 8004ad4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ad8:	d102      	bne.n	8004ae0 <HAL_SPI_Transmit+0x26e>
 8004ada:	683b      	ldr	r3, [r7, #0]
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d102      	bne.n	8004ae6 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8004ae0:	2303      	movs	r3, #3
 8004ae2:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004ae4:	e026      	b.n	8004b34 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004aea:	b29b      	uxth	r3, r3
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d1b5      	bne.n	8004a5c <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004af0:	69ba      	ldr	r2, [r7, #24]
 8004af2:	6839      	ldr	r1, [r7, #0]
 8004af4:	68f8      	ldr	r0, [r7, #12]
 8004af6:	f000 fcdf 	bl	80054b8 <SPI_EndRxTxTransaction>
 8004afa:	4603      	mov	r3, r0
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d002      	beq.n	8004b06 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	2220      	movs	r2, #32
 8004b04:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	689b      	ldr	r3, [r3, #8]
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d10a      	bne.n	8004b24 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004b0e:	2300      	movs	r3, #0
 8004b10:	613b      	str	r3, [r7, #16]
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	68db      	ldr	r3, [r3, #12]
 8004b18:	613b      	str	r3, [r7, #16]
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	689b      	ldr	r3, [r3, #8]
 8004b20:	613b      	str	r3, [r7, #16]
 8004b22:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d002      	beq.n	8004b32 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8004b2c:	2301      	movs	r3, #1
 8004b2e:	77fb      	strb	r3, [r7, #31]
 8004b30:	e000      	b.n	8004b34 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8004b32:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	2201      	movs	r2, #1
 8004b38:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	2200      	movs	r2, #0
 8004b40:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004b44:	7ffb      	ldrb	r3, [r7, #31]
}
 8004b46:	4618      	mov	r0, r3
 8004b48:	3720      	adds	r7, #32
 8004b4a:	46bd      	mov	sp, r7
 8004b4c:	bd80      	pop	{r7, pc}

08004b4e <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004b4e:	b580      	push	{r7, lr}
 8004b50:	b088      	sub	sp, #32
 8004b52:	af02      	add	r7, sp, #8
 8004b54:	60f8      	str	r0, [r7, #12]
 8004b56:	60b9      	str	r1, [r7, #8]
 8004b58:	603b      	str	r3, [r7, #0]
 8004b5a:	4613      	mov	r3, r2
 8004b5c:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004b5e:	2300      	movs	r3, #0
 8004b60:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	685b      	ldr	r3, [r3, #4]
 8004b66:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004b6a:	d112      	bne.n	8004b92 <HAL_SPI_Receive+0x44>
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	689b      	ldr	r3, [r3, #8]
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d10e      	bne.n	8004b92 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	2204      	movs	r2, #4
 8004b78:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004b7c:	88fa      	ldrh	r2, [r7, #6]
 8004b7e:	683b      	ldr	r3, [r7, #0]
 8004b80:	9300      	str	r3, [sp, #0]
 8004b82:	4613      	mov	r3, r2
 8004b84:	68ba      	ldr	r2, [r7, #8]
 8004b86:	68b9      	ldr	r1, [r7, #8]
 8004b88:	68f8      	ldr	r0, [r7, #12]
 8004b8a:	f000 f910 	bl	8004dae <HAL_SPI_TransmitReceive>
 8004b8e:	4603      	mov	r3, r0
 8004b90:	e109      	b.n	8004da6 <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004b98:	2b01      	cmp	r3, #1
 8004b9a:	d101      	bne.n	8004ba0 <HAL_SPI_Receive+0x52>
 8004b9c:	2302      	movs	r3, #2
 8004b9e:	e102      	b.n	8004da6 <HAL_SPI_Receive+0x258>
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	2201      	movs	r2, #1
 8004ba4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004ba8:	f7fc fe94 	bl	80018d4 <HAL_GetTick>
 8004bac:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004bb4:	b2db      	uxtb	r3, r3
 8004bb6:	2b01      	cmp	r3, #1
 8004bb8:	d002      	beq.n	8004bc0 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8004bba:	2302      	movs	r3, #2
 8004bbc:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004bbe:	e0e9      	b.n	8004d94 <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 8004bc0:	68bb      	ldr	r3, [r7, #8]
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d002      	beq.n	8004bcc <HAL_SPI_Receive+0x7e>
 8004bc6:	88fb      	ldrh	r3, [r7, #6]
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d102      	bne.n	8004bd2 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8004bcc:	2301      	movs	r3, #1
 8004bce:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004bd0:	e0e0      	b.n	8004d94 <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	2204      	movs	r2, #4
 8004bd6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	2200      	movs	r2, #0
 8004bde:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	68ba      	ldr	r2, [r7, #8]
 8004be4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	88fa      	ldrh	r2, [r7, #6]
 8004bea:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	88fa      	ldrh	r2, [r7, #6]
 8004bf2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	2200      	movs	r2, #0
 8004bfa:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	2200      	movs	r2, #0
 8004c00:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	2200      	movs	r2, #0
 8004c06:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	2200      	movs	r2, #0
 8004c0c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	2200      	movs	r2, #0
 8004c12:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	68db      	ldr	r3, [r3, #12]
 8004c18:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004c1c:	d908      	bls.n	8004c30 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	685a      	ldr	r2, [r3, #4]
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004c2c:	605a      	str	r2, [r3, #4]
 8004c2e:	e007      	b.n	8004c40 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	685a      	ldr	r2, [r3, #4]
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004c3e:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	689b      	ldr	r3, [r3, #8]
 8004c44:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004c48:	d10f      	bne.n	8004c6a <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	681a      	ldr	r2, [r3, #0]
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004c58:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	681a      	ldr	r2, [r3, #0]
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004c68:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c74:	2b40      	cmp	r3, #64	; 0x40
 8004c76:	d007      	beq.n	8004c88 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	681a      	ldr	r2, [r3, #0]
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004c86:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	68db      	ldr	r3, [r3, #12]
 8004c8c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004c90:	d867      	bhi.n	8004d62 <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004c92:	e030      	b.n	8004cf6 <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	689b      	ldr	r3, [r3, #8]
 8004c9a:	f003 0301 	and.w	r3, r3, #1
 8004c9e:	2b01      	cmp	r3, #1
 8004ca0:	d117      	bne.n	8004cd2 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	f103 020c 	add.w	r2, r3, #12
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cae:	7812      	ldrb	r2, [r2, #0]
 8004cb0:	b2d2      	uxtb	r2, r2
 8004cb2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cb8:	1c5a      	adds	r2, r3, #1
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004cc4:	b29b      	uxth	r3, r3
 8004cc6:	3b01      	subs	r3, #1
 8004cc8:	b29a      	uxth	r2, r3
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8004cd0:	e011      	b.n	8004cf6 <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004cd2:	f7fc fdff 	bl	80018d4 <HAL_GetTick>
 8004cd6:	4602      	mov	r2, r0
 8004cd8:	693b      	ldr	r3, [r7, #16]
 8004cda:	1ad3      	subs	r3, r2, r3
 8004cdc:	683a      	ldr	r2, [r7, #0]
 8004cde:	429a      	cmp	r2, r3
 8004ce0:	d803      	bhi.n	8004cea <HAL_SPI_Receive+0x19c>
 8004ce2:	683b      	ldr	r3, [r7, #0]
 8004ce4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ce8:	d102      	bne.n	8004cf0 <HAL_SPI_Receive+0x1a2>
 8004cea:	683b      	ldr	r3, [r7, #0]
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d102      	bne.n	8004cf6 <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 8004cf0:	2303      	movs	r3, #3
 8004cf2:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004cf4:	e04e      	b.n	8004d94 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004cfc:	b29b      	uxth	r3, r3
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d1c8      	bne.n	8004c94 <HAL_SPI_Receive+0x146>
 8004d02:	e034      	b.n	8004d6e <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	689b      	ldr	r3, [r3, #8]
 8004d0a:	f003 0301 	and.w	r3, r3, #1
 8004d0e:	2b01      	cmp	r3, #1
 8004d10:	d115      	bne.n	8004d3e <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	68da      	ldr	r2, [r3, #12]
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d1c:	b292      	uxth	r2, r2
 8004d1e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d24:	1c9a      	adds	r2, r3, #2
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004d30:	b29b      	uxth	r3, r3
 8004d32:	3b01      	subs	r3, #1
 8004d34:	b29a      	uxth	r2, r3
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8004d3c:	e011      	b.n	8004d62 <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004d3e:	f7fc fdc9 	bl	80018d4 <HAL_GetTick>
 8004d42:	4602      	mov	r2, r0
 8004d44:	693b      	ldr	r3, [r7, #16]
 8004d46:	1ad3      	subs	r3, r2, r3
 8004d48:	683a      	ldr	r2, [r7, #0]
 8004d4a:	429a      	cmp	r2, r3
 8004d4c:	d803      	bhi.n	8004d56 <HAL_SPI_Receive+0x208>
 8004d4e:	683b      	ldr	r3, [r7, #0]
 8004d50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d54:	d102      	bne.n	8004d5c <HAL_SPI_Receive+0x20e>
 8004d56:	683b      	ldr	r3, [r7, #0]
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d102      	bne.n	8004d62 <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 8004d5c:	2303      	movs	r3, #3
 8004d5e:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004d60:	e018      	b.n	8004d94 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004d68:	b29b      	uxth	r3, r3
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d1ca      	bne.n	8004d04 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004d6e:	693a      	ldr	r2, [r7, #16]
 8004d70:	6839      	ldr	r1, [r7, #0]
 8004d72:	68f8      	ldr	r0, [r7, #12]
 8004d74:	f000 fb48 	bl	8005408 <SPI_EndRxTransaction>
 8004d78:	4603      	mov	r3, r0
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d002      	beq.n	8004d84 <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	2220      	movs	r2, #32
 8004d82:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d002      	beq.n	8004d92 <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 8004d8c:	2301      	movs	r3, #1
 8004d8e:	75fb      	strb	r3, [r7, #23]
 8004d90:	e000      	b.n	8004d94 <HAL_SPI_Receive+0x246>
  }

error :
 8004d92:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	2201      	movs	r2, #1
 8004d98:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	2200      	movs	r2, #0
 8004da0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004da4:	7dfb      	ldrb	r3, [r7, #23]
}
 8004da6:	4618      	mov	r0, r3
 8004da8:	3718      	adds	r7, #24
 8004daa:	46bd      	mov	sp, r7
 8004dac:	bd80      	pop	{r7, pc}

08004dae <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004dae:	b580      	push	{r7, lr}
 8004db0:	b08a      	sub	sp, #40	; 0x28
 8004db2:	af00      	add	r7, sp, #0
 8004db4:	60f8      	str	r0, [r7, #12]
 8004db6:	60b9      	str	r1, [r7, #8]
 8004db8:	607a      	str	r2, [r7, #4]
 8004dba:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004dbc:	2301      	movs	r3, #1
 8004dbe:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004dc0:	2300      	movs	r3, #0
 8004dc2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004dcc:	2b01      	cmp	r3, #1
 8004dce:	d101      	bne.n	8004dd4 <HAL_SPI_TransmitReceive+0x26>
 8004dd0:	2302      	movs	r3, #2
 8004dd2:	e1fb      	b.n	80051cc <HAL_SPI_TransmitReceive+0x41e>
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	2201      	movs	r2, #1
 8004dd8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004ddc:	f7fc fd7a 	bl	80018d4 <HAL_GetTick>
 8004de0:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004de8:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	685b      	ldr	r3, [r3, #4]
 8004dee:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8004df0:	887b      	ldrh	r3, [r7, #2]
 8004df2:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8004df4:	887b      	ldrh	r3, [r7, #2]
 8004df6:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004df8:	7efb      	ldrb	r3, [r7, #27]
 8004dfa:	2b01      	cmp	r3, #1
 8004dfc:	d00e      	beq.n	8004e1c <HAL_SPI_TransmitReceive+0x6e>
 8004dfe:	697b      	ldr	r3, [r7, #20]
 8004e00:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004e04:	d106      	bne.n	8004e14 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	689b      	ldr	r3, [r3, #8]
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d102      	bne.n	8004e14 <HAL_SPI_TransmitReceive+0x66>
 8004e0e:	7efb      	ldrb	r3, [r7, #27]
 8004e10:	2b04      	cmp	r3, #4
 8004e12:	d003      	beq.n	8004e1c <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8004e14:	2302      	movs	r3, #2
 8004e16:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8004e1a:	e1cd      	b.n	80051b8 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004e1c:	68bb      	ldr	r3, [r7, #8]
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d005      	beq.n	8004e2e <HAL_SPI_TransmitReceive+0x80>
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d002      	beq.n	8004e2e <HAL_SPI_TransmitReceive+0x80>
 8004e28:	887b      	ldrh	r3, [r7, #2]
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d103      	bne.n	8004e36 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8004e2e:	2301      	movs	r3, #1
 8004e30:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8004e34:	e1c0      	b.n	80051b8 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004e3c:	b2db      	uxtb	r3, r3
 8004e3e:	2b04      	cmp	r3, #4
 8004e40:	d003      	beq.n	8004e4a <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	2205      	movs	r2, #5
 8004e46:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	2200      	movs	r2, #0
 8004e4e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	687a      	ldr	r2, [r7, #4]
 8004e54:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	887a      	ldrh	r2, [r7, #2]
 8004e5a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	887a      	ldrh	r2, [r7, #2]
 8004e62:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	68ba      	ldr	r2, [r7, #8]
 8004e6a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	887a      	ldrh	r2, [r7, #2]
 8004e70:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	887a      	ldrh	r2, [r7, #2]
 8004e76:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	2200      	movs	r2, #0
 8004e7c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	2200      	movs	r2, #0
 8004e82:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	68db      	ldr	r3, [r3, #12]
 8004e88:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004e8c:	d802      	bhi.n	8004e94 <HAL_SPI_TransmitReceive+0xe6>
 8004e8e:	8a3b      	ldrh	r3, [r7, #16]
 8004e90:	2b01      	cmp	r3, #1
 8004e92:	d908      	bls.n	8004ea6 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	685a      	ldr	r2, [r3, #4]
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004ea2:	605a      	str	r2, [r3, #4]
 8004ea4:	e007      	b.n	8004eb6 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	685a      	ldr	r2, [r3, #4]
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004eb4:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ec0:	2b40      	cmp	r3, #64	; 0x40
 8004ec2:	d007      	beq.n	8004ed4 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	681a      	ldr	r2, [r3, #0]
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004ed2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	68db      	ldr	r3, [r3, #12]
 8004ed8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004edc:	d97c      	bls.n	8004fd8 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	685b      	ldr	r3, [r3, #4]
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d002      	beq.n	8004eec <HAL_SPI_TransmitReceive+0x13e>
 8004ee6:	8a7b      	ldrh	r3, [r7, #18]
 8004ee8:	2b01      	cmp	r3, #1
 8004eea:	d169      	bne.n	8004fc0 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ef0:	881a      	ldrh	r2, [r3, #0]
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004efc:	1c9a      	adds	r2, r3, #2
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f06:	b29b      	uxth	r3, r3
 8004f08:	3b01      	subs	r3, #1
 8004f0a:	b29a      	uxth	r2, r3
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004f10:	e056      	b.n	8004fc0 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	689b      	ldr	r3, [r3, #8]
 8004f18:	f003 0302 	and.w	r3, r3, #2
 8004f1c:	2b02      	cmp	r3, #2
 8004f1e:	d11b      	bne.n	8004f58 <HAL_SPI_TransmitReceive+0x1aa>
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f24:	b29b      	uxth	r3, r3
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d016      	beq.n	8004f58 <HAL_SPI_TransmitReceive+0x1aa>
 8004f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f2c:	2b01      	cmp	r3, #1
 8004f2e:	d113      	bne.n	8004f58 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f34:	881a      	ldrh	r2, [r3, #0]
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f40:	1c9a      	adds	r2, r3, #2
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f4a:	b29b      	uxth	r3, r3
 8004f4c:	3b01      	subs	r3, #1
 8004f4e:	b29a      	uxth	r2, r3
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004f54:	2300      	movs	r3, #0
 8004f56:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	689b      	ldr	r3, [r3, #8]
 8004f5e:	f003 0301 	and.w	r3, r3, #1
 8004f62:	2b01      	cmp	r3, #1
 8004f64:	d11c      	bne.n	8004fa0 <HAL_SPI_TransmitReceive+0x1f2>
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004f6c:	b29b      	uxth	r3, r3
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d016      	beq.n	8004fa0 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	68da      	ldr	r2, [r3, #12]
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f7c:	b292      	uxth	r2, r2
 8004f7e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f84:	1c9a      	adds	r2, r3, #2
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004f90:	b29b      	uxth	r3, r3
 8004f92:	3b01      	subs	r3, #1
 8004f94:	b29a      	uxth	r2, r3
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004f9c:	2301      	movs	r3, #1
 8004f9e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004fa0:	f7fc fc98 	bl	80018d4 <HAL_GetTick>
 8004fa4:	4602      	mov	r2, r0
 8004fa6:	69fb      	ldr	r3, [r7, #28]
 8004fa8:	1ad3      	subs	r3, r2, r3
 8004faa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004fac:	429a      	cmp	r2, r3
 8004fae:	d807      	bhi.n	8004fc0 <HAL_SPI_TransmitReceive+0x212>
 8004fb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fb6:	d003      	beq.n	8004fc0 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8004fb8:	2303      	movs	r3, #3
 8004fba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8004fbe:	e0fb      	b.n	80051b8 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004fc4:	b29b      	uxth	r3, r3
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d1a3      	bne.n	8004f12 <HAL_SPI_TransmitReceive+0x164>
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004fd0:	b29b      	uxth	r3, r3
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d19d      	bne.n	8004f12 <HAL_SPI_TransmitReceive+0x164>
 8004fd6:	e0df      	b.n	8005198 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	685b      	ldr	r3, [r3, #4]
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d003      	beq.n	8004fe8 <HAL_SPI_TransmitReceive+0x23a>
 8004fe0:	8a7b      	ldrh	r3, [r7, #18]
 8004fe2:	2b01      	cmp	r3, #1
 8004fe4:	f040 80cb 	bne.w	800517e <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004fec:	b29b      	uxth	r3, r3
 8004fee:	2b01      	cmp	r3, #1
 8004ff0:	d912      	bls.n	8005018 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ff6:	881a      	ldrh	r2, [r3, #0]
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005002:	1c9a      	adds	r2, r3, #2
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800500c:	b29b      	uxth	r3, r3
 800500e:	3b02      	subs	r3, #2
 8005010:	b29a      	uxth	r2, r3
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005016:	e0b2      	b.n	800517e <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	330c      	adds	r3, #12
 8005022:	7812      	ldrb	r2, [r2, #0]
 8005024:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800502a:	1c5a      	adds	r2, r3, #1
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005034:	b29b      	uxth	r3, r3
 8005036:	3b01      	subs	r3, #1
 8005038:	b29a      	uxth	r2, r3
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800503e:	e09e      	b.n	800517e <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	689b      	ldr	r3, [r3, #8]
 8005046:	f003 0302 	and.w	r3, r3, #2
 800504a:	2b02      	cmp	r3, #2
 800504c:	d134      	bne.n	80050b8 <HAL_SPI_TransmitReceive+0x30a>
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005052:	b29b      	uxth	r3, r3
 8005054:	2b00      	cmp	r3, #0
 8005056:	d02f      	beq.n	80050b8 <HAL_SPI_TransmitReceive+0x30a>
 8005058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800505a:	2b01      	cmp	r3, #1
 800505c:	d12c      	bne.n	80050b8 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005062:	b29b      	uxth	r3, r3
 8005064:	2b01      	cmp	r3, #1
 8005066:	d912      	bls.n	800508e <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800506c:	881a      	ldrh	r2, [r3, #0]
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005078:	1c9a      	adds	r2, r3, #2
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005082:	b29b      	uxth	r3, r3
 8005084:	3b02      	subs	r3, #2
 8005086:	b29a      	uxth	r2, r3
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800508c:	e012      	b.n	80050b4 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	330c      	adds	r3, #12
 8005098:	7812      	ldrb	r2, [r2, #0]
 800509a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050a0:	1c5a      	adds	r2, r3, #1
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80050aa:	b29b      	uxth	r3, r3
 80050ac:	3b01      	subs	r3, #1
 80050ae:	b29a      	uxth	r2, r3
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80050b4:	2300      	movs	r3, #0
 80050b6:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	689b      	ldr	r3, [r3, #8]
 80050be:	f003 0301 	and.w	r3, r3, #1
 80050c2:	2b01      	cmp	r3, #1
 80050c4:	d148      	bne.n	8005158 <HAL_SPI_TransmitReceive+0x3aa>
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80050cc:	b29b      	uxth	r3, r3
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d042      	beq.n	8005158 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80050d8:	b29b      	uxth	r3, r3
 80050da:	2b01      	cmp	r3, #1
 80050dc:	d923      	bls.n	8005126 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	68da      	ldr	r2, [r3, #12]
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050e8:	b292      	uxth	r2, r2
 80050ea:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050f0:	1c9a      	adds	r2, r3, #2
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80050fc:	b29b      	uxth	r3, r3
 80050fe:	3b02      	subs	r3, #2
 8005100:	b29a      	uxth	r2, r3
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800510e:	b29b      	uxth	r3, r3
 8005110:	2b01      	cmp	r3, #1
 8005112:	d81f      	bhi.n	8005154 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	685a      	ldr	r2, [r3, #4]
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005122:	605a      	str	r2, [r3, #4]
 8005124:	e016      	b.n	8005154 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	f103 020c 	add.w	r2, r3, #12
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005132:	7812      	ldrb	r2, [r2, #0]
 8005134:	b2d2      	uxtb	r2, r2
 8005136:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800513c:	1c5a      	adds	r2, r3, #1
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005148:	b29b      	uxth	r3, r3
 800514a:	3b01      	subs	r3, #1
 800514c:	b29a      	uxth	r2, r3
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005154:	2301      	movs	r3, #1
 8005156:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005158:	f7fc fbbc 	bl	80018d4 <HAL_GetTick>
 800515c:	4602      	mov	r2, r0
 800515e:	69fb      	ldr	r3, [r7, #28]
 8005160:	1ad3      	subs	r3, r2, r3
 8005162:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005164:	429a      	cmp	r2, r3
 8005166:	d803      	bhi.n	8005170 <HAL_SPI_TransmitReceive+0x3c2>
 8005168:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800516a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800516e:	d102      	bne.n	8005176 <HAL_SPI_TransmitReceive+0x3c8>
 8005170:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005172:	2b00      	cmp	r3, #0
 8005174:	d103      	bne.n	800517e <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8005176:	2303      	movs	r3, #3
 8005178:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800517c:	e01c      	b.n	80051b8 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005182:	b29b      	uxth	r3, r3
 8005184:	2b00      	cmp	r3, #0
 8005186:	f47f af5b 	bne.w	8005040 <HAL_SPI_TransmitReceive+0x292>
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005190:	b29b      	uxth	r3, r3
 8005192:	2b00      	cmp	r3, #0
 8005194:	f47f af54 	bne.w	8005040 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005198:	69fa      	ldr	r2, [r7, #28]
 800519a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800519c:	68f8      	ldr	r0, [r7, #12]
 800519e:	f000 f98b 	bl	80054b8 <SPI_EndRxTxTransaction>
 80051a2:	4603      	mov	r3, r0
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d006      	beq.n	80051b6 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 80051a8:	2301      	movs	r3, #1
 80051aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	2220      	movs	r2, #32
 80051b2:	661a      	str	r2, [r3, #96]	; 0x60
 80051b4:	e000      	b.n	80051b8 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 80051b6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	2201      	movs	r2, #1
 80051bc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	2200      	movs	r2, #0
 80051c4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80051c8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80051cc:	4618      	mov	r0, r3
 80051ce:	3728      	adds	r7, #40	; 0x28
 80051d0:	46bd      	mov	sp, r7
 80051d2:	bd80      	pop	{r7, pc}

080051d4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80051d4:	b580      	push	{r7, lr}
 80051d6:	b088      	sub	sp, #32
 80051d8:	af00      	add	r7, sp, #0
 80051da:	60f8      	str	r0, [r7, #12]
 80051dc:	60b9      	str	r1, [r7, #8]
 80051de:	603b      	str	r3, [r7, #0]
 80051e0:	4613      	mov	r3, r2
 80051e2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80051e4:	f7fc fb76 	bl	80018d4 <HAL_GetTick>
 80051e8:	4602      	mov	r2, r0
 80051ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051ec:	1a9b      	subs	r3, r3, r2
 80051ee:	683a      	ldr	r2, [r7, #0]
 80051f0:	4413      	add	r3, r2
 80051f2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80051f4:	f7fc fb6e 	bl	80018d4 <HAL_GetTick>
 80051f8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80051fa:	4b39      	ldr	r3, [pc, #228]	; (80052e0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	015b      	lsls	r3, r3, #5
 8005200:	0d1b      	lsrs	r3, r3, #20
 8005202:	69fa      	ldr	r2, [r7, #28]
 8005204:	fb02 f303 	mul.w	r3, r2, r3
 8005208:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800520a:	e054      	b.n	80052b6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800520c:	683b      	ldr	r3, [r7, #0]
 800520e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005212:	d050      	beq.n	80052b6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005214:	f7fc fb5e 	bl	80018d4 <HAL_GetTick>
 8005218:	4602      	mov	r2, r0
 800521a:	69bb      	ldr	r3, [r7, #24]
 800521c:	1ad3      	subs	r3, r2, r3
 800521e:	69fa      	ldr	r2, [r7, #28]
 8005220:	429a      	cmp	r2, r3
 8005222:	d902      	bls.n	800522a <SPI_WaitFlagStateUntilTimeout+0x56>
 8005224:	69fb      	ldr	r3, [r7, #28]
 8005226:	2b00      	cmp	r3, #0
 8005228:	d13d      	bne.n	80052a6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	685a      	ldr	r2, [r3, #4]
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005238:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	685b      	ldr	r3, [r3, #4]
 800523e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005242:	d111      	bne.n	8005268 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	689b      	ldr	r3, [r3, #8]
 8005248:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800524c:	d004      	beq.n	8005258 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	689b      	ldr	r3, [r3, #8]
 8005252:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005256:	d107      	bne.n	8005268 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	681a      	ldr	r2, [r3, #0]
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005266:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800526c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005270:	d10f      	bne.n	8005292 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	681a      	ldr	r2, [r3, #0]
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005280:	601a      	str	r2, [r3, #0]
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	681a      	ldr	r2, [r3, #0]
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005290:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	2201      	movs	r2, #1
 8005296:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	2200      	movs	r2, #0
 800529e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80052a2:	2303      	movs	r3, #3
 80052a4:	e017      	b.n	80052d6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80052a6:	697b      	ldr	r3, [r7, #20]
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d101      	bne.n	80052b0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80052ac:	2300      	movs	r3, #0
 80052ae:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80052b0:	697b      	ldr	r3, [r7, #20]
 80052b2:	3b01      	subs	r3, #1
 80052b4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	689a      	ldr	r2, [r3, #8]
 80052bc:	68bb      	ldr	r3, [r7, #8]
 80052be:	4013      	ands	r3, r2
 80052c0:	68ba      	ldr	r2, [r7, #8]
 80052c2:	429a      	cmp	r2, r3
 80052c4:	bf0c      	ite	eq
 80052c6:	2301      	moveq	r3, #1
 80052c8:	2300      	movne	r3, #0
 80052ca:	b2db      	uxtb	r3, r3
 80052cc:	461a      	mov	r2, r3
 80052ce:	79fb      	ldrb	r3, [r7, #7]
 80052d0:	429a      	cmp	r2, r3
 80052d2:	d19b      	bne.n	800520c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80052d4:	2300      	movs	r3, #0
}
 80052d6:	4618      	mov	r0, r3
 80052d8:	3720      	adds	r7, #32
 80052da:	46bd      	mov	sp, r7
 80052dc:	bd80      	pop	{r7, pc}
 80052de:	bf00      	nop
 80052e0:	20000000 	.word	0x20000000

080052e4 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80052e4:	b580      	push	{r7, lr}
 80052e6:	b088      	sub	sp, #32
 80052e8:	af00      	add	r7, sp, #0
 80052ea:	60f8      	str	r0, [r7, #12]
 80052ec:	60b9      	str	r1, [r7, #8]
 80052ee:	607a      	str	r2, [r7, #4]
 80052f0:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80052f2:	f7fc faef 	bl	80018d4 <HAL_GetTick>
 80052f6:	4602      	mov	r2, r0
 80052f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052fa:	1a9b      	subs	r3, r3, r2
 80052fc:	683a      	ldr	r2, [r7, #0]
 80052fe:	4413      	add	r3, r2
 8005300:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005302:	f7fc fae7 	bl	80018d4 <HAL_GetTick>
 8005306:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005308:	4b3e      	ldr	r3, [pc, #248]	; (8005404 <SPI_WaitFifoStateUntilTimeout+0x120>)
 800530a:	681a      	ldr	r2, [r3, #0]
 800530c:	4613      	mov	r3, r2
 800530e:	009b      	lsls	r3, r3, #2
 8005310:	4413      	add	r3, r2
 8005312:	00da      	lsls	r2, r3, #3
 8005314:	1ad3      	subs	r3, r2, r3
 8005316:	0d1b      	lsrs	r3, r3, #20
 8005318:	69fa      	ldr	r2, [r7, #28]
 800531a:	fb02 f303 	mul.w	r3, r2, r3
 800531e:	613b      	str	r3, [r7, #16]

  while ((hspi->Instance->SR & Fifo) != State)
 8005320:	e062      	b.n	80053e8 <SPI_WaitFifoStateUntilTimeout+0x104>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8005322:	68bb      	ldr	r3, [r7, #8]
 8005324:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005328:	d109      	bne.n	800533e <SPI_WaitFifoStateUntilTimeout+0x5a>
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	2b00      	cmp	r3, #0
 800532e:	d106      	bne.n	800533e <SPI_WaitFifoStateUntilTimeout+0x5a>
    {
      /* Flush Data Register by a blank read */
      tmpreg = READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	330c      	adds	r3, #12
 8005336:	781b      	ldrb	r3, [r3, #0]
 8005338:	b2db      	uxtb	r3, r3
 800533a:	617b      	str	r3, [r7, #20]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 800533c:	697b      	ldr	r3, [r7, #20]
    }

    if (Timeout != HAL_MAX_DELAY)
 800533e:	683b      	ldr	r3, [r7, #0]
 8005340:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005344:	d050      	beq.n	80053e8 <SPI_WaitFifoStateUntilTimeout+0x104>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005346:	f7fc fac5 	bl	80018d4 <HAL_GetTick>
 800534a:	4602      	mov	r2, r0
 800534c:	69bb      	ldr	r3, [r7, #24]
 800534e:	1ad3      	subs	r3, r2, r3
 8005350:	69fa      	ldr	r2, [r7, #28]
 8005352:	429a      	cmp	r2, r3
 8005354:	d902      	bls.n	800535c <SPI_WaitFifoStateUntilTimeout+0x78>
 8005356:	69fb      	ldr	r3, [r7, #28]
 8005358:	2b00      	cmp	r3, #0
 800535a:	d13d      	bne.n	80053d8 <SPI_WaitFifoStateUntilTimeout+0xf4>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	685a      	ldr	r2, [r3, #4]
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800536a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	685b      	ldr	r3, [r3, #4]
 8005370:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005374:	d111      	bne.n	800539a <SPI_WaitFifoStateUntilTimeout+0xb6>
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	689b      	ldr	r3, [r3, #8]
 800537a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800537e:	d004      	beq.n	800538a <SPI_WaitFifoStateUntilTimeout+0xa6>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	689b      	ldr	r3, [r3, #8]
 8005384:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005388:	d107      	bne.n	800539a <SPI_WaitFifoStateUntilTimeout+0xb6>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	681a      	ldr	r2, [r3, #0]
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005398:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800539e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80053a2:	d10f      	bne.n	80053c4 <SPI_WaitFifoStateUntilTimeout+0xe0>
        {
          SPI_RESET_CRC(hspi);
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	681a      	ldr	r2, [r3, #0]
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80053b2:	601a      	str	r2, [r3, #0]
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	681a      	ldr	r2, [r3, #0]
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80053c2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	2201      	movs	r2, #1
 80053c8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	2200      	movs	r2, #0
 80053d0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80053d4:	2303      	movs	r3, #3
 80053d6:	e010      	b.n	80053fa <SPI_WaitFifoStateUntilTimeout+0x116>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80053d8:	693b      	ldr	r3, [r7, #16]
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d101      	bne.n	80053e2 <SPI_WaitFifoStateUntilTimeout+0xfe>
      {
        tmp_timeout = 0U;
 80053de:	2300      	movs	r3, #0
 80053e0:	61fb      	str	r3, [r7, #28]
      }      
      count--;
 80053e2:	693b      	ldr	r3, [r7, #16]
 80053e4:	3b01      	subs	r3, #1
 80053e6:	613b      	str	r3, [r7, #16]
  while ((hspi->Instance->SR & Fifo) != State)
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	689a      	ldr	r2, [r3, #8]
 80053ee:	68bb      	ldr	r3, [r7, #8]
 80053f0:	4013      	ands	r3, r2
 80053f2:	687a      	ldr	r2, [r7, #4]
 80053f4:	429a      	cmp	r2, r3
 80053f6:	d194      	bne.n	8005322 <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 80053f8:	2300      	movs	r3, #0
}
 80053fa:	4618      	mov	r0, r3
 80053fc:	3720      	adds	r7, #32
 80053fe:	46bd      	mov	sp, r7
 8005400:	bd80      	pop	{r7, pc}
 8005402:	bf00      	nop
 8005404:	20000000 	.word	0x20000000

08005408 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005408:	b580      	push	{r7, lr}
 800540a:	b086      	sub	sp, #24
 800540c:	af02      	add	r7, sp, #8
 800540e:	60f8      	str	r0, [r7, #12]
 8005410:	60b9      	str	r1, [r7, #8]
 8005412:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	685b      	ldr	r3, [r3, #4]
 8005418:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800541c:	d111      	bne.n	8005442 <SPI_EndRxTransaction+0x3a>
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	689b      	ldr	r3, [r3, #8]
 8005422:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005426:	d004      	beq.n	8005432 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	689b      	ldr	r3, [r3, #8]
 800542c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005430:	d107      	bne.n	8005442 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	681a      	ldr	r2, [r3, #0]
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005440:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	9300      	str	r3, [sp, #0]
 8005446:	68bb      	ldr	r3, [r7, #8]
 8005448:	2200      	movs	r2, #0
 800544a:	2180      	movs	r1, #128	; 0x80
 800544c:	68f8      	ldr	r0, [r7, #12]
 800544e:	f7ff fec1 	bl	80051d4 <SPI_WaitFlagStateUntilTimeout>
 8005452:	4603      	mov	r3, r0
 8005454:	2b00      	cmp	r3, #0
 8005456:	d007      	beq.n	8005468 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800545c:	f043 0220 	orr.w	r2, r3, #32
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005464:	2303      	movs	r3, #3
 8005466:	e023      	b.n	80054b0 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	685b      	ldr	r3, [r3, #4]
 800546c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005470:	d11d      	bne.n	80054ae <SPI_EndRxTransaction+0xa6>
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	689b      	ldr	r3, [r3, #8]
 8005476:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800547a:	d004      	beq.n	8005486 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	689b      	ldr	r3, [r3, #8]
 8005480:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005484:	d113      	bne.n	80054ae <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	9300      	str	r3, [sp, #0]
 800548a:	68bb      	ldr	r3, [r7, #8]
 800548c:	2200      	movs	r2, #0
 800548e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8005492:	68f8      	ldr	r0, [r7, #12]
 8005494:	f7ff ff26 	bl	80052e4 <SPI_WaitFifoStateUntilTimeout>
 8005498:	4603      	mov	r3, r0
 800549a:	2b00      	cmp	r3, #0
 800549c:	d007      	beq.n	80054ae <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80054a2:	f043 0220 	orr.w	r2, r3, #32
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 80054aa:	2303      	movs	r3, #3
 80054ac:	e000      	b.n	80054b0 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 80054ae:	2300      	movs	r3, #0
}
 80054b0:	4618      	mov	r0, r3
 80054b2:	3710      	adds	r7, #16
 80054b4:	46bd      	mov	sp, r7
 80054b6:	bd80      	pop	{r7, pc}

080054b8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80054b8:	b580      	push	{r7, lr}
 80054ba:	b086      	sub	sp, #24
 80054bc:	af02      	add	r7, sp, #8
 80054be:	60f8      	str	r0, [r7, #12]
 80054c0:	60b9      	str	r1, [r7, #8]
 80054c2:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	9300      	str	r3, [sp, #0]
 80054c8:	68bb      	ldr	r3, [r7, #8]
 80054ca:	2200      	movs	r2, #0
 80054cc:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80054d0:	68f8      	ldr	r0, [r7, #12]
 80054d2:	f7ff ff07 	bl	80052e4 <SPI_WaitFifoStateUntilTimeout>
 80054d6:	4603      	mov	r3, r0
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d007      	beq.n	80054ec <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80054e0:	f043 0220 	orr.w	r2, r3, #32
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80054e8:	2303      	movs	r3, #3
 80054ea:	e027      	b.n	800553c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	9300      	str	r3, [sp, #0]
 80054f0:	68bb      	ldr	r3, [r7, #8]
 80054f2:	2200      	movs	r2, #0
 80054f4:	2180      	movs	r1, #128	; 0x80
 80054f6:	68f8      	ldr	r0, [r7, #12]
 80054f8:	f7ff fe6c 	bl	80051d4 <SPI_WaitFlagStateUntilTimeout>
 80054fc:	4603      	mov	r3, r0
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d007      	beq.n	8005512 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005506:	f043 0220 	orr.w	r2, r3, #32
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800550e:	2303      	movs	r3, #3
 8005510:	e014      	b.n	800553c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	9300      	str	r3, [sp, #0]
 8005516:	68bb      	ldr	r3, [r7, #8]
 8005518:	2200      	movs	r2, #0
 800551a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800551e:	68f8      	ldr	r0, [r7, #12]
 8005520:	f7ff fee0 	bl	80052e4 <SPI_WaitFifoStateUntilTimeout>
 8005524:	4603      	mov	r3, r0
 8005526:	2b00      	cmp	r3, #0
 8005528:	d007      	beq.n	800553a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800552e:	f043 0220 	orr.w	r2, r3, #32
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005536:	2303      	movs	r3, #3
 8005538:	e000      	b.n	800553c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800553a:	2300      	movs	r3, #0
}
 800553c:	4618      	mov	r0, r3
 800553e:	3710      	adds	r7, #16
 8005540:	46bd      	mov	sp, r7
 8005542:	bd80      	pop	{r7, pc}

08005544 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005544:	b580      	push	{r7, lr}
 8005546:	b082      	sub	sp, #8
 8005548:	af00      	add	r7, sp, #0
 800554a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	2b00      	cmp	r3, #0
 8005550:	d101      	bne.n	8005556 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005552:	2301      	movs	r3, #1
 8005554:	e049      	b.n	80055ea <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800555c:	b2db      	uxtb	r3, r3
 800555e:	2b00      	cmp	r3, #0
 8005560:	d106      	bne.n	8005570 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	2200      	movs	r2, #0
 8005566:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800556a:	6878      	ldr	r0, [r7, #4]
 800556c:	f7fc f8d4 	bl	8001718 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	2202      	movs	r2, #2
 8005574:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681a      	ldr	r2, [r3, #0]
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	3304      	adds	r3, #4
 8005580:	4619      	mov	r1, r3
 8005582:	4610      	mov	r0, r2
 8005584:	f000 fb66 	bl	8005c54 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	2201      	movs	r2, #1
 800558c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	2201      	movs	r2, #1
 8005594:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	2201      	movs	r2, #1
 800559c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	2201      	movs	r2, #1
 80055a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	2201      	movs	r2, #1
 80055ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	2201      	movs	r2, #1
 80055b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	2201      	movs	r2, #1
 80055bc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	2201      	movs	r2, #1
 80055c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	2201      	movs	r2, #1
 80055cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	2201      	movs	r2, #1
 80055d4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	2201      	movs	r2, #1
 80055dc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	2201      	movs	r2, #1
 80055e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80055e8:	2300      	movs	r3, #0
}
 80055ea:	4618      	mov	r0, r3
 80055ec:	3708      	adds	r7, #8
 80055ee:	46bd      	mov	sp, r7
 80055f0:	bd80      	pop	{r7, pc}

080055f2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80055f2:	b580      	push	{r7, lr}
 80055f4:	b082      	sub	sp, #8
 80055f6:	af00      	add	r7, sp, #0
 80055f8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d101      	bne.n	8005604 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005600:	2301      	movs	r3, #1
 8005602:	e049      	b.n	8005698 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800560a:	b2db      	uxtb	r3, r3
 800560c:	2b00      	cmp	r3, #0
 800560e:	d106      	bne.n	800561e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	2200      	movs	r2, #0
 8005614:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005618:	6878      	ldr	r0, [r7, #4]
 800561a:	f000 f841 	bl	80056a0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	2202      	movs	r2, #2
 8005622:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681a      	ldr	r2, [r3, #0]
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	3304      	adds	r3, #4
 800562e:	4619      	mov	r1, r3
 8005630:	4610      	mov	r0, r2
 8005632:	f000 fb0f 	bl	8005c54 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	2201      	movs	r2, #1
 800563a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	2201      	movs	r2, #1
 8005642:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	2201      	movs	r2, #1
 800564a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	2201      	movs	r2, #1
 8005652:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	2201      	movs	r2, #1
 800565a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	2201      	movs	r2, #1
 8005662:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	2201      	movs	r2, #1
 800566a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	2201      	movs	r2, #1
 8005672:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	2201      	movs	r2, #1
 800567a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	2201      	movs	r2, #1
 8005682:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	2201      	movs	r2, #1
 800568a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	2201      	movs	r2, #1
 8005692:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005696:	2300      	movs	r3, #0
}
 8005698:	4618      	mov	r0, r3
 800569a:	3708      	adds	r7, #8
 800569c:	46bd      	mov	sp, r7
 800569e:	bd80      	pop	{r7, pc}

080056a0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80056a0:	b480      	push	{r7}
 80056a2:	b083      	sub	sp, #12
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80056a8:	bf00      	nop
 80056aa:	370c      	adds	r7, #12
 80056ac:	46bd      	mov	sp, r7
 80056ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b2:	4770      	bx	lr

080056b4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80056b4:	b580      	push	{r7, lr}
 80056b6:	b084      	sub	sp, #16
 80056b8:	af00      	add	r7, sp, #0
 80056ba:	6078      	str	r0, [r7, #4]
 80056bc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80056be:	683b      	ldr	r3, [r7, #0]
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d109      	bne.n	80056d8 <HAL_TIM_PWM_Start+0x24>
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80056ca:	b2db      	uxtb	r3, r3
 80056cc:	2b01      	cmp	r3, #1
 80056ce:	bf14      	ite	ne
 80056d0:	2301      	movne	r3, #1
 80056d2:	2300      	moveq	r3, #0
 80056d4:	b2db      	uxtb	r3, r3
 80056d6:	e03c      	b.n	8005752 <HAL_TIM_PWM_Start+0x9e>
 80056d8:	683b      	ldr	r3, [r7, #0]
 80056da:	2b04      	cmp	r3, #4
 80056dc:	d109      	bne.n	80056f2 <HAL_TIM_PWM_Start+0x3e>
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80056e4:	b2db      	uxtb	r3, r3
 80056e6:	2b01      	cmp	r3, #1
 80056e8:	bf14      	ite	ne
 80056ea:	2301      	movne	r3, #1
 80056ec:	2300      	moveq	r3, #0
 80056ee:	b2db      	uxtb	r3, r3
 80056f0:	e02f      	b.n	8005752 <HAL_TIM_PWM_Start+0x9e>
 80056f2:	683b      	ldr	r3, [r7, #0]
 80056f4:	2b08      	cmp	r3, #8
 80056f6:	d109      	bne.n	800570c <HAL_TIM_PWM_Start+0x58>
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80056fe:	b2db      	uxtb	r3, r3
 8005700:	2b01      	cmp	r3, #1
 8005702:	bf14      	ite	ne
 8005704:	2301      	movne	r3, #1
 8005706:	2300      	moveq	r3, #0
 8005708:	b2db      	uxtb	r3, r3
 800570a:	e022      	b.n	8005752 <HAL_TIM_PWM_Start+0x9e>
 800570c:	683b      	ldr	r3, [r7, #0]
 800570e:	2b0c      	cmp	r3, #12
 8005710:	d109      	bne.n	8005726 <HAL_TIM_PWM_Start+0x72>
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005718:	b2db      	uxtb	r3, r3
 800571a:	2b01      	cmp	r3, #1
 800571c:	bf14      	ite	ne
 800571e:	2301      	movne	r3, #1
 8005720:	2300      	moveq	r3, #0
 8005722:	b2db      	uxtb	r3, r3
 8005724:	e015      	b.n	8005752 <HAL_TIM_PWM_Start+0x9e>
 8005726:	683b      	ldr	r3, [r7, #0]
 8005728:	2b10      	cmp	r3, #16
 800572a:	d109      	bne.n	8005740 <HAL_TIM_PWM_Start+0x8c>
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005732:	b2db      	uxtb	r3, r3
 8005734:	2b01      	cmp	r3, #1
 8005736:	bf14      	ite	ne
 8005738:	2301      	movne	r3, #1
 800573a:	2300      	moveq	r3, #0
 800573c:	b2db      	uxtb	r3, r3
 800573e:	e008      	b.n	8005752 <HAL_TIM_PWM_Start+0x9e>
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005746:	b2db      	uxtb	r3, r3
 8005748:	2b01      	cmp	r3, #1
 800574a:	bf14      	ite	ne
 800574c:	2301      	movne	r3, #1
 800574e:	2300      	moveq	r3, #0
 8005750:	b2db      	uxtb	r3, r3
 8005752:	2b00      	cmp	r3, #0
 8005754:	d001      	beq.n	800575a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8005756:	2301      	movs	r3, #1
 8005758:	e092      	b.n	8005880 <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800575a:	683b      	ldr	r3, [r7, #0]
 800575c:	2b00      	cmp	r3, #0
 800575e:	d104      	bne.n	800576a <HAL_TIM_PWM_Start+0xb6>
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	2202      	movs	r2, #2
 8005764:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005768:	e023      	b.n	80057b2 <HAL_TIM_PWM_Start+0xfe>
 800576a:	683b      	ldr	r3, [r7, #0]
 800576c:	2b04      	cmp	r3, #4
 800576e:	d104      	bne.n	800577a <HAL_TIM_PWM_Start+0xc6>
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	2202      	movs	r2, #2
 8005774:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005778:	e01b      	b.n	80057b2 <HAL_TIM_PWM_Start+0xfe>
 800577a:	683b      	ldr	r3, [r7, #0]
 800577c:	2b08      	cmp	r3, #8
 800577e:	d104      	bne.n	800578a <HAL_TIM_PWM_Start+0xd6>
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	2202      	movs	r2, #2
 8005784:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005788:	e013      	b.n	80057b2 <HAL_TIM_PWM_Start+0xfe>
 800578a:	683b      	ldr	r3, [r7, #0]
 800578c:	2b0c      	cmp	r3, #12
 800578e:	d104      	bne.n	800579a <HAL_TIM_PWM_Start+0xe6>
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	2202      	movs	r2, #2
 8005794:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005798:	e00b      	b.n	80057b2 <HAL_TIM_PWM_Start+0xfe>
 800579a:	683b      	ldr	r3, [r7, #0]
 800579c:	2b10      	cmp	r3, #16
 800579e:	d104      	bne.n	80057aa <HAL_TIM_PWM_Start+0xf6>
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	2202      	movs	r2, #2
 80057a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80057a8:	e003      	b.n	80057b2 <HAL_TIM_PWM_Start+0xfe>
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	2202      	movs	r2, #2
 80057ae:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	2201      	movs	r2, #1
 80057b8:	6839      	ldr	r1, [r7, #0]
 80057ba:	4618      	mov	r0, r3
 80057bc:	f000 fde2 	bl	8006384 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	4a30      	ldr	r2, [pc, #192]	; (8005888 <HAL_TIM_PWM_Start+0x1d4>)
 80057c6:	4293      	cmp	r3, r2
 80057c8:	d004      	beq.n	80057d4 <HAL_TIM_PWM_Start+0x120>
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	4a2f      	ldr	r2, [pc, #188]	; (800588c <HAL_TIM_PWM_Start+0x1d8>)
 80057d0:	4293      	cmp	r3, r2
 80057d2:	d101      	bne.n	80057d8 <HAL_TIM_PWM_Start+0x124>
 80057d4:	2301      	movs	r3, #1
 80057d6:	e000      	b.n	80057da <HAL_TIM_PWM_Start+0x126>
 80057d8:	2300      	movs	r3, #0
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d007      	beq.n	80057ee <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80057ec:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	4a25      	ldr	r2, [pc, #148]	; (8005888 <HAL_TIM_PWM_Start+0x1d4>)
 80057f4:	4293      	cmp	r3, r2
 80057f6:	d022      	beq.n	800583e <HAL_TIM_PWM_Start+0x18a>
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005800:	d01d      	beq.n	800583e <HAL_TIM_PWM_Start+0x18a>
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	4a22      	ldr	r2, [pc, #136]	; (8005890 <HAL_TIM_PWM_Start+0x1dc>)
 8005808:	4293      	cmp	r3, r2
 800580a:	d018      	beq.n	800583e <HAL_TIM_PWM_Start+0x18a>
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	4a20      	ldr	r2, [pc, #128]	; (8005894 <HAL_TIM_PWM_Start+0x1e0>)
 8005812:	4293      	cmp	r3, r2
 8005814:	d013      	beq.n	800583e <HAL_TIM_PWM_Start+0x18a>
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	4a1f      	ldr	r2, [pc, #124]	; (8005898 <HAL_TIM_PWM_Start+0x1e4>)
 800581c:	4293      	cmp	r3, r2
 800581e:	d00e      	beq.n	800583e <HAL_TIM_PWM_Start+0x18a>
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	4a19      	ldr	r2, [pc, #100]	; (800588c <HAL_TIM_PWM_Start+0x1d8>)
 8005826:	4293      	cmp	r3, r2
 8005828:	d009      	beq.n	800583e <HAL_TIM_PWM_Start+0x18a>
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	4a1b      	ldr	r2, [pc, #108]	; (800589c <HAL_TIM_PWM_Start+0x1e8>)
 8005830:	4293      	cmp	r3, r2
 8005832:	d004      	beq.n	800583e <HAL_TIM_PWM_Start+0x18a>
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	4a19      	ldr	r2, [pc, #100]	; (80058a0 <HAL_TIM_PWM_Start+0x1ec>)
 800583a:	4293      	cmp	r3, r2
 800583c:	d115      	bne.n	800586a <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	689a      	ldr	r2, [r3, #8]
 8005844:	4b17      	ldr	r3, [pc, #92]	; (80058a4 <HAL_TIM_PWM_Start+0x1f0>)
 8005846:	4013      	ands	r3, r2
 8005848:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	2b06      	cmp	r3, #6
 800584e:	d015      	beq.n	800587c <HAL_TIM_PWM_Start+0x1c8>
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005856:	d011      	beq.n	800587c <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	681a      	ldr	r2, [r3, #0]
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	f042 0201 	orr.w	r2, r2, #1
 8005866:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005868:	e008      	b.n	800587c <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	681a      	ldr	r2, [r3, #0]
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	f042 0201 	orr.w	r2, r2, #1
 8005878:	601a      	str	r2, [r3, #0]
 800587a:	e000      	b.n	800587e <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800587c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800587e:	2300      	movs	r3, #0
}
 8005880:	4618      	mov	r0, r3
 8005882:	3710      	adds	r7, #16
 8005884:	46bd      	mov	sp, r7
 8005886:	bd80      	pop	{r7, pc}
 8005888:	40010000 	.word	0x40010000
 800588c:	40010400 	.word	0x40010400
 8005890:	40000400 	.word	0x40000400
 8005894:	40000800 	.word	0x40000800
 8005898:	40000c00 	.word	0x40000c00
 800589c:	40014000 	.word	0x40014000
 80058a0:	40001800 	.word	0x40001800
 80058a4:	00010007 	.word	0x00010007

080058a8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80058a8:	b580      	push	{r7, lr}
 80058aa:	b084      	sub	sp, #16
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	60f8      	str	r0, [r7, #12]
 80058b0:	60b9      	str	r1, [r7, #8]
 80058b2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80058ba:	2b01      	cmp	r3, #1
 80058bc:	d101      	bne.n	80058c2 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80058be:	2302      	movs	r3, #2
 80058c0:	e0fd      	b.n	8005abe <HAL_TIM_PWM_ConfigChannel+0x216>
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	2201      	movs	r2, #1
 80058c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	2b14      	cmp	r3, #20
 80058ce:	f200 80f0 	bhi.w	8005ab2 <HAL_TIM_PWM_ConfigChannel+0x20a>
 80058d2:	a201      	add	r2, pc, #4	; (adr r2, 80058d8 <HAL_TIM_PWM_ConfigChannel+0x30>)
 80058d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058d8:	0800592d 	.word	0x0800592d
 80058dc:	08005ab3 	.word	0x08005ab3
 80058e0:	08005ab3 	.word	0x08005ab3
 80058e4:	08005ab3 	.word	0x08005ab3
 80058e8:	0800596d 	.word	0x0800596d
 80058ec:	08005ab3 	.word	0x08005ab3
 80058f0:	08005ab3 	.word	0x08005ab3
 80058f4:	08005ab3 	.word	0x08005ab3
 80058f8:	080059af 	.word	0x080059af
 80058fc:	08005ab3 	.word	0x08005ab3
 8005900:	08005ab3 	.word	0x08005ab3
 8005904:	08005ab3 	.word	0x08005ab3
 8005908:	080059ef 	.word	0x080059ef
 800590c:	08005ab3 	.word	0x08005ab3
 8005910:	08005ab3 	.word	0x08005ab3
 8005914:	08005ab3 	.word	0x08005ab3
 8005918:	08005a31 	.word	0x08005a31
 800591c:	08005ab3 	.word	0x08005ab3
 8005920:	08005ab3 	.word	0x08005ab3
 8005924:	08005ab3 	.word	0x08005ab3
 8005928:	08005a71 	.word	0x08005a71
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	68b9      	ldr	r1, [r7, #8]
 8005932:	4618      	mov	r0, r3
 8005934:	f000 fa2e 	bl	8005d94 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	699a      	ldr	r2, [r3, #24]
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	f042 0208 	orr.w	r2, r2, #8
 8005946:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	699a      	ldr	r2, [r3, #24]
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	f022 0204 	bic.w	r2, r2, #4
 8005956:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	6999      	ldr	r1, [r3, #24]
 800595e:	68bb      	ldr	r3, [r7, #8]
 8005960:	691a      	ldr	r2, [r3, #16]
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	430a      	orrs	r2, r1
 8005968:	619a      	str	r2, [r3, #24]
      break;
 800596a:	e0a3      	b.n	8005ab4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	68b9      	ldr	r1, [r7, #8]
 8005972:	4618      	mov	r0, r3
 8005974:	f000 fa80 	bl	8005e78 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	699a      	ldr	r2, [r3, #24]
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005986:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	699a      	ldr	r2, [r3, #24]
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005996:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	6999      	ldr	r1, [r3, #24]
 800599e:	68bb      	ldr	r3, [r7, #8]
 80059a0:	691b      	ldr	r3, [r3, #16]
 80059a2:	021a      	lsls	r2, r3, #8
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	430a      	orrs	r2, r1
 80059aa:	619a      	str	r2, [r3, #24]
      break;
 80059ac:	e082      	b.n	8005ab4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	68b9      	ldr	r1, [r7, #8]
 80059b4:	4618      	mov	r0, r3
 80059b6:	f000 fad7 	bl	8005f68 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	69da      	ldr	r2, [r3, #28]
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	f042 0208 	orr.w	r2, r2, #8
 80059c8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	69da      	ldr	r2, [r3, #28]
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	f022 0204 	bic.w	r2, r2, #4
 80059d8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	69d9      	ldr	r1, [r3, #28]
 80059e0:	68bb      	ldr	r3, [r7, #8]
 80059e2:	691a      	ldr	r2, [r3, #16]
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	430a      	orrs	r2, r1
 80059ea:	61da      	str	r2, [r3, #28]
      break;
 80059ec:	e062      	b.n	8005ab4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	68b9      	ldr	r1, [r7, #8]
 80059f4:	4618      	mov	r0, r3
 80059f6:	f000 fb2d 	bl	8006054 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	69da      	ldr	r2, [r3, #28]
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005a08:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	69da      	ldr	r2, [r3, #28]
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005a18:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	69d9      	ldr	r1, [r3, #28]
 8005a20:	68bb      	ldr	r3, [r7, #8]
 8005a22:	691b      	ldr	r3, [r3, #16]
 8005a24:	021a      	lsls	r2, r3, #8
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	430a      	orrs	r2, r1
 8005a2c:	61da      	str	r2, [r3, #28]
      break;
 8005a2e:	e041      	b.n	8005ab4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	68b9      	ldr	r1, [r7, #8]
 8005a36:	4618      	mov	r0, r3
 8005a38:	f000 fb64 	bl	8006104 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	f042 0208 	orr.w	r2, r2, #8
 8005a4a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	f022 0204 	bic.w	r2, r2, #4
 8005a5a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005a62:	68bb      	ldr	r3, [r7, #8]
 8005a64:	691a      	ldr	r2, [r3, #16]
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	430a      	orrs	r2, r1
 8005a6c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005a6e:	e021      	b.n	8005ab4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	68b9      	ldr	r1, [r7, #8]
 8005a76:	4618      	mov	r0, r3
 8005a78:	f000 fb96 	bl	80061a8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005a8a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005a9a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005aa2:	68bb      	ldr	r3, [r7, #8]
 8005aa4:	691b      	ldr	r3, [r3, #16]
 8005aa6:	021a      	lsls	r2, r3, #8
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	430a      	orrs	r2, r1
 8005aae:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005ab0:	e000      	b.n	8005ab4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 8005ab2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	2200      	movs	r2, #0
 8005ab8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005abc:	2300      	movs	r3, #0
}
 8005abe:	4618      	mov	r0, r3
 8005ac0:	3710      	adds	r7, #16
 8005ac2:	46bd      	mov	sp, r7
 8005ac4:	bd80      	pop	{r7, pc}
 8005ac6:	bf00      	nop

08005ac8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005ac8:	b580      	push	{r7, lr}
 8005aca:	b084      	sub	sp, #16
 8005acc:	af00      	add	r7, sp, #0
 8005ace:	6078      	str	r0, [r7, #4]
 8005ad0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ad8:	2b01      	cmp	r3, #1
 8005ada:	d101      	bne.n	8005ae0 <HAL_TIM_ConfigClockSource+0x18>
 8005adc:	2302      	movs	r3, #2
 8005ade:	e0b3      	b.n	8005c48 <HAL_TIM_ConfigClockSource+0x180>
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	2201      	movs	r2, #1
 8005ae4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	2202      	movs	r2, #2
 8005aec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	689b      	ldr	r3, [r3, #8]
 8005af6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005af8:	68fa      	ldr	r2, [r7, #12]
 8005afa:	4b55      	ldr	r3, [pc, #340]	; (8005c50 <HAL_TIM_ConfigClockSource+0x188>)
 8005afc:	4013      	ands	r3, r2
 8005afe:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005b06:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	68fa      	ldr	r2, [r7, #12]
 8005b0e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005b10:	683b      	ldr	r3, [r7, #0]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005b18:	d03e      	beq.n	8005b98 <HAL_TIM_ConfigClockSource+0xd0>
 8005b1a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005b1e:	f200 8087 	bhi.w	8005c30 <HAL_TIM_ConfigClockSource+0x168>
 8005b22:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b26:	f000 8085 	beq.w	8005c34 <HAL_TIM_ConfigClockSource+0x16c>
 8005b2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b2e:	d87f      	bhi.n	8005c30 <HAL_TIM_ConfigClockSource+0x168>
 8005b30:	2b70      	cmp	r3, #112	; 0x70
 8005b32:	d01a      	beq.n	8005b6a <HAL_TIM_ConfigClockSource+0xa2>
 8005b34:	2b70      	cmp	r3, #112	; 0x70
 8005b36:	d87b      	bhi.n	8005c30 <HAL_TIM_ConfigClockSource+0x168>
 8005b38:	2b60      	cmp	r3, #96	; 0x60
 8005b3a:	d050      	beq.n	8005bde <HAL_TIM_ConfigClockSource+0x116>
 8005b3c:	2b60      	cmp	r3, #96	; 0x60
 8005b3e:	d877      	bhi.n	8005c30 <HAL_TIM_ConfigClockSource+0x168>
 8005b40:	2b50      	cmp	r3, #80	; 0x50
 8005b42:	d03c      	beq.n	8005bbe <HAL_TIM_ConfigClockSource+0xf6>
 8005b44:	2b50      	cmp	r3, #80	; 0x50
 8005b46:	d873      	bhi.n	8005c30 <HAL_TIM_ConfigClockSource+0x168>
 8005b48:	2b40      	cmp	r3, #64	; 0x40
 8005b4a:	d058      	beq.n	8005bfe <HAL_TIM_ConfigClockSource+0x136>
 8005b4c:	2b40      	cmp	r3, #64	; 0x40
 8005b4e:	d86f      	bhi.n	8005c30 <HAL_TIM_ConfigClockSource+0x168>
 8005b50:	2b30      	cmp	r3, #48	; 0x30
 8005b52:	d064      	beq.n	8005c1e <HAL_TIM_ConfigClockSource+0x156>
 8005b54:	2b30      	cmp	r3, #48	; 0x30
 8005b56:	d86b      	bhi.n	8005c30 <HAL_TIM_ConfigClockSource+0x168>
 8005b58:	2b20      	cmp	r3, #32
 8005b5a:	d060      	beq.n	8005c1e <HAL_TIM_ConfigClockSource+0x156>
 8005b5c:	2b20      	cmp	r3, #32
 8005b5e:	d867      	bhi.n	8005c30 <HAL_TIM_ConfigClockSource+0x168>
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d05c      	beq.n	8005c1e <HAL_TIM_ConfigClockSource+0x156>
 8005b64:	2b10      	cmp	r3, #16
 8005b66:	d05a      	beq.n	8005c1e <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8005b68:	e062      	b.n	8005c30 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	6818      	ldr	r0, [r3, #0]
 8005b6e:	683b      	ldr	r3, [r7, #0]
 8005b70:	6899      	ldr	r1, [r3, #8]
 8005b72:	683b      	ldr	r3, [r7, #0]
 8005b74:	685a      	ldr	r2, [r3, #4]
 8005b76:	683b      	ldr	r3, [r7, #0]
 8005b78:	68db      	ldr	r3, [r3, #12]
 8005b7a:	f000 fbe3 	bl	8006344 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	689b      	ldr	r3, [r3, #8]
 8005b84:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005b8c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	68fa      	ldr	r2, [r7, #12]
 8005b94:	609a      	str	r2, [r3, #8]
      break;
 8005b96:	e04e      	b.n	8005c36 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	6818      	ldr	r0, [r3, #0]
 8005b9c:	683b      	ldr	r3, [r7, #0]
 8005b9e:	6899      	ldr	r1, [r3, #8]
 8005ba0:	683b      	ldr	r3, [r7, #0]
 8005ba2:	685a      	ldr	r2, [r3, #4]
 8005ba4:	683b      	ldr	r3, [r7, #0]
 8005ba6:	68db      	ldr	r3, [r3, #12]
 8005ba8:	f000 fbcc 	bl	8006344 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	689a      	ldr	r2, [r3, #8]
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005bba:	609a      	str	r2, [r3, #8]
      break;
 8005bbc:	e03b      	b.n	8005c36 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	6818      	ldr	r0, [r3, #0]
 8005bc2:	683b      	ldr	r3, [r7, #0]
 8005bc4:	6859      	ldr	r1, [r3, #4]
 8005bc6:	683b      	ldr	r3, [r7, #0]
 8005bc8:	68db      	ldr	r3, [r3, #12]
 8005bca:	461a      	mov	r2, r3
 8005bcc:	f000 fb40 	bl	8006250 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	2150      	movs	r1, #80	; 0x50
 8005bd6:	4618      	mov	r0, r3
 8005bd8:	f000 fb99 	bl	800630e <TIM_ITRx_SetConfig>
      break;
 8005bdc:	e02b      	b.n	8005c36 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	6818      	ldr	r0, [r3, #0]
 8005be2:	683b      	ldr	r3, [r7, #0]
 8005be4:	6859      	ldr	r1, [r3, #4]
 8005be6:	683b      	ldr	r3, [r7, #0]
 8005be8:	68db      	ldr	r3, [r3, #12]
 8005bea:	461a      	mov	r2, r3
 8005bec:	f000 fb5f 	bl	80062ae <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	2160      	movs	r1, #96	; 0x60
 8005bf6:	4618      	mov	r0, r3
 8005bf8:	f000 fb89 	bl	800630e <TIM_ITRx_SetConfig>
      break;
 8005bfc:	e01b      	b.n	8005c36 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	6818      	ldr	r0, [r3, #0]
 8005c02:	683b      	ldr	r3, [r7, #0]
 8005c04:	6859      	ldr	r1, [r3, #4]
 8005c06:	683b      	ldr	r3, [r7, #0]
 8005c08:	68db      	ldr	r3, [r3, #12]
 8005c0a:	461a      	mov	r2, r3
 8005c0c:	f000 fb20 	bl	8006250 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	2140      	movs	r1, #64	; 0x40
 8005c16:	4618      	mov	r0, r3
 8005c18:	f000 fb79 	bl	800630e <TIM_ITRx_SetConfig>
      break;
 8005c1c:	e00b      	b.n	8005c36 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681a      	ldr	r2, [r3, #0]
 8005c22:	683b      	ldr	r3, [r7, #0]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	4619      	mov	r1, r3
 8005c28:	4610      	mov	r0, r2
 8005c2a:	f000 fb70 	bl	800630e <TIM_ITRx_SetConfig>
        break;
 8005c2e:	e002      	b.n	8005c36 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8005c30:	bf00      	nop
 8005c32:	e000      	b.n	8005c36 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8005c34:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	2201      	movs	r2, #1
 8005c3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	2200      	movs	r2, #0
 8005c42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005c46:	2300      	movs	r3, #0
}
 8005c48:	4618      	mov	r0, r3
 8005c4a:	3710      	adds	r7, #16
 8005c4c:	46bd      	mov	sp, r7
 8005c4e:	bd80      	pop	{r7, pc}
 8005c50:	fffeff88 	.word	0xfffeff88

08005c54 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005c54:	b480      	push	{r7}
 8005c56:	b085      	sub	sp, #20
 8005c58:	af00      	add	r7, sp, #0
 8005c5a:	6078      	str	r0, [r7, #4]
 8005c5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	4a40      	ldr	r2, [pc, #256]	; (8005d68 <TIM_Base_SetConfig+0x114>)
 8005c68:	4293      	cmp	r3, r2
 8005c6a:	d013      	beq.n	8005c94 <TIM_Base_SetConfig+0x40>
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c72:	d00f      	beq.n	8005c94 <TIM_Base_SetConfig+0x40>
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	4a3d      	ldr	r2, [pc, #244]	; (8005d6c <TIM_Base_SetConfig+0x118>)
 8005c78:	4293      	cmp	r3, r2
 8005c7a:	d00b      	beq.n	8005c94 <TIM_Base_SetConfig+0x40>
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	4a3c      	ldr	r2, [pc, #240]	; (8005d70 <TIM_Base_SetConfig+0x11c>)
 8005c80:	4293      	cmp	r3, r2
 8005c82:	d007      	beq.n	8005c94 <TIM_Base_SetConfig+0x40>
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	4a3b      	ldr	r2, [pc, #236]	; (8005d74 <TIM_Base_SetConfig+0x120>)
 8005c88:	4293      	cmp	r3, r2
 8005c8a:	d003      	beq.n	8005c94 <TIM_Base_SetConfig+0x40>
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	4a3a      	ldr	r2, [pc, #232]	; (8005d78 <TIM_Base_SetConfig+0x124>)
 8005c90:	4293      	cmp	r3, r2
 8005c92:	d108      	bne.n	8005ca6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c9a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005c9c:	683b      	ldr	r3, [r7, #0]
 8005c9e:	685b      	ldr	r3, [r3, #4]
 8005ca0:	68fa      	ldr	r2, [r7, #12]
 8005ca2:	4313      	orrs	r3, r2
 8005ca4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	4a2f      	ldr	r2, [pc, #188]	; (8005d68 <TIM_Base_SetConfig+0x114>)
 8005caa:	4293      	cmp	r3, r2
 8005cac:	d02b      	beq.n	8005d06 <TIM_Base_SetConfig+0xb2>
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005cb4:	d027      	beq.n	8005d06 <TIM_Base_SetConfig+0xb2>
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	4a2c      	ldr	r2, [pc, #176]	; (8005d6c <TIM_Base_SetConfig+0x118>)
 8005cba:	4293      	cmp	r3, r2
 8005cbc:	d023      	beq.n	8005d06 <TIM_Base_SetConfig+0xb2>
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	4a2b      	ldr	r2, [pc, #172]	; (8005d70 <TIM_Base_SetConfig+0x11c>)
 8005cc2:	4293      	cmp	r3, r2
 8005cc4:	d01f      	beq.n	8005d06 <TIM_Base_SetConfig+0xb2>
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	4a2a      	ldr	r2, [pc, #168]	; (8005d74 <TIM_Base_SetConfig+0x120>)
 8005cca:	4293      	cmp	r3, r2
 8005ccc:	d01b      	beq.n	8005d06 <TIM_Base_SetConfig+0xb2>
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	4a29      	ldr	r2, [pc, #164]	; (8005d78 <TIM_Base_SetConfig+0x124>)
 8005cd2:	4293      	cmp	r3, r2
 8005cd4:	d017      	beq.n	8005d06 <TIM_Base_SetConfig+0xb2>
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	4a28      	ldr	r2, [pc, #160]	; (8005d7c <TIM_Base_SetConfig+0x128>)
 8005cda:	4293      	cmp	r3, r2
 8005cdc:	d013      	beq.n	8005d06 <TIM_Base_SetConfig+0xb2>
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	4a27      	ldr	r2, [pc, #156]	; (8005d80 <TIM_Base_SetConfig+0x12c>)
 8005ce2:	4293      	cmp	r3, r2
 8005ce4:	d00f      	beq.n	8005d06 <TIM_Base_SetConfig+0xb2>
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	4a26      	ldr	r2, [pc, #152]	; (8005d84 <TIM_Base_SetConfig+0x130>)
 8005cea:	4293      	cmp	r3, r2
 8005cec:	d00b      	beq.n	8005d06 <TIM_Base_SetConfig+0xb2>
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	4a25      	ldr	r2, [pc, #148]	; (8005d88 <TIM_Base_SetConfig+0x134>)
 8005cf2:	4293      	cmp	r3, r2
 8005cf4:	d007      	beq.n	8005d06 <TIM_Base_SetConfig+0xb2>
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	4a24      	ldr	r2, [pc, #144]	; (8005d8c <TIM_Base_SetConfig+0x138>)
 8005cfa:	4293      	cmp	r3, r2
 8005cfc:	d003      	beq.n	8005d06 <TIM_Base_SetConfig+0xb2>
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	4a23      	ldr	r2, [pc, #140]	; (8005d90 <TIM_Base_SetConfig+0x13c>)
 8005d02:	4293      	cmp	r3, r2
 8005d04:	d108      	bne.n	8005d18 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d0c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005d0e:	683b      	ldr	r3, [r7, #0]
 8005d10:	68db      	ldr	r3, [r3, #12]
 8005d12:	68fa      	ldr	r2, [r7, #12]
 8005d14:	4313      	orrs	r3, r2
 8005d16:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005d1e:	683b      	ldr	r3, [r7, #0]
 8005d20:	695b      	ldr	r3, [r3, #20]
 8005d22:	4313      	orrs	r3, r2
 8005d24:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	68fa      	ldr	r2, [r7, #12]
 8005d2a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005d2c:	683b      	ldr	r3, [r7, #0]
 8005d2e:	689a      	ldr	r2, [r3, #8]
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005d34:	683b      	ldr	r3, [r7, #0]
 8005d36:	681a      	ldr	r2, [r3, #0]
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	4a0a      	ldr	r2, [pc, #40]	; (8005d68 <TIM_Base_SetConfig+0x114>)
 8005d40:	4293      	cmp	r3, r2
 8005d42:	d003      	beq.n	8005d4c <TIM_Base_SetConfig+0xf8>
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	4a0c      	ldr	r2, [pc, #48]	; (8005d78 <TIM_Base_SetConfig+0x124>)
 8005d48:	4293      	cmp	r3, r2
 8005d4a:	d103      	bne.n	8005d54 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005d4c:	683b      	ldr	r3, [r7, #0]
 8005d4e:	691a      	ldr	r2, [r3, #16]
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	2201      	movs	r2, #1
 8005d58:	615a      	str	r2, [r3, #20]
}
 8005d5a:	bf00      	nop
 8005d5c:	3714      	adds	r7, #20
 8005d5e:	46bd      	mov	sp, r7
 8005d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d64:	4770      	bx	lr
 8005d66:	bf00      	nop
 8005d68:	40010000 	.word	0x40010000
 8005d6c:	40000400 	.word	0x40000400
 8005d70:	40000800 	.word	0x40000800
 8005d74:	40000c00 	.word	0x40000c00
 8005d78:	40010400 	.word	0x40010400
 8005d7c:	40014000 	.word	0x40014000
 8005d80:	40014400 	.word	0x40014400
 8005d84:	40014800 	.word	0x40014800
 8005d88:	40001800 	.word	0x40001800
 8005d8c:	40001c00 	.word	0x40001c00
 8005d90:	40002000 	.word	0x40002000

08005d94 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005d94:	b480      	push	{r7}
 8005d96:	b087      	sub	sp, #28
 8005d98:	af00      	add	r7, sp, #0
 8005d9a:	6078      	str	r0, [r7, #4]
 8005d9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	6a1b      	ldr	r3, [r3, #32]
 8005da2:	f023 0201 	bic.w	r2, r3, #1
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	6a1b      	ldr	r3, [r3, #32]
 8005dae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	685b      	ldr	r3, [r3, #4]
 8005db4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	699b      	ldr	r3, [r3, #24]
 8005dba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005dbc:	68fa      	ldr	r2, [r7, #12]
 8005dbe:	4b2b      	ldr	r3, [pc, #172]	; (8005e6c <TIM_OC1_SetConfig+0xd8>)
 8005dc0:	4013      	ands	r3, r2
 8005dc2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	f023 0303 	bic.w	r3, r3, #3
 8005dca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005dcc:	683b      	ldr	r3, [r7, #0]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	68fa      	ldr	r2, [r7, #12]
 8005dd2:	4313      	orrs	r3, r2
 8005dd4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005dd6:	697b      	ldr	r3, [r7, #20]
 8005dd8:	f023 0302 	bic.w	r3, r3, #2
 8005ddc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005dde:	683b      	ldr	r3, [r7, #0]
 8005de0:	689b      	ldr	r3, [r3, #8]
 8005de2:	697a      	ldr	r2, [r7, #20]
 8005de4:	4313      	orrs	r3, r2
 8005de6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	4a21      	ldr	r2, [pc, #132]	; (8005e70 <TIM_OC1_SetConfig+0xdc>)
 8005dec:	4293      	cmp	r3, r2
 8005dee:	d003      	beq.n	8005df8 <TIM_OC1_SetConfig+0x64>
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	4a20      	ldr	r2, [pc, #128]	; (8005e74 <TIM_OC1_SetConfig+0xe0>)
 8005df4:	4293      	cmp	r3, r2
 8005df6:	d10c      	bne.n	8005e12 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005df8:	697b      	ldr	r3, [r7, #20]
 8005dfa:	f023 0308 	bic.w	r3, r3, #8
 8005dfe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005e00:	683b      	ldr	r3, [r7, #0]
 8005e02:	68db      	ldr	r3, [r3, #12]
 8005e04:	697a      	ldr	r2, [r7, #20]
 8005e06:	4313      	orrs	r3, r2
 8005e08:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005e0a:	697b      	ldr	r3, [r7, #20]
 8005e0c:	f023 0304 	bic.w	r3, r3, #4
 8005e10:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	4a16      	ldr	r2, [pc, #88]	; (8005e70 <TIM_OC1_SetConfig+0xdc>)
 8005e16:	4293      	cmp	r3, r2
 8005e18:	d003      	beq.n	8005e22 <TIM_OC1_SetConfig+0x8e>
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	4a15      	ldr	r2, [pc, #84]	; (8005e74 <TIM_OC1_SetConfig+0xe0>)
 8005e1e:	4293      	cmp	r3, r2
 8005e20:	d111      	bne.n	8005e46 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005e22:	693b      	ldr	r3, [r7, #16]
 8005e24:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005e28:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005e2a:	693b      	ldr	r3, [r7, #16]
 8005e2c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005e30:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005e32:	683b      	ldr	r3, [r7, #0]
 8005e34:	695b      	ldr	r3, [r3, #20]
 8005e36:	693a      	ldr	r2, [r7, #16]
 8005e38:	4313      	orrs	r3, r2
 8005e3a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005e3c:	683b      	ldr	r3, [r7, #0]
 8005e3e:	699b      	ldr	r3, [r3, #24]
 8005e40:	693a      	ldr	r2, [r7, #16]
 8005e42:	4313      	orrs	r3, r2
 8005e44:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	693a      	ldr	r2, [r7, #16]
 8005e4a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	68fa      	ldr	r2, [r7, #12]
 8005e50:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005e52:	683b      	ldr	r3, [r7, #0]
 8005e54:	685a      	ldr	r2, [r3, #4]
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	697a      	ldr	r2, [r7, #20]
 8005e5e:	621a      	str	r2, [r3, #32]
}
 8005e60:	bf00      	nop
 8005e62:	371c      	adds	r7, #28
 8005e64:	46bd      	mov	sp, r7
 8005e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e6a:	4770      	bx	lr
 8005e6c:	fffeff8f 	.word	0xfffeff8f
 8005e70:	40010000 	.word	0x40010000
 8005e74:	40010400 	.word	0x40010400

08005e78 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005e78:	b480      	push	{r7}
 8005e7a:	b087      	sub	sp, #28
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	6078      	str	r0, [r7, #4]
 8005e80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	6a1b      	ldr	r3, [r3, #32]
 8005e86:	f023 0210 	bic.w	r2, r3, #16
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	6a1b      	ldr	r3, [r3, #32]
 8005e92:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	685b      	ldr	r3, [r3, #4]
 8005e98:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	699b      	ldr	r3, [r3, #24]
 8005e9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005ea0:	68fa      	ldr	r2, [r7, #12]
 8005ea2:	4b2e      	ldr	r3, [pc, #184]	; (8005f5c <TIM_OC2_SetConfig+0xe4>)
 8005ea4:	4013      	ands	r3, r2
 8005ea6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005eae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005eb0:	683b      	ldr	r3, [r7, #0]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	021b      	lsls	r3, r3, #8
 8005eb6:	68fa      	ldr	r2, [r7, #12]
 8005eb8:	4313      	orrs	r3, r2
 8005eba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005ebc:	697b      	ldr	r3, [r7, #20]
 8005ebe:	f023 0320 	bic.w	r3, r3, #32
 8005ec2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005ec4:	683b      	ldr	r3, [r7, #0]
 8005ec6:	689b      	ldr	r3, [r3, #8]
 8005ec8:	011b      	lsls	r3, r3, #4
 8005eca:	697a      	ldr	r2, [r7, #20]
 8005ecc:	4313      	orrs	r3, r2
 8005ece:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	4a23      	ldr	r2, [pc, #140]	; (8005f60 <TIM_OC2_SetConfig+0xe8>)
 8005ed4:	4293      	cmp	r3, r2
 8005ed6:	d003      	beq.n	8005ee0 <TIM_OC2_SetConfig+0x68>
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	4a22      	ldr	r2, [pc, #136]	; (8005f64 <TIM_OC2_SetConfig+0xec>)
 8005edc:	4293      	cmp	r3, r2
 8005ede:	d10d      	bne.n	8005efc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005ee0:	697b      	ldr	r3, [r7, #20]
 8005ee2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005ee6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005ee8:	683b      	ldr	r3, [r7, #0]
 8005eea:	68db      	ldr	r3, [r3, #12]
 8005eec:	011b      	lsls	r3, r3, #4
 8005eee:	697a      	ldr	r2, [r7, #20]
 8005ef0:	4313      	orrs	r3, r2
 8005ef2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005ef4:	697b      	ldr	r3, [r7, #20]
 8005ef6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005efa:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	4a18      	ldr	r2, [pc, #96]	; (8005f60 <TIM_OC2_SetConfig+0xe8>)
 8005f00:	4293      	cmp	r3, r2
 8005f02:	d003      	beq.n	8005f0c <TIM_OC2_SetConfig+0x94>
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	4a17      	ldr	r2, [pc, #92]	; (8005f64 <TIM_OC2_SetConfig+0xec>)
 8005f08:	4293      	cmp	r3, r2
 8005f0a:	d113      	bne.n	8005f34 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005f0c:	693b      	ldr	r3, [r7, #16]
 8005f0e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005f12:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005f14:	693b      	ldr	r3, [r7, #16]
 8005f16:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005f1a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005f1c:	683b      	ldr	r3, [r7, #0]
 8005f1e:	695b      	ldr	r3, [r3, #20]
 8005f20:	009b      	lsls	r3, r3, #2
 8005f22:	693a      	ldr	r2, [r7, #16]
 8005f24:	4313      	orrs	r3, r2
 8005f26:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005f28:	683b      	ldr	r3, [r7, #0]
 8005f2a:	699b      	ldr	r3, [r3, #24]
 8005f2c:	009b      	lsls	r3, r3, #2
 8005f2e:	693a      	ldr	r2, [r7, #16]
 8005f30:	4313      	orrs	r3, r2
 8005f32:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	693a      	ldr	r2, [r7, #16]
 8005f38:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	68fa      	ldr	r2, [r7, #12]
 8005f3e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005f40:	683b      	ldr	r3, [r7, #0]
 8005f42:	685a      	ldr	r2, [r3, #4]
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	697a      	ldr	r2, [r7, #20]
 8005f4c:	621a      	str	r2, [r3, #32]
}
 8005f4e:	bf00      	nop
 8005f50:	371c      	adds	r7, #28
 8005f52:	46bd      	mov	sp, r7
 8005f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f58:	4770      	bx	lr
 8005f5a:	bf00      	nop
 8005f5c:	feff8fff 	.word	0xfeff8fff
 8005f60:	40010000 	.word	0x40010000
 8005f64:	40010400 	.word	0x40010400

08005f68 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005f68:	b480      	push	{r7}
 8005f6a:	b087      	sub	sp, #28
 8005f6c:	af00      	add	r7, sp, #0
 8005f6e:	6078      	str	r0, [r7, #4]
 8005f70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	6a1b      	ldr	r3, [r3, #32]
 8005f76:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	6a1b      	ldr	r3, [r3, #32]
 8005f82:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	685b      	ldr	r3, [r3, #4]
 8005f88:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	69db      	ldr	r3, [r3, #28]
 8005f8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005f90:	68fa      	ldr	r2, [r7, #12]
 8005f92:	4b2d      	ldr	r3, [pc, #180]	; (8006048 <TIM_OC3_SetConfig+0xe0>)
 8005f94:	4013      	ands	r3, r2
 8005f96:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	f023 0303 	bic.w	r3, r3, #3
 8005f9e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005fa0:	683b      	ldr	r3, [r7, #0]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	68fa      	ldr	r2, [r7, #12]
 8005fa6:	4313      	orrs	r3, r2
 8005fa8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005faa:	697b      	ldr	r3, [r7, #20]
 8005fac:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005fb0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005fb2:	683b      	ldr	r3, [r7, #0]
 8005fb4:	689b      	ldr	r3, [r3, #8]
 8005fb6:	021b      	lsls	r3, r3, #8
 8005fb8:	697a      	ldr	r2, [r7, #20]
 8005fba:	4313      	orrs	r3, r2
 8005fbc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	4a22      	ldr	r2, [pc, #136]	; (800604c <TIM_OC3_SetConfig+0xe4>)
 8005fc2:	4293      	cmp	r3, r2
 8005fc4:	d003      	beq.n	8005fce <TIM_OC3_SetConfig+0x66>
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	4a21      	ldr	r2, [pc, #132]	; (8006050 <TIM_OC3_SetConfig+0xe8>)
 8005fca:	4293      	cmp	r3, r2
 8005fcc:	d10d      	bne.n	8005fea <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005fce:	697b      	ldr	r3, [r7, #20]
 8005fd0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005fd4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005fd6:	683b      	ldr	r3, [r7, #0]
 8005fd8:	68db      	ldr	r3, [r3, #12]
 8005fda:	021b      	lsls	r3, r3, #8
 8005fdc:	697a      	ldr	r2, [r7, #20]
 8005fde:	4313      	orrs	r3, r2
 8005fe0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005fe2:	697b      	ldr	r3, [r7, #20]
 8005fe4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005fe8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	4a17      	ldr	r2, [pc, #92]	; (800604c <TIM_OC3_SetConfig+0xe4>)
 8005fee:	4293      	cmp	r3, r2
 8005ff0:	d003      	beq.n	8005ffa <TIM_OC3_SetConfig+0x92>
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	4a16      	ldr	r2, [pc, #88]	; (8006050 <TIM_OC3_SetConfig+0xe8>)
 8005ff6:	4293      	cmp	r3, r2
 8005ff8:	d113      	bne.n	8006022 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005ffa:	693b      	ldr	r3, [r7, #16]
 8005ffc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006000:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006002:	693b      	ldr	r3, [r7, #16]
 8006004:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006008:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800600a:	683b      	ldr	r3, [r7, #0]
 800600c:	695b      	ldr	r3, [r3, #20]
 800600e:	011b      	lsls	r3, r3, #4
 8006010:	693a      	ldr	r2, [r7, #16]
 8006012:	4313      	orrs	r3, r2
 8006014:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006016:	683b      	ldr	r3, [r7, #0]
 8006018:	699b      	ldr	r3, [r3, #24]
 800601a:	011b      	lsls	r3, r3, #4
 800601c:	693a      	ldr	r2, [r7, #16]
 800601e:	4313      	orrs	r3, r2
 8006020:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	693a      	ldr	r2, [r7, #16]
 8006026:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	68fa      	ldr	r2, [r7, #12]
 800602c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800602e:	683b      	ldr	r3, [r7, #0]
 8006030:	685a      	ldr	r2, [r3, #4]
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	697a      	ldr	r2, [r7, #20]
 800603a:	621a      	str	r2, [r3, #32]
}
 800603c:	bf00      	nop
 800603e:	371c      	adds	r7, #28
 8006040:	46bd      	mov	sp, r7
 8006042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006046:	4770      	bx	lr
 8006048:	fffeff8f 	.word	0xfffeff8f
 800604c:	40010000 	.word	0x40010000
 8006050:	40010400 	.word	0x40010400

08006054 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006054:	b480      	push	{r7}
 8006056:	b087      	sub	sp, #28
 8006058:	af00      	add	r7, sp, #0
 800605a:	6078      	str	r0, [r7, #4]
 800605c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	6a1b      	ldr	r3, [r3, #32]
 8006062:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	6a1b      	ldr	r3, [r3, #32]
 800606e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	685b      	ldr	r3, [r3, #4]
 8006074:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	69db      	ldr	r3, [r3, #28]
 800607a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800607c:	68fa      	ldr	r2, [r7, #12]
 800607e:	4b1e      	ldr	r3, [pc, #120]	; (80060f8 <TIM_OC4_SetConfig+0xa4>)
 8006080:	4013      	ands	r3, r2
 8006082:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800608a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800608c:	683b      	ldr	r3, [r7, #0]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	021b      	lsls	r3, r3, #8
 8006092:	68fa      	ldr	r2, [r7, #12]
 8006094:	4313      	orrs	r3, r2
 8006096:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006098:	693b      	ldr	r3, [r7, #16]
 800609a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800609e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80060a0:	683b      	ldr	r3, [r7, #0]
 80060a2:	689b      	ldr	r3, [r3, #8]
 80060a4:	031b      	lsls	r3, r3, #12
 80060a6:	693a      	ldr	r2, [r7, #16]
 80060a8:	4313      	orrs	r3, r2
 80060aa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	4a13      	ldr	r2, [pc, #76]	; (80060fc <TIM_OC4_SetConfig+0xa8>)
 80060b0:	4293      	cmp	r3, r2
 80060b2:	d003      	beq.n	80060bc <TIM_OC4_SetConfig+0x68>
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	4a12      	ldr	r2, [pc, #72]	; (8006100 <TIM_OC4_SetConfig+0xac>)
 80060b8:	4293      	cmp	r3, r2
 80060ba:	d109      	bne.n	80060d0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80060bc:	697b      	ldr	r3, [r7, #20]
 80060be:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80060c2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80060c4:	683b      	ldr	r3, [r7, #0]
 80060c6:	695b      	ldr	r3, [r3, #20]
 80060c8:	019b      	lsls	r3, r3, #6
 80060ca:	697a      	ldr	r2, [r7, #20]
 80060cc:	4313      	orrs	r3, r2
 80060ce:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	697a      	ldr	r2, [r7, #20]
 80060d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	68fa      	ldr	r2, [r7, #12]
 80060da:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80060dc:	683b      	ldr	r3, [r7, #0]
 80060de:	685a      	ldr	r2, [r3, #4]
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	693a      	ldr	r2, [r7, #16]
 80060e8:	621a      	str	r2, [r3, #32]
}
 80060ea:	bf00      	nop
 80060ec:	371c      	adds	r7, #28
 80060ee:	46bd      	mov	sp, r7
 80060f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f4:	4770      	bx	lr
 80060f6:	bf00      	nop
 80060f8:	feff8fff 	.word	0xfeff8fff
 80060fc:	40010000 	.word	0x40010000
 8006100:	40010400 	.word	0x40010400

08006104 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006104:	b480      	push	{r7}
 8006106:	b087      	sub	sp, #28
 8006108:	af00      	add	r7, sp, #0
 800610a:	6078      	str	r0, [r7, #4]
 800610c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	6a1b      	ldr	r3, [r3, #32]
 8006112:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	6a1b      	ldr	r3, [r3, #32]
 800611e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	685b      	ldr	r3, [r3, #4]
 8006124:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800612a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800612c:	68fa      	ldr	r2, [r7, #12]
 800612e:	4b1b      	ldr	r3, [pc, #108]	; (800619c <TIM_OC5_SetConfig+0x98>)
 8006130:	4013      	ands	r3, r2
 8006132:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006134:	683b      	ldr	r3, [r7, #0]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	68fa      	ldr	r2, [r7, #12]
 800613a:	4313      	orrs	r3, r2
 800613c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800613e:	693b      	ldr	r3, [r7, #16]
 8006140:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006144:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006146:	683b      	ldr	r3, [r7, #0]
 8006148:	689b      	ldr	r3, [r3, #8]
 800614a:	041b      	lsls	r3, r3, #16
 800614c:	693a      	ldr	r2, [r7, #16]
 800614e:	4313      	orrs	r3, r2
 8006150:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	4a12      	ldr	r2, [pc, #72]	; (80061a0 <TIM_OC5_SetConfig+0x9c>)
 8006156:	4293      	cmp	r3, r2
 8006158:	d003      	beq.n	8006162 <TIM_OC5_SetConfig+0x5e>
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	4a11      	ldr	r2, [pc, #68]	; (80061a4 <TIM_OC5_SetConfig+0xa0>)
 800615e:	4293      	cmp	r3, r2
 8006160:	d109      	bne.n	8006176 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006162:	697b      	ldr	r3, [r7, #20]
 8006164:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006168:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800616a:	683b      	ldr	r3, [r7, #0]
 800616c:	695b      	ldr	r3, [r3, #20]
 800616e:	021b      	lsls	r3, r3, #8
 8006170:	697a      	ldr	r2, [r7, #20]
 8006172:	4313      	orrs	r3, r2
 8006174:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	697a      	ldr	r2, [r7, #20]
 800617a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	68fa      	ldr	r2, [r7, #12]
 8006180:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006182:	683b      	ldr	r3, [r7, #0]
 8006184:	685a      	ldr	r2, [r3, #4]
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	693a      	ldr	r2, [r7, #16]
 800618e:	621a      	str	r2, [r3, #32]
}
 8006190:	bf00      	nop
 8006192:	371c      	adds	r7, #28
 8006194:	46bd      	mov	sp, r7
 8006196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800619a:	4770      	bx	lr
 800619c:	fffeff8f 	.word	0xfffeff8f
 80061a0:	40010000 	.word	0x40010000
 80061a4:	40010400 	.word	0x40010400

080061a8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80061a8:	b480      	push	{r7}
 80061aa:	b087      	sub	sp, #28
 80061ac:	af00      	add	r7, sp, #0
 80061ae:	6078      	str	r0, [r7, #4]
 80061b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	6a1b      	ldr	r3, [r3, #32]
 80061b6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	6a1b      	ldr	r3, [r3, #32]
 80061c2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	685b      	ldr	r3, [r3, #4]
 80061c8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80061d0:	68fa      	ldr	r2, [r7, #12]
 80061d2:	4b1c      	ldr	r3, [pc, #112]	; (8006244 <TIM_OC6_SetConfig+0x9c>)
 80061d4:	4013      	ands	r3, r2
 80061d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80061d8:	683b      	ldr	r3, [r7, #0]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	021b      	lsls	r3, r3, #8
 80061de:	68fa      	ldr	r2, [r7, #12]
 80061e0:	4313      	orrs	r3, r2
 80061e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80061e4:	693b      	ldr	r3, [r7, #16]
 80061e6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80061ea:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80061ec:	683b      	ldr	r3, [r7, #0]
 80061ee:	689b      	ldr	r3, [r3, #8]
 80061f0:	051b      	lsls	r3, r3, #20
 80061f2:	693a      	ldr	r2, [r7, #16]
 80061f4:	4313      	orrs	r3, r2
 80061f6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	4a13      	ldr	r2, [pc, #76]	; (8006248 <TIM_OC6_SetConfig+0xa0>)
 80061fc:	4293      	cmp	r3, r2
 80061fe:	d003      	beq.n	8006208 <TIM_OC6_SetConfig+0x60>
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	4a12      	ldr	r2, [pc, #72]	; (800624c <TIM_OC6_SetConfig+0xa4>)
 8006204:	4293      	cmp	r3, r2
 8006206:	d109      	bne.n	800621c <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006208:	697b      	ldr	r3, [r7, #20]
 800620a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800620e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006210:	683b      	ldr	r3, [r7, #0]
 8006212:	695b      	ldr	r3, [r3, #20]
 8006214:	029b      	lsls	r3, r3, #10
 8006216:	697a      	ldr	r2, [r7, #20]
 8006218:	4313      	orrs	r3, r2
 800621a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	697a      	ldr	r2, [r7, #20]
 8006220:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	68fa      	ldr	r2, [r7, #12]
 8006226:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006228:	683b      	ldr	r3, [r7, #0]
 800622a:	685a      	ldr	r2, [r3, #4]
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	693a      	ldr	r2, [r7, #16]
 8006234:	621a      	str	r2, [r3, #32]
}
 8006236:	bf00      	nop
 8006238:	371c      	adds	r7, #28
 800623a:	46bd      	mov	sp, r7
 800623c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006240:	4770      	bx	lr
 8006242:	bf00      	nop
 8006244:	feff8fff 	.word	0xfeff8fff
 8006248:	40010000 	.word	0x40010000
 800624c:	40010400 	.word	0x40010400

08006250 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006250:	b480      	push	{r7}
 8006252:	b087      	sub	sp, #28
 8006254:	af00      	add	r7, sp, #0
 8006256:	60f8      	str	r0, [r7, #12]
 8006258:	60b9      	str	r1, [r7, #8]
 800625a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	6a1b      	ldr	r3, [r3, #32]
 8006260:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	6a1b      	ldr	r3, [r3, #32]
 8006266:	f023 0201 	bic.w	r2, r3, #1
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	699b      	ldr	r3, [r3, #24]
 8006272:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006274:	693b      	ldr	r3, [r7, #16]
 8006276:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800627a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	011b      	lsls	r3, r3, #4
 8006280:	693a      	ldr	r2, [r7, #16]
 8006282:	4313      	orrs	r3, r2
 8006284:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006286:	697b      	ldr	r3, [r7, #20]
 8006288:	f023 030a 	bic.w	r3, r3, #10
 800628c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800628e:	697a      	ldr	r2, [r7, #20]
 8006290:	68bb      	ldr	r3, [r7, #8]
 8006292:	4313      	orrs	r3, r2
 8006294:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	693a      	ldr	r2, [r7, #16]
 800629a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	697a      	ldr	r2, [r7, #20]
 80062a0:	621a      	str	r2, [r3, #32]
}
 80062a2:	bf00      	nop
 80062a4:	371c      	adds	r7, #28
 80062a6:	46bd      	mov	sp, r7
 80062a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ac:	4770      	bx	lr

080062ae <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80062ae:	b480      	push	{r7}
 80062b0:	b087      	sub	sp, #28
 80062b2:	af00      	add	r7, sp, #0
 80062b4:	60f8      	str	r0, [r7, #12]
 80062b6:	60b9      	str	r1, [r7, #8]
 80062b8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	6a1b      	ldr	r3, [r3, #32]
 80062be:	f023 0210 	bic.w	r2, r3, #16
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	699b      	ldr	r3, [r3, #24]
 80062ca:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	6a1b      	ldr	r3, [r3, #32]
 80062d0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80062d2:	697b      	ldr	r3, [r7, #20]
 80062d4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80062d8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	031b      	lsls	r3, r3, #12
 80062de:	697a      	ldr	r2, [r7, #20]
 80062e0:	4313      	orrs	r3, r2
 80062e2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80062e4:	693b      	ldr	r3, [r7, #16]
 80062e6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80062ea:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80062ec:	68bb      	ldr	r3, [r7, #8]
 80062ee:	011b      	lsls	r3, r3, #4
 80062f0:	693a      	ldr	r2, [r7, #16]
 80062f2:	4313      	orrs	r3, r2
 80062f4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	697a      	ldr	r2, [r7, #20]
 80062fa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	693a      	ldr	r2, [r7, #16]
 8006300:	621a      	str	r2, [r3, #32]
}
 8006302:	bf00      	nop
 8006304:	371c      	adds	r7, #28
 8006306:	46bd      	mov	sp, r7
 8006308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800630c:	4770      	bx	lr

0800630e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800630e:	b480      	push	{r7}
 8006310:	b085      	sub	sp, #20
 8006312:	af00      	add	r7, sp, #0
 8006314:	6078      	str	r0, [r7, #4]
 8006316:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	689b      	ldr	r3, [r3, #8]
 800631c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006324:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006326:	683a      	ldr	r2, [r7, #0]
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	4313      	orrs	r3, r2
 800632c:	f043 0307 	orr.w	r3, r3, #7
 8006330:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	68fa      	ldr	r2, [r7, #12]
 8006336:	609a      	str	r2, [r3, #8]
}
 8006338:	bf00      	nop
 800633a:	3714      	adds	r7, #20
 800633c:	46bd      	mov	sp, r7
 800633e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006342:	4770      	bx	lr

08006344 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006344:	b480      	push	{r7}
 8006346:	b087      	sub	sp, #28
 8006348:	af00      	add	r7, sp, #0
 800634a:	60f8      	str	r0, [r7, #12]
 800634c:	60b9      	str	r1, [r7, #8]
 800634e:	607a      	str	r2, [r7, #4]
 8006350:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	689b      	ldr	r3, [r3, #8]
 8006356:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006358:	697b      	ldr	r3, [r7, #20]
 800635a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800635e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006360:	683b      	ldr	r3, [r7, #0]
 8006362:	021a      	lsls	r2, r3, #8
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	431a      	orrs	r2, r3
 8006368:	68bb      	ldr	r3, [r7, #8]
 800636a:	4313      	orrs	r3, r2
 800636c:	697a      	ldr	r2, [r7, #20]
 800636e:	4313      	orrs	r3, r2
 8006370:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	697a      	ldr	r2, [r7, #20]
 8006376:	609a      	str	r2, [r3, #8]
}
 8006378:	bf00      	nop
 800637a:	371c      	adds	r7, #28
 800637c:	46bd      	mov	sp, r7
 800637e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006382:	4770      	bx	lr

08006384 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006384:	b480      	push	{r7}
 8006386:	b087      	sub	sp, #28
 8006388:	af00      	add	r7, sp, #0
 800638a:	60f8      	str	r0, [r7, #12]
 800638c:	60b9      	str	r1, [r7, #8]
 800638e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006390:	68bb      	ldr	r3, [r7, #8]
 8006392:	f003 031f 	and.w	r3, r3, #31
 8006396:	2201      	movs	r2, #1
 8006398:	fa02 f303 	lsl.w	r3, r2, r3
 800639c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	6a1a      	ldr	r2, [r3, #32]
 80063a2:	697b      	ldr	r3, [r7, #20]
 80063a4:	43db      	mvns	r3, r3
 80063a6:	401a      	ands	r2, r3
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	6a1a      	ldr	r2, [r3, #32]
 80063b0:	68bb      	ldr	r3, [r7, #8]
 80063b2:	f003 031f 	and.w	r3, r3, #31
 80063b6:	6879      	ldr	r1, [r7, #4]
 80063b8:	fa01 f303 	lsl.w	r3, r1, r3
 80063bc:	431a      	orrs	r2, r3
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	621a      	str	r2, [r3, #32]
}
 80063c2:	bf00      	nop
 80063c4:	371c      	adds	r7, #28
 80063c6:	46bd      	mov	sp, r7
 80063c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063cc:	4770      	bx	lr

080063ce <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80063ce:	b580      	push	{r7, lr}
 80063d0:	b082      	sub	sp, #8
 80063d2:	af00      	add	r7, sp, #0
 80063d4:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d101      	bne.n	80063e0 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80063dc:	2301      	movs	r3, #1
 80063de:	e040      	b.n	8006462 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d106      	bne.n	80063f6 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	2200      	movs	r2, #0
 80063ec:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80063f0:	6878      	ldr	r0, [r7, #4]
 80063f2:	f7fb f9b1 	bl	8001758 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	2224      	movs	r2, #36	; 0x24
 80063fa:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	681a      	ldr	r2, [r3, #0]
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	f022 0201 	bic.w	r2, r2, #1
 800640a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800640c:	6878      	ldr	r0, [r7, #4]
 800640e:	f000 f82d 	bl	800646c <UART_SetConfig>
 8006412:	4603      	mov	r3, r0
 8006414:	2b01      	cmp	r3, #1
 8006416:	d101      	bne.n	800641c <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8006418:	2301      	movs	r3, #1
 800641a:	e022      	b.n	8006462 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006420:	2b00      	cmp	r3, #0
 8006422:	d002      	beq.n	800642a <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8006424:	6878      	ldr	r0, [r7, #4]
 8006426:	f000 fa83 	bl	8006930 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	685a      	ldr	r2, [r3, #4]
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006438:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	689a      	ldr	r2, [r3, #8]
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006448:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	681a      	ldr	r2, [r3, #0]
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	f042 0201 	orr.w	r2, r2, #1
 8006458:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800645a:	6878      	ldr	r0, [r7, #4]
 800645c:	f000 fb0a 	bl	8006a74 <UART_CheckIdleState>
 8006460:	4603      	mov	r3, r0
}
 8006462:	4618      	mov	r0, r3
 8006464:	3708      	adds	r7, #8
 8006466:	46bd      	mov	sp, r7
 8006468:	bd80      	pop	{r7, pc}
	...

0800646c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800646c:	b580      	push	{r7, lr}
 800646e:	b088      	sub	sp, #32
 8006470:	af00      	add	r7, sp, #0
 8006472:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006474:	2300      	movs	r3, #0
 8006476:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	689a      	ldr	r2, [r3, #8]
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	691b      	ldr	r3, [r3, #16]
 8006480:	431a      	orrs	r2, r3
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	695b      	ldr	r3, [r3, #20]
 8006486:	431a      	orrs	r2, r3
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	69db      	ldr	r3, [r3, #28]
 800648c:	4313      	orrs	r3, r2
 800648e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	681a      	ldr	r2, [r3, #0]
 8006496:	4ba7      	ldr	r3, [pc, #668]	; (8006734 <UART_SetConfig+0x2c8>)
 8006498:	4013      	ands	r3, r2
 800649a:	687a      	ldr	r2, [r7, #4]
 800649c:	6812      	ldr	r2, [r2, #0]
 800649e:	6979      	ldr	r1, [r7, #20]
 80064a0:	430b      	orrs	r3, r1
 80064a2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	685b      	ldr	r3, [r3, #4]
 80064aa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	68da      	ldr	r2, [r3, #12]
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	430a      	orrs	r2, r1
 80064b8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	699b      	ldr	r3, [r3, #24]
 80064be:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	6a1b      	ldr	r3, [r3, #32]
 80064c4:	697a      	ldr	r2, [r7, #20]
 80064c6:	4313      	orrs	r3, r2
 80064c8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	689b      	ldr	r3, [r3, #8]
 80064d0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	697a      	ldr	r2, [r7, #20]
 80064da:	430a      	orrs	r2, r1
 80064dc:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	4a95      	ldr	r2, [pc, #596]	; (8006738 <UART_SetConfig+0x2cc>)
 80064e4:	4293      	cmp	r3, r2
 80064e6:	d120      	bne.n	800652a <UART_SetConfig+0xbe>
 80064e8:	4b94      	ldr	r3, [pc, #592]	; (800673c <UART_SetConfig+0x2d0>)
 80064ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80064ee:	f003 0303 	and.w	r3, r3, #3
 80064f2:	2b03      	cmp	r3, #3
 80064f4:	d816      	bhi.n	8006524 <UART_SetConfig+0xb8>
 80064f6:	a201      	add	r2, pc, #4	; (adr r2, 80064fc <UART_SetConfig+0x90>)
 80064f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064fc:	0800650d 	.word	0x0800650d
 8006500:	08006519 	.word	0x08006519
 8006504:	08006513 	.word	0x08006513
 8006508:	0800651f 	.word	0x0800651f
 800650c:	2301      	movs	r3, #1
 800650e:	77fb      	strb	r3, [r7, #31]
 8006510:	e14f      	b.n	80067b2 <UART_SetConfig+0x346>
 8006512:	2302      	movs	r3, #2
 8006514:	77fb      	strb	r3, [r7, #31]
 8006516:	e14c      	b.n	80067b2 <UART_SetConfig+0x346>
 8006518:	2304      	movs	r3, #4
 800651a:	77fb      	strb	r3, [r7, #31]
 800651c:	e149      	b.n	80067b2 <UART_SetConfig+0x346>
 800651e:	2308      	movs	r3, #8
 8006520:	77fb      	strb	r3, [r7, #31]
 8006522:	e146      	b.n	80067b2 <UART_SetConfig+0x346>
 8006524:	2310      	movs	r3, #16
 8006526:	77fb      	strb	r3, [r7, #31]
 8006528:	e143      	b.n	80067b2 <UART_SetConfig+0x346>
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	4a84      	ldr	r2, [pc, #528]	; (8006740 <UART_SetConfig+0x2d4>)
 8006530:	4293      	cmp	r3, r2
 8006532:	d132      	bne.n	800659a <UART_SetConfig+0x12e>
 8006534:	4b81      	ldr	r3, [pc, #516]	; (800673c <UART_SetConfig+0x2d0>)
 8006536:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800653a:	f003 030c 	and.w	r3, r3, #12
 800653e:	2b0c      	cmp	r3, #12
 8006540:	d828      	bhi.n	8006594 <UART_SetConfig+0x128>
 8006542:	a201      	add	r2, pc, #4	; (adr r2, 8006548 <UART_SetConfig+0xdc>)
 8006544:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006548:	0800657d 	.word	0x0800657d
 800654c:	08006595 	.word	0x08006595
 8006550:	08006595 	.word	0x08006595
 8006554:	08006595 	.word	0x08006595
 8006558:	08006589 	.word	0x08006589
 800655c:	08006595 	.word	0x08006595
 8006560:	08006595 	.word	0x08006595
 8006564:	08006595 	.word	0x08006595
 8006568:	08006583 	.word	0x08006583
 800656c:	08006595 	.word	0x08006595
 8006570:	08006595 	.word	0x08006595
 8006574:	08006595 	.word	0x08006595
 8006578:	0800658f 	.word	0x0800658f
 800657c:	2300      	movs	r3, #0
 800657e:	77fb      	strb	r3, [r7, #31]
 8006580:	e117      	b.n	80067b2 <UART_SetConfig+0x346>
 8006582:	2302      	movs	r3, #2
 8006584:	77fb      	strb	r3, [r7, #31]
 8006586:	e114      	b.n	80067b2 <UART_SetConfig+0x346>
 8006588:	2304      	movs	r3, #4
 800658a:	77fb      	strb	r3, [r7, #31]
 800658c:	e111      	b.n	80067b2 <UART_SetConfig+0x346>
 800658e:	2308      	movs	r3, #8
 8006590:	77fb      	strb	r3, [r7, #31]
 8006592:	e10e      	b.n	80067b2 <UART_SetConfig+0x346>
 8006594:	2310      	movs	r3, #16
 8006596:	77fb      	strb	r3, [r7, #31]
 8006598:	e10b      	b.n	80067b2 <UART_SetConfig+0x346>
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	4a69      	ldr	r2, [pc, #420]	; (8006744 <UART_SetConfig+0x2d8>)
 80065a0:	4293      	cmp	r3, r2
 80065a2:	d120      	bne.n	80065e6 <UART_SetConfig+0x17a>
 80065a4:	4b65      	ldr	r3, [pc, #404]	; (800673c <UART_SetConfig+0x2d0>)
 80065a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80065aa:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80065ae:	2b30      	cmp	r3, #48	; 0x30
 80065b0:	d013      	beq.n	80065da <UART_SetConfig+0x16e>
 80065b2:	2b30      	cmp	r3, #48	; 0x30
 80065b4:	d814      	bhi.n	80065e0 <UART_SetConfig+0x174>
 80065b6:	2b20      	cmp	r3, #32
 80065b8:	d009      	beq.n	80065ce <UART_SetConfig+0x162>
 80065ba:	2b20      	cmp	r3, #32
 80065bc:	d810      	bhi.n	80065e0 <UART_SetConfig+0x174>
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d002      	beq.n	80065c8 <UART_SetConfig+0x15c>
 80065c2:	2b10      	cmp	r3, #16
 80065c4:	d006      	beq.n	80065d4 <UART_SetConfig+0x168>
 80065c6:	e00b      	b.n	80065e0 <UART_SetConfig+0x174>
 80065c8:	2300      	movs	r3, #0
 80065ca:	77fb      	strb	r3, [r7, #31]
 80065cc:	e0f1      	b.n	80067b2 <UART_SetConfig+0x346>
 80065ce:	2302      	movs	r3, #2
 80065d0:	77fb      	strb	r3, [r7, #31]
 80065d2:	e0ee      	b.n	80067b2 <UART_SetConfig+0x346>
 80065d4:	2304      	movs	r3, #4
 80065d6:	77fb      	strb	r3, [r7, #31]
 80065d8:	e0eb      	b.n	80067b2 <UART_SetConfig+0x346>
 80065da:	2308      	movs	r3, #8
 80065dc:	77fb      	strb	r3, [r7, #31]
 80065de:	e0e8      	b.n	80067b2 <UART_SetConfig+0x346>
 80065e0:	2310      	movs	r3, #16
 80065e2:	77fb      	strb	r3, [r7, #31]
 80065e4:	e0e5      	b.n	80067b2 <UART_SetConfig+0x346>
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	4a57      	ldr	r2, [pc, #348]	; (8006748 <UART_SetConfig+0x2dc>)
 80065ec:	4293      	cmp	r3, r2
 80065ee:	d120      	bne.n	8006632 <UART_SetConfig+0x1c6>
 80065f0:	4b52      	ldr	r3, [pc, #328]	; (800673c <UART_SetConfig+0x2d0>)
 80065f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80065f6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80065fa:	2bc0      	cmp	r3, #192	; 0xc0
 80065fc:	d013      	beq.n	8006626 <UART_SetConfig+0x1ba>
 80065fe:	2bc0      	cmp	r3, #192	; 0xc0
 8006600:	d814      	bhi.n	800662c <UART_SetConfig+0x1c0>
 8006602:	2b80      	cmp	r3, #128	; 0x80
 8006604:	d009      	beq.n	800661a <UART_SetConfig+0x1ae>
 8006606:	2b80      	cmp	r3, #128	; 0x80
 8006608:	d810      	bhi.n	800662c <UART_SetConfig+0x1c0>
 800660a:	2b00      	cmp	r3, #0
 800660c:	d002      	beq.n	8006614 <UART_SetConfig+0x1a8>
 800660e:	2b40      	cmp	r3, #64	; 0x40
 8006610:	d006      	beq.n	8006620 <UART_SetConfig+0x1b4>
 8006612:	e00b      	b.n	800662c <UART_SetConfig+0x1c0>
 8006614:	2300      	movs	r3, #0
 8006616:	77fb      	strb	r3, [r7, #31]
 8006618:	e0cb      	b.n	80067b2 <UART_SetConfig+0x346>
 800661a:	2302      	movs	r3, #2
 800661c:	77fb      	strb	r3, [r7, #31]
 800661e:	e0c8      	b.n	80067b2 <UART_SetConfig+0x346>
 8006620:	2304      	movs	r3, #4
 8006622:	77fb      	strb	r3, [r7, #31]
 8006624:	e0c5      	b.n	80067b2 <UART_SetConfig+0x346>
 8006626:	2308      	movs	r3, #8
 8006628:	77fb      	strb	r3, [r7, #31]
 800662a:	e0c2      	b.n	80067b2 <UART_SetConfig+0x346>
 800662c:	2310      	movs	r3, #16
 800662e:	77fb      	strb	r3, [r7, #31]
 8006630:	e0bf      	b.n	80067b2 <UART_SetConfig+0x346>
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	4a45      	ldr	r2, [pc, #276]	; (800674c <UART_SetConfig+0x2e0>)
 8006638:	4293      	cmp	r3, r2
 800663a:	d125      	bne.n	8006688 <UART_SetConfig+0x21c>
 800663c:	4b3f      	ldr	r3, [pc, #252]	; (800673c <UART_SetConfig+0x2d0>)
 800663e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006642:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006646:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800664a:	d017      	beq.n	800667c <UART_SetConfig+0x210>
 800664c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006650:	d817      	bhi.n	8006682 <UART_SetConfig+0x216>
 8006652:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006656:	d00b      	beq.n	8006670 <UART_SetConfig+0x204>
 8006658:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800665c:	d811      	bhi.n	8006682 <UART_SetConfig+0x216>
 800665e:	2b00      	cmp	r3, #0
 8006660:	d003      	beq.n	800666a <UART_SetConfig+0x1fe>
 8006662:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006666:	d006      	beq.n	8006676 <UART_SetConfig+0x20a>
 8006668:	e00b      	b.n	8006682 <UART_SetConfig+0x216>
 800666a:	2300      	movs	r3, #0
 800666c:	77fb      	strb	r3, [r7, #31]
 800666e:	e0a0      	b.n	80067b2 <UART_SetConfig+0x346>
 8006670:	2302      	movs	r3, #2
 8006672:	77fb      	strb	r3, [r7, #31]
 8006674:	e09d      	b.n	80067b2 <UART_SetConfig+0x346>
 8006676:	2304      	movs	r3, #4
 8006678:	77fb      	strb	r3, [r7, #31]
 800667a:	e09a      	b.n	80067b2 <UART_SetConfig+0x346>
 800667c:	2308      	movs	r3, #8
 800667e:	77fb      	strb	r3, [r7, #31]
 8006680:	e097      	b.n	80067b2 <UART_SetConfig+0x346>
 8006682:	2310      	movs	r3, #16
 8006684:	77fb      	strb	r3, [r7, #31]
 8006686:	e094      	b.n	80067b2 <UART_SetConfig+0x346>
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	4a30      	ldr	r2, [pc, #192]	; (8006750 <UART_SetConfig+0x2e4>)
 800668e:	4293      	cmp	r3, r2
 8006690:	d125      	bne.n	80066de <UART_SetConfig+0x272>
 8006692:	4b2a      	ldr	r3, [pc, #168]	; (800673c <UART_SetConfig+0x2d0>)
 8006694:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006698:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800669c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80066a0:	d017      	beq.n	80066d2 <UART_SetConfig+0x266>
 80066a2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80066a6:	d817      	bhi.n	80066d8 <UART_SetConfig+0x26c>
 80066a8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80066ac:	d00b      	beq.n	80066c6 <UART_SetConfig+0x25a>
 80066ae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80066b2:	d811      	bhi.n	80066d8 <UART_SetConfig+0x26c>
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d003      	beq.n	80066c0 <UART_SetConfig+0x254>
 80066b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80066bc:	d006      	beq.n	80066cc <UART_SetConfig+0x260>
 80066be:	e00b      	b.n	80066d8 <UART_SetConfig+0x26c>
 80066c0:	2301      	movs	r3, #1
 80066c2:	77fb      	strb	r3, [r7, #31]
 80066c4:	e075      	b.n	80067b2 <UART_SetConfig+0x346>
 80066c6:	2302      	movs	r3, #2
 80066c8:	77fb      	strb	r3, [r7, #31]
 80066ca:	e072      	b.n	80067b2 <UART_SetConfig+0x346>
 80066cc:	2304      	movs	r3, #4
 80066ce:	77fb      	strb	r3, [r7, #31]
 80066d0:	e06f      	b.n	80067b2 <UART_SetConfig+0x346>
 80066d2:	2308      	movs	r3, #8
 80066d4:	77fb      	strb	r3, [r7, #31]
 80066d6:	e06c      	b.n	80067b2 <UART_SetConfig+0x346>
 80066d8:	2310      	movs	r3, #16
 80066da:	77fb      	strb	r3, [r7, #31]
 80066dc:	e069      	b.n	80067b2 <UART_SetConfig+0x346>
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	4a1c      	ldr	r2, [pc, #112]	; (8006754 <UART_SetConfig+0x2e8>)
 80066e4:	4293      	cmp	r3, r2
 80066e6:	d137      	bne.n	8006758 <UART_SetConfig+0x2ec>
 80066e8:	4b14      	ldr	r3, [pc, #80]	; (800673c <UART_SetConfig+0x2d0>)
 80066ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80066ee:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80066f2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80066f6:	d017      	beq.n	8006728 <UART_SetConfig+0x2bc>
 80066f8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80066fc:	d817      	bhi.n	800672e <UART_SetConfig+0x2c2>
 80066fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006702:	d00b      	beq.n	800671c <UART_SetConfig+0x2b0>
 8006704:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006708:	d811      	bhi.n	800672e <UART_SetConfig+0x2c2>
 800670a:	2b00      	cmp	r3, #0
 800670c:	d003      	beq.n	8006716 <UART_SetConfig+0x2aa>
 800670e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006712:	d006      	beq.n	8006722 <UART_SetConfig+0x2b6>
 8006714:	e00b      	b.n	800672e <UART_SetConfig+0x2c2>
 8006716:	2300      	movs	r3, #0
 8006718:	77fb      	strb	r3, [r7, #31]
 800671a:	e04a      	b.n	80067b2 <UART_SetConfig+0x346>
 800671c:	2302      	movs	r3, #2
 800671e:	77fb      	strb	r3, [r7, #31]
 8006720:	e047      	b.n	80067b2 <UART_SetConfig+0x346>
 8006722:	2304      	movs	r3, #4
 8006724:	77fb      	strb	r3, [r7, #31]
 8006726:	e044      	b.n	80067b2 <UART_SetConfig+0x346>
 8006728:	2308      	movs	r3, #8
 800672a:	77fb      	strb	r3, [r7, #31]
 800672c:	e041      	b.n	80067b2 <UART_SetConfig+0x346>
 800672e:	2310      	movs	r3, #16
 8006730:	77fb      	strb	r3, [r7, #31]
 8006732:	e03e      	b.n	80067b2 <UART_SetConfig+0x346>
 8006734:	efff69f3 	.word	0xefff69f3
 8006738:	40011000 	.word	0x40011000
 800673c:	40023800 	.word	0x40023800
 8006740:	40004400 	.word	0x40004400
 8006744:	40004800 	.word	0x40004800
 8006748:	40004c00 	.word	0x40004c00
 800674c:	40005000 	.word	0x40005000
 8006750:	40011400 	.word	0x40011400
 8006754:	40007800 	.word	0x40007800
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	4a71      	ldr	r2, [pc, #452]	; (8006924 <UART_SetConfig+0x4b8>)
 800675e:	4293      	cmp	r3, r2
 8006760:	d125      	bne.n	80067ae <UART_SetConfig+0x342>
 8006762:	4b71      	ldr	r3, [pc, #452]	; (8006928 <UART_SetConfig+0x4bc>)
 8006764:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006768:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800676c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006770:	d017      	beq.n	80067a2 <UART_SetConfig+0x336>
 8006772:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006776:	d817      	bhi.n	80067a8 <UART_SetConfig+0x33c>
 8006778:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800677c:	d00b      	beq.n	8006796 <UART_SetConfig+0x32a>
 800677e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006782:	d811      	bhi.n	80067a8 <UART_SetConfig+0x33c>
 8006784:	2b00      	cmp	r3, #0
 8006786:	d003      	beq.n	8006790 <UART_SetConfig+0x324>
 8006788:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800678c:	d006      	beq.n	800679c <UART_SetConfig+0x330>
 800678e:	e00b      	b.n	80067a8 <UART_SetConfig+0x33c>
 8006790:	2300      	movs	r3, #0
 8006792:	77fb      	strb	r3, [r7, #31]
 8006794:	e00d      	b.n	80067b2 <UART_SetConfig+0x346>
 8006796:	2302      	movs	r3, #2
 8006798:	77fb      	strb	r3, [r7, #31]
 800679a:	e00a      	b.n	80067b2 <UART_SetConfig+0x346>
 800679c:	2304      	movs	r3, #4
 800679e:	77fb      	strb	r3, [r7, #31]
 80067a0:	e007      	b.n	80067b2 <UART_SetConfig+0x346>
 80067a2:	2308      	movs	r3, #8
 80067a4:	77fb      	strb	r3, [r7, #31]
 80067a6:	e004      	b.n	80067b2 <UART_SetConfig+0x346>
 80067a8:	2310      	movs	r3, #16
 80067aa:	77fb      	strb	r3, [r7, #31]
 80067ac:	e001      	b.n	80067b2 <UART_SetConfig+0x346>
 80067ae:	2310      	movs	r3, #16
 80067b0:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	69db      	ldr	r3, [r3, #28]
 80067b6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80067ba:	d15b      	bne.n	8006874 <UART_SetConfig+0x408>
  {
    switch (clocksource)
 80067bc:	7ffb      	ldrb	r3, [r7, #31]
 80067be:	2b08      	cmp	r3, #8
 80067c0:	d827      	bhi.n	8006812 <UART_SetConfig+0x3a6>
 80067c2:	a201      	add	r2, pc, #4	; (adr r2, 80067c8 <UART_SetConfig+0x35c>)
 80067c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067c8:	080067ed 	.word	0x080067ed
 80067cc:	080067f5 	.word	0x080067f5
 80067d0:	080067fd 	.word	0x080067fd
 80067d4:	08006813 	.word	0x08006813
 80067d8:	08006803 	.word	0x08006803
 80067dc:	08006813 	.word	0x08006813
 80067e0:	08006813 	.word	0x08006813
 80067e4:	08006813 	.word	0x08006813
 80067e8:	0800680b 	.word	0x0800680b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80067ec:	f7fd fb7e 	bl	8003eec <HAL_RCC_GetPCLK1Freq>
 80067f0:	61b8      	str	r0, [r7, #24]
        break;
 80067f2:	e013      	b.n	800681c <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80067f4:	f7fd fb8e 	bl	8003f14 <HAL_RCC_GetPCLK2Freq>
 80067f8:	61b8      	str	r0, [r7, #24]
        break;
 80067fa:	e00f      	b.n	800681c <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80067fc:	4b4b      	ldr	r3, [pc, #300]	; (800692c <UART_SetConfig+0x4c0>)
 80067fe:	61bb      	str	r3, [r7, #24]
        break;
 8006800:	e00c      	b.n	800681c <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006802:	f7fd fab1 	bl	8003d68 <HAL_RCC_GetSysClockFreq>
 8006806:	61b8      	str	r0, [r7, #24]
        break;
 8006808:	e008      	b.n	800681c <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800680a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800680e:	61bb      	str	r3, [r7, #24]
        break;
 8006810:	e004      	b.n	800681c <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 8006812:	2300      	movs	r3, #0
 8006814:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006816:	2301      	movs	r3, #1
 8006818:	77bb      	strb	r3, [r7, #30]
        break;
 800681a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800681c:	69bb      	ldr	r3, [r7, #24]
 800681e:	2b00      	cmp	r3, #0
 8006820:	d074      	beq.n	800690c <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006822:	69bb      	ldr	r3, [r7, #24]
 8006824:	005a      	lsls	r2, r3, #1
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	685b      	ldr	r3, [r3, #4]
 800682a:	085b      	lsrs	r3, r3, #1
 800682c:	441a      	add	r2, r3
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	685b      	ldr	r3, [r3, #4]
 8006832:	fbb2 f3f3 	udiv	r3, r2, r3
 8006836:	b29b      	uxth	r3, r3
 8006838:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800683a:	693b      	ldr	r3, [r7, #16]
 800683c:	2b0f      	cmp	r3, #15
 800683e:	d916      	bls.n	800686e <UART_SetConfig+0x402>
 8006840:	693b      	ldr	r3, [r7, #16]
 8006842:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006846:	d212      	bcs.n	800686e <UART_SetConfig+0x402>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006848:	693b      	ldr	r3, [r7, #16]
 800684a:	b29b      	uxth	r3, r3
 800684c:	f023 030f 	bic.w	r3, r3, #15
 8006850:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006852:	693b      	ldr	r3, [r7, #16]
 8006854:	085b      	lsrs	r3, r3, #1
 8006856:	b29b      	uxth	r3, r3
 8006858:	f003 0307 	and.w	r3, r3, #7
 800685c:	b29a      	uxth	r2, r3
 800685e:	89fb      	ldrh	r3, [r7, #14]
 8006860:	4313      	orrs	r3, r2
 8006862:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	89fa      	ldrh	r2, [r7, #14]
 800686a:	60da      	str	r2, [r3, #12]
 800686c:	e04e      	b.n	800690c <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 800686e:	2301      	movs	r3, #1
 8006870:	77bb      	strb	r3, [r7, #30]
 8006872:	e04b      	b.n	800690c <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006874:	7ffb      	ldrb	r3, [r7, #31]
 8006876:	2b08      	cmp	r3, #8
 8006878:	d827      	bhi.n	80068ca <UART_SetConfig+0x45e>
 800687a:	a201      	add	r2, pc, #4	; (adr r2, 8006880 <UART_SetConfig+0x414>)
 800687c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006880:	080068a5 	.word	0x080068a5
 8006884:	080068ad 	.word	0x080068ad
 8006888:	080068b5 	.word	0x080068b5
 800688c:	080068cb 	.word	0x080068cb
 8006890:	080068bb 	.word	0x080068bb
 8006894:	080068cb 	.word	0x080068cb
 8006898:	080068cb 	.word	0x080068cb
 800689c:	080068cb 	.word	0x080068cb
 80068a0:	080068c3 	.word	0x080068c3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80068a4:	f7fd fb22 	bl	8003eec <HAL_RCC_GetPCLK1Freq>
 80068a8:	61b8      	str	r0, [r7, #24]
        break;
 80068aa:	e013      	b.n	80068d4 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80068ac:	f7fd fb32 	bl	8003f14 <HAL_RCC_GetPCLK2Freq>
 80068b0:	61b8      	str	r0, [r7, #24]
        break;
 80068b2:	e00f      	b.n	80068d4 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80068b4:	4b1d      	ldr	r3, [pc, #116]	; (800692c <UART_SetConfig+0x4c0>)
 80068b6:	61bb      	str	r3, [r7, #24]
        break;
 80068b8:	e00c      	b.n	80068d4 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80068ba:	f7fd fa55 	bl	8003d68 <HAL_RCC_GetSysClockFreq>
 80068be:	61b8      	str	r0, [r7, #24]
        break;
 80068c0:	e008      	b.n	80068d4 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80068c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80068c6:	61bb      	str	r3, [r7, #24]
        break;
 80068c8:	e004      	b.n	80068d4 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 80068ca:	2300      	movs	r3, #0
 80068cc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80068ce:	2301      	movs	r3, #1
 80068d0:	77bb      	strb	r3, [r7, #30]
        break;
 80068d2:	bf00      	nop
    }

    if (pclk != 0U)
 80068d4:	69bb      	ldr	r3, [r7, #24]
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d018      	beq.n	800690c <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	685b      	ldr	r3, [r3, #4]
 80068de:	085a      	lsrs	r2, r3, #1
 80068e0:	69bb      	ldr	r3, [r7, #24]
 80068e2:	441a      	add	r2, r3
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	685b      	ldr	r3, [r3, #4]
 80068e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80068ec:	b29b      	uxth	r3, r3
 80068ee:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80068f0:	693b      	ldr	r3, [r7, #16]
 80068f2:	2b0f      	cmp	r3, #15
 80068f4:	d908      	bls.n	8006908 <UART_SetConfig+0x49c>
 80068f6:	693b      	ldr	r3, [r7, #16]
 80068f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80068fc:	d204      	bcs.n	8006908 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = usartdiv;
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	693a      	ldr	r2, [r7, #16]
 8006904:	60da      	str	r2, [r3, #12]
 8006906:	e001      	b.n	800690c <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8006908:	2301      	movs	r3, #1
 800690a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	2200      	movs	r2, #0
 8006910:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	2200      	movs	r2, #0
 8006916:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8006918:	7fbb      	ldrb	r3, [r7, #30]
}
 800691a:	4618      	mov	r0, r3
 800691c:	3720      	adds	r7, #32
 800691e:	46bd      	mov	sp, r7
 8006920:	bd80      	pop	{r7, pc}
 8006922:	bf00      	nop
 8006924:	40007c00 	.word	0x40007c00
 8006928:	40023800 	.word	0x40023800
 800692c:	00f42400 	.word	0x00f42400

08006930 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006930:	b480      	push	{r7}
 8006932:	b083      	sub	sp, #12
 8006934:	af00      	add	r7, sp, #0
 8006936:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800693c:	f003 0301 	and.w	r3, r3, #1
 8006940:	2b00      	cmp	r3, #0
 8006942:	d00a      	beq.n	800695a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	685b      	ldr	r3, [r3, #4]
 800694a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	430a      	orrs	r2, r1
 8006958:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800695e:	f003 0302 	and.w	r3, r3, #2
 8006962:	2b00      	cmp	r3, #0
 8006964:	d00a      	beq.n	800697c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	685b      	ldr	r3, [r3, #4]
 800696c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	430a      	orrs	r2, r1
 800697a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006980:	f003 0304 	and.w	r3, r3, #4
 8006984:	2b00      	cmp	r3, #0
 8006986:	d00a      	beq.n	800699e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	685b      	ldr	r3, [r3, #4]
 800698e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	430a      	orrs	r2, r1
 800699c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069a2:	f003 0308 	and.w	r3, r3, #8
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d00a      	beq.n	80069c0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	685b      	ldr	r3, [r3, #4]
 80069b0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	430a      	orrs	r2, r1
 80069be:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069c4:	f003 0310 	and.w	r3, r3, #16
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d00a      	beq.n	80069e2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	689b      	ldr	r3, [r3, #8]
 80069d2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	430a      	orrs	r2, r1
 80069e0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069e6:	f003 0320 	and.w	r3, r3, #32
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d00a      	beq.n	8006a04 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	689b      	ldr	r3, [r3, #8]
 80069f4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	430a      	orrs	r2, r1
 8006a02:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d01a      	beq.n	8006a46 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	685b      	ldr	r3, [r3, #4]
 8006a16:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	430a      	orrs	r2, r1
 8006a24:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a2a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006a2e:	d10a      	bne.n	8006a46 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	685b      	ldr	r3, [r3, #4]
 8006a36:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	430a      	orrs	r2, r1
 8006a44:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d00a      	beq.n	8006a68 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	685b      	ldr	r3, [r3, #4]
 8006a58:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	430a      	orrs	r2, r1
 8006a66:	605a      	str	r2, [r3, #4]
  }
}
 8006a68:	bf00      	nop
 8006a6a:	370c      	adds	r7, #12
 8006a6c:	46bd      	mov	sp, r7
 8006a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a72:	4770      	bx	lr

08006a74 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006a74:	b580      	push	{r7, lr}
 8006a76:	b086      	sub	sp, #24
 8006a78:	af02      	add	r7, sp, #8
 8006a7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	2200      	movs	r2, #0
 8006a80:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006a84:	f7fa ff26 	bl	80018d4 <HAL_GetTick>
 8006a88:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	f003 0308 	and.w	r3, r3, #8
 8006a94:	2b08      	cmp	r3, #8
 8006a96:	d10e      	bne.n	8006ab6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006a98:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006a9c:	9300      	str	r3, [sp, #0]
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	2200      	movs	r2, #0
 8006aa2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006aa6:	6878      	ldr	r0, [r7, #4]
 8006aa8:	f000 f817 	bl	8006ada <UART_WaitOnFlagUntilTimeout>
 8006aac:	4603      	mov	r3, r0
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d001      	beq.n	8006ab6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006ab2:	2303      	movs	r3, #3
 8006ab4:	e00d      	b.n	8006ad2 <UART_CheckIdleState+0x5e>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	2220      	movs	r2, #32
 8006aba:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	2220      	movs	r2, #32
 8006ac0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	2200      	movs	r2, #0
 8006ac6:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	2200      	movs	r2, #0
 8006acc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8006ad0:	2300      	movs	r3, #0
}
 8006ad2:	4618      	mov	r0, r3
 8006ad4:	3710      	adds	r7, #16
 8006ad6:	46bd      	mov	sp, r7
 8006ad8:	bd80      	pop	{r7, pc}

08006ada <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006ada:	b580      	push	{r7, lr}
 8006adc:	b084      	sub	sp, #16
 8006ade:	af00      	add	r7, sp, #0
 8006ae0:	60f8      	str	r0, [r7, #12]
 8006ae2:	60b9      	str	r1, [r7, #8]
 8006ae4:	603b      	str	r3, [r7, #0]
 8006ae6:	4613      	mov	r3, r2
 8006ae8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006aea:	e05e      	b.n	8006baa <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006aec:	69bb      	ldr	r3, [r7, #24]
 8006aee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006af2:	d05a      	beq.n	8006baa <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006af4:	f7fa feee 	bl	80018d4 <HAL_GetTick>
 8006af8:	4602      	mov	r2, r0
 8006afa:	683b      	ldr	r3, [r7, #0]
 8006afc:	1ad3      	subs	r3, r2, r3
 8006afe:	69ba      	ldr	r2, [r7, #24]
 8006b00:	429a      	cmp	r2, r3
 8006b02:	d302      	bcc.n	8006b0a <UART_WaitOnFlagUntilTimeout+0x30>
 8006b04:	69bb      	ldr	r3, [r7, #24]
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d11b      	bne.n	8006b42 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	681a      	ldr	r2, [r3, #0]
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006b18:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	689a      	ldr	r2, [r3, #8]
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	f022 0201 	bic.w	r2, r2, #1
 8006b28:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	2220      	movs	r2, #32
 8006b2e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	2220      	movs	r2, #32
 8006b34:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	2200      	movs	r2, #0
 8006b3a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8006b3e:	2303      	movs	r3, #3
 8006b40:	e043      	b.n	8006bca <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	f003 0304 	and.w	r3, r3, #4
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d02c      	beq.n	8006baa <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	69db      	ldr	r3, [r3, #28]
 8006b56:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006b5a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006b5e:	d124      	bne.n	8006baa <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006b68:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	681a      	ldr	r2, [r3, #0]
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006b78:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	689a      	ldr	r2, [r3, #8]
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	f022 0201 	bic.w	r2, r2, #1
 8006b88:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	2220      	movs	r2, #32
 8006b8e:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	2220      	movs	r2, #32
 8006b94:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	2220      	movs	r2, #32
 8006b9a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	2200      	movs	r2, #0
 8006ba2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8006ba6:	2303      	movs	r3, #3
 8006ba8:	e00f      	b.n	8006bca <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	69da      	ldr	r2, [r3, #28]
 8006bb0:	68bb      	ldr	r3, [r7, #8]
 8006bb2:	4013      	ands	r3, r2
 8006bb4:	68ba      	ldr	r2, [r7, #8]
 8006bb6:	429a      	cmp	r2, r3
 8006bb8:	bf0c      	ite	eq
 8006bba:	2301      	moveq	r3, #1
 8006bbc:	2300      	movne	r3, #0
 8006bbe:	b2db      	uxtb	r3, r3
 8006bc0:	461a      	mov	r2, r3
 8006bc2:	79fb      	ldrb	r3, [r7, #7]
 8006bc4:	429a      	cmp	r2, r3
 8006bc6:	d091      	beq.n	8006aec <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006bc8:	2300      	movs	r3, #0
}
 8006bca:	4618      	mov	r0, r3
 8006bcc:	3710      	adds	r7, #16
 8006bce:	46bd      	mov	sp, r7
 8006bd0:	bd80      	pop	{r7, pc}

08006bd2 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8006bd2:	b480      	push	{r7}
 8006bd4:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8006bd6:	bf00      	nop
 8006bd8:	46bd      	mov	sp, r7
 8006bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bde:	4770      	bx	lr

08006be0 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8006be0:	b480      	push	{r7}
 8006be2:	b085      	sub	sp, #20
 8006be4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006be6:	f3ef 8305 	mrs	r3, IPSR
 8006bea:	60bb      	str	r3, [r7, #8]
  return(result);
 8006bec:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d10f      	bne.n	8006c12 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006bf2:	f3ef 8310 	mrs	r3, PRIMASK
 8006bf6:	607b      	str	r3, [r7, #4]
  return(result);
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d105      	bne.n	8006c0a <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006bfe:	f3ef 8311 	mrs	r3, BASEPRI
 8006c02:	603b      	str	r3, [r7, #0]
  return(result);
 8006c04:	683b      	ldr	r3, [r7, #0]
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d007      	beq.n	8006c1a <osKernelInitialize+0x3a>
 8006c0a:	4b0e      	ldr	r3, [pc, #56]	; (8006c44 <osKernelInitialize+0x64>)
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	2b02      	cmp	r3, #2
 8006c10:	d103      	bne.n	8006c1a <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8006c12:	f06f 0305 	mvn.w	r3, #5
 8006c16:	60fb      	str	r3, [r7, #12]
 8006c18:	e00c      	b.n	8006c34 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8006c1a:	4b0a      	ldr	r3, [pc, #40]	; (8006c44 <osKernelInitialize+0x64>)
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d105      	bne.n	8006c2e <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8006c22:	4b08      	ldr	r3, [pc, #32]	; (8006c44 <osKernelInitialize+0x64>)
 8006c24:	2201      	movs	r2, #1
 8006c26:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8006c28:	2300      	movs	r3, #0
 8006c2a:	60fb      	str	r3, [r7, #12]
 8006c2c:	e002      	b.n	8006c34 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8006c2e:	f04f 33ff 	mov.w	r3, #4294967295
 8006c32:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8006c34:	68fb      	ldr	r3, [r7, #12]
}
 8006c36:	4618      	mov	r0, r3
 8006c38:	3714      	adds	r7, #20
 8006c3a:	46bd      	mov	sp, r7
 8006c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c40:	4770      	bx	lr
 8006c42:	bf00      	nop
 8006c44:	20000354 	.word	0x20000354

08006c48 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8006c48:	b580      	push	{r7, lr}
 8006c4a:	b084      	sub	sp, #16
 8006c4c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006c4e:	f3ef 8305 	mrs	r3, IPSR
 8006c52:	60bb      	str	r3, [r7, #8]
  return(result);
 8006c54:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d10f      	bne.n	8006c7a <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006c5a:	f3ef 8310 	mrs	r3, PRIMASK
 8006c5e:	607b      	str	r3, [r7, #4]
  return(result);
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d105      	bne.n	8006c72 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006c66:	f3ef 8311 	mrs	r3, BASEPRI
 8006c6a:	603b      	str	r3, [r7, #0]
  return(result);
 8006c6c:	683b      	ldr	r3, [r7, #0]
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d007      	beq.n	8006c82 <osKernelStart+0x3a>
 8006c72:	4b0f      	ldr	r3, [pc, #60]	; (8006cb0 <osKernelStart+0x68>)
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	2b02      	cmp	r3, #2
 8006c78:	d103      	bne.n	8006c82 <osKernelStart+0x3a>
    stat = osErrorISR;
 8006c7a:	f06f 0305 	mvn.w	r3, #5
 8006c7e:	60fb      	str	r3, [r7, #12]
 8006c80:	e010      	b.n	8006ca4 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 8006c82:	4b0b      	ldr	r3, [pc, #44]	; (8006cb0 <osKernelStart+0x68>)
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	2b01      	cmp	r3, #1
 8006c88:	d109      	bne.n	8006c9e <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8006c8a:	f7ff ffa2 	bl	8006bd2 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8006c8e:	4b08      	ldr	r3, [pc, #32]	; (8006cb0 <osKernelStart+0x68>)
 8006c90:	2202      	movs	r2, #2
 8006c92:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8006c94:	f002 f89c 	bl	8008dd0 <vTaskStartScheduler>
      stat = osOK;
 8006c98:	2300      	movs	r3, #0
 8006c9a:	60fb      	str	r3, [r7, #12]
 8006c9c:	e002      	b.n	8006ca4 <osKernelStart+0x5c>
    } else {
      stat = osError;
 8006c9e:	f04f 33ff 	mov.w	r3, #4294967295
 8006ca2:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8006ca4:	68fb      	ldr	r3, [r7, #12]
}
 8006ca6:	4618      	mov	r0, r3
 8006ca8:	3710      	adds	r7, #16
 8006caa:	46bd      	mov	sp, r7
 8006cac:	bd80      	pop	{r7, pc}
 8006cae:	bf00      	nop
 8006cb0:	20000354 	.word	0x20000354

08006cb4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8006cb4:	b580      	push	{r7, lr}
 8006cb6:	b090      	sub	sp, #64	; 0x40
 8006cb8:	af04      	add	r7, sp, #16
 8006cba:	60f8      	str	r0, [r7, #12]
 8006cbc:	60b9      	str	r1, [r7, #8]
 8006cbe:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8006cc0:	2300      	movs	r3, #0
 8006cc2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006cc4:	f3ef 8305 	mrs	r3, IPSR
 8006cc8:	61fb      	str	r3, [r7, #28]
  return(result);
 8006cca:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	f040 808f 	bne.w	8006df0 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006cd2:	f3ef 8310 	mrs	r3, PRIMASK
 8006cd6:	61bb      	str	r3, [r7, #24]
  return(result);
 8006cd8:	69bb      	ldr	r3, [r7, #24]
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d105      	bne.n	8006cea <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006cde:	f3ef 8311 	mrs	r3, BASEPRI
 8006ce2:	617b      	str	r3, [r7, #20]
  return(result);
 8006ce4:	697b      	ldr	r3, [r7, #20]
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d003      	beq.n	8006cf2 <osThreadNew+0x3e>
 8006cea:	4b44      	ldr	r3, [pc, #272]	; (8006dfc <osThreadNew+0x148>)
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	2b02      	cmp	r3, #2
 8006cf0:	d07e      	beq.n	8006df0 <osThreadNew+0x13c>
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d07b      	beq.n	8006df0 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8006cf8:	2380      	movs	r3, #128	; 0x80
 8006cfa:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8006cfc:	2318      	movs	r3, #24
 8006cfe:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 8006d00:	2300      	movs	r3, #0
 8006d02:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8006d04:	f04f 33ff 	mov.w	r3, #4294967295
 8006d08:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d045      	beq.n	8006d9c <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d002      	beq.n	8006d1e <osThreadNew+0x6a>
        name = attr->name;
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	699b      	ldr	r3, [r3, #24]
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d002      	beq.n	8006d2c <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	699b      	ldr	r3, [r3, #24]
 8006d2a:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8006d2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d008      	beq.n	8006d44 <osThreadNew+0x90>
 8006d32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d34:	2b38      	cmp	r3, #56	; 0x38
 8006d36:	d805      	bhi.n	8006d44 <osThreadNew+0x90>
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	685b      	ldr	r3, [r3, #4]
 8006d3c:	f003 0301 	and.w	r3, r3, #1
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d001      	beq.n	8006d48 <osThreadNew+0x94>
        return (NULL);
 8006d44:	2300      	movs	r3, #0
 8006d46:	e054      	b.n	8006df2 <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	695b      	ldr	r3, [r3, #20]
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d003      	beq.n	8006d58 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	695b      	ldr	r3, [r3, #20]
 8006d54:	089b      	lsrs	r3, r3, #2
 8006d56:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	689b      	ldr	r3, [r3, #8]
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d00e      	beq.n	8006d7e <osThreadNew+0xca>
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	68db      	ldr	r3, [r3, #12]
 8006d64:	2b5b      	cmp	r3, #91	; 0x5b
 8006d66:	d90a      	bls.n	8006d7e <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d006      	beq.n	8006d7e <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	695b      	ldr	r3, [r3, #20]
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d002      	beq.n	8006d7e <osThreadNew+0xca>
        mem = 1;
 8006d78:	2301      	movs	r3, #1
 8006d7a:	623b      	str	r3, [r7, #32]
 8006d7c:	e010      	b.n	8006da0 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	689b      	ldr	r3, [r3, #8]
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d10c      	bne.n	8006da0 <osThreadNew+0xec>
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	68db      	ldr	r3, [r3, #12]
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d108      	bne.n	8006da0 <osThreadNew+0xec>
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	691b      	ldr	r3, [r3, #16]
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d104      	bne.n	8006da0 <osThreadNew+0xec>
          mem = 0;
 8006d96:	2300      	movs	r3, #0
 8006d98:	623b      	str	r3, [r7, #32]
 8006d9a:	e001      	b.n	8006da0 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8006d9c:	2300      	movs	r3, #0
 8006d9e:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8006da0:	6a3b      	ldr	r3, [r7, #32]
 8006da2:	2b01      	cmp	r3, #1
 8006da4:	d110      	bne.n	8006dc8 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8006daa:	687a      	ldr	r2, [r7, #4]
 8006dac:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006dae:	9202      	str	r2, [sp, #8]
 8006db0:	9301      	str	r3, [sp, #4]
 8006db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006db4:	9300      	str	r3, [sp, #0]
 8006db6:	68bb      	ldr	r3, [r7, #8]
 8006db8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006dba:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006dbc:	68f8      	ldr	r0, [r7, #12]
 8006dbe:	f001 fd81 	bl	80088c4 <xTaskCreateStatic>
 8006dc2:	4603      	mov	r3, r0
 8006dc4:	613b      	str	r3, [r7, #16]
 8006dc6:	e013      	b.n	8006df0 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8006dc8:	6a3b      	ldr	r3, [r7, #32]
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d110      	bne.n	8006df0 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8006dce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dd0:	b29a      	uxth	r2, r3
 8006dd2:	f107 0310 	add.w	r3, r7, #16
 8006dd6:	9301      	str	r3, [sp, #4]
 8006dd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dda:	9300      	str	r3, [sp, #0]
 8006ddc:	68bb      	ldr	r3, [r7, #8]
 8006dde:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006de0:	68f8      	ldr	r0, [r7, #12]
 8006de2:	f001 fdd2 	bl	800898a <xTaskCreate>
 8006de6:	4603      	mov	r3, r0
 8006de8:	2b01      	cmp	r3, #1
 8006dea:	d001      	beq.n	8006df0 <osThreadNew+0x13c>
          hTask = NULL;
 8006dec:	2300      	movs	r3, #0
 8006dee:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8006df0:	693b      	ldr	r3, [r7, #16]
}
 8006df2:	4618      	mov	r0, r3
 8006df4:	3730      	adds	r7, #48	; 0x30
 8006df6:	46bd      	mov	sp, r7
 8006df8:	bd80      	pop	{r7, pc}
 8006dfa:	bf00      	nop
 8006dfc:	20000354 	.word	0x20000354

08006e00 <osThreadTerminate>:
  vTaskDelete (NULL);
#endif
  for (;;);
}

osStatus_t osThreadTerminate (osThreadId_t thread_id) {
 8006e00:	b580      	push	{r7, lr}
 8006e02:	b088      	sub	sp, #32
 8006e04:	af00      	add	r7, sp, #0
 8006e06:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006e0c:	f3ef 8305 	mrs	r3, IPSR
 8006e10:	613b      	str	r3, [r7, #16]
  return(result);
 8006e12:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;
#ifndef USE_FreeRTOS_HEAP_1
  eTaskState tstate;

  if (IS_IRQ()) {
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d10f      	bne.n	8006e38 <osThreadTerminate+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006e18:	f3ef 8310 	mrs	r3, PRIMASK
 8006e1c:	60fb      	str	r3, [r7, #12]
  return(result);
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d105      	bne.n	8006e30 <osThreadTerminate+0x30>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006e24:	f3ef 8311 	mrs	r3, BASEPRI
 8006e28:	60bb      	str	r3, [r7, #8]
  return(result);
 8006e2a:	68bb      	ldr	r3, [r7, #8]
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d007      	beq.n	8006e40 <osThreadTerminate+0x40>
 8006e30:	4b12      	ldr	r3, [pc, #72]	; (8006e7c <osThreadTerminate+0x7c>)
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	2b02      	cmp	r3, #2
 8006e36:	d103      	bne.n	8006e40 <osThreadTerminate+0x40>
    stat = osErrorISR;
 8006e38:	f06f 0305 	mvn.w	r3, #5
 8006e3c:	61fb      	str	r3, [r7, #28]
 8006e3e:	e017      	b.n	8006e70 <osThreadTerminate+0x70>
  }
  else if (hTask == NULL) {
 8006e40:	69bb      	ldr	r3, [r7, #24]
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d103      	bne.n	8006e4e <osThreadTerminate+0x4e>
    stat = osErrorParameter;
 8006e46:	f06f 0303 	mvn.w	r3, #3
 8006e4a:	61fb      	str	r3, [r7, #28]
 8006e4c:	e010      	b.n	8006e70 <osThreadTerminate+0x70>
  }
  else {
    tstate = eTaskGetState (hTask);
 8006e4e:	69b8      	ldr	r0, [r7, #24]
 8006e50:	f001 ff56 	bl	8008d00 <eTaskGetState>
 8006e54:	4603      	mov	r3, r0
 8006e56:	75fb      	strb	r3, [r7, #23]

    if (tstate != eDeleted) {
 8006e58:	7dfb      	ldrb	r3, [r7, #23]
 8006e5a:	2b04      	cmp	r3, #4
 8006e5c:	d005      	beq.n	8006e6a <osThreadTerminate+0x6a>
      stat = osOK;
 8006e5e:	2300      	movs	r3, #0
 8006e60:	61fb      	str	r3, [r7, #28]
      vTaskDelete (hTask);
 8006e62:	69b8      	ldr	r0, [r7, #24]
 8006e64:	f001 fed8 	bl	8008c18 <vTaskDelete>
 8006e68:	e002      	b.n	8006e70 <osThreadTerminate+0x70>
    } else {
      stat = osErrorResource;
 8006e6a:	f06f 0302 	mvn.w	r3, #2
 8006e6e:	61fb      	str	r3, [r7, #28]
  }
#else
  stat = osError;
#endif

  return (stat);
 8006e70:	69fb      	ldr	r3, [r7, #28]
}
 8006e72:	4618      	mov	r0, r3
 8006e74:	3720      	adds	r7, #32
 8006e76:	46bd      	mov	sp, r7
 8006e78:	bd80      	pop	{r7, pc}
 8006e7a:	bf00      	nop
 8006e7c:	20000354 	.word	0x20000354

08006e80 <osThreadFlagsSet>:
  }

  return (count);
}

uint32_t osThreadFlagsSet (osThreadId_t thread_id, uint32_t flags) {
 8006e80:	b580      	push	{r7, lr}
 8006e82:	b08a      	sub	sp, #40	; 0x28
 8006e84:	af02      	add	r7, sp, #8
 8006e86:	6078      	str	r0, [r7, #4]
 8006e88:	6039      	str	r1, [r7, #0]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	61fb      	str	r3, [r7, #28]
  uint32_t rflags;
  BaseType_t yield;

  if ((hTask == NULL) || ((flags & THREAD_FLAGS_INVALID_BITS) != 0U)) {
 8006e8e:	69fb      	ldr	r3, [r7, #28]
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d002      	beq.n	8006e9a <osThreadFlagsSet+0x1a>
 8006e94:	683b      	ldr	r3, [r7, #0]
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	da03      	bge.n	8006ea2 <osThreadFlagsSet+0x22>
    rflags = (uint32_t)osErrorParameter;
 8006e9a:	f06f 0303 	mvn.w	r3, #3
 8006e9e:	60fb      	str	r3, [r7, #12]
 8006ea0:	e045      	b.n	8006f2e <osThreadFlagsSet+0xae>
  }
  else {
    rflags = (uint32_t)osError;
 8006ea2:	f04f 33ff 	mov.w	r3, #4294967295
 8006ea6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006ea8:	f3ef 8305 	mrs	r3, IPSR
 8006eac:	61bb      	str	r3, [r7, #24]
  return(result);
 8006eae:	69bb      	ldr	r3, [r7, #24]

    if (IS_IRQ()) {
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d10f      	bne.n	8006ed4 <osThreadFlagsSet+0x54>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006eb4:	f3ef 8310 	mrs	r3, PRIMASK
 8006eb8:	617b      	str	r3, [r7, #20]
  return(result);
 8006eba:	697b      	ldr	r3, [r7, #20]
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d105      	bne.n	8006ecc <osThreadFlagsSet+0x4c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006ec0:	f3ef 8311 	mrs	r3, BASEPRI
 8006ec4:	613b      	str	r3, [r7, #16]
  return(result);
 8006ec6:	693b      	ldr	r3, [r7, #16]
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d023      	beq.n	8006f14 <osThreadFlagsSet+0x94>
 8006ecc:	4b1a      	ldr	r3, [pc, #104]	; (8006f38 <osThreadFlagsSet+0xb8>)
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	2b02      	cmp	r3, #2
 8006ed2:	d11f      	bne.n	8006f14 <osThreadFlagsSet+0x94>
      yield = pdFALSE;
 8006ed4:	2300      	movs	r3, #0
 8006ed6:	60bb      	str	r3, [r7, #8]

      (void)xTaskNotifyFromISR (hTask, flags, eSetBits, &yield);
 8006ed8:	f107 0308 	add.w	r3, r7, #8
 8006edc:	9300      	str	r3, [sp, #0]
 8006ede:	2300      	movs	r3, #0
 8006ee0:	2201      	movs	r2, #1
 8006ee2:	6839      	ldr	r1, [r7, #0]
 8006ee4:	69f8      	ldr	r0, [r7, #28]
 8006ee6:	f002 fe8d 	bl	8009c04 <xTaskGenericNotifyFromISR>
      (void)xTaskNotifyAndQueryFromISR (hTask, 0, eNoAction, &rflags, NULL);
 8006eea:	f107 030c 	add.w	r3, r7, #12
 8006eee:	2200      	movs	r2, #0
 8006ef0:	9200      	str	r2, [sp, #0]
 8006ef2:	2200      	movs	r2, #0
 8006ef4:	2100      	movs	r1, #0
 8006ef6:	69f8      	ldr	r0, [r7, #28]
 8006ef8:	f002 fe84 	bl	8009c04 <xTaskGenericNotifyFromISR>

      portYIELD_FROM_ISR (yield);
 8006efc:	68bb      	ldr	r3, [r7, #8]
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d015      	beq.n	8006f2e <osThreadFlagsSet+0xae>
 8006f02:	4b0e      	ldr	r3, [pc, #56]	; (8006f3c <osThreadFlagsSet+0xbc>)
 8006f04:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006f08:	601a      	str	r2, [r3, #0]
 8006f0a:	f3bf 8f4f 	dsb	sy
 8006f0e:	f3bf 8f6f 	isb	sy
 8006f12:	e00c      	b.n	8006f2e <osThreadFlagsSet+0xae>
    }
    else {
      (void)xTaskNotify (hTask, flags, eSetBits);
 8006f14:	2300      	movs	r3, #0
 8006f16:	2201      	movs	r2, #1
 8006f18:	6839      	ldr	r1, [r7, #0]
 8006f1a:	69f8      	ldr	r0, [r7, #28]
 8006f1c:	f002 fdb4 	bl	8009a88 <xTaskGenericNotify>
      (void)xTaskNotifyAndQuery (hTask, 0, eNoAction, &rflags);
 8006f20:	f107 030c 	add.w	r3, r7, #12
 8006f24:	2200      	movs	r2, #0
 8006f26:	2100      	movs	r1, #0
 8006f28:	69f8      	ldr	r0, [r7, #28]
 8006f2a:	f002 fdad 	bl	8009a88 <xTaskGenericNotify>
    }
  }
  /* Return flags after setting */
  return (rflags);
 8006f2e:	68fb      	ldr	r3, [r7, #12]
}
 8006f30:	4618      	mov	r0, r3
 8006f32:	3720      	adds	r7, #32
 8006f34:	46bd      	mov	sp, r7
 8006f36:	bd80      	pop	{r7, pc}
 8006f38:	20000354 	.word	0x20000354
 8006f3c:	e000ed04 	.word	0xe000ed04

08006f40 <osThreadFlagsWait>:
  }

  return (rflags);
}

uint32_t osThreadFlagsWait (uint32_t flags, uint32_t options, uint32_t timeout) {
 8006f40:	b580      	push	{r7, lr}
 8006f42:	b08e      	sub	sp, #56	; 0x38
 8006f44:	af00      	add	r7, sp, #0
 8006f46:	60f8      	str	r0, [r7, #12]
 8006f48:	60b9      	str	r1, [r7, #8]
 8006f4a:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006f4c:	f3ef 8305 	mrs	r3, IPSR
 8006f50:	61fb      	str	r3, [r7, #28]
  return(result);
 8006f52:	69fb      	ldr	r3, [r7, #28]
  uint32_t rflags, nval;
  uint32_t clear;
  TickType_t t0, td, tout;
  BaseType_t rval;

  if (IS_IRQ()) {
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d10f      	bne.n	8006f78 <osThreadFlagsWait+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006f58:	f3ef 8310 	mrs	r3, PRIMASK
 8006f5c:	61bb      	str	r3, [r7, #24]
  return(result);
 8006f5e:	69bb      	ldr	r3, [r7, #24]
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d105      	bne.n	8006f70 <osThreadFlagsWait+0x30>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006f64:	f3ef 8311 	mrs	r3, BASEPRI
 8006f68:	617b      	str	r3, [r7, #20]
  return(result);
 8006f6a:	697b      	ldr	r3, [r7, #20]
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d007      	beq.n	8006f80 <osThreadFlagsWait+0x40>
 8006f70:	4b3c      	ldr	r3, [pc, #240]	; (8007064 <osThreadFlagsWait+0x124>)
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	2b02      	cmp	r3, #2
 8006f76:	d103      	bne.n	8006f80 <osThreadFlagsWait+0x40>
    rflags = (uint32_t)osErrorISR;
 8006f78:	f06f 0305 	mvn.w	r3, #5
 8006f7c:	637b      	str	r3, [r7, #52]	; 0x34
 8006f7e:	e06b      	b.n	8007058 <osThreadFlagsWait+0x118>
  }
  else if ((flags & THREAD_FLAGS_INVALID_BITS) != 0U) {
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	da03      	bge.n	8006f8e <osThreadFlagsWait+0x4e>
    rflags = (uint32_t)osErrorParameter;
 8006f86:	f06f 0303 	mvn.w	r3, #3
 8006f8a:	637b      	str	r3, [r7, #52]	; 0x34
 8006f8c:	e064      	b.n	8007058 <osThreadFlagsWait+0x118>
  }
  else {
    if ((options & osFlagsNoClear) == osFlagsNoClear) {
 8006f8e:	68bb      	ldr	r3, [r7, #8]
 8006f90:	f003 0302 	and.w	r3, r3, #2
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d002      	beq.n	8006f9e <osThreadFlagsWait+0x5e>
      clear = 0U;
 8006f98:	2300      	movs	r3, #0
 8006f9a:	633b      	str	r3, [r7, #48]	; 0x30
 8006f9c:	e001      	b.n	8006fa2 <osThreadFlagsWait+0x62>
    } else {
      clear = flags;
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	633b      	str	r3, [r7, #48]	; 0x30
    }

    rflags = 0U;
 8006fa2:	2300      	movs	r3, #0
 8006fa4:	637b      	str	r3, [r7, #52]	; 0x34
    tout   = timeout;
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	62fb      	str	r3, [r7, #44]	; 0x2c

    t0 = xTaskGetTickCount();
 8006faa:	f002 f829 	bl	8009000 <xTaskGetTickCount>
 8006fae:	62b8      	str	r0, [r7, #40]	; 0x28
    do {
      rval = xTaskNotifyWait (0, clear, &nval, tout);
 8006fb0:	f107 0210 	add.w	r2, r7, #16
 8006fb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fb6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006fb8:	2000      	movs	r0, #0
 8006fba:	f002 fd0b 	bl	80099d4 <xTaskNotifyWait>
 8006fbe:	6278      	str	r0, [r7, #36]	; 0x24

      if (rval == pdPASS) {
 8006fc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fc2:	2b01      	cmp	r3, #1
 8006fc4:	d137      	bne.n	8007036 <osThreadFlagsWait+0xf6>
        rflags &= flags;
 8006fc6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	4013      	ands	r3, r2
 8006fcc:	637b      	str	r3, [r7, #52]	; 0x34
        rflags |= nval;
 8006fce:	693b      	ldr	r3, [r7, #16]
 8006fd0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006fd2:	4313      	orrs	r3, r2
 8006fd4:	637b      	str	r3, [r7, #52]	; 0x34

        if ((options & osFlagsWaitAll) == osFlagsWaitAll) {
 8006fd6:	68bb      	ldr	r3, [r7, #8]
 8006fd8:	f003 0301 	and.w	r3, r3, #1
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d00c      	beq.n	8006ffa <osThreadFlagsWait+0xba>
          if ((flags & rflags) == flags) {
 8006fe0:	68fa      	ldr	r2, [r7, #12]
 8006fe2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006fe4:	4013      	ands	r3, r2
 8006fe6:	68fa      	ldr	r2, [r7, #12]
 8006fe8:	429a      	cmp	r2, r3
 8006fea:	d032      	beq.n	8007052 <osThreadFlagsWait+0x112>
            break;
          } else {
            if (timeout == 0U) {
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d10f      	bne.n	8007012 <osThreadFlagsWait+0xd2>
              rflags = (uint32_t)osErrorResource;
 8006ff2:	f06f 0302 	mvn.w	r3, #2
 8006ff6:	637b      	str	r3, [r7, #52]	; 0x34
              break;
 8006ff8:	e02e      	b.n	8007058 <osThreadFlagsWait+0x118>
            }
          }
        }
        else {
          if ((flags & rflags) != 0) {
 8006ffa:	68fa      	ldr	r2, [r7, #12]
 8006ffc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ffe:	4013      	ands	r3, r2
 8007000:	2b00      	cmp	r3, #0
 8007002:	d128      	bne.n	8007056 <osThreadFlagsWait+0x116>
            break;
          } else {
            if (timeout == 0U) {
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	2b00      	cmp	r3, #0
 8007008:	d103      	bne.n	8007012 <osThreadFlagsWait+0xd2>
              rflags = (uint32_t)osErrorResource;
 800700a:	f06f 0302 	mvn.w	r3, #2
 800700e:	637b      	str	r3, [r7, #52]	; 0x34
              break;
 8007010:	e022      	b.n	8007058 <osThreadFlagsWait+0x118>
            }
          }
        }

        /* Update timeout */
        td = xTaskGetTickCount() - t0;
 8007012:	f001 fff5 	bl	8009000 <xTaskGetTickCount>
 8007016:	4602      	mov	r2, r0
 8007018:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800701a:	1ad3      	subs	r3, r2, r3
 800701c:	623b      	str	r3, [r7, #32]

        if (td > tout) {
 800701e:	6a3a      	ldr	r2, [r7, #32]
 8007020:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007022:	429a      	cmp	r2, r3
 8007024:	d902      	bls.n	800702c <osThreadFlagsWait+0xec>
          tout  = 0;
 8007026:	2300      	movs	r3, #0
 8007028:	62fb      	str	r3, [r7, #44]	; 0x2c
 800702a:	e00e      	b.n	800704a <osThreadFlagsWait+0x10a>
        } else {
          tout -= td;
 800702c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800702e:	6a3b      	ldr	r3, [r7, #32]
 8007030:	1ad3      	subs	r3, r2, r3
 8007032:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007034:	e009      	b.n	800704a <osThreadFlagsWait+0x10a>
        }
      }
      else {
        if (timeout == 0) {
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	2b00      	cmp	r3, #0
 800703a:	d103      	bne.n	8007044 <osThreadFlagsWait+0x104>
          rflags = (uint32_t)osErrorResource;
 800703c:	f06f 0302 	mvn.w	r3, #2
 8007040:	637b      	str	r3, [r7, #52]	; 0x34
 8007042:	e002      	b.n	800704a <osThreadFlagsWait+0x10a>
        } else {
          rflags = (uint32_t)osErrorTimeout;
 8007044:	f06f 0301 	mvn.w	r3, #1
 8007048:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
    }
    while (rval != pdFAIL);
 800704a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800704c:	2b00      	cmp	r3, #0
 800704e:	d1af      	bne.n	8006fb0 <osThreadFlagsWait+0x70>
 8007050:	e002      	b.n	8007058 <osThreadFlagsWait+0x118>
            break;
 8007052:	bf00      	nop
 8007054:	e000      	b.n	8007058 <osThreadFlagsWait+0x118>
            break;
 8007056:	bf00      	nop
  }

  /* Return flags before clearing */
  return (rflags);
 8007058:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800705a:	4618      	mov	r0, r3
 800705c:	3738      	adds	r7, #56	; 0x38
 800705e:	46bd      	mov	sp, r7
 8007060:	bd80      	pop	{r7, pc}
 8007062:	bf00      	nop
 8007064:	20000354 	.word	0x20000354

08007068 <TimerCallback>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

static void TimerCallback (TimerHandle_t hTimer) {
 8007068:	b580      	push	{r7, lr}
 800706a:	b084      	sub	sp, #16
 800706c:	af00      	add	r7, sp, #0
 800706e:	6078      	str	r0, [r7, #4]
  TimerCallback_t *callb;

  callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
 8007070:	6878      	ldr	r0, [r7, #4]
 8007072:	f003 fafb 	bl	800a66c <pvTimerGetTimerID>
 8007076:	60f8      	str	r0, [r7, #12]

  if (callb != NULL) {
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	2b00      	cmp	r3, #0
 800707c:	d005      	beq.n	800708a <TimerCallback+0x22>
    callb->func (callb->arg);
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	68fa      	ldr	r2, [r7, #12]
 8007084:	6852      	ldr	r2, [r2, #4]
 8007086:	4610      	mov	r0, r2
 8007088:	4798      	blx	r3
  }
}
 800708a:	bf00      	nop
 800708c:	3710      	adds	r7, #16
 800708e:	46bd      	mov	sp, r7
 8007090:	bd80      	pop	{r7, pc}
	...

08007094 <osTimerNew>:

osTimerId_t osTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr) {
 8007094:	b580      	push	{r7, lr}
 8007096:	b08e      	sub	sp, #56	; 0x38
 8007098:	af02      	add	r7, sp, #8
 800709a:	60f8      	str	r0, [r7, #12]
 800709c:	607a      	str	r2, [r7, #4]
 800709e:	603b      	str	r3, [r7, #0]
 80070a0:	460b      	mov	r3, r1
 80070a2:	72fb      	strb	r3, [r7, #11]
  TimerHandle_t hTimer;
  TimerCallback_t *callb;
  UBaseType_t reload;
  int32_t mem;

  hTimer = NULL;
 80070a4:	2300      	movs	r3, #0
 80070a6:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80070a8:	f3ef 8305 	mrs	r3, IPSR
 80070ac:	61bb      	str	r3, [r7, #24]
  return(result);
 80070ae:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (func != NULL)) {
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d16a      	bne.n	800718a <osTimerNew+0xf6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80070b4:	f3ef 8310 	mrs	r3, PRIMASK
 80070b8:	617b      	str	r3, [r7, #20]
  return(result);
 80070ba:	697b      	ldr	r3, [r7, #20]
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d105      	bne.n	80070cc <osTimerNew+0x38>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80070c0:	f3ef 8311 	mrs	r3, BASEPRI
 80070c4:	613b      	str	r3, [r7, #16]
  return(result);
 80070c6:	693b      	ldr	r3, [r7, #16]
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d003      	beq.n	80070d4 <osTimerNew+0x40>
 80070cc:	4b31      	ldr	r3, [pc, #196]	; (8007194 <osTimerNew+0x100>)
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	2b02      	cmp	r3, #2
 80070d2:	d05a      	beq.n	800718a <osTimerNew+0xf6>
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d057      	beq.n	800718a <osTimerNew+0xf6>
    /* Allocate memory to store callback function and argument */
    callb = pvPortMalloc (sizeof(TimerCallback_t));
 80070da:	2008      	movs	r0, #8
 80070dc:	f003 fd22 	bl	800ab24 <pvPortMalloc>
 80070e0:	61f8      	str	r0, [r7, #28]

    if (callb != NULL) {
 80070e2:	69fb      	ldr	r3, [r7, #28]
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d050      	beq.n	800718a <osTimerNew+0xf6>
      callb->func = func;
 80070e8:	69fb      	ldr	r3, [r7, #28]
 80070ea:	68fa      	ldr	r2, [r7, #12]
 80070ec:	601a      	str	r2, [r3, #0]
      callb->arg  = argument;
 80070ee:	69fb      	ldr	r3, [r7, #28]
 80070f0:	687a      	ldr	r2, [r7, #4]
 80070f2:	605a      	str	r2, [r3, #4]

      if (type == osTimerOnce) {
 80070f4:	7afb      	ldrb	r3, [r7, #11]
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d102      	bne.n	8007100 <osTimerNew+0x6c>
        reload = pdFALSE;
 80070fa:	2300      	movs	r3, #0
 80070fc:	627b      	str	r3, [r7, #36]	; 0x24
 80070fe:	e001      	b.n	8007104 <osTimerNew+0x70>
      } else {
        reload = pdTRUE;
 8007100:	2301      	movs	r3, #1
 8007102:	627b      	str	r3, [r7, #36]	; 0x24
      }

      mem  = -1;
 8007104:	f04f 33ff 	mov.w	r3, #4294967295
 8007108:	623b      	str	r3, [r7, #32]
      name = NULL;
 800710a:	2300      	movs	r3, #0
 800710c:	62fb      	str	r3, [r7, #44]	; 0x2c

      if (attr != NULL) {
 800710e:	683b      	ldr	r3, [r7, #0]
 8007110:	2b00      	cmp	r3, #0
 8007112:	d01c      	beq.n	800714e <osTimerNew+0xba>
        if (attr->name != NULL) {
 8007114:	683b      	ldr	r3, [r7, #0]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	2b00      	cmp	r3, #0
 800711a:	d002      	beq.n	8007122 <osTimerNew+0x8e>
          name = attr->name;
 800711c:	683b      	ldr	r3, [r7, #0]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	62fb      	str	r3, [r7, #44]	; 0x2c
        }

        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
 8007122:	683b      	ldr	r3, [r7, #0]
 8007124:	689b      	ldr	r3, [r3, #8]
 8007126:	2b00      	cmp	r3, #0
 8007128:	d006      	beq.n	8007138 <osTimerNew+0xa4>
 800712a:	683b      	ldr	r3, [r7, #0]
 800712c:	68db      	ldr	r3, [r3, #12]
 800712e:	2b2b      	cmp	r3, #43	; 0x2b
 8007130:	d902      	bls.n	8007138 <osTimerNew+0xa4>
          mem = 1;
 8007132:	2301      	movs	r3, #1
 8007134:	623b      	str	r3, [r7, #32]
 8007136:	e00c      	b.n	8007152 <osTimerNew+0xbe>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8007138:	683b      	ldr	r3, [r7, #0]
 800713a:	689b      	ldr	r3, [r3, #8]
 800713c:	2b00      	cmp	r3, #0
 800713e:	d108      	bne.n	8007152 <osTimerNew+0xbe>
 8007140:	683b      	ldr	r3, [r7, #0]
 8007142:	68db      	ldr	r3, [r3, #12]
 8007144:	2b00      	cmp	r3, #0
 8007146:	d104      	bne.n	8007152 <osTimerNew+0xbe>
            mem = 0;
 8007148:	2300      	movs	r3, #0
 800714a:	623b      	str	r3, [r7, #32]
 800714c:	e001      	b.n	8007152 <osTimerNew+0xbe>
          }
        }
      }
      else {
        mem = 0;
 800714e:	2300      	movs	r3, #0
 8007150:	623b      	str	r3, [r7, #32]
      }

      if (mem == 1) {
 8007152:	6a3b      	ldr	r3, [r7, #32]
 8007154:	2b01      	cmp	r3, #1
 8007156:	d10c      	bne.n	8007172 <osTimerNew+0xde>
        hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
 8007158:	683b      	ldr	r3, [r7, #0]
 800715a:	689b      	ldr	r3, [r3, #8]
 800715c:	9301      	str	r3, [sp, #4]
 800715e:	4b0e      	ldr	r3, [pc, #56]	; (8007198 <osTimerNew+0x104>)
 8007160:	9300      	str	r3, [sp, #0]
 8007162:	69fb      	ldr	r3, [r7, #28]
 8007164:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007166:	2101      	movs	r1, #1
 8007168:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800716a:	f002 feee 	bl	8009f4a <xTimerCreateStatic>
 800716e:	62b8      	str	r0, [r7, #40]	; 0x28
 8007170:	e00b      	b.n	800718a <osTimerNew+0xf6>
      }
      else {
        if (mem == 0) {
 8007172:	6a3b      	ldr	r3, [r7, #32]
 8007174:	2b00      	cmp	r3, #0
 8007176:	d108      	bne.n	800718a <osTimerNew+0xf6>
          hTimer = xTimerCreate (name, 1, reload, callb, TimerCallback);
 8007178:	4b07      	ldr	r3, [pc, #28]	; (8007198 <osTimerNew+0x104>)
 800717a:	9300      	str	r3, [sp, #0]
 800717c:	69fb      	ldr	r3, [r7, #28]
 800717e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007180:	2101      	movs	r1, #1
 8007182:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007184:	f002 fec0 	bl	8009f08 <xTimerCreate>
 8007188:	62b8      	str	r0, [r7, #40]	; 0x28
        }
      }
    }
  }

  return ((osTimerId_t)hTimer);
 800718a:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 800718c:	4618      	mov	r0, r3
 800718e:	3730      	adds	r7, #48	; 0x30
 8007190:	46bd      	mov	sp, r7
 8007192:	bd80      	pop	{r7, pc}
 8007194:	20000354 	.word	0x20000354
 8007198:	08007069 	.word	0x08007069

0800719c <osTimerStart>:
  }

  return (p);
}

osStatus_t osTimerStart (osTimerId_t timer_id, uint32_t ticks) {
 800719c:	b580      	push	{r7, lr}
 800719e:	b08a      	sub	sp, #40	; 0x28
 80071a0:	af02      	add	r7, sp, #8
 80071a2:	6078      	str	r0, [r7, #4]
 80071a4:	6039      	str	r1, [r7, #0]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80071aa:	f3ef 8305 	mrs	r3, IPSR
 80071ae:	617b      	str	r3, [r7, #20]
  return(result);
 80071b0:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

  if (IS_IRQ()) {
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d10f      	bne.n	80071d6 <osTimerStart+0x3a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80071b6:	f3ef 8310 	mrs	r3, PRIMASK
 80071ba:	613b      	str	r3, [r7, #16]
  return(result);
 80071bc:	693b      	ldr	r3, [r7, #16]
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d105      	bne.n	80071ce <osTimerStart+0x32>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80071c2:	f3ef 8311 	mrs	r3, BASEPRI
 80071c6:	60fb      	str	r3, [r7, #12]
  return(result);
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d007      	beq.n	80071de <osTimerStart+0x42>
 80071ce:	4b12      	ldr	r3, [pc, #72]	; (8007218 <osTimerStart+0x7c>)
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	2b02      	cmp	r3, #2
 80071d4:	d103      	bne.n	80071de <osTimerStart+0x42>
    stat = osErrorISR;
 80071d6:	f06f 0305 	mvn.w	r3, #5
 80071da:	61fb      	str	r3, [r7, #28]
 80071dc:	e017      	b.n	800720e <osTimerStart+0x72>
  }
  else if (hTimer == NULL) {
 80071de:	69bb      	ldr	r3, [r7, #24]
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d103      	bne.n	80071ec <osTimerStart+0x50>
    stat = osErrorParameter;
 80071e4:	f06f 0303 	mvn.w	r3, #3
 80071e8:	61fb      	str	r3, [r7, #28]
 80071ea:	e010      	b.n	800720e <osTimerStart+0x72>
  }
  else {
    if (xTimerChangePeriod (hTimer, ticks, 0) == pdPASS) {
 80071ec:	2300      	movs	r3, #0
 80071ee:	9300      	str	r3, [sp, #0]
 80071f0:	2300      	movs	r3, #0
 80071f2:	683a      	ldr	r2, [r7, #0]
 80071f4:	2104      	movs	r1, #4
 80071f6:	69b8      	ldr	r0, [r7, #24]
 80071f8:	f002 ff26 	bl	800a048 <xTimerGenericCommand>
 80071fc:	4603      	mov	r3, r0
 80071fe:	2b01      	cmp	r3, #1
 8007200:	d102      	bne.n	8007208 <osTimerStart+0x6c>
      stat = osOK;
 8007202:	2300      	movs	r3, #0
 8007204:	61fb      	str	r3, [r7, #28]
 8007206:	e002      	b.n	800720e <osTimerStart+0x72>
    } else {
      stat = osErrorResource;
 8007208:	f06f 0302 	mvn.w	r3, #2
 800720c:	61fb      	str	r3, [r7, #28]
    }
  }

  return (stat);
 800720e:	69fb      	ldr	r3, [r7, #28]
}
 8007210:	4618      	mov	r0, r3
 8007212:	3720      	adds	r7, #32
 8007214:	46bd      	mov	sp, r7
 8007216:	bd80      	pop	{r7, pc}
 8007218:	20000354 	.word	0x20000354

0800721c <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800721c:	b580      	push	{r7, lr}
 800721e:	b08a      	sub	sp, #40	; 0x28
 8007220:	af00      	add	r7, sp, #0
 8007222:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8007224:	2300      	movs	r3, #0
 8007226:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007228:	f3ef 8305 	mrs	r3, IPSR
 800722c:	613b      	str	r3, [r7, #16]
  return(result);
 800722e:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ()) {
 8007230:	2b00      	cmp	r3, #0
 8007232:	f040 8085 	bne.w	8007340 <osMutexNew+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007236:	f3ef 8310 	mrs	r3, PRIMASK
 800723a:	60fb      	str	r3, [r7, #12]
  return(result);
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	2b00      	cmp	r3, #0
 8007240:	d105      	bne.n	800724e <osMutexNew+0x32>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007242:	f3ef 8311 	mrs	r3, BASEPRI
 8007246:	60bb      	str	r3, [r7, #8]
  return(result);
 8007248:	68bb      	ldr	r3, [r7, #8]
 800724a:	2b00      	cmp	r3, #0
 800724c:	d003      	beq.n	8007256 <osMutexNew+0x3a>
 800724e:	4b3f      	ldr	r3, [pc, #252]	; (800734c <osMutexNew+0x130>)
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	2b02      	cmp	r3, #2
 8007254:	d074      	beq.n	8007340 <osMutexNew+0x124>
    if (attr != NULL) {
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	2b00      	cmp	r3, #0
 800725a:	d003      	beq.n	8007264 <osMutexNew+0x48>
      type = attr->attr_bits;
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	685b      	ldr	r3, [r3, #4]
 8007260:	623b      	str	r3, [r7, #32]
 8007262:	e001      	b.n	8007268 <osMutexNew+0x4c>
    } else {
      type = 0U;
 8007264:	2300      	movs	r3, #0
 8007266:	623b      	str	r3, [r7, #32]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8007268:	6a3b      	ldr	r3, [r7, #32]
 800726a:	f003 0301 	and.w	r3, r3, #1
 800726e:	2b00      	cmp	r3, #0
 8007270:	d002      	beq.n	8007278 <osMutexNew+0x5c>
      rmtx = 1U;
 8007272:	2301      	movs	r3, #1
 8007274:	61fb      	str	r3, [r7, #28]
 8007276:	e001      	b.n	800727c <osMutexNew+0x60>
    } else {
      rmtx = 0U;
 8007278:	2300      	movs	r3, #0
 800727a:	61fb      	str	r3, [r7, #28]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 800727c:	6a3b      	ldr	r3, [r7, #32]
 800727e:	f003 0308 	and.w	r3, r3, #8
 8007282:	2b00      	cmp	r3, #0
 8007284:	d15c      	bne.n	8007340 <osMutexNew+0x124>
      mem = -1;
 8007286:	f04f 33ff 	mov.w	r3, #4294967295
 800728a:	61bb      	str	r3, [r7, #24]

      if (attr != NULL) {
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	2b00      	cmp	r3, #0
 8007290:	d015      	beq.n	80072be <osMutexNew+0xa2>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	689b      	ldr	r3, [r3, #8]
 8007296:	2b00      	cmp	r3, #0
 8007298:	d006      	beq.n	80072a8 <osMutexNew+0x8c>
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	68db      	ldr	r3, [r3, #12]
 800729e:	2b4f      	cmp	r3, #79	; 0x4f
 80072a0:	d902      	bls.n	80072a8 <osMutexNew+0x8c>
          mem = 1;
 80072a2:	2301      	movs	r3, #1
 80072a4:	61bb      	str	r3, [r7, #24]
 80072a6:	e00c      	b.n	80072c2 <osMutexNew+0xa6>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	689b      	ldr	r3, [r3, #8]
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d108      	bne.n	80072c2 <osMutexNew+0xa6>
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	68db      	ldr	r3, [r3, #12]
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d104      	bne.n	80072c2 <osMutexNew+0xa6>
            mem = 0;
 80072b8:	2300      	movs	r3, #0
 80072ba:	61bb      	str	r3, [r7, #24]
 80072bc:	e001      	b.n	80072c2 <osMutexNew+0xa6>
          }
        }
      }
      else {
        mem = 0;
 80072be:	2300      	movs	r3, #0
 80072c0:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 80072c2:	69bb      	ldr	r3, [r7, #24]
 80072c4:	2b01      	cmp	r3, #1
 80072c6:	d112      	bne.n	80072ee <osMutexNew+0xd2>
        if (rmtx != 0U) {
 80072c8:	69fb      	ldr	r3, [r7, #28]
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d007      	beq.n	80072de <osMutexNew+0xc2>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	689b      	ldr	r3, [r3, #8]
 80072d2:	4619      	mov	r1, r3
 80072d4:	2004      	movs	r0, #4
 80072d6:	f000 fcc0 	bl	8007c5a <xQueueCreateMutexStatic>
 80072da:	6278      	str	r0, [r7, #36]	; 0x24
 80072dc:	e016      	b.n	800730c <osMutexNew+0xf0>
        }
        else {
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	689b      	ldr	r3, [r3, #8]
 80072e2:	4619      	mov	r1, r3
 80072e4:	2001      	movs	r0, #1
 80072e6:	f000 fcb8 	bl	8007c5a <xQueueCreateMutexStatic>
 80072ea:	6278      	str	r0, [r7, #36]	; 0x24
 80072ec:	e00e      	b.n	800730c <osMutexNew+0xf0>
        }
      }
      else {
        if (mem == 0) {
 80072ee:	69bb      	ldr	r3, [r7, #24]
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d10b      	bne.n	800730c <osMutexNew+0xf0>
          if (rmtx != 0U) {
 80072f4:	69fb      	ldr	r3, [r7, #28]
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d004      	beq.n	8007304 <osMutexNew+0xe8>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 80072fa:	2004      	movs	r0, #4
 80072fc:	f000 fc95 	bl	8007c2a <xQueueCreateMutex>
 8007300:	6278      	str	r0, [r7, #36]	; 0x24
 8007302:	e003      	b.n	800730c <osMutexNew+0xf0>
          } else {
            hMutex = xSemaphoreCreateMutex ();
 8007304:	2001      	movs	r0, #1
 8007306:	f000 fc90 	bl	8007c2a <xQueueCreateMutex>
 800730a:	6278      	str	r0, [r7, #36]	; 0x24
          }
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 800730c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800730e:	2b00      	cmp	r3, #0
 8007310:	d00c      	beq.n	800732c <osMutexNew+0x110>
        if (attr != NULL) {
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	2b00      	cmp	r3, #0
 8007316:	d003      	beq.n	8007320 <osMutexNew+0x104>
          name = attr->name;
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	617b      	str	r3, [r7, #20]
 800731e:	e001      	b.n	8007324 <osMutexNew+0x108>
        } else {
          name = NULL;
 8007320:	2300      	movs	r3, #0
 8007322:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hMutex, name);
 8007324:	6979      	ldr	r1, [r7, #20]
 8007326:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007328:	f001 fa6e 	bl	8008808 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 800732c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800732e:	2b00      	cmp	r3, #0
 8007330:	d006      	beq.n	8007340 <osMutexNew+0x124>
 8007332:	69fb      	ldr	r3, [r7, #28]
 8007334:	2b00      	cmp	r3, #0
 8007336:	d003      	beq.n	8007340 <osMutexNew+0x124>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8007338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800733a:	f043 0301 	orr.w	r3, r3, #1
 800733e:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8007340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007342:	4618      	mov	r0, r3
 8007344:	3728      	adds	r7, #40	; 0x28
 8007346:	46bd      	mov	sp, r7
 8007348:	bd80      	pop	{r7, pc}
 800734a:	bf00      	nop
 800734c:	20000354 	.word	0x20000354

08007350 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8007350:	b580      	push	{r7, lr}
 8007352:	b088      	sub	sp, #32
 8007354:	af00      	add	r7, sp, #0
 8007356:	6078      	str	r0, [r7, #4]
 8007358:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	f023 0301 	bic.w	r3, r3, #1
 8007360:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	f003 0301 	and.w	r3, r3, #1
 8007368:	617b      	str	r3, [r7, #20]

  stat = osOK;
 800736a:	2300      	movs	r3, #0
 800736c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800736e:	f3ef 8305 	mrs	r3, IPSR
 8007372:	613b      	str	r3, [r7, #16]
  return(result);
 8007374:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 8007376:	2b00      	cmp	r3, #0
 8007378:	d10f      	bne.n	800739a <osMutexAcquire+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800737a:	f3ef 8310 	mrs	r3, PRIMASK
 800737e:	60fb      	str	r3, [r7, #12]
  return(result);
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	2b00      	cmp	r3, #0
 8007384:	d105      	bne.n	8007392 <osMutexAcquire+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007386:	f3ef 8311 	mrs	r3, BASEPRI
 800738a:	60bb      	str	r3, [r7, #8]
  return(result);
 800738c:	68bb      	ldr	r3, [r7, #8]
 800738e:	2b00      	cmp	r3, #0
 8007390:	d007      	beq.n	80073a2 <osMutexAcquire+0x52>
 8007392:	4b1d      	ldr	r3, [pc, #116]	; (8007408 <osMutexAcquire+0xb8>)
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	2b02      	cmp	r3, #2
 8007398:	d103      	bne.n	80073a2 <osMutexAcquire+0x52>
    stat = osErrorISR;
 800739a:	f06f 0305 	mvn.w	r3, #5
 800739e:	61fb      	str	r3, [r7, #28]
 80073a0:	e02c      	b.n	80073fc <osMutexAcquire+0xac>
  }
  else if (hMutex == NULL) {
 80073a2:	69bb      	ldr	r3, [r7, #24]
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d103      	bne.n	80073b0 <osMutexAcquire+0x60>
    stat = osErrorParameter;
 80073a8:	f06f 0303 	mvn.w	r3, #3
 80073ac:	61fb      	str	r3, [r7, #28]
 80073ae:	e025      	b.n	80073fc <osMutexAcquire+0xac>
  }
  else {
    if (rmtx != 0U) {
 80073b0:	697b      	ldr	r3, [r7, #20]
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d011      	beq.n	80073da <osMutexAcquire+0x8a>
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 80073b6:	6839      	ldr	r1, [r7, #0]
 80073b8:	69b8      	ldr	r0, [r7, #24]
 80073ba:	f000 fc9f 	bl	8007cfc <xQueueTakeMutexRecursive>
 80073be:	4603      	mov	r3, r0
 80073c0:	2b01      	cmp	r3, #1
 80073c2:	d01b      	beq.n	80073fc <osMutexAcquire+0xac>
        if (timeout != 0U) {
 80073c4:	683b      	ldr	r3, [r7, #0]
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d003      	beq.n	80073d2 <osMutexAcquire+0x82>
          stat = osErrorTimeout;
 80073ca:	f06f 0301 	mvn.w	r3, #1
 80073ce:	61fb      	str	r3, [r7, #28]
 80073d0:	e014      	b.n	80073fc <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 80073d2:	f06f 0302 	mvn.w	r3, #2
 80073d6:	61fb      	str	r3, [r7, #28]
 80073d8:	e010      	b.n	80073fc <osMutexAcquire+0xac>
        }
      }
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 80073da:	6839      	ldr	r1, [r7, #0]
 80073dc:	69b8      	ldr	r0, [r7, #24]
 80073de:	f000 ff51 	bl	8008284 <xQueueSemaphoreTake>
 80073e2:	4603      	mov	r3, r0
 80073e4:	2b01      	cmp	r3, #1
 80073e6:	d009      	beq.n	80073fc <osMutexAcquire+0xac>
        if (timeout != 0U) {
 80073e8:	683b      	ldr	r3, [r7, #0]
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d003      	beq.n	80073f6 <osMutexAcquire+0xa6>
          stat = osErrorTimeout;
 80073ee:	f06f 0301 	mvn.w	r3, #1
 80073f2:	61fb      	str	r3, [r7, #28]
 80073f4:	e002      	b.n	80073fc <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 80073f6:	f06f 0302 	mvn.w	r3, #2
 80073fa:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 80073fc:	69fb      	ldr	r3, [r7, #28]
}
 80073fe:	4618      	mov	r0, r3
 8007400:	3720      	adds	r7, #32
 8007402:	46bd      	mov	sp, r7
 8007404:	bd80      	pop	{r7, pc}
 8007406:	bf00      	nop
 8007408:	20000354 	.word	0x20000354

0800740c <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 800740c:	b580      	push	{r7, lr}
 800740e:	b088      	sub	sp, #32
 8007410:	af00      	add	r7, sp, #0
 8007412:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	f023 0301 	bic.w	r3, r3, #1
 800741a:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	f003 0301 	and.w	r3, r3, #1
 8007422:	617b      	str	r3, [r7, #20]

  stat = osOK;
 8007424:	2300      	movs	r3, #0
 8007426:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007428:	f3ef 8305 	mrs	r3, IPSR
 800742c:	613b      	str	r3, [r7, #16]
  return(result);
 800742e:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 8007430:	2b00      	cmp	r3, #0
 8007432:	d10f      	bne.n	8007454 <osMutexRelease+0x48>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007434:	f3ef 8310 	mrs	r3, PRIMASK
 8007438:	60fb      	str	r3, [r7, #12]
  return(result);
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	2b00      	cmp	r3, #0
 800743e:	d105      	bne.n	800744c <osMutexRelease+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007440:	f3ef 8311 	mrs	r3, BASEPRI
 8007444:	60bb      	str	r3, [r7, #8]
  return(result);
 8007446:	68bb      	ldr	r3, [r7, #8]
 8007448:	2b00      	cmp	r3, #0
 800744a:	d007      	beq.n	800745c <osMutexRelease+0x50>
 800744c:	4b16      	ldr	r3, [pc, #88]	; (80074a8 <osMutexRelease+0x9c>)
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	2b02      	cmp	r3, #2
 8007452:	d103      	bne.n	800745c <osMutexRelease+0x50>
    stat = osErrorISR;
 8007454:	f06f 0305 	mvn.w	r3, #5
 8007458:	61fb      	str	r3, [r7, #28]
 800745a:	e01f      	b.n	800749c <osMutexRelease+0x90>
  }
  else if (hMutex == NULL) {
 800745c:	69bb      	ldr	r3, [r7, #24]
 800745e:	2b00      	cmp	r3, #0
 8007460:	d103      	bne.n	800746a <osMutexRelease+0x5e>
    stat = osErrorParameter;
 8007462:	f06f 0303 	mvn.w	r3, #3
 8007466:	61fb      	str	r3, [r7, #28]
 8007468:	e018      	b.n	800749c <osMutexRelease+0x90>
  }
  else {
    if (rmtx != 0U) {
 800746a:	697b      	ldr	r3, [r7, #20]
 800746c:	2b00      	cmp	r3, #0
 800746e:	d009      	beq.n	8007484 <osMutexRelease+0x78>
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8007470:	69b8      	ldr	r0, [r7, #24]
 8007472:	f000 fc0d 	bl	8007c90 <xQueueGiveMutexRecursive>
 8007476:	4603      	mov	r3, r0
 8007478:	2b01      	cmp	r3, #1
 800747a:	d00f      	beq.n	800749c <osMutexRelease+0x90>
        stat = osErrorResource;
 800747c:	f06f 0302 	mvn.w	r3, #2
 8007480:	61fb      	str	r3, [r7, #28]
 8007482:	e00b      	b.n	800749c <osMutexRelease+0x90>
      }
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8007484:	2300      	movs	r3, #0
 8007486:	2200      	movs	r2, #0
 8007488:	2100      	movs	r1, #0
 800748a:	69b8      	ldr	r0, [r7, #24]
 800748c:	f000 fc6e 	bl	8007d6c <xQueueGenericSend>
 8007490:	4603      	mov	r3, r0
 8007492:	2b01      	cmp	r3, #1
 8007494:	d002      	beq.n	800749c <osMutexRelease+0x90>
        stat = osErrorResource;
 8007496:	f06f 0302 	mvn.w	r3, #2
 800749a:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return (stat);
 800749c:	69fb      	ldr	r3, [r7, #28]
}
 800749e:	4618      	mov	r0, r3
 80074a0:	3720      	adds	r7, #32
 80074a2:	46bd      	mov	sp, r7
 80074a4:	bd80      	pop	{r7, pc}
 80074a6:	bf00      	nop
 80074a8:	20000354 	.word	0x20000354

080074ac <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 80074ac:	b580      	push	{r7, lr}
 80074ae:	b08c      	sub	sp, #48	; 0x30
 80074b0:	af02      	add	r7, sp, #8
 80074b2:	60f8      	str	r0, [r7, #12]
 80074b4:	60b9      	str	r1, [r7, #8]
 80074b6:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 80074b8:	2300      	movs	r3, #0
 80074ba:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80074bc:	f3ef 8305 	mrs	r3, IPSR
 80074c0:	61bb      	str	r3, [r7, #24]
  return(result);
 80074c2:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d16f      	bne.n	80075a8 <osMessageQueueNew+0xfc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80074c8:	f3ef 8310 	mrs	r3, PRIMASK
 80074cc:	617b      	str	r3, [r7, #20]
  return(result);
 80074ce:	697b      	ldr	r3, [r7, #20]
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d105      	bne.n	80074e0 <osMessageQueueNew+0x34>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80074d4:	f3ef 8311 	mrs	r3, BASEPRI
 80074d8:	613b      	str	r3, [r7, #16]
  return(result);
 80074da:	693b      	ldr	r3, [r7, #16]
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d003      	beq.n	80074e8 <osMessageQueueNew+0x3c>
 80074e0:	4b34      	ldr	r3, [pc, #208]	; (80075b4 <osMessageQueueNew+0x108>)
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	2b02      	cmp	r3, #2
 80074e6:	d05f      	beq.n	80075a8 <osMessageQueueNew+0xfc>
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d05c      	beq.n	80075a8 <osMessageQueueNew+0xfc>
 80074ee:	68bb      	ldr	r3, [r7, #8]
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d059      	beq.n	80075a8 <osMessageQueueNew+0xfc>
    mem = -1;
 80074f4:	f04f 33ff 	mov.w	r3, #4294967295
 80074f8:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d029      	beq.n	8007554 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	689b      	ldr	r3, [r3, #8]
 8007504:	2b00      	cmp	r3, #0
 8007506:	d012      	beq.n	800752e <osMessageQueueNew+0x82>
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	68db      	ldr	r3, [r3, #12]
 800750c:	2b4f      	cmp	r3, #79	; 0x4f
 800750e:	d90e      	bls.n	800752e <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8007514:	2b00      	cmp	r3, #0
 8007516:	d00a      	beq.n	800752e <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	695a      	ldr	r2, [r3, #20]
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	68b9      	ldr	r1, [r7, #8]
 8007520:	fb01 f303 	mul.w	r3, r1, r3
 8007524:	429a      	cmp	r2, r3
 8007526:	d302      	bcc.n	800752e <osMessageQueueNew+0x82>
        mem = 1;
 8007528:	2301      	movs	r3, #1
 800752a:	623b      	str	r3, [r7, #32]
 800752c:	e014      	b.n	8007558 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	689b      	ldr	r3, [r3, #8]
 8007532:	2b00      	cmp	r3, #0
 8007534:	d110      	bne.n	8007558 <osMessageQueueNew+0xac>
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	68db      	ldr	r3, [r3, #12]
 800753a:	2b00      	cmp	r3, #0
 800753c:	d10c      	bne.n	8007558 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8007542:	2b00      	cmp	r3, #0
 8007544:	d108      	bne.n	8007558 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	695b      	ldr	r3, [r3, #20]
 800754a:	2b00      	cmp	r3, #0
 800754c:	d104      	bne.n	8007558 <osMessageQueueNew+0xac>
          mem = 0;
 800754e:	2300      	movs	r3, #0
 8007550:	623b      	str	r3, [r7, #32]
 8007552:	e001      	b.n	8007558 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 8007554:	2300      	movs	r3, #0
 8007556:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8007558:	6a3b      	ldr	r3, [r7, #32]
 800755a:	2b01      	cmp	r3, #1
 800755c:	d10b      	bne.n	8007576 <osMessageQueueNew+0xca>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	691a      	ldr	r2, [r3, #16]
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	689b      	ldr	r3, [r3, #8]
 8007566:	2100      	movs	r1, #0
 8007568:	9100      	str	r1, [sp, #0]
 800756a:	68b9      	ldr	r1, [r7, #8]
 800756c:	68f8      	ldr	r0, [r7, #12]
 800756e:	f000 fa5b 	bl	8007a28 <xQueueGenericCreateStatic>
 8007572:	6278      	str	r0, [r7, #36]	; 0x24
 8007574:	e008      	b.n	8007588 <osMessageQueueNew+0xdc>
    }
    else {
      if (mem == 0) {
 8007576:	6a3b      	ldr	r3, [r7, #32]
 8007578:	2b00      	cmp	r3, #0
 800757a:	d105      	bne.n	8007588 <osMessageQueueNew+0xdc>
        hQueue = xQueueCreate (msg_count, msg_size);
 800757c:	2200      	movs	r2, #0
 800757e:	68b9      	ldr	r1, [r7, #8]
 8007580:	68f8      	ldr	r0, [r7, #12]
 8007582:	f000 fad3 	bl	8007b2c <xQueueGenericCreate>
 8007586:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8007588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800758a:	2b00      	cmp	r3, #0
 800758c:	d00c      	beq.n	80075a8 <osMessageQueueNew+0xfc>
      if (attr != NULL) {
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	2b00      	cmp	r3, #0
 8007592:	d003      	beq.n	800759c <osMessageQueueNew+0xf0>
        name = attr->name;
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	61fb      	str	r3, [r7, #28]
 800759a:	e001      	b.n	80075a0 <osMessageQueueNew+0xf4>
      } else {
        name = NULL;
 800759c:	2300      	movs	r3, #0
 800759e:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 80075a0:	69f9      	ldr	r1, [r7, #28]
 80075a2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80075a4:	f001 f930 	bl	8008808 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 80075a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80075aa:	4618      	mov	r0, r3
 80075ac:	3728      	adds	r7, #40	; 0x28
 80075ae:	46bd      	mov	sp, r7
 80075b0:	bd80      	pop	{r7, pc}
 80075b2:	bf00      	nop
 80075b4:	20000354 	.word	0x20000354

080075b8 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 80075b8:	b580      	push	{r7, lr}
 80075ba:	b08a      	sub	sp, #40	; 0x28
 80075bc:	af00      	add	r7, sp, #0
 80075be:	60f8      	str	r0, [r7, #12]
 80075c0:	60b9      	str	r1, [r7, #8]
 80075c2:	603b      	str	r3, [r7, #0]
 80075c4:	4613      	mov	r3, r2
 80075c6:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80075cc:	2300      	movs	r3, #0
 80075ce:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80075d0:	f3ef 8305 	mrs	r3, IPSR
 80075d4:	61fb      	str	r3, [r7, #28]
  return(result);
 80075d6:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d10f      	bne.n	80075fc <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80075dc:	f3ef 8310 	mrs	r3, PRIMASK
 80075e0:	61bb      	str	r3, [r7, #24]
  return(result);
 80075e2:	69bb      	ldr	r3, [r7, #24]
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d105      	bne.n	80075f4 <osMessageQueuePut+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80075e8:	f3ef 8311 	mrs	r3, BASEPRI
 80075ec:	617b      	str	r3, [r7, #20]
  return(result);
 80075ee:	697b      	ldr	r3, [r7, #20]
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d02c      	beq.n	800764e <osMessageQueuePut+0x96>
 80075f4:	4b28      	ldr	r3, [pc, #160]	; (8007698 <osMessageQueuePut+0xe0>)
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	2b02      	cmp	r3, #2
 80075fa:	d128      	bne.n	800764e <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80075fc:	6a3b      	ldr	r3, [r7, #32]
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d005      	beq.n	800760e <osMessageQueuePut+0x56>
 8007602:	68bb      	ldr	r3, [r7, #8]
 8007604:	2b00      	cmp	r3, #0
 8007606:	d002      	beq.n	800760e <osMessageQueuePut+0x56>
 8007608:	683b      	ldr	r3, [r7, #0]
 800760a:	2b00      	cmp	r3, #0
 800760c:	d003      	beq.n	8007616 <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 800760e:	f06f 0303 	mvn.w	r3, #3
 8007612:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8007614:	e039      	b.n	800768a <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 8007616:	2300      	movs	r3, #0
 8007618:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800761a:	f107 0210 	add.w	r2, r7, #16
 800761e:	2300      	movs	r3, #0
 8007620:	68b9      	ldr	r1, [r7, #8]
 8007622:	6a38      	ldr	r0, [r7, #32]
 8007624:	f000 fca8 	bl	8007f78 <xQueueGenericSendFromISR>
 8007628:	4603      	mov	r3, r0
 800762a:	2b01      	cmp	r3, #1
 800762c:	d003      	beq.n	8007636 <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 800762e:	f06f 0302 	mvn.w	r3, #2
 8007632:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8007634:	e029      	b.n	800768a <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 8007636:	693b      	ldr	r3, [r7, #16]
 8007638:	2b00      	cmp	r3, #0
 800763a:	d026      	beq.n	800768a <osMessageQueuePut+0xd2>
 800763c:	4b17      	ldr	r3, [pc, #92]	; (800769c <osMessageQueuePut+0xe4>)
 800763e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007642:	601a      	str	r2, [r3, #0]
 8007644:	f3bf 8f4f 	dsb	sy
 8007648:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800764c:	e01d      	b.n	800768a <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800764e:	6a3b      	ldr	r3, [r7, #32]
 8007650:	2b00      	cmp	r3, #0
 8007652:	d002      	beq.n	800765a <osMessageQueuePut+0xa2>
 8007654:	68bb      	ldr	r3, [r7, #8]
 8007656:	2b00      	cmp	r3, #0
 8007658:	d103      	bne.n	8007662 <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 800765a:	f06f 0303 	mvn.w	r3, #3
 800765e:	627b      	str	r3, [r7, #36]	; 0x24
 8007660:	e014      	b.n	800768c <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8007662:	2300      	movs	r3, #0
 8007664:	683a      	ldr	r2, [r7, #0]
 8007666:	68b9      	ldr	r1, [r7, #8]
 8007668:	6a38      	ldr	r0, [r7, #32]
 800766a:	f000 fb7f 	bl	8007d6c <xQueueGenericSend>
 800766e:	4603      	mov	r3, r0
 8007670:	2b01      	cmp	r3, #1
 8007672:	d00b      	beq.n	800768c <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 8007674:	683b      	ldr	r3, [r7, #0]
 8007676:	2b00      	cmp	r3, #0
 8007678:	d003      	beq.n	8007682 <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 800767a:	f06f 0301 	mvn.w	r3, #1
 800767e:	627b      	str	r3, [r7, #36]	; 0x24
 8007680:	e004      	b.n	800768c <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 8007682:	f06f 0302 	mvn.w	r3, #2
 8007686:	627b      	str	r3, [r7, #36]	; 0x24
 8007688:	e000      	b.n	800768c <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800768a:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 800768c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800768e:	4618      	mov	r0, r3
 8007690:	3728      	adds	r7, #40	; 0x28
 8007692:	46bd      	mov	sp, r7
 8007694:	bd80      	pop	{r7, pc}
 8007696:	bf00      	nop
 8007698:	20000354 	.word	0x20000354
 800769c:	e000ed04 	.word	0xe000ed04

080076a0 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 80076a0:	b580      	push	{r7, lr}
 80076a2:	b08a      	sub	sp, #40	; 0x28
 80076a4:	af00      	add	r7, sp, #0
 80076a6:	60f8      	str	r0, [r7, #12]
 80076a8:	60b9      	str	r1, [r7, #8]
 80076aa:	607a      	str	r2, [r7, #4]
 80076ac:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80076b2:	2300      	movs	r3, #0
 80076b4:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80076b6:	f3ef 8305 	mrs	r3, IPSR
 80076ba:	61fb      	str	r3, [r7, #28]
  return(result);
 80076bc:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d10f      	bne.n	80076e2 <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80076c2:	f3ef 8310 	mrs	r3, PRIMASK
 80076c6:	61bb      	str	r3, [r7, #24]
  return(result);
 80076c8:	69bb      	ldr	r3, [r7, #24]
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d105      	bne.n	80076da <osMessageQueueGet+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80076ce:	f3ef 8311 	mrs	r3, BASEPRI
 80076d2:	617b      	str	r3, [r7, #20]
  return(result);
 80076d4:	697b      	ldr	r3, [r7, #20]
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d02c      	beq.n	8007734 <osMessageQueueGet+0x94>
 80076da:	4b28      	ldr	r3, [pc, #160]	; (800777c <osMessageQueueGet+0xdc>)
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	2b02      	cmp	r3, #2
 80076e0:	d128      	bne.n	8007734 <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80076e2:	6a3b      	ldr	r3, [r7, #32]
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d005      	beq.n	80076f4 <osMessageQueueGet+0x54>
 80076e8:	68bb      	ldr	r3, [r7, #8]
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d002      	beq.n	80076f4 <osMessageQueueGet+0x54>
 80076ee:	683b      	ldr	r3, [r7, #0]
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d003      	beq.n	80076fc <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 80076f4:	f06f 0303 	mvn.w	r3, #3
 80076f8:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80076fa:	e038      	b.n	800776e <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 80076fc:	2300      	movs	r3, #0
 80076fe:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8007700:	f107 0310 	add.w	r3, r7, #16
 8007704:	461a      	mov	r2, r3
 8007706:	68b9      	ldr	r1, [r7, #8]
 8007708:	6a38      	ldr	r0, [r7, #32]
 800770a:	f000 fecf 	bl	80084ac <xQueueReceiveFromISR>
 800770e:	4603      	mov	r3, r0
 8007710:	2b01      	cmp	r3, #1
 8007712:	d003      	beq.n	800771c <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 8007714:	f06f 0302 	mvn.w	r3, #2
 8007718:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800771a:	e028      	b.n	800776e <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 800771c:	693b      	ldr	r3, [r7, #16]
 800771e:	2b00      	cmp	r3, #0
 8007720:	d025      	beq.n	800776e <osMessageQueueGet+0xce>
 8007722:	4b17      	ldr	r3, [pc, #92]	; (8007780 <osMessageQueueGet+0xe0>)
 8007724:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007728:	601a      	str	r2, [r3, #0]
 800772a:	f3bf 8f4f 	dsb	sy
 800772e:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8007732:	e01c      	b.n	800776e <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8007734:	6a3b      	ldr	r3, [r7, #32]
 8007736:	2b00      	cmp	r3, #0
 8007738:	d002      	beq.n	8007740 <osMessageQueueGet+0xa0>
 800773a:	68bb      	ldr	r3, [r7, #8]
 800773c:	2b00      	cmp	r3, #0
 800773e:	d103      	bne.n	8007748 <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 8007740:	f06f 0303 	mvn.w	r3, #3
 8007744:	627b      	str	r3, [r7, #36]	; 0x24
 8007746:	e013      	b.n	8007770 <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8007748:	683a      	ldr	r2, [r7, #0]
 800774a:	68b9      	ldr	r1, [r7, #8]
 800774c:	6a38      	ldr	r0, [r7, #32]
 800774e:	f000 fcb3 	bl	80080b8 <xQueueReceive>
 8007752:	4603      	mov	r3, r0
 8007754:	2b01      	cmp	r3, #1
 8007756:	d00b      	beq.n	8007770 <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 8007758:	683b      	ldr	r3, [r7, #0]
 800775a:	2b00      	cmp	r3, #0
 800775c:	d003      	beq.n	8007766 <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 800775e:	f06f 0301 	mvn.w	r3, #1
 8007762:	627b      	str	r3, [r7, #36]	; 0x24
 8007764:	e004      	b.n	8007770 <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 8007766:	f06f 0302 	mvn.w	r3, #2
 800776a:	627b      	str	r3, [r7, #36]	; 0x24
 800776c:	e000      	b.n	8007770 <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800776e:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8007770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007772:	4618      	mov	r0, r3
 8007774:	3728      	adds	r7, #40	; 0x28
 8007776:	46bd      	mov	sp, r7
 8007778:	bd80      	pop	{r7, pc}
 800777a:	bf00      	nop
 800777c:	20000354 	.word	0x20000354
 8007780:	e000ed04 	.word	0xe000ed04

08007784 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8007784:	b480      	push	{r7}
 8007786:	b085      	sub	sp, #20
 8007788:	af00      	add	r7, sp, #0
 800778a:	60f8      	str	r0, [r7, #12]
 800778c:	60b9      	str	r1, [r7, #8]
 800778e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	4a07      	ldr	r2, [pc, #28]	; (80077b0 <vApplicationGetIdleTaskMemory+0x2c>)
 8007794:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8007796:	68bb      	ldr	r3, [r7, #8]
 8007798:	4a06      	ldr	r2, [pc, #24]	; (80077b4 <vApplicationGetIdleTaskMemory+0x30>)
 800779a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	2280      	movs	r2, #128	; 0x80
 80077a0:	601a      	str	r2, [r3, #0]
}
 80077a2:	bf00      	nop
 80077a4:	3714      	adds	r7, #20
 80077a6:	46bd      	mov	sp, r7
 80077a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ac:	4770      	bx	lr
 80077ae:	bf00      	nop
 80077b0:	20000358 	.word	0x20000358
 80077b4:	200003b4 	.word	0x200003b4

080077b8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80077b8:	b480      	push	{r7}
 80077ba:	b085      	sub	sp, #20
 80077bc:	af00      	add	r7, sp, #0
 80077be:	60f8      	str	r0, [r7, #12]
 80077c0:	60b9      	str	r1, [r7, #8]
 80077c2:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	4a07      	ldr	r2, [pc, #28]	; (80077e4 <vApplicationGetTimerTaskMemory+0x2c>)
 80077c8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80077ca:	68bb      	ldr	r3, [r7, #8]
 80077cc:	4a06      	ldr	r2, [pc, #24]	; (80077e8 <vApplicationGetTimerTaskMemory+0x30>)
 80077ce:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80077d6:	601a      	str	r2, [r3, #0]
}
 80077d8:	bf00      	nop
 80077da:	3714      	adds	r7, #20
 80077dc:	46bd      	mov	sp, r7
 80077de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e2:	4770      	bx	lr
 80077e4:	200005b4 	.word	0x200005b4
 80077e8:	20000610 	.word	0x20000610

080077ec <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80077ec:	b480      	push	{r7}
 80077ee:	b083      	sub	sp, #12
 80077f0:	af00      	add	r7, sp, #0
 80077f2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	f103 0208 	add.w	r2, r3, #8
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	f04f 32ff 	mov.w	r2, #4294967295
 8007804:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	f103 0208 	add.w	r2, r3, #8
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	f103 0208 	add.w	r2, r3, #8
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	2200      	movs	r2, #0
 800781e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007820:	bf00      	nop
 8007822:	370c      	adds	r7, #12
 8007824:	46bd      	mov	sp, r7
 8007826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800782a:	4770      	bx	lr

0800782c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800782c:	b480      	push	{r7}
 800782e:	b083      	sub	sp, #12
 8007830:	af00      	add	r7, sp, #0
 8007832:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	2200      	movs	r2, #0
 8007838:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800783a:	bf00      	nop
 800783c:	370c      	adds	r7, #12
 800783e:	46bd      	mov	sp, r7
 8007840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007844:	4770      	bx	lr

08007846 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007846:	b480      	push	{r7}
 8007848:	b085      	sub	sp, #20
 800784a:	af00      	add	r7, sp, #0
 800784c:	6078      	str	r0, [r7, #4]
 800784e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	685b      	ldr	r3, [r3, #4]
 8007854:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007856:	683b      	ldr	r3, [r7, #0]
 8007858:	68fa      	ldr	r2, [r7, #12]
 800785a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	689a      	ldr	r2, [r3, #8]
 8007860:	683b      	ldr	r3, [r7, #0]
 8007862:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	689b      	ldr	r3, [r3, #8]
 8007868:	683a      	ldr	r2, [r7, #0]
 800786a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	683a      	ldr	r2, [r7, #0]
 8007870:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007872:	683b      	ldr	r3, [r7, #0]
 8007874:	687a      	ldr	r2, [r7, #4]
 8007876:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	1c5a      	adds	r2, r3, #1
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	601a      	str	r2, [r3, #0]
}
 8007882:	bf00      	nop
 8007884:	3714      	adds	r7, #20
 8007886:	46bd      	mov	sp, r7
 8007888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800788c:	4770      	bx	lr

0800788e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800788e:	b480      	push	{r7}
 8007890:	b085      	sub	sp, #20
 8007892:	af00      	add	r7, sp, #0
 8007894:	6078      	str	r0, [r7, #4]
 8007896:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007898:	683b      	ldr	r3, [r7, #0]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800789e:	68bb      	ldr	r3, [r7, #8]
 80078a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078a4:	d103      	bne.n	80078ae <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	691b      	ldr	r3, [r3, #16]
 80078aa:	60fb      	str	r3, [r7, #12]
 80078ac:	e00c      	b.n	80078c8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	3308      	adds	r3, #8
 80078b2:	60fb      	str	r3, [r7, #12]
 80078b4:	e002      	b.n	80078bc <vListInsert+0x2e>
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	685b      	ldr	r3, [r3, #4]
 80078ba:	60fb      	str	r3, [r7, #12]
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	685b      	ldr	r3, [r3, #4]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	68ba      	ldr	r2, [r7, #8]
 80078c4:	429a      	cmp	r2, r3
 80078c6:	d2f6      	bcs.n	80078b6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	685a      	ldr	r2, [r3, #4]
 80078cc:	683b      	ldr	r3, [r7, #0]
 80078ce:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80078d0:	683b      	ldr	r3, [r7, #0]
 80078d2:	685b      	ldr	r3, [r3, #4]
 80078d4:	683a      	ldr	r2, [r7, #0]
 80078d6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80078d8:	683b      	ldr	r3, [r7, #0]
 80078da:	68fa      	ldr	r2, [r7, #12]
 80078dc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	683a      	ldr	r2, [r7, #0]
 80078e2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80078e4:	683b      	ldr	r3, [r7, #0]
 80078e6:	687a      	ldr	r2, [r7, #4]
 80078e8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	1c5a      	adds	r2, r3, #1
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	601a      	str	r2, [r3, #0]
}
 80078f4:	bf00      	nop
 80078f6:	3714      	adds	r7, #20
 80078f8:	46bd      	mov	sp, r7
 80078fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078fe:	4770      	bx	lr

08007900 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007900:	b480      	push	{r7}
 8007902:	b085      	sub	sp, #20
 8007904:	af00      	add	r7, sp, #0
 8007906:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	691b      	ldr	r3, [r3, #16]
 800790c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	685b      	ldr	r3, [r3, #4]
 8007912:	687a      	ldr	r2, [r7, #4]
 8007914:	6892      	ldr	r2, [r2, #8]
 8007916:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	689b      	ldr	r3, [r3, #8]
 800791c:	687a      	ldr	r2, [r7, #4]
 800791e:	6852      	ldr	r2, [r2, #4]
 8007920:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	685b      	ldr	r3, [r3, #4]
 8007926:	687a      	ldr	r2, [r7, #4]
 8007928:	429a      	cmp	r2, r3
 800792a:	d103      	bne.n	8007934 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	689a      	ldr	r2, [r3, #8]
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	2200      	movs	r2, #0
 8007938:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	1e5a      	subs	r2, r3, #1
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	681b      	ldr	r3, [r3, #0]
}
 8007948:	4618      	mov	r0, r3
 800794a:	3714      	adds	r7, #20
 800794c:	46bd      	mov	sp, r7
 800794e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007952:	4770      	bx	lr

08007954 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007954:	b580      	push	{r7, lr}
 8007956:	b084      	sub	sp, #16
 8007958:	af00      	add	r7, sp, #0
 800795a:	6078      	str	r0, [r7, #4]
 800795c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	2b00      	cmp	r3, #0
 8007966:	d10c      	bne.n	8007982 <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007968:	f04f 0350 	mov.w	r3, #80	; 0x50
 800796c:	b672      	cpsid	i
 800796e:	f383 8811 	msr	BASEPRI, r3
 8007972:	f3bf 8f6f 	isb	sy
 8007976:	f3bf 8f4f 	dsb	sy
 800797a:	b662      	cpsie	i
 800797c:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800797e:	bf00      	nop
 8007980:	e7fe      	b.n	8007980 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 8007982:	f002 ffa3 	bl	800a8cc <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	681a      	ldr	r2, [r3, #0]
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800798e:	68f9      	ldr	r1, [r7, #12]
 8007990:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007992:	fb01 f303 	mul.w	r3, r1, r3
 8007996:	441a      	add	r2, r3
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	2200      	movs	r2, #0
 80079a0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	681a      	ldr	r2, [r3, #0]
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	681a      	ldr	r2, [r3, #0]
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80079b2:	3b01      	subs	r3, #1
 80079b4:	68f9      	ldr	r1, [r7, #12]
 80079b6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80079b8:	fb01 f303 	mul.w	r3, r1, r3
 80079bc:	441a      	add	r2, r3
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	22ff      	movs	r2, #255	; 0xff
 80079c6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	22ff      	movs	r2, #255	; 0xff
 80079ce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80079d2:	683b      	ldr	r3, [r7, #0]
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d114      	bne.n	8007a02 <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	691b      	ldr	r3, [r3, #16]
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d01a      	beq.n	8007a16 <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	3310      	adds	r3, #16
 80079e4:	4618      	mov	r0, r3
 80079e6:	f001 fc8b 	bl	8009300 <xTaskRemoveFromEventList>
 80079ea:	4603      	mov	r3, r0
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d012      	beq.n	8007a16 <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80079f0:	4b0c      	ldr	r3, [pc, #48]	; (8007a24 <xQueueGenericReset+0xd0>)
 80079f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80079f6:	601a      	str	r2, [r3, #0]
 80079f8:	f3bf 8f4f 	dsb	sy
 80079fc:	f3bf 8f6f 	isb	sy
 8007a00:	e009      	b.n	8007a16 <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	3310      	adds	r3, #16
 8007a06:	4618      	mov	r0, r3
 8007a08:	f7ff fef0 	bl	80077ec <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	3324      	adds	r3, #36	; 0x24
 8007a10:	4618      	mov	r0, r3
 8007a12:	f7ff feeb 	bl	80077ec <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8007a16:	f002 ff8d 	bl	800a934 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007a1a:	2301      	movs	r3, #1
}
 8007a1c:	4618      	mov	r0, r3
 8007a1e:	3710      	adds	r7, #16
 8007a20:	46bd      	mov	sp, r7
 8007a22:	bd80      	pop	{r7, pc}
 8007a24:	e000ed04 	.word	0xe000ed04

08007a28 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8007a28:	b580      	push	{r7, lr}
 8007a2a:	b08e      	sub	sp, #56	; 0x38
 8007a2c:	af02      	add	r7, sp, #8
 8007a2e:	60f8      	str	r0, [r7, #12]
 8007a30:	60b9      	str	r1, [r7, #8]
 8007a32:	607a      	str	r2, [r7, #4]
 8007a34:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d10c      	bne.n	8007a56 <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 8007a3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a40:	b672      	cpsid	i
 8007a42:	f383 8811 	msr	BASEPRI, r3
 8007a46:	f3bf 8f6f 	isb	sy
 8007a4a:	f3bf 8f4f 	dsb	sy
 8007a4e:	b662      	cpsie	i
 8007a50:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007a52:	bf00      	nop
 8007a54:	e7fe      	b.n	8007a54 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8007a56:	683b      	ldr	r3, [r7, #0]
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d10c      	bne.n	8007a76 <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 8007a5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a60:	b672      	cpsid	i
 8007a62:	f383 8811 	msr	BASEPRI, r3
 8007a66:	f3bf 8f6f 	isb	sy
 8007a6a:	f3bf 8f4f 	dsb	sy
 8007a6e:	b662      	cpsie	i
 8007a70:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007a72:	bf00      	nop
 8007a74:	e7fe      	b.n	8007a74 <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d002      	beq.n	8007a82 <xQueueGenericCreateStatic+0x5a>
 8007a7c:	68bb      	ldr	r3, [r7, #8]
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d001      	beq.n	8007a86 <xQueueGenericCreateStatic+0x5e>
 8007a82:	2301      	movs	r3, #1
 8007a84:	e000      	b.n	8007a88 <xQueueGenericCreateStatic+0x60>
 8007a86:	2300      	movs	r3, #0
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d10c      	bne.n	8007aa6 <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 8007a8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a90:	b672      	cpsid	i
 8007a92:	f383 8811 	msr	BASEPRI, r3
 8007a96:	f3bf 8f6f 	isb	sy
 8007a9a:	f3bf 8f4f 	dsb	sy
 8007a9e:	b662      	cpsie	i
 8007aa0:	623b      	str	r3, [r7, #32]
}
 8007aa2:	bf00      	nop
 8007aa4:	e7fe      	b.n	8007aa4 <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d102      	bne.n	8007ab2 <xQueueGenericCreateStatic+0x8a>
 8007aac:	68bb      	ldr	r3, [r7, #8]
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d101      	bne.n	8007ab6 <xQueueGenericCreateStatic+0x8e>
 8007ab2:	2301      	movs	r3, #1
 8007ab4:	e000      	b.n	8007ab8 <xQueueGenericCreateStatic+0x90>
 8007ab6:	2300      	movs	r3, #0
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d10c      	bne.n	8007ad6 <xQueueGenericCreateStatic+0xae>
	__asm volatile
 8007abc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ac0:	b672      	cpsid	i
 8007ac2:	f383 8811 	msr	BASEPRI, r3
 8007ac6:	f3bf 8f6f 	isb	sy
 8007aca:	f3bf 8f4f 	dsb	sy
 8007ace:	b662      	cpsie	i
 8007ad0:	61fb      	str	r3, [r7, #28]
}
 8007ad2:	bf00      	nop
 8007ad4:	e7fe      	b.n	8007ad4 <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8007ad6:	2350      	movs	r3, #80	; 0x50
 8007ad8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8007ada:	697b      	ldr	r3, [r7, #20]
 8007adc:	2b50      	cmp	r3, #80	; 0x50
 8007ade:	d00c      	beq.n	8007afa <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 8007ae0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ae4:	b672      	cpsid	i
 8007ae6:	f383 8811 	msr	BASEPRI, r3
 8007aea:	f3bf 8f6f 	isb	sy
 8007aee:	f3bf 8f4f 	dsb	sy
 8007af2:	b662      	cpsie	i
 8007af4:	61bb      	str	r3, [r7, #24]
}
 8007af6:	bf00      	nop
 8007af8:	e7fe      	b.n	8007af8 <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8007afa:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007afc:	683b      	ldr	r3, [r7, #0]
 8007afe:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8007b00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d00d      	beq.n	8007b22 <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007b06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b08:	2201      	movs	r2, #1
 8007b0a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007b0e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8007b12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b14:	9300      	str	r3, [sp, #0]
 8007b16:	4613      	mov	r3, r2
 8007b18:	687a      	ldr	r2, [r7, #4]
 8007b1a:	68b9      	ldr	r1, [r7, #8]
 8007b1c:	68f8      	ldr	r0, [r7, #12]
 8007b1e:	f000 f847 	bl	8007bb0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007b22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8007b24:	4618      	mov	r0, r3
 8007b26:	3730      	adds	r7, #48	; 0x30
 8007b28:	46bd      	mov	sp, r7
 8007b2a:	bd80      	pop	{r7, pc}

08007b2c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8007b2c:	b580      	push	{r7, lr}
 8007b2e:	b08a      	sub	sp, #40	; 0x28
 8007b30:	af02      	add	r7, sp, #8
 8007b32:	60f8      	str	r0, [r7, #12]
 8007b34:	60b9      	str	r1, [r7, #8]
 8007b36:	4613      	mov	r3, r2
 8007b38:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d10c      	bne.n	8007b5a <xQueueGenericCreate+0x2e>
	__asm volatile
 8007b40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b44:	b672      	cpsid	i
 8007b46:	f383 8811 	msr	BASEPRI, r3
 8007b4a:	f3bf 8f6f 	isb	sy
 8007b4e:	f3bf 8f4f 	dsb	sy
 8007b52:	b662      	cpsie	i
 8007b54:	613b      	str	r3, [r7, #16]
}
 8007b56:	bf00      	nop
 8007b58:	e7fe      	b.n	8007b58 <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8007b5a:	68bb      	ldr	r3, [r7, #8]
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d102      	bne.n	8007b66 <xQueueGenericCreate+0x3a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8007b60:	2300      	movs	r3, #0
 8007b62:	61fb      	str	r3, [r7, #28]
 8007b64:	e004      	b.n	8007b70 <xQueueGenericCreate+0x44>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	68ba      	ldr	r2, [r7, #8]
 8007b6a:	fb02 f303 	mul.w	r3, r2, r3
 8007b6e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8007b70:	69fb      	ldr	r3, [r7, #28]
 8007b72:	3350      	adds	r3, #80	; 0x50
 8007b74:	4618      	mov	r0, r3
 8007b76:	f002 ffd5 	bl	800ab24 <pvPortMalloc>
 8007b7a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8007b7c:	69bb      	ldr	r3, [r7, #24]
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d011      	beq.n	8007ba6 <xQueueGenericCreate+0x7a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8007b82:	69bb      	ldr	r3, [r7, #24]
 8007b84:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007b86:	697b      	ldr	r3, [r7, #20]
 8007b88:	3350      	adds	r3, #80	; 0x50
 8007b8a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8007b8c:	69bb      	ldr	r3, [r7, #24]
 8007b8e:	2200      	movs	r2, #0
 8007b90:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007b94:	79fa      	ldrb	r2, [r7, #7]
 8007b96:	69bb      	ldr	r3, [r7, #24]
 8007b98:	9300      	str	r3, [sp, #0]
 8007b9a:	4613      	mov	r3, r2
 8007b9c:	697a      	ldr	r2, [r7, #20]
 8007b9e:	68b9      	ldr	r1, [r7, #8]
 8007ba0:	68f8      	ldr	r0, [r7, #12]
 8007ba2:	f000 f805 	bl	8007bb0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007ba6:	69bb      	ldr	r3, [r7, #24]
	}
 8007ba8:	4618      	mov	r0, r3
 8007baa:	3720      	adds	r7, #32
 8007bac:	46bd      	mov	sp, r7
 8007bae:	bd80      	pop	{r7, pc}

08007bb0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007bb0:	b580      	push	{r7, lr}
 8007bb2:	b084      	sub	sp, #16
 8007bb4:	af00      	add	r7, sp, #0
 8007bb6:	60f8      	str	r0, [r7, #12]
 8007bb8:	60b9      	str	r1, [r7, #8]
 8007bba:	607a      	str	r2, [r7, #4]
 8007bbc:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007bbe:	68bb      	ldr	r3, [r7, #8]
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d103      	bne.n	8007bcc <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007bc4:	69bb      	ldr	r3, [r7, #24]
 8007bc6:	69ba      	ldr	r2, [r7, #24]
 8007bc8:	601a      	str	r2, [r3, #0]
 8007bca:	e002      	b.n	8007bd2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007bcc:	69bb      	ldr	r3, [r7, #24]
 8007bce:	687a      	ldr	r2, [r7, #4]
 8007bd0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007bd2:	69bb      	ldr	r3, [r7, #24]
 8007bd4:	68fa      	ldr	r2, [r7, #12]
 8007bd6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007bd8:	69bb      	ldr	r3, [r7, #24]
 8007bda:	68ba      	ldr	r2, [r7, #8]
 8007bdc:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007bde:	2101      	movs	r1, #1
 8007be0:	69b8      	ldr	r0, [r7, #24]
 8007be2:	f7ff feb7 	bl	8007954 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8007be6:	69bb      	ldr	r3, [r7, #24]
 8007be8:	78fa      	ldrb	r2, [r7, #3]
 8007bea:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007bee:	bf00      	nop
 8007bf0:	3710      	adds	r7, #16
 8007bf2:	46bd      	mov	sp, r7
 8007bf4:	bd80      	pop	{r7, pc}

08007bf6 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8007bf6:	b580      	push	{r7, lr}
 8007bf8:	b082      	sub	sp, #8
 8007bfa:	af00      	add	r7, sp, #0
 8007bfc:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d00e      	beq.n	8007c22 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	2200      	movs	r2, #0
 8007c08:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	2200      	movs	r2, #0
 8007c0e:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	2200      	movs	r2, #0
 8007c14:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8007c16:	2300      	movs	r3, #0
 8007c18:	2200      	movs	r2, #0
 8007c1a:	2100      	movs	r1, #0
 8007c1c:	6878      	ldr	r0, [r7, #4]
 8007c1e:	f000 f8a5 	bl	8007d6c <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8007c22:	bf00      	nop
 8007c24:	3708      	adds	r7, #8
 8007c26:	46bd      	mov	sp, r7
 8007c28:	bd80      	pop	{r7, pc}

08007c2a <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8007c2a:	b580      	push	{r7, lr}
 8007c2c:	b086      	sub	sp, #24
 8007c2e:	af00      	add	r7, sp, #0
 8007c30:	4603      	mov	r3, r0
 8007c32:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8007c34:	2301      	movs	r3, #1
 8007c36:	617b      	str	r3, [r7, #20]
 8007c38:	2300      	movs	r3, #0
 8007c3a:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8007c3c:	79fb      	ldrb	r3, [r7, #7]
 8007c3e:	461a      	mov	r2, r3
 8007c40:	6939      	ldr	r1, [r7, #16]
 8007c42:	6978      	ldr	r0, [r7, #20]
 8007c44:	f7ff ff72 	bl	8007b2c <xQueueGenericCreate>
 8007c48:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8007c4a:	68f8      	ldr	r0, [r7, #12]
 8007c4c:	f7ff ffd3 	bl	8007bf6 <prvInitialiseMutex>

		return xNewQueue;
 8007c50:	68fb      	ldr	r3, [r7, #12]
	}
 8007c52:	4618      	mov	r0, r3
 8007c54:	3718      	adds	r7, #24
 8007c56:	46bd      	mov	sp, r7
 8007c58:	bd80      	pop	{r7, pc}

08007c5a <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8007c5a:	b580      	push	{r7, lr}
 8007c5c:	b088      	sub	sp, #32
 8007c5e:	af02      	add	r7, sp, #8
 8007c60:	4603      	mov	r3, r0
 8007c62:	6039      	str	r1, [r7, #0]
 8007c64:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8007c66:	2301      	movs	r3, #1
 8007c68:	617b      	str	r3, [r7, #20]
 8007c6a:	2300      	movs	r3, #0
 8007c6c:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8007c6e:	79fb      	ldrb	r3, [r7, #7]
 8007c70:	9300      	str	r3, [sp, #0]
 8007c72:	683b      	ldr	r3, [r7, #0]
 8007c74:	2200      	movs	r2, #0
 8007c76:	6939      	ldr	r1, [r7, #16]
 8007c78:	6978      	ldr	r0, [r7, #20]
 8007c7a:	f7ff fed5 	bl	8007a28 <xQueueGenericCreateStatic>
 8007c7e:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8007c80:	68f8      	ldr	r0, [r7, #12]
 8007c82:	f7ff ffb8 	bl	8007bf6 <prvInitialiseMutex>

		return xNewQueue;
 8007c86:	68fb      	ldr	r3, [r7, #12]
	}
 8007c88:	4618      	mov	r0, r3
 8007c8a:	3718      	adds	r7, #24
 8007c8c:	46bd      	mov	sp, r7
 8007c8e:	bd80      	pop	{r7, pc}

08007c90 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8007c90:	b590      	push	{r4, r7, lr}
 8007c92:	b087      	sub	sp, #28
 8007c94:	af00      	add	r7, sp, #0
 8007c96:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8007c9c:	693b      	ldr	r3, [r7, #16]
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d10c      	bne.n	8007cbc <xQueueGiveMutexRecursive+0x2c>
	__asm volatile
 8007ca2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ca6:	b672      	cpsid	i
 8007ca8:	f383 8811 	msr	BASEPRI, r3
 8007cac:	f3bf 8f6f 	isb	sy
 8007cb0:	f3bf 8f4f 	dsb	sy
 8007cb4:	b662      	cpsie	i
 8007cb6:	60fb      	str	r3, [r7, #12]
}
 8007cb8:	bf00      	nop
 8007cba:	e7fe      	b.n	8007cba <xQueueGiveMutexRecursive+0x2a>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8007cbc:	693b      	ldr	r3, [r7, #16]
 8007cbe:	689c      	ldr	r4, [r3, #8]
 8007cc0:	f001 fce6 	bl	8009690 <xTaskGetCurrentTaskHandle>
 8007cc4:	4603      	mov	r3, r0
 8007cc6:	429c      	cmp	r4, r3
 8007cc8:	d111      	bne.n	8007cee <xQueueGiveMutexRecursive+0x5e>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8007cca:	693b      	ldr	r3, [r7, #16]
 8007ccc:	68db      	ldr	r3, [r3, #12]
 8007cce:	1e5a      	subs	r2, r3, #1
 8007cd0:	693b      	ldr	r3, [r7, #16]
 8007cd2:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8007cd4:	693b      	ldr	r3, [r7, #16]
 8007cd6:	68db      	ldr	r3, [r3, #12]
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d105      	bne.n	8007ce8 <xQueueGiveMutexRecursive+0x58>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8007cdc:	2300      	movs	r3, #0
 8007cde:	2200      	movs	r2, #0
 8007ce0:	2100      	movs	r1, #0
 8007ce2:	6938      	ldr	r0, [r7, #16]
 8007ce4:	f000 f842 	bl	8007d6c <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8007ce8:	2301      	movs	r3, #1
 8007cea:	617b      	str	r3, [r7, #20]
 8007cec:	e001      	b.n	8007cf2 <xQueueGiveMutexRecursive+0x62>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 8007cee:	2300      	movs	r3, #0
 8007cf0:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 8007cf2:	697b      	ldr	r3, [r7, #20]
	}
 8007cf4:	4618      	mov	r0, r3
 8007cf6:	371c      	adds	r7, #28
 8007cf8:	46bd      	mov	sp, r7
 8007cfa:	bd90      	pop	{r4, r7, pc}

08007cfc <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 8007cfc:	b590      	push	{r4, r7, lr}
 8007cfe:	b087      	sub	sp, #28
 8007d00:	af00      	add	r7, sp, #0
 8007d02:	6078      	str	r0, [r7, #4]
 8007d04:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8007d0a:	693b      	ldr	r3, [r7, #16]
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d10c      	bne.n	8007d2a <xQueueTakeMutexRecursive+0x2e>
	__asm volatile
 8007d10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d14:	b672      	cpsid	i
 8007d16:	f383 8811 	msr	BASEPRI, r3
 8007d1a:	f3bf 8f6f 	isb	sy
 8007d1e:	f3bf 8f4f 	dsb	sy
 8007d22:	b662      	cpsie	i
 8007d24:	60fb      	str	r3, [r7, #12]
}
 8007d26:	bf00      	nop
 8007d28:	e7fe      	b.n	8007d28 <xQueueTakeMutexRecursive+0x2c>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8007d2a:	693b      	ldr	r3, [r7, #16]
 8007d2c:	689c      	ldr	r4, [r3, #8]
 8007d2e:	f001 fcaf 	bl	8009690 <xTaskGetCurrentTaskHandle>
 8007d32:	4603      	mov	r3, r0
 8007d34:	429c      	cmp	r4, r3
 8007d36:	d107      	bne.n	8007d48 <xQueueTakeMutexRecursive+0x4c>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8007d38:	693b      	ldr	r3, [r7, #16]
 8007d3a:	68db      	ldr	r3, [r3, #12]
 8007d3c:	1c5a      	adds	r2, r3, #1
 8007d3e:	693b      	ldr	r3, [r7, #16]
 8007d40:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 8007d42:	2301      	movs	r3, #1
 8007d44:	617b      	str	r3, [r7, #20]
 8007d46:	e00c      	b.n	8007d62 <xQueueTakeMutexRecursive+0x66>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8007d48:	6839      	ldr	r1, [r7, #0]
 8007d4a:	6938      	ldr	r0, [r7, #16]
 8007d4c:	f000 fa9a 	bl	8008284 <xQueueSemaphoreTake>
 8007d50:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 8007d52:	697b      	ldr	r3, [r7, #20]
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d004      	beq.n	8007d62 <xQueueTakeMutexRecursive+0x66>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8007d58:	693b      	ldr	r3, [r7, #16]
 8007d5a:	68db      	ldr	r3, [r3, #12]
 8007d5c:	1c5a      	adds	r2, r3, #1
 8007d5e:	693b      	ldr	r3, [r7, #16]
 8007d60:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 8007d62:	697b      	ldr	r3, [r7, #20]
	}
 8007d64:	4618      	mov	r0, r3
 8007d66:	371c      	adds	r7, #28
 8007d68:	46bd      	mov	sp, r7
 8007d6a:	bd90      	pop	{r4, r7, pc}

08007d6c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007d6c:	b580      	push	{r7, lr}
 8007d6e:	b08e      	sub	sp, #56	; 0x38
 8007d70:	af00      	add	r7, sp, #0
 8007d72:	60f8      	str	r0, [r7, #12]
 8007d74:	60b9      	str	r1, [r7, #8]
 8007d76:	607a      	str	r2, [r7, #4]
 8007d78:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8007d7a:	2300      	movs	r3, #0
 8007d7c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007d82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d10c      	bne.n	8007da2 <xQueueGenericSend+0x36>
	__asm volatile
 8007d88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d8c:	b672      	cpsid	i
 8007d8e:	f383 8811 	msr	BASEPRI, r3
 8007d92:	f3bf 8f6f 	isb	sy
 8007d96:	f3bf 8f4f 	dsb	sy
 8007d9a:	b662      	cpsie	i
 8007d9c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007d9e:	bf00      	nop
 8007da0:	e7fe      	b.n	8007da0 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007da2:	68bb      	ldr	r3, [r7, #8]
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d103      	bne.n	8007db0 <xQueueGenericSend+0x44>
 8007da8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007daa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d101      	bne.n	8007db4 <xQueueGenericSend+0x48>
 8007db0:	2301      	movs	r3, #1
 8007db2:	e000      	b.n	8007db6 <xQueueGenericSend+0x4a>
 8007db4:	2300      	movs	r3, #0
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d10c      	bne.n	8007dd4 <xQueueGenericSend+0x68>
	__asm volatile
 8007dba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dbe:	b672      	cpsid	i
 8007dc0:	f383 8811 	msr	BASEPRI, r3
 8007dc4:	f3bf 8f6f 	isb	sy
 8007dc8:	f3bf 8f4f 	dsb	sy
 8007dcc:	b662      	cpsie	i
 8007dce:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007dd0:	bf00      	nop
 8007dd2:	e7fe      	b.n	8007dd2 <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007dd4:	683b      	ldr	r3, [r7, #0]
 8007dd6:	2b02      	cmp	r3, #2
 8007dd8:	d103      	bne.n	8007de2 <xQueueGenericSend+0x76>
 8007dda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ddc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007dde:	2b01      	cmp	r3, #1
 8007de0:	d101      	bne.n	8007de6 <xQueueGenericSend+0x7a>
 8007de2:	2301      	movs	r3, #1
 8007de4:	e000      	b.n	8007de8 <xQueueGenericSend+0x7c>
 8007de6:	2300      	movs	r3, #0
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d10c      	bne.n	8007e06 <xQueueGenericSend+0x9a>
	__asm volatile
 8007dec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007df0:	b672      	cpsid	i
 8007df2:	f383 8811 	msr	BASEPRI, r3
 8007df6:	f3bf 8f6f 	isb	sy
 8007dfa:	f3bf 8f4f 	dsb	sy
 8007dfe:	b662      	cpsie	i
 8007e00:	623b      	str	r3, [r7, #32]
}
 8007e02:	bf00      	nop
 8007e04:	e7fe      	b.n	8007e04 <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007e06:	f001 fc53 	bl	80096b0 <xTaskGetSchedulerState>
 8007e0a:	4603      	mov	r3, r0
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d102      	bne.n	8007e16 <xQueueGenericSend+0xaa>
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d101      	bne.n	8007e1a <xQueueGenericSend+0xae>
 8007e16:	2301      	movs	r3, #1
 8007e18:	e000      	b.n	8007e1c <xQueueGenericSend+0xb0>
 8007e1a:	2300      	movs	r3, #0
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d10c      	bne.n	8007e3a <xQueueGenericSend+0xce>
	__asm volatile
 8007e20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e24:	b672      	cpsid	i
 8007e26:	f383 8811 	msr	BASEPRI, r3
 8007e2a:	f3bf 8f6f 	isb	sy
 8007e2e:	f3bf 8f4f 	dsb	sy
 8007e32:	b662      	cpsie	i
 8007e34:	61fb      	str	r3, [r7, #28]
}
 8007e36:	bf00      	nop
 8007e38:	e7fe      	b.n	8007e38 <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007e3a:	f002 fd47 	bl	800a8cc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007e3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e40:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007e42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e46:	429a      	cmp	r2, r3
 8007e48:	d302      	bcc.n	8007e50 <xQueueGenericSend+0xe4>
 8007e4a:	683b      	ldr	r3, [r7, #0]
 8007e4c:	2b02      	cmp	r3, #2
 8007e4e:	d129      	bne.n	8007ea4 <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007e50:	683a      	ldr	r2, [r7, #0]
 8007e52:	68b9      	ldr	r1, [r7, #8]
 8007e54:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007e56:	f000 fbc7 	bl	80085e8 <prvCopyDataToQueue>
 8007e5a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007e5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d010      	beq.n	8007e86 <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007e64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e66:	3324      	adds	r3, #36	; 0x24
 8007e68:	4618      	mov	r0, r3
 8007e6a:	f001 fa49 	bl	8009300 <xTaskRemoveFromEventList>
 8007e6e:	4603      	mov	r3, r0
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d013      	beq.n	8007e9c <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007e74:	4b3f      	ldr	r3, [pc, #252]	; (8007f74 <xQueueGenericSend+0x208>)
 8007e76:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007e7a:	601a      	str	r2, [r3, #0]
 8007e7c:	f3bf 8f4f 	dsb	sy
 8007e80:	f3bf 8f6f 	isb	sy
 8007e84:	e00a      	b.n	8007e9c <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8007e86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d007      	beq.n	8007e9c <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007e8c:	4b39      	ldr	r3, [pc, #228]	; (8007f74 <xQueueGenericSend+0x208>)
 8007e8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007e92:	601a      	str	r2, [r3, #0]
 8007e94:	f3bf 8f4f 	dsb	sy
 8007e98:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007e9c:	f002 fd4a 	bl	800a934 <vPortExitCritical>
				return pdPASS;
 8007ea0:	2301      	movs	r3, #1
 8007ea2:	e063      	b.n	8007f6c <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d103      	bne.n	8007eb2 <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007eaa:	f002 fd43 	bl	800a934 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8007eae:	2300      	movs	r3, #0
 8007eb0:	e05c      	b.n	8007f6c <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007eb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d106      	bne.n	8007ec6 <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007eb8:	f107 0314 	add.w	r3, r7, #20
 8007ebc:	4618      	mov	r0, r3
 8007ebe:	f001 fa85 	bl	80093cc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007ec2:	2301      	movs	r3, #1
 8007ec4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007ec6:	f002 fd35 	bl	800a934 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007eca:	f000 ffeb 	bl	8008ea4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007ece:	f002 fcfd 	bl	800a8cc <vPortEnterCritical>
 8007ed2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ed4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007ed8:	b25b      	sxtb	r3, r3
 8007eda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ede:	d103      	bne.n	8007ee8 <xQueueGenericSend+0x17c>
 8007ee0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ee2:	2200      	movs	r2, #0
 8007ee4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007ee8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007eea:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007eee:	b25b      	sxtb	r3, r3
 8007ef0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ef4:	d103      	bne.n	8007efe <xQueueGenericSend+0x192>
 8007ef6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ef8:	2200      	movs	r2, #0
 8007efa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007efe:	f002 fd19 	bl	800a934 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007f02:	1d3a      	adds	r2, r7, #4
 8007f04:	f107 0314 	add.w	r3, r7, #20
 8007f08:	4611      	mov	r1, r2
 8007f0a:	4618      	mov	r0, r3
 8007f0c:	f001 fa74 	bl	80093f8 <xTaskCheckForTimeOut>
 8007f10:	4603      	mov	r3, r0
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d124      	bne.n	8007f60 <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8007f16:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007f18:	f000 fc5e 	bl	80087d8 <prvIsQueueFull>
 8007f1c:	4603      	mov	r3, r0
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d018      	beq.n	8007f54 <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007f22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f24:	3310      	adds	r3, #16
 8007f26:	687a      	ldr	r2, [r7, #4]
 8007f28:	4611      	mov	r1, r2
 8007f2a:	4618      	mov	r0, r3
 8007f2c:	f001 f994 	bl	8009258 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007f30:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007f32:	f000 fbe9 	bl	8008708 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8007f36:	f000 ffc3 	bl	8008ec0 <xTaskResumeAll>
 8007f3a:	4603      	mov	r3, r0
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	f47f af7c 	bne.w	8007e3a <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 8007f42:	4b0c      	ldr	r3, [pc, #48]	; (8007f74 <xQueueGenericSend+0x208>)
 8007f44:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007f48:	601a      	str	r2, [r3, #0]
 8007f4a:	f3bf 8f4f 	dsb	sy
 8007f4e:	f3bf 8f6f 	isb	sy
 8007f52:	e772      	b.n	8007e3a <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007f54:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007f56:	f000 fbd7 	bl	8008708 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007f5a:	f000 ffb1 	bl	8008ec0 <xTaskResumeAll>
 8007f5e:	e76c      	b.n	8007e3a <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007f60:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007f62:	f000 fbd1 	bl	8008708 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007f66:	f000 ffab 	bl	8008ec0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8007f6a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8007f6c:	4618      	mov	r0, r3
 8007f6e:	3738      	adds	r7, #56	; 0x38
 8007f70:	46bd      	mov	sp, r7
 8007f72:	bd80      	pop	{r7, pc}
 8007f74:	e000ed04 	.word	0xe000ed04

08007f78 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007f78:	b580      	push	{r7, lr}
 8007f7a:	b08e      	sub	sp, #56	; 0x38
 8007f7c:	af00      	add	r7, sp, #0
 8007f7e:	60f8      	str	r0, [r7, #12]
 8007f80:	60b9      	str	r1, [r7, #8]
 8007f82:	607a      	str	r2, [r7, #4]
 8007f84:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007f8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d10c      	bne.n	8007faa <xQueueGenericSendFromISR+0x32>
	__asm volatile
 8007f90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f94:	b672      	cpsid	i
 8007f96:	f383 8811 	msr	BASEPRI, r3
 8007f9a:	f3bf 8f6f 	isb	sy
 8007f9e:	f3bf 8f4f 	dsb	sy
 8007fa2:	b662      	cpsie	i
 8007fa4:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007fa6:	bf00      	nop
 8007fa8:	e7fe      	b.n	8007fa8 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007faa:	68bb      	ldr	r3, [r7, #8]
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d103      	bne.n	8007fb8 <xQueueGenericSendFromISR+0x40>
 8007fb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d101      	bne.n	8007fbc <xQueueGenericSendFromISR+0x44>
 8007fb8:	2301      	movs	r3, #1
 8007fba:	e000      	b.n	8007fbe <xQueueGenericSendFromISR+0x46>
 8007fbc:	2300      	movs	r3, #0
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d10c      	bne.n	8007fdc <xQueueGenericSendFromISR+0x64>
	__asm volatile
 8007fc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fc6:	b672      	cpsid	i
 8007fc8:	f383 8811 	msr	BASEPRI, r3
 8007fcc:	f3bf 8f6f 	isb	sy
 8007fd0:	f3bf 8f4f 	dsb	sy
 8007fd4:	b662      	cpsie	i
 8007fd6:	623b      	str	r3, [r7, #32]
}
 8007fd8:	bf00      	nop
 8007fda:	e7fe      	b.n	8007fda <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007fdc:	683b      	ldr	r3, [r7, #0]
 8007fde:	2b02      	cmp	r3, #2
 8007fe0:	d103      	bne.n	8007fea <xQueueGenericSendFromISR+0x72>
 8007fe2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fe4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007fe6:	2b01      	cmp	r3, #1
 8007fe8:	d101      	bne.n	8007fee <xQueueGenericSendFromISR+0x76>
 8007fea:	2301      	movs	r3, #1
 8007fec:	e000      	b.n	8007ff0 <xQueueGenericSendFromISR+0x78>
 8007fee:	2300      	movs	r3, #0
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d10c      	bne.n	800800e <xQueueGenericSendFromISR+0x96>
	__asm volatile
 8007ff4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ff8:	b672      	cpsid	i
 8007ffa:	f383 8811 	msr	BASEPRI, r3
 8007ffe:	f3bf 8f6f 	isb	sy
 8008002:	f3bf 8f4f 	dsb	sy
 8008006:	b662      	cpsie	i
 8008008:	61fb      	str	r3, [r7, #28]
}
 800800a:	bf00      	nop
 800800c:	e7fe      	b.n	800800c <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800800e:	f002 fd45 	bl	800aa9c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8008012:	f3ef 8211 	mrs	r2, BASEPRI
 8008016:	f04f 0350 	mov.w	r3, #80	; 0x50
 800801a:	b672      	cpsid	i
 800801c:	f383 8811 	msr	BASEPRI, r3
 8008020:	f3bf 8f6f 	isb	sy
 8008024:	f3bf 8f4f 	dsb	sy
 8008028:	b662      	cpsie	i
 800802a:	61ba      	str	r2, [r7, #24]
 800802c:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800802e:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008030:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008032:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008034:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008036:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008038:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800803a:	429a      	cmp	r2, r3
 800803c:	d302      	bcc.n	8008044 <xQueueGenericSendFromISR+0xcc>
 800803e:	683b      	ldr	r3, [r7, #0]
 8008040:	2b02      	cmp	r3, #2
 8008042:	d12c      	bne.n	800809e <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008044:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008046:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800804a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800804e:	683a      	ldr	r2, [r7, #0]
 8008050:	68b9      	ldr	r1, [r7, #8]
 8008052:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008054:	f000 fac8 	bl	80085e8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008058:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800805c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008060:	d112      	bne.n	8008088 <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008062:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008064:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008066:	2b00      	cmp	r3, #0
 8008068:	d016      	beq.n	8008098 <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800806a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800806c:	3324      	adds	r3, #36	; 0x24
 800806e:	4618      	mov	r0, r3
 8008070:	f001 f946 	bl	8009300 <xTaskRemoveFromEventList>
 8008074:	4603      	mov	r3, r0
 8008076:	2b00      	cmp	r3, #0
 8008078:	d00e      	beq.n	8008098 <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	2b00      	cmp	r3, #0
 800807e:	d00b      	beq.n	8008098 <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	2201      	movs	r2, #1
 8008084:	601a      	str	r2, [r3, #0]
 8008086:	e007      	b.n	8008098 <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008088:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800808c:	3301      	adds	r3, #1
 800808e:	b2db      	uxtb	r3, r3
 8008090:	b25a      	sxtb	r2, r3
 8008092:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008094:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8008098:	2301      	movs	r3, #1
 800809a:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800809c:	e001      	b.n	80080a2 <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800809e:	2300      	movs	r3, #0
 80080a0:	637b      	str	r3, [r7, #52]	; 0x34
 80080a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080a4:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80080a6:	693b      	ldr	r3, [r7, #16]
 80080a8:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80080ac:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80080ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80080b0:	4618      	mov	r0, r3
 80080b2:	3738      	adds	r7, #56	; 0x38
 80080b4:	46bd      	mov	sp, r7
 80080b6:	bd80      	pop	{r7, pc}

080080b8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80080b8:	b580      	push	{r7, lr}
 80080ba:	b08c      	sub	sp, #48	; 0x30
 80080bc:	af00      	add	r7, sp, #0
 80080be:	60f8      	str	r0, [r7, #12]
 80080c0:	60b9      	str	r1, [r7, #8]
 80080c2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80080c4:	2300      	movs	r3, #0
 80080c6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80080cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d10c      	bne.n	80080ec <xQueueReceive+0x34>
	__asm volatile
 80080d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080d6:	b672      	cpsid	i
 80080d8:	f383 8811 	msr	BASEPRI, r3
 80080dc:	f3bf 8f6f 	isb	sy
 80080e0:	f3bf 8f4f 	dsb	sy
 80080e4:	b662      	cpsie	i
 80080e6:	623b      	str	r3, [r7, #32]
}
 80080e8:	bf00      	nop
 80080ea:	e7fe      	b.n	80080ea <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80080ec:	68bb      	ldr	r3, [r7, #8]
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d103      	bne.n	80080fa <xQueueReceive+0x42>
 80080f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d101      	bne.n	80080fe <xQueueReceive+0x46>
 80080fa:	2301      	movs	r3, #1
 80080fc:	e000      	b.n	8008100 <xQueueReceive+0x48>
 80080fe:	2300      	movs	r3, #0
 8008100:	2b00      	cmp	r3, #0
 8008102:	d10c      	bne.n	800811e <xQueueReceive+0x66>
	__asm volatile
 8008104:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008108:	b672      	cpsid	i
 800810a:	f383 8811 	msr	BASEPRI, r3
 800810e:	f3bf 8f6f 	isb	sy
 8008112:	f3bf 8f4f 	dsb	sy
 8008116:	b662      	cpsie	i
 8008118:	61fb      	str	r3, [r7, #28]
}
 800811a:	bf00      	nop
 800811c:	e7fe      	b.n	800811c <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800811e:	f001 fac7 	bl	80096b0 <xTaskGetSchedulerState>
 8008122:	4603      	mov	r3, r0
 8008124:	2b00      	cmp	r3, #0
 8008126:	d102      	bne.n	800812e <xQueueReceive+0x76>
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	2b00      	cmp	r3, #0
 800812c:	d101      	bne.n	8008132 <xQueueReceive+0x7a>
 800812e:	2301      	movs	r3, #1
 8008130:	e000      	b.n	8008134 <xQueueReceive+0x7c>
 8008132:	2300      	movs	r3, #0
 8008134:	2b00      	cmp	r3, #0
 8008136:	d10c      	bne.n	8008152 <xQueueReceive+0x9a>
	__asm volatile
 8008138:	f04f 0350 	mov.w	r3, #80	; 0x50
 800813c:	b672      	cpsid	i
 800813e:	f383 8811 	msr	BASEPRI, r3
 8008142:	f3bf 8f6f 	isb	sy
 8008146:	f3bf 8f4f 	dsb	sy
 800814a:	b662      	cpsie	i
 800814c:	61bb      	str	r3, [r7, #24]
}
 800814e:	bf00      	nop
 8008150:	e7fe      	b.n	8008150 <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008152:	f002 fbbb 	bl	800a8cc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008156:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008158:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800815a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800815c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800815e:	2b00      	cmp	r3, #0
 8008160:	d01f      	beq.n	80081a2 <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008162:	68b9      	ldr	r1, [r7, #8]
 8008164:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008166:	f000 faa9 	bl	80086bc <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800816a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800816c:	1e5a      	subs	r2, r3, #1
 800816e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008170:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008172:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008174:	691b      	ldr	r3, [r3, #16]
 8008176:	2b00      	cmp	r3, #0
 8008178:	d00f      	beq.n	800819a <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800817a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800817c:	3310      	adds	r3, #16
 800817e:	4618      	mov	r0, r3
 8008180:	f001 f8be 	bl	8009300 <xTaskRemoveFromEventList>
 8008184:	4603      	mov	r3, r0
 8008186:	2b00      	cmp	r3, #0
 8008188:	d007      	beq.n	800819a <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800818a:	4b3d      	ldr	r3, [pc, #244]	; (8008280 <xQueueReceive+0x1c8>)
 800818c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008190:	601a      	str	r2, [r3, #0]
 8008192:	f3bf 8f4f 	dsb	sy
 8008196:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800819a:	f002 fbcb 	bl	800a934 <vPortExitCritical>
				return pdPASS;
 800819e:	2301      	movs	r3, #1
 80081a0:	e069      	b.n	8008276 <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d103      	bne.n	80081b0 <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80081a8:	f002 fbc4 	bl	800a934 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80081ac:	2300      	movs	r3, #0
 80081ae:	e062      	b.n	8008276 <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 80081b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d106      	bne.n	80081c4 <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80081b6:	f107 0310 	add.w	r3, r7, #16
 80081ba:	4618      	mov	r0, r3
 80081bc:	f001 f906 	bl	80093cc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80081c0:	2301      	movs	r3, #1
 80081c2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80081c4:	f002 fbb6 	bl	800a934 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80081c8:	f000 fe6c 	bl	8008ea4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80081cc:	f002 fb7e 	bl	800a8cc <vPortEnterCritical>
 80081d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081d2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80081d6:	b25b      	sxtb	r3, r3
 80081d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80081dc:	d103      	bne.n	80081e6 <xQueueReceive+0x12e>
 80081de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081e0:	2200      	movs	r2, #0
 80081e2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80081e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081e8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80081ec:	b25b      	sxtb	r3, r3
 80081ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80081f2:	d103      	bne.n	80081fc <xQueueReceive+0x144>
 80081f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081f6:	2200      	movs	r2, #0
 80081f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80081fc:	f002 fb9a 	bl	800a934 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008200:	1d3a      	adds	r2, r7, #4
 8008202:	f107 0310 	add.w	r3, r7, #16
 8008206:	4611      	mov	r1, r2
 8008208:	4618      	mov	r0, r3
 800820a:	f001 f8f5 	bl	80093f8 <xTaskCheckForTimeOut>
 800820e:	4603      	mov	r3, r0
 8008210:	2b00      	cmp	r3, #0
 8008212:	d123      	bne.n	800825c <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008214:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008216:	f000 fac9 	bl	80087ac <prvIsQueueEmpty>
 800821a:	4603      	mov	r3, r0
 800821c:	2b00      	cmp	r3, #0
 800821e:	d017      	beq.n	8008250 <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008220:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008222:	3324      	adds	r3, #36	; 0x24
 8008224:	687a      	ldr	r2, [r7, #4]
 8008226:	4611      	mov	r1, r2
 8008228:	4618      	mov	r0, r3
 800822a:	f001 f815 	bl	8009258 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800822e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008230:	f000 fa6a 	bl	8008708 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008234:	f000 fe44 	bl	8008ec0 <xTaskResumeAll>
 8008238:	4603      	mov	r3, r0
 800823a:	2b00      	cmp	r3, #0
 800823c:	d189      	bne.n	8008152 <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 800823e:	4b10      	ldr	r3, [pc, #64]	; (8008280 <xQueueReceive+0x1c8>)
 8008240:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008244:	601a      	str	r2, [r3, #0]
 8008246:	f3bf 8f4f 	dsb	sy
 800824a:	f3bf 8f6f 	isb	sy
 800824e:	e780      	b.n	8008152 <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8008250:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008252:	f000 fa59 	bl	8008708 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008256:	f000 fe33 	bl	8008ec0 <xTaskResumeAll>
 800825a:	e77a      	b.n	8008152 <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800825c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800825e:	f000 fa53 	bl	8008708 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008262:	f000 fe2d 	bl	8008ec0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008266:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008268:	f000 faa0 	bl	80087ac <prvIsQueueEmpty>
 800826c:	4603      	mov	r3, r0
 800826e:	2b00      	cmp	r3, #0
 8008270:	f43f af6f 	beq.w	8008152 <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008274:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008276:	4618      	mov	r0, r3
 8008278:	3730      	adds	r7, #48	; 0x30
 800827a:	46bd      	mov	sp, r7
 800827c:	bd80      	pop	{r7, pc}
 800827e:	bf00      	nop
 8008280:	e000ed04 	.word	0xe000ed04

08008284 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8008284:	b580      	push	{r7, lr}
 8008286:	b08e      	sub	sp, #56	; 0x38
 8008288:	af00      	add	r7, sp, #0
 800828a:	6078      	str	r0, [r7, #4]
 800828c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800828e:	2300      	movs	r3, #0
 8008290:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8008296:	2300      	movs	r3, #0
 8008298:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800829a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800829c:	2b00      	cmp	r3, #0
 800829e:	d10c      	bne.n	80082ba <xQueueSemaphoreTake+0x36>
	__asm volatile
 80082a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082a4:	b672      	cpsid	i
 80082a6:	f383 8811 	msr	BASEPRI, r3
 80082aa:	f3bf 8f6f 	isb	sy
 80082ae:	f3bf 8f4f 	dsb	sy
 80082b2:	b662      	cpsie	i
 80082b4:	623b      	str	r3, [r7, #32]
}
 80082b6:	bf00      	nop
 80082b8:	e7fe      	b.n	80082b8 <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80082ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d00c      	beq.n	80082dc <xQueueSemaphoreTake+0x58>
	__asm volatile
 80082c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082c6:	b672      	cpsid	i
 80082c8:	f383 8811 	msr	BASEPRI, r3
 80082cc:	f3bf 8f6f 	isb	sy
 80082d0:	f3bf 8f4f 	dsb	sy
 80082d4:	b662      	cpsie	i
 80082d6:	61fb      	str	r3, [r7, #28]
}
 80082d8:	bf00      	nop
 80082da:	e7fe      	b.n	80082da <xQueueSemaphoreTake+0x56>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80082dc:	f001 f9e8 	bl	80096b0 <xTaskGetSchedulerState>
 80082e0:	4603      	mov	r3, r0
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d102      	bne.n	80082ec <xQueueSemaphoreTake+0x68>
 80082e6:	683b      	ldr	r3, [r7, #0]
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d101      	bne.n	80082f0 <xQueueSemaphoreTake+0x6c>
 80082ec:	2301      	movs	r3, #1
 80082ee:	e000      	b.n	80082f2 <xQueueSemaphoreTake+0x6e>
 80082f0:	2300      	movs	r3, #0
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d10c      	bne.n	8008310 <xQueueSemaphoreTake+0x8c>
	__asm volatile
 80082f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082fa:	b672      	cpsid	i
 80082fc:	f383 8811 	msr	BASEPRI, r3
 8008300:	f3bf 8f6f 	isb	sy
 8008304:	f3bf 8f4f 	dsb	sy
 8008308:	b662      	cpsie	i
 800830a:	61bb      	str	r3, [r7, #24]
}
 800830c:	bf00      	nop
 800830e:	e7fe      	b.n	800830e <xQueueSemaphoreTake+0x8a>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008310:	f002 fadc 	bl	800a8cc <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8008314:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008316:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008318:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800831a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800831c:	2b00      	cmp	r3, #0
 800831e:	d024      	beq.n	800836a <xQueueSemaphoreTake+0xe6>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8008320:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008322:	1e5a      	subs	r2, r3, #1
 8008324:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008326:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008328:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	2b00      	cmp	r3, #0
 800832e:	d104      	bne.n	800833a <xQueueSemaphoreTake+0xb6>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8008330:	f001 fb3c 	bl	80099ac <pvTaskIncrementMutexHeldCount>
 8008334:	4602      	mov	r2, r0
 8008336:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008338:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800833a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800833c:	691b      	ldr	r3, [r3, #16]
 800833e:	2b00      	cmp	r3, #0
 8008340:	d00f      	beq.n	8008362 <xQueueSemaphoreTake+0xde>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008342:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008344:	3310      	adds	r3, #16
 8008346:	4618      	mov	r0, r3
 8008348:	f000 ffda 	bl	8009300 <xTaskRemoveFromEventList>
 800834c:	4603      	mov	r3, r0
 800834e:	2b00      	cmp	r3, #0
 8008350:	d007      	beq.n	8008362 <xQueueSemaphoreTake+0xde>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008352:	4b55      	ldr	r3, [pc, #340]	; (80084a8 <xQueueSemaphoreTake+0x224>)
 8008354:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008358:	601a      	str	r2, [r3, #0]
 800835a:	f3bf 8f4f 	dsb	sy
 800835e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008362:	f002 fae7 	bl	800a934 <vPortExitCritical>
				return pdPASS;
 8008366:	2301      	movs	r3, #1
 8008368:	e099      	b.n	800849e <xQueueSemaphoreTake+0x21a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800836a:	683b      	ldr	r3, [r7, #0]
 800836c:	2b00      	cmp	r3, #0
 800836e:	d113      	bne.n	8008398 <xQueueSemaphoreTake+0x114>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8008370:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008372:	2b00      	cmp	r3, #0
 8008374:	d00c      	beq.n	8008390 <xQueueSemaphoreTake+0x10c>
	__asm volatile
 8008376:	f04f 0350 	mov.w	r3, #80	; 0x50
 800837a:	b672      	cpsid	i
 800837c:	f383 8811 	msr	BASEPRI, r3
 8008380:	f3bf 8f6f 	isb	sy
 8008384:	f3bf 8f4f 	dsb	sy
 8008388:	b662      	cpsie	i
 800838a:	617b      	str	r3, [r7, #20]
}
 800838c:	bf00      	nop
 800838e:	e7fe      	b.n	800838e <xQueueSemaphoreTake+0x10a>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8008390:	f002 fad0 	bl	800a934 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008394:	2300      	movs	r3, #0
 8008396:	e082      	b.n	800849e <xQueueSemaphoreTake+0x21a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008398:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800839a:	2b00      	cmp	r3, #0
 800839c:	d106      	bne.n	80083ac <xQueueSemaphoreTake+0x128>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800839e:	f107 030c 	add.w	r3, r7, #12
 80083a2:	4618      	mov	r0, r3
 80083a4:	f001 f812 	bl	80093cc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80083a8:	2301      	movs	r3, #1
 80083aa:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80083ac:	f002 fac2 	bl	800a934 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80083b0:	f000 fd78 	bl	8008ea4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80083b4:	f002 fa8a 	bl	800a8cc <vPortEnterCritical>
 80083b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083ba:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80083be:	b25b      	sxtb	r3, r3
 80083c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80083c4:	d103      	bne.n	80083ce <xQueueSemaphoreTake+0x14a>
 80083c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083c8:	2200      	movs	r2, #0
 80083ca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80083ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083d0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80083d4:	b25b      	sxtb	r3, r3
 80083d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80083da:	d103      	bne.n	80083e4 <xQueueSemaphoreTake+0x160>
 80083dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083de:	2200      	movs	r2, #0
 80083e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80083e4:	f002 faa6 	bl	800a934 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80083e8:	463a      	mov	r2, r7
 80083ea:	f107 030c 	add.w	r3, r7, #12
 80083ee:	4611      	mov	r1, r2
 80083f0:	4618      	mov	r0, r3
 80083f2:	f001 f801 	bl	80093f8 <xTaskCheckForTimeOut>
 80083f6:	4603      	mov	r3, r0
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d132      	bne.n	8008462 <xQueueSemaphoreTake+0x1de>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80083fc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80083fe:	f000 f9d5 	bl	80087ac <prvIsQueueEmpty>
 8008402:	4603      	mov	r3, r0
 8008404:	2b00      	cmp	r3, #0
 8008406:	d026      	beq.n	8008456 <xQueueSemaphoreTake+0x1d2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008408:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	2b00      	cmp	r3, #0
 800840e:	d109      	bne.n	8008424 <xQueueSemaphoreTake+0x1a0>
					{
						taskENTER_CRITICAL();
 8008410:	f002 fa5c 	bl	800a8cc <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008414:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008416:	689b      	ldr	r3, [r3, #8]
 8008418:	4618      	mov	r0, r3
 800841a:	f001 f967 	bl	80096ec <xTaskPriorityInherit>
 800841e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8008420:	f002 fa88 	bl	800a934 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008424:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008426:	3324      	adds	r3, #36	; 0x24
 8008428:	683a      	ldr	r2, [r7, #0]
 800842a:	4611      	mov	r1, r2
 800842c:	4618      	mov	r0, r3
 800842e:	f000 ff13 	bl	8009258 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008432:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008434:	f000 f968 	bl	8008708 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008438:	f000 fd42 	bl	8008ec0 <xTaskResumeAll>
 800843c:	4603      	mov	r3, r0
 800843e:	2b00      	cmp	r3, #0
 8008440:	f47f af66 	bne.w	8008310 <xQueueSemaphoreTake+0x8c>
				{
					portYIELD_WITHIN_API();
 8008444:	4b18      	ldr	r3, [pc, #96]	; (80084a8 <xQueueSemaphoreTake+0x224>)
 8008446:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800844a:	601a      	str	r2, [r3, #0]
 800844c:	f3bf 8f4f 	dsb	sy
 8008450:	f3bf 8f6f 	isb	sy
 8008454:	e75c      	b.n	8008310 <xQueueSemaphoreTake+0x8c>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8008456:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008458:	f000 f956 	bl	8008708 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800845c:	f000 fd30 	bl	8008ec0 <xTaskResumeAll>
 8008460:	e756      	b.n	8008310 <xQueueSemaphoreTake+0x8c>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8008462:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008464:	f000 f950 	bl	8008708 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008468:	f000 fd2a 	bl	8008ec0 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800846c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800846e:	f000 f99d 	bl	80087ac <prvIsQueueEmpty>
 8008472:	4603      	mov	r3, r0
 8008474:	2b00      	cmp	r3, #0
 8008476:	f43f af4b 	beq.w	8008310 <xQueueSemaphoreTake+0x8c>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800847a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800847c:	2b00      	cmp	r3, #0
 800847e:	d00d      	beq.n	800849c <xQueueSemaphoreTake+0x218>
					{
						taskENTER_CRITICAL();
 8008480:	f002 fa24 	bl	800a8cc <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8008484:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008486:	f000 f897 	bl	80085b8 <prvGetDisinheritPriorityAfterTimeout>
 800848a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800848c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800848e:	689b      	ldr	r3, [r3, #8]
 8008490:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008492:	4618      	mov	r0, r3
 8008494:	f001 fa04 	bl	80098a0 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8008498:	f002 fa4c 	bl	800a934 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800849c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800849e:	4618      	mov	r0, r3
 80084a0:	3738      	adds	r7, #56	; 0x38
 80084a2:	46bd      	mov	sp, r7
 80084a4:	bd80      	pop	{r7, pc}
 80084a6:	bf00      	nop
 80084a8:	e000ed04 	.word	0xe000ed04

080084ac <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80084ac:	b580      	push	{r7, lr}
 80084ae:	b08e      	sub	sp, #56	; 0x38
 80084b0:	af00      	add	r7, sp, #0
 80084b2:	60f8      	str	r0, [r7, #12]
 80084b4:	60b9      	str	r1, [r7, #8]
 80084b6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80084bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d10c      	bne.n	80084dc <xQueueReceiveFromISR+0x30>
	__asm volatile
 80084c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084c6:	b672      	cpsid	i
 80084c8:	f383 8811 	msr	BASEPRI, r3
 80084cc:	f3bf 8f6f 	isb	sy
 80084d0:	f3bf 8f4f 	dsb	sy
 80084d4:	b662      	cpsie	i
 80084d6:	623b      	str	r3, [r7, #32]
}
 80084d8:	bf00      	nop
 80084da:	e7fe      	b.n	80084da <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80084dc:	68bb      	ldr	r3, [r7, #8]
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d103      	bne.n	80084ea <xQueueReceiveFromISR+0x3e>
 80084e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d101      	bne.n	80084ee <xQueueReceiveFromISR+0x42>
 80084ea:	2301      	movs	r3, #1
 80084ec:	e000      	b.n	80084f0 <xQueueReceiveFromISR+0x44>
 80084ee:	2300      	movs	r3, #0
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d10c      	bne.n	800850e <xQueueReceiveFromISR+0x62>
	__asm volatile
 80084f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084f8:	b672      	cpsid	i
 80084fa:	f383 8811 	msr	BASEPRI, r3
 80084fe:	f3bf 8f6f 	isb	sy
 8008502:	f3bf 8f4f 	dsb	sy
 8008506:	b662      	cpsie	i
 8008508:	61fb      	str	r3, [r7, #28]
}
 800850a:	bf00      	nop
 800850c:	e7fe      	b.n	800850c <xQueueReceiveFromISR+0x60>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800850e:	f002 fac5 	bl	800aa9c <vPortValidateInterruptPriority>
	__asm volatile
 8008512:	f3ef 8211 	mrs	r2, BASEPRI
 8008516:	f04f 0350 	mov.w	r3, #80	; 0x50
 800851a:	b672      	cpsid	i
 800851c:	f383 8811 	msr	BASEPRI, r3
 8008520:	f3bf 8f6f 	isb	sy
 8008524:	f3bf 8f4f 	dsb	sy
 8008528:	b662      	cpsie	i
 800852a:	61ba      	str	r2, [r7, #24]
 800852c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800852e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008530:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008532:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008534:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008536:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008538:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800853a:	2b00      	cmp	r3, #0
 800853c:	d02f      	beq.n	800859e <xQueueReceiveFromISR+0xf2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800853e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008540:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008544:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008548:	68b9      	ldr	r1, [r7, #8]
 800854a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800854c:	f000 f8b6 	bl	80086bc <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008550:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008552:	1e5a      	subs	r2, r3, #1
 8008554:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008556:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8008558:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800855c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008560:	d112      	bne.n	8008588 <xQueueReceiveFromISR+0xdc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008562:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008564:	691b      	ldr	r3, [r3, #16]
 8008566:	2b00      	cmp	r3, #0
 8008568:	d016      	beq.n	8008598 <xQueueReceiveFromISR+0xec>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800856a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800856c:	3310      	adds	r3, #16
 800856e:	4618      	mov	r0, r3
 8008570:	f000 fec6 	bl	8009300 <xTaskRemoveFromEventList>
 8008574:	4603      	mov	r3, r0
 8008576:	2b00      	cmp	r3, #0
 8008578:	d00e      	beq.n	8008598 <xQueueReceiveFromISR+0xec>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	2b00      	cmp	r3, #0
 800857e:	d00b      	beq.n	8008598 <xQueueReceiveFromISR+0xec>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	2201      	movs	r2, #1
 8008584:	601a      	str	r2, [r3, #0]
 8008586:	e007      	b.n	8008598 <xQueueReceiveFromISR+0xec>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8008588:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800858c:	3301      	adds	r3, #1
 800858e:	b2db      	uxtb	r3, r3
 8008590:	b25a      	sxtb	r2, r3
 8008592:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008594:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8008598:	2301      	movs	r3, #1
 800859a:	637b      	str	r3, [r7, #52]	; 0x34
 800859c:	e001      	b.n	80085a2 <xQueueReceiveFromISR+0xf6>
		}
		else
		{
			xReturn = pdFAIL;
 800859e:	2300      	movs	r3, #0
 80085a0:	637b      	str	r3, [r7, #52]	; 0x34
 80085a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085a4:	613b      	str	r3, [r7, #16]
	__asm volatile
 80085a6:	693b      	ldr	r3, [r7, #16]
 80085a8:	f383 8811 	msr	BASEPRI, r3
}
 80085ac:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80085ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80085b0:	4618      	mov	r0, r3
 80085b2:	3738      	adds	r7, #56	; 0x38
 80085b4:	46bd      	mov	sp, r7
 80085b6:	bd80      	pop	{r7, pc}

080085b8 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80085b8:	b480      	push	{r7}
 80085ba:	b085      	sub	sp, #20
 80085bc:	af00      	add	r7, sp, #0
 80085be:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d006      	beq.n	80085d6 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 80085d2:	60fb      	str	r3, [r7, #12]
 80085d4:	e001      	b.n	80085da <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80085d6:	2300      	movs	r3, #0
 80085d8:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80085da:	68fb      	ldr	r3, [r7, #12]
	}
 80085dc:	4618      	mov	r0, r3
 80085de:	3714      	adds	r7, #20
 80085e0:	46bd      	mov	sp, r7
 80085e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085e6:	4770      	bx	lr

080085e8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80085e8:	b580      	push	{r7, lr}
 80085ea:	b086      	sub	sp, #24
 80085ec:	af00      	add	r7, sp, #0
 80085ee:	60f8      	str	r0, [r7, #12]
 80085f0:	60b9      	str	r1, [r7, #8]
 80085f2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80085f4:	2300      	movs	r3, #0
 80085f6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085fc:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008602:	2b00      	cmp	r3, #0
 8008604:	d10d      	bne.n	8008622 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	2b00      	cmp	r3, #0
 800860c:	d14d      	bne.n	80086aa <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	689b      	ldr	r3, [r3, #8]
 8008612:	4618      	mov	r0, r3
 8008614:	f001 f8d2 	bl	80097bc <xTaskPriorityDisinherit>
 8008618:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	2200      	movs	r2, #0
 800861e:	609a      	str	r2, [r3, #8]
 8008620:	e043      	b.n	80086aa <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	2b00      	cmp	r3, #0
 8008626:	d119      	bne.n	800865c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	6858      	ldr	r0, [r3, #4]
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008630:	461a      	mov	r2, r3
 8008632:	68b9      	ldr	r1, [r7, #8]
 8008634:	f00c fd38 	bl	80150a8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	685a      	ldr	r2, [r3, #4]
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008640:	441a      	add	r2, r3
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	685a      	ldr	r2, [r3, #4]
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	689b      	ldr	r3, [r3, #8]
 800864e:	429a      	cmp	r2, r3
 8008650:	d32b      	bcc.n	80086aa <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	681a      	ldr	r2, [r3, #0]
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	605a      	str	r2, [r3, #4]
 800865a:	e026      	b.n	80086aa <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	68d8      	ldr	r0, [r3, #12]
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008664:	461a      	mov	r2, r3
 8008666:	68b9      	ldr	r1, [r7, #8]
 8008668:	f00c fd1e 	bl	80150a8 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	68da      	ldr	r2, [r3, #12]
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008674:	425b      	negs	r3, r3
 8008676:	441a      	add	r2, r3
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	68da      	ldr	r2, [r3, #12]
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	429a      	cmp	r2, r3
 8008686:	d207      	bcs.n	8008698 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	689a      	ldr	r2, [r3, #8]
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008690:	425b      	negs	r3, r3
 8008692:	441a      	add	r2, r3
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	2b02      	cmp	r3, #2
 800869c:	d105      	bne.n	80086aa <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800869e:	693b      	ldr	r3, [r7, #16]
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d002      	beq.n	80086aa <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80086a4:	693b      	ldr	r3, [r7, #16]
 80086a6:	3b01      	subs	r3, #1
 80086a8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80086aa:	693b      	ldr	r3, [r7, #16]
 80086ac:	1c5a      	adds	r2, r3, #1
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80086b2:	697b      	ldr	r3, [r7, #20]
}
 80086b4:	4618      	mov	r0, r3
 80086b6:	3718      	adds	r7, #24
 80086b8:	46bd      	mov	sp, r7
 80086ba:	bd80      	pop	{r7, pc}

080086bc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80086bc:	b580      	push	{r7, lr}
 80086be:	b082      	sub	sp, #8
 80086c0:	af00      	add	r7, sp, #0
 80086c2:	6078      	str	r0, [r7, #4]
 80086c4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d018      	beq.n	8008700 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	68da      	ldr	r2, [r3, #12]
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086d6:	441a      	add	r2, r3
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	68da      	ldr	r2, [r3, #12]
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	689b      	ldr	r3, [r3, #8]
 80086e4:	429a      	cmp	r2, r3
 80086e6:	d303      	bcc.n	80086f0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	681a      	ldr	r2, [r3, #0]
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	68d9      	ldr	r1, [r3, #12]
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086f8:	461a      	mov	r2, r3
 80086fa:	6838      	ldr	r0, [r7, #0]
 80086fc:	f00c fcd4 	bl	80150a8 <memcpy>
	}
}
 8008700:	bf00      	nop
 8008702:	3708      	adds	r7, #8
 8008704:	46bd      	mov	sp, r7
 8008706:	bd80      	pop	{r7, pc}

08008708 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008708:	b580      	push	{r7, lr}
 800870a:	b084      	sub	sp, #16
 800870c:	af00      	add	r7, sp, #0
 800870e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008710:	f002 f8dc 	bl	800a8cc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800871a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800871c:	e011      	b.n	8008742 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008722:	2b00      	cmp	r3, #0
 8008724:	d012      	beq.n	800874c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	3324      	adds	r3, #36	; 0x24
 800872a:	4618      	mov	r0, r3
 800872c:	f000 fde8 	bl	8009300 <xTaskRemoveFromEventList>
 8008730:	4603      	mov	r3, r0
 8008732:	2b00      	cmp	r3, #0
 8008734:	d001      	beq.n	800873a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8008736:	f000 fec5 	bl	80094c4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800873a:	7bfb      	ldrb	r3, [r7, #15]
 800873c:	3b01      	subs	r3, #1
 800873e:	b2db      	uxtb	r3, r3
 8008740:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008742:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008746:	2b00      	cmp	r3, #0
 8008748:	dce9      	bgt.n	800871e <prvUnlockQueue+0x16>
 800874a:	e000      	b.n	800874e <prvUnlockQueue+0x46>
					break;
 800874c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	22ff      	movs	r2, #255	; 0xff
 8008752:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8008756:	f002 f8ed 	bl	800a934 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800875a:	f002 f8b7 	bl	800a8cc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008764:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008766:	e011      	b.n	800878c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	691b      	ldr	r3, [r3, #16]
 800876c:	2b00      	cmp	r3, #0
 800876e:	d012      	beq.n	8008796 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	3310      	adds	r3, #16
 8008774:	4618      	mov	r0, r3
 8008776:	f000 fdc3 	bl	8009300 <xTaskRemoveFromEventList>
 800877a:	4603      	mov	r3, r0
 800877c:	2b00      	cmp	r3, #0
 800877e:	d001      	beq.n	8008784 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008780:	f000 fea0 	bl	80094c4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008784:	7bbb      	ldrb	r3, [r7, #14]
 8008786:	3b01      	subs	r3, #1
 8008788:	b2db      	uxtb	r3, r3
 800878a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800878c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008790:	2b00      	cmp	r3, #0
 8008792:	dce9      	bgt.n	8008768 <prvUnlockQueue+0x60>
 8008794:	e000      	b.n	8008798 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8008796:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	22ff      	movs	r2, #255	; 0xff
 800879c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80087a0:	f002 f8c8 	bl	800a934 <vPortExitCritical>
}
 80087a4:	bf00      	nop
 80087a6:	3710      	adds	r7, #16
 80087a8:	46bd      	mov	sp, r7
 80087aa:	bd80      	pop	{r7, pc}

080087ac <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80087ac:	b580      	push	{r7, lr}
 80087ae:	b084      	sub	sp, #16
 80087b0:	af00      	add	r7, sp, #0
 80087b2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80087b4:	f002 f88a 	bl	800a8cc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087bc:	2b00      	cmp	r3, #0
 80087be:	d102      	bne.n	80087c6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80087c0:	2301      	movs	r3, #1
 80087c2:	60fb      	str	r3, [r7, #12]
 80087c4:	e001      	b.n	80087ca <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80087c6:	2300      	movs	r3, #0
 80087c8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80087ca:	f002 f8b3 	bl	800a934 <vPortExitCritical>

	return xReturn;
 80087ce:	68fb      	ldr	r3, [r7, #12]
}
 80087d0:	4618      	mov	r0, r3
 80087d2:	3710      	adds	r7, #16
 80087d4:	46bd      	mov	sp, r7
 80087d6:	bd80      	pop	{r7, pc}

080087d8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80087d8:	b580      	push	{r7, lr}
 80087da:	b084      	sub	sp, #16
 80087dc:	af00      	add	r7, sp, #0
 80087de:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80087e0:	f002 f874 	bl	800a8cc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80087ec:	429a      	cmp	r2, r3
 80087ee:	d102      	bne.n	80087f6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80087f0:	2301      	movs	r3, #1
 80087f2:	60fb      	str	r3, [r7, #12]
 80087f4:	e001      	b.n	80087fa <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80087f6:	2300      	movs	r3, #0
 80087f8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80087fa:	f002 f89b 	bl	800a934 <vPortExitCritical>

	return xReturn;
 80087fe:	68fb      	ldr	r3, [r7, #12]
}
 8008800:	4618      	mov	r0, r3
 8008802:	3710      	adds	r7, #16
 8008804:	46bd      	mov	sp, r7
 8008806:	bd80      	pop	{r7, pc}

08008808 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8008808:	b480      	push	{r7}
 800880a:	b085      	sub	sp, #20
 800880c:	af00      	add	r7, sp, #0
 800880e:	6078      	str	r0, [r7, #4]
 8008810:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008812:	2300      	movs	r3, #0
 8008814:	60fb      	str	r3, [r7, #12]
 8008816:	e014      	b.n	8008842 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8008818:	4a0f      	ldr	r2, [pc, #60]	; (8008858 <vQueueAddToRegistry+0x50>)
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8008820:	2b00      	cmp	r3, #0
 8008822:	d10b      	bne.n	800883c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8008824:	490c      	ldr	r1, [pc, #48]	; (8008858 <vQueueAddToRegistry+0x50>)
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	683a      	ldr	r2, [r7, #0]
 800882a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800882e:	4a0a      	ldr	r2, [pc, #40]	; (8008858 <vQueueAddToRegistry+0x50>)
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	00db      	lsls	r3, r3, #3
 8008834:	4413      	add	r3, r2
 8008836:	687a      	ldr	r2, [r7, #4]
 8008838:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800883a:	e006      	b.n	800884a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	3301      	adds	r3, #1
 8008840:	60fb      	str	r3, [r7, #12]
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	2b07      	cmp	r3, #7
 8008846:	d9e7      	bls.n	8008818 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008848:	bf00      	nop
 800884a:	bf00      	nop
 800884c:	3714      	adds	r7, #20
 800884e:	46bd      	mov	sp, r7
 8008850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008854:	4770      	bx	lr
 8008856:	bf00      	nop
 8008858:	20005828 	.word	0x20005828

0800885c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800885c:	b580      	push	{r7, lr}
 800885e:	b086      	sub	sp, #24
 8008860:	af00      	add	r7, sp, #0
 8008862:	60f8      	str	r0, [r7, #12]
 8008864:	60b9      	str	r1, [r7, #8]
 8008866:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800886c:	f002 f82e 	bl	800a8cc <vPortEnterCritical>
 8008870:	697b      	ldr	r3, [r7, #20]
 8008872:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008876:	b25b      	sxtb	r3, r3
 8008878:	f1b3 3fff 	cmp.w	r3, #4294967295
 800887c:	d103      	bne.n	8008886 <vQueueWaitForMessageRestricted+0x2a>
 800887e:	697b      	ldr	r3, [r7, #20]
 8008880:	2200      	movs	r2, #0
 8008882:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008886:	697b      	ldr	r3, [r7, #20]
 8008888:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800888c:	b25b      	sxtb	r3, r3
 800888e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008892:	d103      	bne.n	800889c <vQueueWaitForMessageRestricted+0x40>
 8008894:	697b      	ldr	r3, [r7, #20]
 8008896:	2200      	movs	r2, #0
 8008898:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800889c:	f002 f84a 	bl	800a934 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80088a0:	697b      	ldr	r3, [r7, #20]
 80088a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	d106      	bne.n	80088b6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80088a8:	697b      	ldr	r3, [r7, #20]
 80088aa:	3324      	adds	r3, #36	; 0x24
 80088ac:	687a      	ldr	r2, [r7, #4]
 80088ae:	68b9      	ldr	r1, [r7, #8]
 80088b0:	4618      	mov	r0, r3
 80088b2:	f000 fcf7 	bl	80092a4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80088b6:	6978      	ldr	r0, [r7, #20]
 80088b8:	f7ff ff26 	bl	8008708 <prvUnlockQueue>
	}
 80088bc:	bf00      	nop
 80088be:	3718      	adds	r7, #24
 80088c0:	46bd      	mov	sp, r7
 80088c2:	bd80      	pop	{r7, pc}

080088c4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80088c4:	b580      	push	{r7, lr}
 80088c6:	b08e      	sub	sp, #56	; 0x38
 80088c8:	af04      	add	r7, sp, #16
 80088ca:	60f8      	str	r0, [r7, #12]
 80088cc:	60b9      	str	r1, [r7, #8]
 80088ce:	607a      	str	r2, [r7, #4]
 80088d0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80088d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	d10c      	bne.n	80088f2 <xTaskCreateStatic+0x2e>
	__asm volatile
 80088d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088dc:	b672      	cpsid	i
 80088de:	f383 8811 	msr	BASEPRI, r3
 80088e2:	f3bf 8f6f 	isb	sy
 80088e6:	f3bf 8f4f 	dsb	sy
 80088ea:	b662      	cpsie	i
 80088ec:	623b      	str	r3, [r7, #32]
}
 80088ee:	bf00      	nop
 80088f0:	e7fe      	b.n	80088f0 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 80088f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	d10c      	bne.n	8008912 <xTaskCreateStatic+0x4e>
	__asm volatile
 80088f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088fc:	b672      	cpsid	i
 80088fe:	f383 8811 	msr	BASEPRI, r3
 8008902:	f3bf 8f6f 	isb	sy
 8008906:	f3bf 8f4f 	dsb	sy
 800890a:	b662      	cpsie	i
 800890c:	61fb      	str	r3, [r7, #28]
}
 800890e:	bf00      	nop
 8008910:	e7fe      	b.n	8008910 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008912:	235c      	movs	r3, #92	; 0x5c
 8008914:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008916:	693b      	ldr	r3, [r7, #16]
 8008918:	2b5c      	cmp	r3, #92	; 0x5c
 800891a:	d00c      	beq.n	8008936 <xTaskCreateStatic+0x72>
	__asm volatile
 800891c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008920:	b672      	cpsid	i
 8008922:	f383 8811 	msr	BASEPRI, r3
 8008926:	f3bf 8f6f 	isb	sy
 800892a:	f3bf 8f4f 	dsb	sy
 800892e:	b662      	cpsie	i
 8008930:	61bb      	str	r3, [r7, #24]
}
 8008932:	bf00      	nop
 8008934:	e7fe      	b.n	8008934 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8008936:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008938:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800893a:	2b00      	cmp	r3, #0
 800893c:	d01e      	beq.n	800897c <xTaskCreateStatic+0xb8>
 800893e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008940:	2b00      	cmp	r3, #0
 8008942:	d01b      	beq.n	800897c <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008944:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008946:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800894a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800894c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800894e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008950:	2202      	movs	r2, #2
 8008952:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008956:	2300      	movs	r3, #0
 8008958:	9303      	str	r3, [sp, #12]
 800895a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800895c:	9302      	str	r3, [sp, #8]
 800895e:	f107 0314 	add.w	r3, r7, #20
 8008962:	9301      	str	r3, [sp, #4]
 8008964:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008966:	9300      	str	r3, [sp, #0]
 8008968:	683b      	ldr	r3, [r7, #0]
 800896a:	687a      	ldr	r2, [r7, #4]
 800896c:	68b9      	ldr	r1, [r7, #8]
 800896e:	68f8      	ldr	r0, [r7, #12]
 8008970:	f000 f850 	bl	8008a14 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008974:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008976:	f000 f8df 	bl	8008b38 <prvAddNewTaskToReadyList>
 800897a:	e001      	b.n	8008980 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 800897c:	2300      	movs	r3, #0
 800897e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008980:	697b      	ldr	r3, [r7, #20]
	}
 8008982:	4618      	mov	r0, r3
 8008984:	3728      	adds	r7, #40	; 0x28
 8008986:	46bd      	mov	sp, r7
 8008988:	bd80      	pop	{r7, pc}

0800898a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800898a:	b580      	push	{r7, lr}
 800898c:	b08c      	sub	sp, #48	; 0x30
 800898e:	af04      	add	r7, sp, #16
 8008990:	60f8      	str	r0, [r7, #12]
 8008992:	60b9      	str	r1, [r7, #8]
 8008994:	603b      	str	r3, [r7, #0]
 8008996:	4613      	mov	r3, r2
 8008998:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800899a:	88fb      	ldrh	r3, [r7, #6]
 800899c:	009b      	lsls	r3, r3, #2
 800899e:	4618      	mov	r0, r3
 80089a0:	f002 f8c0 	bl	800ab24 <pvPortMalloc>
 80089a4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80089a6:	697b      	ldr	r3, [r7, #20]
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d00e      	beq.n	80089ca <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80089ac:	205c      	movs	r0, #92	; 0x5c
 80089ae:	f002 f8b9 	bl	800ab24 <pvPortMalloc>
 80089b2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80089b4:	69fb      	ldr	r3, [r7, #28]
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d003      	beq.n	80089c2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80089ba:	69fb      	ldr	r3, [r7, #28]
 80089bc:	697a      	ldr	r2, [r7, #20]
 80089be:	631a      	str	r2, [r3, #48]	; 0x30
 80089c0:	e005      	b.n	80089ce <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80089c2:	6978      	ldr	r0, [r7, #20]
 80089c4:	f002 f978 	bl	800acb8 <vPortFree>
 80089c8:	e001      	b.n	80089ce <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80089ca:	2300      	movs	r3, #0
 80089cc:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80089ce:	69fb      	ldr	r3, [r7, #28]
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	d017      	beq.n	8008a04 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80089d4:	69fb      	ldr	r3, [r7, #28]
 80089d6:	2200      	movs	r2, #0
 80089d8:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80089dc:	88fa      	ldrh	r2, [r7, #6]
 80089de:	2300      	movs	r3, #0
 80089e0:	9303      	str	r3, [sp, #12]
 80089e2:	69fb      	ldr	r3, [r7, #28]
 80089e4:	9302      	str	r3, [sp, #8]
 80089e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089e8:	9301      	str	r3, [sp, #4]
 80089ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089ec:	9300      	str	r3, [sp, #0]
 80089ee:	683b      	ldr	r3, [r7, #0]
 80089f0:	68b9      	ldr	r1, [r7, #8]
 80089f2:	68f8      	ldr	r0, [r7, #12]
 80089f4:	f000 f80e 	bl	8008a14 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80089f8:	69f8      	ldr	r0, [r7, #28]
 80089fa:	f000 f89d 	bl	8008b38 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80089fe:	2301      	movs	r3, #1
 8008a00:	61bb      	str	r3, [r7, #24]
 8008a02:	e002      	b.n	8008a0a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008a04:	f04f 33ff 	mov.w	r3, #4294967295
 8008a08:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008a0a:	69bb      	ldr	r3, [r7, #24]
	}
 8008a0c:	4618      	mov	r0, r3
 8008a0e:	3720      	adds	r7, #32
 8008a10:	46bd      	mov	sp, r7
 8008a12:	bd80      	pop	{r7, pc}

08008a14 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008a14:	b580      	push	{r7, lr}
 8008a16:	b088      	sub	sp, #32
 8008a18:	af00      	add	r7, sp, #0
 8008a1a:	60f8      	str	r0, [r7, #12]
 8008a1c:	60b9      	str	r1, [r7, #8]
 8008a1e:	607a      	str	r2, [r7, #4]
 8008a20:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008a22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a24:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	009b      	lsls	r3, r3, #2
 8008a2a:	461a      	mov	r2, r3
 8008a2c:	21a5      	movs	r1, #165	; 0xa5
 8008a2e:	f00c fb49 	bl	80150c4 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008a32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a34:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008a36:	6879      	ldr	r1, [r7, #4]
 8008a38:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8008a3c:	440b      	add	r3, r1
 8008a3e:	009b      	lsls	r3, r3, #2
 8008a40:	4413      	add	r3, r2
 8008a42:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008a44:	69bb      	ldr	r3, [r7, #24]
 8008a46:	f023 0307 	bic.w	r3, r3, #7
 8008a4a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008a4c:	69bb      	ldr	r3, [r7, #24]
 8008a4e:	f003 0307 	and.w	r3, r3, #7
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d00c      	beq.n	8008a70 <prvInitialiseNewTask+0x5c>
	__asm volatile
 8008a56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a5a:	b672      	cpsid	i
 8008a5c:	f383 8811 	msr	BASEPRI, r3
 8008a60:	f3bf 8f6f 	isb	sy
 8008a64:	f3bf 8f4f 	dsb	sy
 8008a68:	b662      	cpsie	i
 8008a6a:	617b      	str	r3, [r7, #20]
}
 8008a6c:	bf00      	nop
 8008a6e:	e7fe      	b.n	8008a6e <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008a70:	68bb      	ldr	r3, [r7, #8]
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d01f      	beq.n	8008ab6 <prvInitialiseNewTask+0xa2>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008a76:	2300      	movs	r3, #0
 8008a78:	61fb      	str	r3, [r7, #28]
 8008a7a:	e012      	b.n	8008aa2 <prvInitialiseNewTask+0x8e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008a7c:	68ba      	ldr	r2, [r7, #8]
 8008a7e:	69fb      	ldr	r3, [r7, #28]
 8008a80:	4413      	add	r3, r2
 8008a82:	7819      	ldrb	r1, [r3, #0]
 8008a84:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008a86:	69fb      	ldr	r3, [r7, #28]
 8008a88:	4413      	add	r3, r2
 8008a8a:	3334      	adds	r3, #52	; 0x34
 8008a8c:	460a      	mov	r2, r1
 8008a8e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008a90:	68ba      	ldr	r2, [r7, #8]
 8008a92:	69fb      	ldr	r3, [r7, #28]
 8008a94:	4413      	add	r3, r2
 8008a96:	781b      	ldrb	r3, [r3, #0]
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	d006      	beq.n	8008aaa <prvInitialiseNewTask+0x96>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008a9c:	69fb      	ldr	r3, [r7, #28]
 8008a9e:	3301      	adds	r3, #1
 8008aa0:	61fb      	str	r3, [r7, #28]
 8008aa2:	69fb      	ldr	r3, [r7, #28]
 8008aa4:	2b0f      	cmp	r3, #15
 8008aa6:	d9e9      	bls.n	8008a7c <prvInitialiseNewTask+0x68>
 8008aa8:	e000      	b.n	8008aac <prvInitialiseNewTask+0x98>
			{
				break;
 8008aaa:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008aac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008aae:	2200      	movs	r2, #0
 8008ab0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008ab4:	e003      	b.n	8008abe <prvInitialiseNewTask+0xaa>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008ab6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ab8:	2200      	movs	r2, #0
 8008aba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008abe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ac0:	2b37      	cmp	r3, #55	; 0x37
 8008ac2:	d901      	bls.n	8008ac8 <prvInitialiseNewTask+0xb4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008ac4:	2337      	movs	r3, #55	; 0x37
 8008ac6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008ac8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008aca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008acc:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008ace:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ad0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008ad2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8008ad4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ad6:	2200      	movs	r2, #0
 8008ad8:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008ada:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008adc:	3304      	adds	r3, #4
 8008ade:	4618      	mov	r0, r3
 8008ae0:	f7fe fea4 	bl	800782c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008ae4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ae6:	3318      	adds	r3, #24
 8008ae8:	4618      	mov	r0, r3
 8008aea:	f7fe fe9f 	bl	800782c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008aee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008af0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008af2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008af4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008af6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008afa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008afc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008afe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b00:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008b02:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008b04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b06:	2200      	movs	r2, #0
 8008b08:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008b0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b0c:	2200      	movs	r2, #0
 8008b0e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008b12:	683a      	ldr	r2, [r7, #0]
 8008b14:	68f9      	ldr	r1, [r7, #12]
 8008b16:	69b8      	ldr	r0, [r7, #24]
 8008b18:	f001 fdca 	bl	800a6b0 <pxPortInitialiseStack>
 8008b1c:	4602      	mov	r2, r0
 8008b1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b20:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8008b22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d002      	beq.n	8008b2e <prvInitialiseNewTask+0x11a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008b28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b2a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008b2c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008b2e:	bf00      	nop
 8008b30:	3720      	adds	r7, #32
 8008b32:	46bd      	mov	sp, r7
 8008b34:	bd80      	pop	{r7, pc}
	...

08008b38 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008b38:	b580      	push	{r7, lr}
 8008b3a:	b082      	sub	sp, #8
 8008b3c:	af00      	add	r7, sp, #0
 8008b3e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008b40:	f001 fec4 	bl	800a8cc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008b44:	4b2d      	ldr	r3, [pc, #180]	; (8008bfc <prvAddNewTaskToReadyList+0xc4>)
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	3301      	adds	r3, #1
 8008b4a:	4a2c      	ldr	r2, [pc, #176]	; (8008bfc <prvAddNewTaskToReadyList+0xc4>)
 8008b4c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008b4e:	4b2c      	ldr	r3, [pc, #176]	; (8008c00 <prvAddNewTaskToReadyList+0xc8>)
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d109      	bne.n	8008b6a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008b56:	4a2a      	ldr	r2, [pc, #168]	; (8008c00 <prvAddNewTaskToReadyList+0xc8>)
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008b5c:	4b27      	ldr	r3, [pc, #156]	; (8008bfc <prvAddNewTaskToReadyList+0xc4>)
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	2b01      	cmp	r3, #1
 8008b62:	d110      	bne.n	8008b86 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008b64:	f000 fcd4 	bl	8009510 <prvInitialiseTaskLists>
 8008b68:	e00d      	b.n	8008b86 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008b6a:	4b26      	ldr	r3, [pc, #152]	; (8008c04 <prvAddNewTaskToReadyList+0xcc>)
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	d109      	bne.n	8008b86 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008b72:	4b23      	ldr	r3, [pc, #140]	; (8008c00 <prvAddNewTaskToReadyList+0xc8>)
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b7c:	429a      	cmp	r2, r3
 8008b7e:	d802      	bhi.n	8008b86 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008b80:	4a1f      	ldr	r2, [pc, #124]	; (8008c00 <prvAddNewTaskToReadyList+0xc8>)
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008b86:	4b20      	ldr	r3, [pc, #128]	; (8008c08 <prvAddNewTaskToReadyList+0xd0>)
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	3301      	adds	r3, #1
 8008b8c:	4a1e      	ldr	r2, [pc, #120]	; (8008c08 <prvAddNewTaskToReadyList+0xd0>)
 8008b8e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8008b90:	4b1d      	ldr	r3, [pc, #116]	; (8008c08 <prvAddNewTaskToReadyList+0xd0>)
 8008b92:	681a      	ldr	r2, [r3, #0]
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b9c:	4b1b      	ldr	r3, [pc, #108]	; (8008c0c <prvAddNewTaskToReadyList+0xd4>)
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	429a      	cmp	r2, r3
 8008ba2:	d903      	bls.n	8008bac <prvAddNewTaskToReadyList+0x74>
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ba8:	4a18      	ldr	r2, [pc, #96]	; (8008c0c <prvAddNewTaskToReadyList+0xd4>)
 8008baa:	6013      	str	r3, [r2, #0]
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008bb0:	4613      	mov	r3, r2
 8008bb2:	009b      	lsls	r3, r3, #2
 8008bb4:	4413      	add	r3, r2
 8008bb6:	009b      	lsls	r3, r3, #2
 8008bb8:	4a15      	ldr	r2, [pc, #84]	; (8008c10 <prvAddNewTaskToReadyList+0xd8>)
 8008bba:	441a      	add	r2, r3
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	3304      	adds	r3, #4
 8008bc0:	4619      	mov	r1, r3
 8008bc2:	4610      	mov	r0, r2
 8008bc4:	f7fe fe3f 	bl	8007846 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008bc8:	f001 feb4 	bl	800a934 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008bcc:	4b0d      	ldr	r3, [pc, #52]	; (8008c04 <prvAddNewTaskToReadyList+0xcc>)
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	d00e      	beq.n	8008bf2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008bd4:	4b0a      	ldr	r3, [pc, #40]	; (8008c00 <prvAddNewTaskToReadyList+0xc8>)
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bde:	429a      	cmp	r2, r3
 8008be0:	d207      	bcs.n	8008bf2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008be2:	4b0c      	ldr	r3, [pc, #48]	; (8008c14 <prvAddNewTaskToReadyList+0xdc>)
 8008be4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008be8:	601a      	str	r2, [r3, #0]
 8008bea:	f3bf 8f4f 	dsb	sy
 8008bee:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008bf2:	bf00      	nop
 8008bf4:	3708      	adds	r7, #8
 8008bf6:	46bd      	mov	sp, r7
 8008bf8:	bd80      	pop	{r7, pc}
 8008bfa:	bf00      	nop
 8008bfc:	20000ee4 	.word	0x20000ee4
 8008c00:	20000a10 	.word	0x20000a10
 8008c04:	20000ef0 	.word	0x20000ef0
 8008c08:	20000f00 	.word	0x20000f00
 8008c0c:	20000eec 	.word	0x20000eec
 8008c10:	20000a14 	.word	0x20000a14
 8008c14:	e000ed04 	.word	0xe000ed04

08008c18 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 8008c18:	b580      	push	{r7, lr}
 8008c1a:	b084      	sub	sp, #16
 8008c1c:	af00      	add	r7, sp, #0
 8008c1e:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8008c20:	f001 fe54 	bl	800a8cc <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	d102      	bne.n	8008c30 <vTaskDelete+0x18>
 8008c2a:	4b2d      	ldr	r3, [pc, #180]	; (8008ce0 <vTaskDelete+0xc8>)
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	e000      	b.n	8008c32 <vTaskDelete+0x1a>
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	3304      	adds	r3, #4
 8008c38:	4618      	mov	r0, r3
 8008c3a:	f7fe fe61 	bl	8007900 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	d004      	beq.n	8008c50 <vTaskDelete+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	3318      	adds	r3, #24
 8008c4a:	4618      	mov	r0, r3
 8008c4c:	f7fe fe58 	bl	8007900 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 8008c50:	4b24      	ldr	r3, [pc, #144]	; (8008ce4 <vTaskDelete+0xcc>)
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	3301      	adds	r3, #1
 8008c56:	4a23      	ldr	r2, [pc, #140]	; (8008ce4 <vTaskDelete+0xcc>)
 8008c58:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 8008c5a:	4b21      	ldr	r3, [pc, #132]	; (8008ce0 <vTaskDelete+0xc8>)
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	68fa      	ldr	r2, [r7, #12]
 8008c60:	429a      	cmp	r2, r3
 8008c62:	d10b      	bne.n	8008c7c <vTaskDelete+0x64>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	3304      	adds	r3, #4
 8008c68:	4619      	mov	r1, r3
 8008c6a:	481f      	ldr	r0, [pc, #124]	; (8008ce8 <vTaskDelete+0xd0>)
 8008c6c:	f7fe fdeb 	bl	8007846 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 8008c70:	4b1e      	ldr	r3, [pc, #120]	; (8008cec <vTaskDelete+0xd4>)
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	3301      	adds	r3, #1
 8008c76:	4a1d      	ldr	r2, [pc, #116]	; (8008cec <vTaskDelete+0xd4>)
 8008c78:	6013      	str	r3, [r2, #0]
 8008c7a:	e009      	b.n	8008c90 <vTaskDelete+0x78>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 8008c7c:	4b1c      	ldr	r3, [pc, #112]	; (8008cf0 <vTaskDelete+0xd8>)
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	3b01      	subs	r3, #1
 8008c82:	4a1b      	ldr	r2, [pc, #108]	; (8008cf0 <vTaskDelete+0xd8>)
 8008c84:	6013      	str	r3, [r2, #0]
				prvDeleteTCB( pxTCB );
 8008c86:	68f8      	ldr	r0, [r7, #12]
 8008c88:	f000 fcb0 	bl	80095ec <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 8008c8c:	f000 fce0 	bl	8009650 <prvResetNextTaskUnblockTime>
			}

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
 8008c90:	f001 fe50 	bl	800a934 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 8008c94:	4b17      	ldr	r3, [pc, #92]	; (8008cf4 <vTaskDelete+0xdc>)
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d01d      	beq.n	8008cd8 <vTaskDelete+0xc0>
		{
			if( pxTCB == pxCurrentTCB )
 8008c9c:	4b10      	ldr	r3, [pc, #64]	; (8008ce0 <vTaskDelete+0xc8>)
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	68fa      	ldr	r2, [r7, #12]
 8008ca2:	429a      	cmp	r2, r3
 8008ca4:	d118      	bne.n	8008cd8 <vTaskDelete+0xc0>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 8008ca6:	4b14      	ldr	r3, [pc, #80]	; (8008cf8 <vTaskDelete+0xe0>)
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	d00c      	beq.n	8008cc8 <vTaskDelete+0xb0>
	__asm volatile
 8008cae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cb2:	b672      	cpsid	i
 8008cb4:	f383 8811 	msr	BASEPRI, r3
 8008cb8:	f3bf 8f6f 	isb	sy
 8008cbc:	f3bf 8f4f 	dsb	sy
 8008cc0:	b662      	cpsie	i
 8008cc2:	60bb      	str	r3, [r7, #8]
}
 8008cc4:	bf00      	nop
 8008cc6:	e7fe      	b.n	8008cc6 <vTaskDelete+0xae>
				portYIELD_WITHIN_API();
 8008cc8:	4b0c      	ldr	r3, [pc, #48]	; (8008cfc <vTaskDelete+0xe4>)
 8008cca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008cce:	601a      	str	r2, [r3, #0]
 8008cd0:	f3bf 8f4f 	dsb	sy
 8008cd4:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008cd8:	bf00      	nop
 8008cda:	3710      	adds	r7, #16
 8008cdc:	46bd      	mov	sp, r7
 8008cde:	bd80      	pop	{r7, pc}
 8008ce0:	20000a10 	.word	0x20000a10
 8008ce4:	20000f00 	.word	0x20000f00
 8008ce8:	20000eb8 	.word	0x20000eb8
 8008cec:	20000ecc 	.word	0x20000ecc
 8008cf0:	20000ee4 	.word	0x20000ee4
 8008cf4:	20000ef0 	.word	0x20000ef0
 8008cf8:	20000f0c 	.word	0x20000f0c
 8008cfc:	e000ed04 	.word	0xe000ed04

08008d00 <eTaskGetState>:
/*-----------------------------------------------------------*/

#if( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_xTaskAbortDelay == 1 ) )

	eTaskState eTaskGetState( TaskHandle_t xTask )
	{
 8008d00:	b580      	push	{r7, lr}
 8008d02:	b088      	sub	sp, #32
 8008d04:	af00      	add	r7, sp, #0
 8008d06:	6078      	str	r0, [r7, #4]
	eTaskState eReturn;
	List_t const * pxStateList, *pxDelayedList, *pxOverflowedDelayedList;
	const TCB_t * const pxTCB = xTask;
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	61bb      	str	r3, [r7, #24]

		configASSERT( pxTCB );
 8008d0c:	69bb      	ldr	r3, [r7, #24]
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d10c      	bne.n	8008d2c <eTaskGetState+0x2c>
	__asm volatile
 8008d12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d16:	b672      	cpsid	i
 8008d18:	f383 8811 	msr	BASEPRI, r3
 8008d1c:	f3bf 8f6f 	isb	sy
 8008d20:	f3bf 8f4f 	dsb	sy
 8008d24:	b662      	cpsie	i
 8008d26:	60bb      	str	r3, [r7, #8]
}
 8008d28:	bf00      	nop
 8008d2a:	e7fe      	b.n	8008d2a <eTaskGetState+0x2a>

		if( pxTCB == pxCurrentTCB )
 8008d2c:	4b23      	ldr	r3, [pc, #140]	; (8008dbc <eTaskGetState+0xbc>)
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	69ba      	ldr	r2, [r7, #24]
 8008d32:	429a      	cmp	r2, r3
 8008d34:	d102      	bne.n	8008d3c <eTaskGetState+0x3c>
		{
			/* The task calling this function is querying its own state. */
			eReturn = eRunning;
 8008d36:	2300      	movs	r3, #0
 8008d38:	77fb      	strb	r3, [r7, #31]
 8008d3a:	e03a      	b.n	8008db2 <eTaskGetState+0xb2>
		}
		else
		{
			taskENTER_CRITICAL();
 8008d3c:	f001 fdc6 	bl	800a8cc <vPortEnterCritical>
			{
				pxStateList = listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
 8008d40:	69bb      	ldr	r3, [r7, #24]
 8008d42:	695b      	ldr	r3, [r3, #20]
 8008d44:	617b      	str	r3, [r7, #20]
				pxDelayedList = pxDelayedTaskList;
 8008d46:	4b1e      	ldr	r3, [pc, #120]	; (8008dc0 <eTaskGetState+0xc0>)
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	613b      	str	r3, [r7, #16]
				pxOverflowedDelayedList = pxOverflowDelayedTaskList;
 8008d4c:	4b1d      	ldr	r3, [pc, #116]	; (8008dc4 <eTaskGetState+0xc4>)
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	60fb      	str	r3, [r7, #12]
			}
			taskEXIT_CRITICAL();
 8008d52:	f001 fdef 	bl	800a934 <vPortExitCritical>

			if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowedDelayedList ) )
 8008d56:	697a      	ldr	r2, [r7, #20]
 8008d58:	693b      	ldr	r3, [r7, #16]
 8008d5a:	429a      	cmp	r2, r3
 8008d5c:	d003      	beq.n	8008d66 <eTaskGetState+0x66>
 8008d5e:	697a      	ldr	r2, [r7, #20]
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	429a      	cmp	r2, r3
 8008d64:	d102      	bne.n	8008d6c <eTaskGetState+0x6c>
			{
				/* The task being queried is referenced from one of the Blocked
				lists. */
				eReturn = eBlocked;
 8008d66:	2302      	movs	r3, #2
 8008d68:	77fb      	strb	r3, [r7, #31]
 8008d6a:	e022      	b.n	8008db2 <eTaskGetState+0xb2>
			}

			#if ( INCLUDE_vTaskSuspend == 1 )
				else if( pxStateList == &xSuspendedTaskList )
 8008d6c:	697b      	ldr	r3, [r7, #20]
 8008d6e:	4a16      	ldr	r2, [pc, #88]	; (8008dc8 <eTaskGetState+0xc8>)
 8008d70:	4293      	cmp	r3, r2
 8008d72:	d112      	bne.n	8008d9a <eTaskGetState+0x9a>
				{
					/* The task being queried is referenced from the suspended
					list.  Is it genuinely suspended or is it blocked
					indefinitely? */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
 8008d74:	69bb      	ldr	r3, [r7, #24]
 8008d76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	d10b      	bne.n	8008d94 <eTaskGetState+0x94>
						{
							/* The task does not appear on the event list item of
							and of the RTOS objects, but could still be in the
							blocked state if it is waiting on its notification
							rather than waiting on an object. */
							if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8008d7c:	69bb      	ldr	r3, [r7, #24]
 8008d7e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8008d82:	b2db      	uxtb	r3, r3
 8008d84:	2b01      	cmp	r3, #1
 8008d86:	d102      	bne.n	8008d8e <eTaskGetState+0x8e>
							{
								eReturn = eBlocked;
 8008d88:	2302      	movs	r3, #2
 8008d8a:	77fb      	strb	r3, [r7, #31]
 8008d8c:	e011      	b.n	8008db2 <eTaskGetState+0xb2>
							}
							else
							{
								eReturn = eSuspended;
 8008d8e:	2303      	movs	r3, #3
 8008d90:	77fb      	strb	r3, [r7, #31]
 8008d92:	e00e      	b.n	8008db2 <eTaskGetState+0xb2>
						}
						#endif
					}
					else
					{
						eReturn = eBlocked;
 8008d94:	2302      	movs	r3, #2
 8008d96:	77fb      	strb	r3, [r7, #31]
 8008d98:	e00b      	b.n	8008db2 <eTaskGetState+0xb2>
					}
				}
			#endif

			#if ( INCLUDE_vTaskDelete == 1 )
				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
 8008d9a:	697b      	ldr	r3, [r7, #20]
 8008d9c:	4a0b      	ldr	r2, [pc, #44]	; (8008dcc <eTaskGetState+0xcc>)
 8008d9e:	4293      	cmp	r3, r2
 8008da0:	d002      	beq.n	8008da8 <eTaskGetState+0xa8>
 8008da2:	697b      	ldr	r3, [r7, #20]
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	d102      	bne.n	8008dae <eTaskGetState+0xae>
				{
					/* The task being queried is referenced from the deleted
					tasks list, or it is not referenced from any lists at
					all. */
					eReturn = eDeleted;
 8008da8:	2304      	movs	r3, #4
 8008daa:	77fb      	strb	r3, [r7, #31]
 8008dac:	e001      	b.n	8008db2 <eTaskGetState+0xb2>

			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
			{
				/* If the task is not in any other state, it must be in the
				Ready (including pending ready) state. */
				eReturn = eReady;
 8008dae:	2301      	movs	r3, #1
 8008db0:	77fb      	strb	r3, [r7, #31]
			}
		}

		return eReturn;
 8008db2:	7ffb      	ldrb	r3, [r7, #31]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8008db4:	4618      	mov	r0, r3
 8008db6:	3720      	adds	r7, #32
 8008db8:	46bd      	mov	sp, r7
 8008dba:	bd80      	pop	{r7, pc}
 8008dbc:	20000a10 	.word	0x20000a10
 8008dc0:	20000e9c 	.word	0x20000e9c
 8008dc4:	20000ea0 	.word	0x20000ea0
 8008dc8:	20000ed0 	.word	0x20000ed0
 8008dcc:	20000eb8 	.word	0x20000eb8

08008dd0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008dd0:	b580      	push	{r7, lr}
 8008dd2:	b08a      	sub	sp, #40	; 0x28
 8008dd4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008dd6:	2300      	movs	r3, #0
 8008dd8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008dda:	2300      	movs	r3, #0
 8008ddc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008dde:	463a      	mov	r2, r7
 8008de0:	1d39      	adds	r1, r7, #4
 8008de2:	f107 0308 	add.w	r3, r7, #8
 8008de6:	4618      	mov	r0, r3
 8008de8:	f7fe fccc 	bl	8007784 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008dec:	6839      	ldr	r1, [r7, #0]
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	68ba      	ldr	r2, [r7, #8]
 8008df2:	9202      	str	r2, [sp, #8]
 8008df4:	9301      	str	r3, [sp, #4]
 8008df6:	2300      	movs	r3, #0
 8008df8:	9300      	str	r3, [sp, #0]
 8008dfa:	2300      	movs	r3, #0
 8008dfc:	460a      	mov	r2, r1
 8008dfe:	4923      	ldr	r1, [pc, #140]	; (8008e8c <vTaskStartScheduler+0xbc>)
 8008e00:	4823      	ldr	r0, [pc, #140]	; (8008e90 <vTaskStartScheduler+0xc0>)
 8008e02:	f7ff fd5f 	bl	80088c4 <xTaskCreateStatic>
 8008e06:	4603      	mov	r3, r0
 8008e08:	4a22      	ldr	r2, [pc, #136]	; (8008e94 <vTaskStartScheduler+0xc4>)
 8008e0a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008e0c:	4b21      	ldr	r3, [pc, #132]	; (8008e94 <vTaskStartScheduler+0xc4>)
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	d002      	beq.n	8008e1a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008e14:	2301      	movs	r3, #1
 8008e16:	617b      	str	r3, [r7, #20]
 8008e18:	e001      	b.n	8008e1e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8008e1a:	2300      	movs	r3, #0
 8008e1c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8008e1e:	697b      	ldr	r3, [r7, #20]
 8008e20:	2b01      	cmp	r3, #1
 8008e22:	d102      	bne.n	8008e2a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8008e24:	f001 f826 	bl	8009e74 <xTimerCreateTimerTask>
 8008e28:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008e2a:	697b      	ldr	r3, [r7, #20]
 8008e2c:	2b01      	cmp	r3, #1
 8008e2e:	d118      	bne.n	8008e62 <vTaskStartScheduler+0x92>
	__asm volatile
 8008e30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e34:	b672      	cpsid	i
 8008e36:	f383 8811 	msr	BASEPRI, r3
 8008e3a:	f3bf 8f6f 	isb	sy
 8008e3e:	f3bf 8f4f 	dsb	sy
 8008e42:	b662      	cpsie	i
 8008e44:	613b      	str	r3, [r7, #16]
}
 8008e46:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008e48:	4b13      	ldr	r3, [pc, #76]	; (8008e98 <vTaskStartScheduler+0xc8>)
 8008e4a:	f04f 32ff 	mov.w	r2, #4294967295
 8008e4e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008e50:	4b12      	ldr	r3, [pc, #72]	; (8008e9c <vTaskStartScheduler+0xcc>)
 8008e52:	2201      	movs	r2, #1
 8008e54:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008e56:	4b12      	ldr	r3, [pc, #72]	; (8008ea0 <vTaskStartScheduler+0xd0>)
 8008e58:	2200      	movs	r2, #0
 8008e5a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008e5c:	f001 fcb8 	bl	800a7d0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008e60:	e010      	b.n	8008e84 <vTaskStartScheduler+0xb4>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008e62:	697b      	ldr	r3, [r7, #20]
 8008e64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e68:	d10c      	bne.n	8008e84 <vTaskStartScheduler+0xb4>
	__asm volatile
 8008e6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e6e:	b672      	cpsid	i
 8008e70:	f383 8811 	msr	BASEPRI, r3
 8008e74:	f3bf 8f6f 	isb	sy
 8008e78:	f3bf 8f4f 	dsb	sy
 8008e7c:	b662      	cpsie	i
 8008e7e:	60fb      	str	r3, [r7, #12]
}
 8008e80:	bf00      	nop
 8008e82:	e7fe      	b.n	8008e82 <vTaskStartScheduler+0xb2>
}
 8008e84:	bf00      	nop
 8008e86:	3718      	adds	r7, #24
 8008e88:	46bd      	mov	sp, r7
 8008e8a:	bd80      	pop	{r7, pc}
 8008e8c:	0801a258 	.word	0x0801a258
 8008e90:	080094dd 	.word	0x080094dd
 8008e94:	20000f08 	.word	0x20000f08
 8008e98:	20000f04 	.word	0x20000f04
 8008e9c:	20000ef0 	.word	0x20000ef0
 8008ea0:	20000ee8 	.word	0x20000ee8

08008ea4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008ea4:	b480      	push	{r7}
 8008ea6:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8008ea8:	4b04      	ldr	r3, [pc, #16]	; (8008ebc <vTaskSuspendAll+0x18>)
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	3301      	adds	r3, #1
 8008eae:	4a03      	ldr	r2, [pc, #12]	; (8008ebc <vTaskSuspendAll+0x18>)
 8008eb0:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8008eb2:	bf00      	nop
 8008eb4:	46bd      	mov	sp, r7
 8008eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eba:	4770      	bx	lr
 8008ebc:	20000f0c 	.word	0x20000f0c

08008ec0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008ec0:	b580      	push	{r7, lr}
 8008ec2:	b084      	sub	sp, #16
 8008ec4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008ec6:	2300      	movs	r3, #0
 8008ec8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008eca:	2300      	movs	r3, #0
 8008ecc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008ece:	4b43      	ldr	r3, [pc, #268]	; (8008fdc <xTaskResumeAll+0x11c>)
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	d10c      	bne.n	8008ef0 <xTaskResumeAll+0x30>
	__asm volatile
 8008ed6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008eda:	b672      	cpsid	i
 8008edc:	f383 8811 	msr	BASEPRI, r3
 8008ee0:	f3bf 8f6f 	isb	sy
 8008ee4:	f3bf 8f4f 	dsb	sy
 8008ee8:	b662      	cpsie	i
 8008eea:	603b      	str	r3, [r7, #0]
}
 8008eec:	bf00      	nop
 8008eee:	e7fe      	b.n	8008eee <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008ef0:	f001 fcec 	bl	800a8cc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008ef4:	4b39      	ldr	r3, [pc, #228]	; (8008fdc <xTaskResumeAll+0x11c>)
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	3b01      	subs	r3, #1
 8008efa:	4a38      	ldr	r2, [pc, #224]	; (8008fdc <xTaskResumeAll+0x11c>)
 8008efc:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008efe:	4b37      	ldr	r3, [pc, #220]	; (8008fdc <xTaskResumeAll+0x11c>)
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	d162      	bne.n	8008fcc <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008f06:	4b36      	ldr	r3, [pc, #216]	; (8008fe0 <xTaskResumeAll+0x120>)
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	d05e      	beq.n	8008fcc <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008f0e:	e02f      	b.n	8008f70 <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008f10:	4b34      	ldr	r3, [pc, #208]	; (8008fe4 <xTaskResumeAll+0x124>)
 8008f12:	68db      	ldr	r3, [r3, #12]
 8008f14:	68db      	ldr	r3, [r3, #12]
 8008f16:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	3318      	adds	r3, #24
 8008f1c:	4618      	mov	r0, r3
 8008f1e:	f7fe fcef 	bl	8007900 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	3304      	adds	r3, #4
 8008f26:	4618      	mov	r0, r3
 8008f28:	f7fe fcea 	bl	8007900 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f30:	4b2d      	ldr	r3, [pc, #180]	; (8008fe8 <xTaskResumeAll+0x128>)
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	429a      	cmp	r2, r3
 8008f36:	d903      	bls.n	8008f40 <xTaskResumeAll+0x80>
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f3c:	4a2a      	ldr	r2, [pc, #168]	; (8008fe8 <xTaskResumeAll+0x128>)
 8008f3e:	6013      	str	r3, [r2, #0]
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f44:	4613      	mov	r3, r2
 8008f46:	009b      	lsls	r3, r3, #2
 8008f48:	4413      	add	r3, r2
 8008f4a:	009b      	lsls	r3, r3, #2
 8008f4c:	4a27      	ldr	r2, [pc, #156]	; (8008fec <xTaskResumeAll+0x12c>)
 8008f4e:	441a      	add	r2, r3
 8008f50:	68fb      	ldr	r3, [r7, #12]
 8008f52:	3304      	adds	r3, #4
 8008f54:	4619      	mov	r1, r3
 8008f56:	4610      	mov	r0, r2
 8008f58:	f7fe fc75 	bl	8007846 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f60:	4b23      	ldr	r3, [pc, #140]	; (8008ff0 <xTaskResumeAll+0x130>)
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f66:	429a      	cmp	r2, r3
 8008f68:	d302      	bcc.n	8008f70 <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 8008f6a:	4b22      	ldr	r3, [pc, #136]	; (8008ff4 <xTaskResumeAll+0x134>)
 8008f6c:	2201      	movs	r2, #1
 8008f6e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008f70:	4b1c      	ldr	r3, [pc, #112]	; (8008fe4 <xTaskResumeAll+0x124>)
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	d1cb      	bne.n	8008f10 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008f78:	68fb      	ldr	r3, [r7, #12]
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	d001      	beq.n	8008f82 <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008f7e:	f000 fb67 	bl	8009650 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8008f82:	4b1d      	ldr	r3, [pc, #116]	; (8008ff8 <xTaskResumeAll+0x138>)
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	d010      	beq.n	8008fb0 <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008f8e:	f000 f847 	bl	8009020 <xTaskIncrementTick>
 8008f92:	4603      	mov	r3, r0
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	d002      	beq.n	8008f9e <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 8008f98:	4b16      	ldr	r3, [pc, #88]	; (8008ff4 <xTaskResumeAll+0x134>)
 8008f9a:	2201      	movs	r2, #1
 8008f9c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	3b01      	subs	r3, #1
 8008fa2:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	d1f1      	bne.n	8008f8e <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 8008faa:	4b13      	ldr	r3, [pc, #76]	; (8008ff8 <xTaskResumeAll+0x138>)
 8008fac:	2200      	movs	r2, #0
 8008fae:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008fb0:	4b10      	ldr	r3, [pc, #64]	; (8008ff4 <xTaskResumeAll+0x134>)
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	d009      	beq.n	8008fcc <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008fb8:	2301      	movs	r3, #1
 8008fba:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008fbc:	4b0f      	ldr	r3, [pc, #60]	; (8008ffc <xTaskResumeAll+0x13c>)
 8008fbe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008fc2:	601a      	str	r2, [r3, #0]
 8008fc4:	f3bf 8f4f 	dsb	sy
 8008fc8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008fcc:	f001 fcb2 	bl	800a934 <vPortExitCritical>

	return xAlreadyYielded;
 8008fd0:	68bb      	ldr	r3, [r7, #8]
}
 8008fd2:	4618      	mov	r0, r3
 8008fd4:	3710      	adds	r7, #16
 8008fd6:	46bd      	mov	sp, r7
 8008fd8:	bd80      	pop	{r7, pc}
 8008fda:	bf00      	nop
 8008fdc:	20000f0c 	.word	0x20000f0c
 8008fe0:	20000ee4 	.word	0x20000ee4
 8008fe4:	20000ea4 	.word	0x20000ea4
 8008fe8:	20000eec 	.word	0x20000eec
 8008fec:	20000a14 	.word	0x20000a14
 8008ff0:	20000a10 	.word	0x20000a10
 8008ff4:	20000ef8 	.word	0x20000ef8
 8008ff8:	20000ef4 	.word	0x20000ef4
 8008ffc:	e000ed04 	.word	0xe000ed04

08009000 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8009000:	b480      	push	{r7}
 8009002:	b083      	sub	sp, #12
 8009004:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8009006:	4b05      	ldr	r3, [pc, #20]	; (800901c <xTaskGetTickCount+0x1c>)
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800900c:	687b      	ldr	r3, [r7, #4]
}
 800900e:	4618      	mov	r0, r3
 8009010:	370c      	adds	r7, #12
 8009012:	46bd      	mov	sp, r7
 8009014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009018:	4770      	bx	lr
 800901a:	bf00      	nop
 800901c:	20000ee8 	.word	0x20000ee8

08009020 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009020:	b580      	push	{r7, lr}
 8009022:	b086      	sub	sp, #24
 8009024:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8009026:	2300      	movs	r3, #0
 8009028:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800902a:	4b50      	ldr	r3, [pc, #320]	; (800916c <xTaskIncrementTick+0x14c>)
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	2b00      	cmp	r3, #0
 8009030:	f040 808b 	bne.w	800914a <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009034:	4b4e      	ldr	r3, [pc, #312]	; (8009170 <xTaskIncrementTick+0x150>)
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	3301      	adds	r3, #1
 800903a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800903c:	4a4c      	ldr	r2, [pc, #304]	; (8009170 <xTaskIncrementTick+0x150>)
 800903e:	693b      	ldr	r3, [r7, #16]
 8009040:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009042:	693b      	ldr	r3, [r7, #16]
 8009044:	2b00      	cmp	r3, #0
 8009046:	d122      	bne.n	800908e <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 8009048:	4b4a      	ldr	r3, [pc, #296]	; (8009174 <xTaskIncrementTick+0x154>)
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	2b00      	cmp	r3, #0
 8009050:	d00c      	beq.n	800906c <xTaskIncrementTick+0x4c>
	__asm volatile
 8009052:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009056:	b672      	cpsid	i
 8009058:	f383 8811 	msr	BASEPRI, r3
 800905c:	f3bf 8f6f 	isb	sy
 8009060:	f3bf 8f4f 	dsb	sy
 8009064:	b662      	cpsie	i
 8009066:	603b      	str	r3, [r7, #0]
}
 8009068:	bf00      	nop
 800906a:	e7fe      	b.n	800906a <xTaskIncrementTick+0x4a>
 800906c:	4b41      	ldr	r3, [pc, #260]	; (8009174 <xTaskIncrementTick+0x154>)
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	60fb      	str	r3, [r7, #12]
 8009072:	4b41      	ldr	r3, [pc, #260]	; (8009178 <xTaskIncrementTick+0x158>)
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	4a3f      	ldr	r2, [pc, #252]	; (8009174 <xTaskIncrementTick+0x154>)
 8009078:	6013      	str	r3, [r2, #0]
 800907a:	4a3f      	ldr	r2, [pc, #252]	; (8009178 <xTaskIncrementTick+0x158>)
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	6013      	str	r3, [r2, #0]
 8009080:	4b3e      	ldr	r3, [pc, #248]	; (800917c <xTaskIncrementTick+0x15c>)
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	3301      	adds	r3, #1
 8009086:	4a3d      	ldr	r2, [pc, #244]	; (800917c <xTaskIncrementTick+0x15c>)
 8009088:	6013      	str	r3, [r2, #0]
 800908a:	f000 fae1 	bl	8009650 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800908e:	4b3c      	ldr	r3, [pc, #240]	; (8009180 <xTaskIncrementTick+0x160>)
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	693a      	ldr	r2, [r7, #16]
 8009094:	429a      	cmp	r2, r3
 8009096:	d349      	bcc.n	800912c <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009098:	4b36      	ldr	r3, [pc, #216]	; (8009174 <xTaskIncrementTick+0x154>)
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d104      	bne.n	80090ac <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80090a2:	4b37      	ldr	r3, [pc, #220]	; (8009180 <xTaskIncrementTick+0x160>)
 80090a4:	f04f 32ff 	mov.w	r2, #4294967295
 80090a8:	601a      	str	r2, [r3, #0]
					break;
 80090aa:	e03f      	b.n	800912c <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80090ac:	4b31      	ldr	r3, [pc, #196]	; (8009174 <xTaskIncrementTick+0x154>)
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	68db      	ldr	r3, [r3, #12]
 80090b2:	68db      	ldr	r3, [r3, #12]
 80090b4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80090b6:	68bb      	ldr	r3, [r7, #8]
 80090b8:	685b      	ldr	r3, [r3, #4]
 80090ba:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80090bc:	693a      	ldr	r2, [r7, #16]
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	429a      	cmp	r2, r3
 80090c2:	d203      	bcs.n	80090cc <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80090c4:	4a2e      	ldr	r2, [pc, #184]	; (8009180 <xTaskIncrementTick+0x160>)
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80090ca:	e02f      	b.n	800912c <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80090cc:	68bb      	ldr	r3, [r7, #8]
 80090ce:	3304      	adds	r3, #4
 80090d0:	4618      	mov	r0, r3
 80090d2:	f7fe fc15 	bl	8007900 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80090d6:	68bb      	ldr	r3, [r7, #8]
 80090d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d004      	beq.n	80090e8 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80090de:	68bb      	ldr	r3, [r7, #8]
 80090e0:	3318      	adds	r3, #24
 80090e2:	4618      	mov	r0, r3
 80090e4:	f7fe fc0c 	bl	8007900 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80090e8:	68bb      	ldr	r3, [r7, #8]
 80090ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80090ec:	4b25      	ldr	r3, [pc, #148]	; (8009184 <xTaskIncrementTick+0x164>)
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	429a      	cmp	r2, r3
 80090f2:	d903      	bls.n	80090fc <xTaskIncrementTick+0xdc>
 80090f4:	68bb      	ldr	r3, [r7, #8]
 80090f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090f8:	4a22      	ldr	r2, [pc, #136]	; (8009184 <xTaskIncrementTick+0x164>)
 80090fa:	6013      	str	r3, [r2, #0]
 80090fc:	68bb      	ldr	r3, [r7, #8]
 80090fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009100:	4613      	mov	r3, r2
 8009102:	009b      	lsls	r3, r3, #2
 8009104:	4413      	add	r3, r2
 8009106:	009b      	lsls	r3, r3, #2
 8009108:	4a1f      	ldr	r2, [pc, #124]	; (8009188 <xTaskIncrementTick+0x168>)
 800910a:	441a      	add	r2, r3
 800910c:	68bb      	ldr	r3, [r7, #8]
 800910e:	3304      	adds	r3, #4
 8009110:	4619      	mov	r1, r3
 8009112:	4610      	mov	r0, r2
 8009114:	f7fe fb97 	bl	8007846 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009118:	68bb      	ldr	r3, [r7, #8]
 800911a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800911c:	4b1b      	ldr	r3, [pc, #108]	; (800918c <xTaskIncrementTick+0x16c>)
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009122:	429a      	cmp	r2, r3
 8009124:	d3b8      	bcc.n	8009098 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 8009126:	2301      	movs	r3, #1
 8009128:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800912a:	e7b5      	b.n	8009098 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800912c:	4b17      	ldr	r3, [pc, #92]	; (800918c <xTaskIncrementTick+0x16c>)
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009132:	4915      	ldr	r1, [pc, #84]	; (8009188 <xTaskIncrementTick+0x168>)
 8009134:	4613      	mov	r3, r2
 8009136:	009b      	lsls	r3, r3, #2
 8009138:	4413      	add	r3, r2
 800913a:	009b      	lsls	r3, r3, #2
 800913c:	440b      	add	r3, r1
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	2b01      	cmp	r3, #1
 8009142:	d907      	bls.n	8009154 <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 8009144:	2301      	movs	r3, #1
 8009146:	617b      	str	r3, [r7, #20]
 8009148:	e004      	b.n	8009154 <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800914a:	4b11      	ldr	r3, [pc, #68]	; (8009190 <xTaskIncrementTick+0x170>)
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	3301      	adds	r3, #1
 8009150:	4a0f      	ldr	r2, [pc, #60]	; (8009190 <xTaskIncrementTick+0x170>)
 8009152:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8009154:	4b0f      	ldr	r3, [pc, #60]	; (8009194 <xTaskIncrementTick+0x174>)
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	2b00      	cmp	r3, #0
 800915a:	d001      	beq.n	8009160 <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 800915c:	2301      	movs	r3, #1
 800915e:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8009160:	697b      	ldr	r3, [r7, #20]
}
 8009162:	4618      	mov	r0, r3
 8009164:	3718      	adds	r7, #24
 8009166:	46bd      	mov	sp, r7
 8009168:	bd80      	pop	{r7, pc}
 800916a:	bf00      	nop
 800916c:	20000f0c 	.word	0x20000f0c
 8009170:	20000ee8 	.word	0x20000ee8
 8009174:	20000e9c 	.word	0x20000e9c
 8009178:	20000ea0 	.word	0x20000ea0
 800917c:	20000efc 	.word	0x20000efc
 8009180:	20000f04 	.word	0x20000f04
 8009184:	20000eec 	.word	0x20000eec
 8009188:	20000a14 	.word	0x20000a14
 800918c:	20000a10 	.word	0x20000a10
 8009190:	20000ef4 	.word	0x20000ef4
 8009194:	20000ef8 	.word	0x20000ef8

08009198 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009198:	b480      	push	{r7}
 800919a:	b085      	sub	sp, #20
 800919c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800919e:	4b29      	ldr	r3, [pc, #164]	; (8009244 <vTaskSwitchContext+0xac>)
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	d003      	beq.n	80091ae <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80091a6:	4b28      	ldr	r3, [pc, #160]	; (8009248 <vTaskSwitchContext+0xb0>)
 80091a8:	2201      	movs	r2, #1
 80091aa:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80091ac:	e043      	b.n	8009236 <vTaskSwitchContext+0x9e>
		xYieldPending = pdFALSE;
 80091ae:	4b26      	ldr	r3, [pc, #152]	; (8009248 <vTaskSwitchContext+0xb0>)
 80091b0:	2200      	movs	r2, #0
 80091b2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80091b4:	4b25      	ldr	r3, [pc, #148]	; (800924c <vTaskSwitchContext+0xb4>)
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	60fb      	str	r3, [r7, #12]
 80091ba:	e012      	b.n	80091e2 <vTaskSwitchContext+0x4a>
 80091bc:	68fb      	ldr	r3, [r7, #12]
 80091be:	2b00      	cmp	r3, #0
 80091c0:	d10c      	bne.n	80091dc <vTaskSwitchContext+0x44>
	__asm volatile
 80091c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091c6:	b672      	cpsid	i
 80091c8:	f383 8811 	msr	BASEPRI, r3
 80091cc:	f3bf 8f6f 	isb	sy
 80091d0:	f3bf 8f4f 	dsb	sy
 80091d4:	b662      	cpsie	i
 80091d6:	607b      	str	r3, [r7, #4]
}
 80091d8:	bf00      	nop
 80091da:	e7fe      	b.n	80091da <vTaskSwitchContext+0x42>
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	3b01      	subs	r3, #1
 80091e0:	60fb      	str	r3, [r7, #12]
 80091e2:	491b      	ldr	r1, [pc, #108]	; (8009250 <vTaskSwitchContext+0xb8>)
 80091e4:	68fa      	ldr	r2, [r7, #12]
 80091e6:	4613      	mov	r3, r2
 80091e8:	009b      	lsls	r3, r3, #2
 80091ea:	4413      	add	r3, r2
 80091ec:	009b      	lsls	r3, r3, #2
 80091ee:	440b      	add	r3, r1
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	d0e2      	beq.n	80091bc <vTaskSwitchContext+0x24>
 80091f6:	68fa      	ldr	r2, [r7, #12]
 80091f8:	4613      	mov	r3, r2
 80091fa:	009b      	lsls	r3, r3, #2
 80091fc:	4413      	add	r3, r2
 80091fe:	009b      	lsls	r3, r3, #2
 8009200:	4a13      	ldr	r2, [pc, #76]	; (8009250 <vTaskSwitchContext+0xb8>)
 8009202:	4413      	add	r3, r2
 8009204:	60bb      	str	r3, [r7, #8]
 8009206:	68bb      	ldr	r3, [r7, #8]
 8009208:	685b      	ldr	r3, [r3, #4]
 800920a:	685a      	ldr	r2, [r3, #4]
 800920c:	68bb      	ldr	r3, [r7, #8]
 800920e:	605a      	str	r2, [r3, #4]
 8009210:	68bb      	ldr	r3, [r7, #8]
 8009212:	685a      	ldr	r2, [r3, #4]
 8009214:	68bb      	ldr	r3, [r7, #8]
 8009216:	3308      	adds	r3, #8
 8009218:	429a      	cmp	r2, r3
 800921a:	d104      	bne.n	8009226 <vTaskSwitchContext+0x8e>
 800921c:	68bb      	ldr	r3, [r7, #8]
 800921e:	685b      	ldr	r3, [r3, #4]
 8009220:	685a      	ldr	r2, [r3, #4]
 8009222:	68bb      	ldr	r3, [r7, #8]
 8009224:	605a      	str	r2, [r3, #4]
 8009226:	68bb      	ldr	r3, [r7, #8]
 8009228:	685b      	ldr	r3, [r3, #4]
 800922a:	68db      	ldr	r3, [r3, #12]
 800922c:	4a09      	ldr	r2, [pc, #36]	; (8009254 <vTaskSwitchContext+0xbc>)
 800922e:	6013      	str	r3, [r2, #0]
 8009230:	4a06      	ldr	r2, [pc, #24]	; (800924c <vTaskSwitchContext+0xb4>)
 8009232:	68fb      	ldr	r3, [r7, #12]
 8009234:	6013      	str	r3, [r2, #0]
}
 8009236:	bf00      	nop
 8009238:	3714      	adds	r7, #20
 800923a:	46bd      	mov	sp, r7
 800923c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009240:	4770      	bx	lr
 8009242:	bf00      	nop
 8009244:	20000f0c 	.word	0x20000f0c
 8009248:	20000ef8 	.word	0x20000ef8
 800924c:	20000eec 	.word	0x20000eec
 8009250:	20000a14 	.word	0x20000a14
 8009254:	20000a10 	.word	0x20000a10

08009258 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009258:	b580      	push	{r7, lr}
 800925a:	b084      	sub	sp, #16
 800925c:	af00      	add	r7, sp, #0
 800925e:	6078      	str	r0, [r7, #4]
 8009260:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	2b00      	cmp	r3, #0
 8009266:	d10c      	bne.n	8009282 <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 8009268:	f04f 0350 	mov.w	r3, #80	; 0x50
 800926c:	b672      	cpsid	i
 800926e:	f383 8811 	msr	BASEPRI, r3
 8009272:	f3bf 8f6f 	isb	sy
 8009276:	f3bf 8f4f 	dsb	sy
 800927a:	b662      	cpsie	i
 800927c:	60fb      	str	r3, [r7, #12]
}
 800927e:	bf00      	nop
 8009280:	e7fe      	b.n	8009280 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009282:	4b07      	ldr	r3, [pc, #28]	; (80092a0 <vTaskPlaceOnEventList+0x48>)
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	3318      	adds	r3, #24
 8009288:	4619      	mov	r1, r3
 800928a:	6878      	ldr	r0, [r7, #4]
 800928c:	f7fe faff 	bl	800788e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009290:	2101      	movs	r1, #1
 8009292:	6838      	ldr	r0, [r7, #0]
 8009294:	f000 fd9a 	bl	8009dcc <prvAddCurrentTaskToDelayedList>
}
 8009298:	bf00      	nop
 800929a:	3710      	adds	r7, #16
 800929c:	46bd      	mov	sp, r7
 800929e:	bd80      	pop	{r7, pc}
 80092a0:	20000a10 	.word	0x20000a10

080092a4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80092a4:	b580      	push	{r7, lr}
 80092a6:	b086      	sub	sp, #24
 80092a8:	af00      	add	r7, sp, #0
 80092aa:	60f8      	str	r0, [r7, #12]
 80092ac:	60b9      	str	r1, [r7, #8]
 80092ae:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	d10c      	bne.n	80092d0 <vTaskPlaceOnEventListRestricted+0x2c>
	__asm volatile
 80092b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092ba:	b672      	cpsid	i
 80092bc:	f383 8811 	msr	BASEPRI, r3
 80092c0:	f3bf 8f6f 	isb	sy
 80092c4:	f3bf 8f4f 	dsb	sy
 80092c8:	b662      	cpsie	i
 80092ca:	617b      	str	r3, [r7, #20]
}
 80092cc:	bf00      	nop
 80092ce:	e7fe      	b.n	80092ce <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80092d0:	4b0a      	ldr	r3, [pc, #40]	; (80092fc <vTaskPlaceOnEventListRestricted+0x58>)
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	3318      	adds	r3, #24
 80092d6:	4619      	mov	r1, r3
 80092d8:	68f8      	ldr	r0, [r7, #12]
 80092da:	f7fe fab4 	bl	8007846 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	2b00      	cmp	r3, #0
 80092e2:	d002      	beq.n	80092ea <vTaskPlaceOnEventListRestricted+0x46>
		{
			xTicksToWait = portMAX_DELAY;
 80092e4:	f04f 33ff 	mov.w	r3, #4294967295
 80092e8:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80092ea:	6879      	ldr	r1, [r7, #4]
 80092ec:	68b8      	ldr	r0, [r7, #8]
 80092ee:	f000 fd6d 	bl	8009dcc <prvAddCurrentTaskToDelayedList>
	}
 80092f2:	bf00      	nop
 80092f4:	3718      	adds	r7, #24
 80092f6:	46bd      	mov	sp, r7
 80092f8:	bd80      	pop	{r7, pc}
 80092fa:	bf00      	nop
 80092fc:	20000a10 	.word	0x20000a10

08009300 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009300:	b580      	push	{r7, lr}
 8009302:	b086      	sub	sp, #24
 8009304:	af00      	add	r7, sp, #0
 8009306:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	68db      	ldr	r3, [r3, #12]
 800930c:	68db      	ldr	r3, [r3, #12]
 800930e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8009310:	693b      	ldr	r3, [r7, #16]
 8009312:	2b00      	cmp	r3, #0
 8009314:	d10c      	bne.n	8009330 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 8009316:	f04f 0350 	mov.w	r3, #80	; 0x50
 800931a:	b672      	cpsid	i
 800931c:	f383 8811 	msr	BASEPRI, r3
 8009320:	f3bf 8f6f 	isb	sy
 8009324:	f3bf 8f4f 	dsb	sy
 8009328:	b662      	cpsie	i
 800932a:	60fb      	str	r3, [r7, #12]
}
 800932c:	bf00      	nop
 800932e:	e7fe      	b.n	800932e <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009330:	693b      	ldr	r3, [r7, #16]
 8009332:	3318      	adds	r3, #24
 8009334:	4618      	mov	r0, r3
 8009336:	f7fe fae3 	bl	8007900 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800933a:	4b1e      	ldr	r3, [pc, #120]	; (80093b4 <xTaskRemoveFromEventList+0xb4>)
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	2b00      	cmp	r3, #0
 8009340:	d11d      	bne.n	800937e <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009342:	693b      	ldr	r3, [r7, #16]
 8009344:	3304      	adds	r3, #4
 8009346:	4618      	mov	r0, r3
 8009348:	f7fe fada 	bl	8007900 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800934c:	693b      	ldr	r3, [r7, #16]
 800934e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009350:	4b19      	ldr	r3, [pc, #100]	; (80093b8 <xTaskRemoveFromEventList+0xb8>)
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	429a      	cmp	r2, r3
 8009356:	d903      	bls.n	8009360 <xTaskRemoveFromEventList+0x60>
 8009358:	693b      	ldr	r3, [r7, #16]
 800935a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800935c:	4a16      	ldr	r2, [pc, #88]	; (80093b8 <xTaskRemoveFromEventList+0xb8>)
 800935e:	6013      	str	r3, [r2, #0]
 8009360:	693b      	ldr	r3, [r7, #16]
 8009362:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009364:	4613      	mov	r3, r2
 8009366:	009b      	lsls	r3, r3, #2
 8009368:	4413      	add	r3, r2
 800936a:	009b      	lsls	r3, r3, #2
 800936c:	4a13      	ldr	r2, [pc, #76]	; (80093bc <xTaskRemoveFromEventList+0xbc>)
 800936e:	441a      	add	r2, r3
 8009370:	693b      	ldr	r3, [r7, #16]
 8009372:	3304      	adds	r3, #4
 8009374:	4619      	mov	r1, r3
 8009376:	4610      	mov	r0, r2
 8009378:	f7fe fa65 	bl	8007846 <vListInsertEnd>
 800937c:	e005      	b.n	800938a <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800937e:	693b      	ldr	r3, [r7, #16]
 8009380:	3318      	adds	r3, #24
 8009382:	4619      	mov	r1, r3
 8009384:	480e      	ldr	r0, [pc, #56]	; (80093c0 <xTaskRemoveFromEventList+0xc0>)
 8009386:	f7fe fa5e 	bl	8007846 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800938a:	693b      	ldr	r3, [r7, #16]
 800938c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800938e:	4b0d      	ldr	r3, [pc, #52]	; (80093c4 <xTaskRemoveFromEventList+0xc4>)
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009394:	429a      	cmp	r2, r3
 8009396:	d905      	bls.n	80093a4 <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009398:	2301      	movs	r3, #1
 800939a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800939c:	4b0a      	ldr	r3, [pc, #40]	; (80093c8 <xTaskRemoveFromEventList+0xc8>)
 800939e:	2201      	movs	r2, #1
 80093a0:	601a      	str	r2, [r3, #0]
 80093a2:	e001      	b.n	80093a8 <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 80093a4:	2300      	movs	r3, #0
 80093a6:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80093a8:	697b      	ldr	r3, [r7, #20]
}
 80093aa:	4618      	mov	r0, r3
 80093ac:	3718      	adds	r7, #24
 80093ae:	46bd      	mov	sp, r7
 80093b0:	bd80      	pop	{r7, pc}
 80093b2:	bf00      	nop
 80093b4:	20000f0c 	.word	0x20000f0c
 80093b8:	20000eec 	.word	0x20000eec
 80093bc:	20000a14 	.word	0x20000a14
 80093c0:	20000ea4 	.word	0x20000ea4
 80093c4:	20000a10 	.word	0x20000a10
 80093c8:	20000ef8 	.word	0x20000ef8

080093cc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80093cc:	b480      	push	{r7}
 80093ce:	b083      	sub	sp, #12
 80093d0:	af00      	add	r7, sp, #0
 80093d2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80093d4:	4b06      	ldr	r3, [pc, #24]	; (80093f0 <vTaskInternalSetTimeOutState+0x24>)
 80093d6:	681a      	ldr	r2, [r3, #0]
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80093dc:	4b05      	ldr	r3, [pc, #20]	; (80093f4 <vTaskInternalSetTimeOutState+0x28>)
 80093de:	681a      	ldr	r2, [r3, #0]
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	605a      	str	r2, [r3, #4]
}
 80093e4:	bf00      	nop
 80093e6:	370c      	adds	r7, #12
 80093e8:	46bd      	mov	sp, r7
 80093ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ee:	4770      	bx	lr
 80093f0:	20000efc 	.word	0x20000efc
 80093f4:	20000ee8 	.word	0x20000ee8

080093f8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80093f8:	b580      	push	{r7, lr}
 80093fa:	b088      	sub	sp, #32
 80093fc:	af00      	add	r7, sp, #0
 80093fe:	6078      	str	r0, [r7, #4]
 8009400:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	2b00      	cmp	r3, #0
 8009406:	d10c      	bne.n	8009422 <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 8009408:	f04f 0350 	mov.w	r3, #80	; 0x50
 800940c:	b672      	cpsid	i
 800940e:	f383 8811 	msr	BASEPRI, r3
 8009412:	f3bf 8f6f 	isb	sy
 8009416:	f3bf 8f4f 	dsb	sy
 800941a:	b662      	cpsie	i
 800941c:	613b      	str	r3, [r7, #16]
}
 800941e:	bf00      	nop
 8009420:	e7fe      	b.n	8009420 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 8009422:	683b      	ldr	r3, [r7, #0]
 8009424:	2b00      	cmp	r3, #0
 8009426:	d10c      	bne.n	8009442 <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 8009428:	f04f 0350 	mov.w	r3, #80	; 0x50
 800942c:	b672      	cpsid	i
 800942e:	f383 8811 	msr	BASEPRI, r3
 8009432:	f3bf 8f6f 	isb	sy
 8009436:	f3bf 8f4f 	dsb	sy
 800943a:	b662      	cpsie	i
 800943c:	60fb      	str	r3, [r7, #12]
}
 800943e:	bf00      	nop
 8009440:	e7fe      	b.n	8009440 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 8009442:	f001 fa43 	bl	800a8cc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8009446:	4b1d      	ldr	r3, [pc, #116]	; (80094bc <xTaskCheckForTimeOut+0xc4>)
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	685b      	ldr	r3, [r3, #4]
 8009450:	69ba      	ldr	r2, [r7, #24]
 8009452:	1ad3      	subs	r3, r2, r3
 8009454:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8009456:	683b      	ldr	r3, [r7, #0]
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800945e:	d102      	bne.n	8009466 <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009460:	2300      	movs	r3, #0
 8009462:	61fb      	str	r3, [r7, #28]
 8009464:	e023      	b.n	80094ae <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	681a      	ldr	r2, [r3, #0]
 800946a:	4b15      	ldr	r3, [pc, #84]	; (80094c0 <xTaskCheckForTimeOut+0xc8>)
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	429a      	cmp	r2, r3
 8009470:	d007      	beq.n	8009482 <xTaskCheckForTimeOut+0x8a>
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	685b      	ldr	r3, [r3, #4]
 8009476:	69ba      	ldr	r2, [r7, #24]
 8009478:	429a      	cmp	r2, r3
 800947a:	d302      	bcc.n	8009482 <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800947c:	2301      	movs	r3, #1
 800947e:	61fb      	str	r3, [r7, #28]
 8009480:	e015      	b.n	80094ae <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009482:	683b      	ldr	r3, [r7, #0]
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	697a      	ldr	r2, [r7, #20]
 8009488:	429a      	cmp	r2, r3
 800948a:	d20b      	bcs.n	80094a4 <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800948c:	683b      	ldr	r3, [r7, #0]
 800948e:	681a      	ldr	r2, [r3, #0]
 8009490:	697b      	ldr	r3, [r7, #20]
 8009492:	1ad2      	subs	r2, r2, r3
 8009494:	683b      	ldr	r3, [r7, #0]
 8009496:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009498:	6878      	ldr	r0, [r7, #4]
 800949a:	f7ff ff97 	bl	80093cc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800949e:	2300      	movs	r3, #0
 80094a0:	61fb      	str	r3, [r7, #28]
 80094a2:	e004      	b.n	80094ae <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 80094a4:	683b      	ldr	r3, [r7, #0]
 80094a6:	2200      	movs	r2, #0
 80094a8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80094aa:	2301      	movs	r3, #1
 80094ac:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80094ae:	f001 fa41 	bl	800a934 <vPortExitCritical>

	return xReturn;
 80094b2:	69fb      	ldr	r3, [r7, #28]
}
 80094b4:	4618      	mov	r0, r3
 80094b6:	3720      	adds	r7, #32
 80094b8:	46bd      	mov	sp, r7
 80094ba:	bd80      	pop	{r7, pc}
 80094bc:	20000ee8 	.word	0x20000ee8
 80094c0:	20000efc 	.word	0x20000efc

080094c4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80094c4:	b480      	push	{r7}
 80094c6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80094c8:	4b03      	ldr	r3, [pc, #12]	; (80094d8 <vTaskMissedYield+0x14>)
 80094ca:	2201      	movs	r2, #1
 80094cc:	601a      	str	r2, [r3, #0]
}
 80094ce:	bf00      	nop
 80094d0:	46bd      	mov	sp, r7
 80094d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094d6:	4770      	bx	lr
 80094d8:	20000ef8 	.word	0x20000ef8

080094dc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80094dc:	b580      	push	{r7, lr}
 80094de:	b082      	sub	sp, #8
 80094e0:	af00      	add	r7, sp, #0
 80094e2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80094e4:	f000 f854 	bl	8009590 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80094e8:	4b07      	ldr	r3, [pc, #28]	; (8009508 <prvIdleTask+0x2c>)
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	2b01      	cmp	r3, #1
 80094ee:	d907      	bls.n	8009500 <prvIdleTask+0x24>
			{
				taskYIELD();
 80094f0:	4b06      	ldr	r3, [pc, #24]	; (800950c <prvIdleTask+0x30>)
 80094f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80094f6:	601a      	str	r2, [r3, #0]
 80094f8:	f3bf 8f4f 	dsb	sy
 80094fc:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 8009500:	f7f7 fe34 	bl	800116c <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 8009504:	e7ee      	b.n	80094e4 <prvIdleTask+0x8>
 8009506:	bf00      	nop
 8009508:	20000a14 	.word	0x20000a14
 800950c:	e000ed04 	.word	0xe000ed04

08009510 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009510:	b580      	push	{r7, lr}
 8009512:	b082      	sub	sp, #8
 8009514:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009516:	2300      	movs	r3, #0
 8009518:	607b      	str	r3, [r7, #4]
 800951a:	e00c      	b.n	8009536 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800951c:	687a      	ldr	r2, [r7, #4]
 800951e:	4613      	mov	r3, r2
 8009520:	009b      	lsls	r3, r3, #2
 8009522:	4413      	add	r3, r2
 8009524:	009b      	lsls	r3, r3, #2
 8009526:	4a12      	ldr	r2, [pc, #72]	; (8009570 <prvInitialiseTaskLists+0x60>)
 8009528:	4413      	add	r3, r2
 800952a:	4618      	mov	r0, r3
 800952c:	f7fe f95e 	bl	80077ec <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	3301      	adds	r3, #1
 8009534:	607b      	str	r3, [r7, #4]
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	2b37      	cmp	r3, #55	; 0x37
 800953a:	d9ef      	bls.n	800951c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800953c:	480d      	ldr	r0, [pc, #52]	; (8009574 <prvInitialiseTaskLists+0x64>)
 800953e:	f7fe f955 	bl	80077ec <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009542:	480d      	ldr	r0, [pc, #52]	; (8009578 <prvInitialiseTaskLists+0x68>)
 8009544:	f7fe f952 	bl	80077ec <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009548:	480c      	ldr	r0, [pc, #48]	; (800957c <prvInitialiseTaskLists+0x6c>)
 800954a:	f7fe f94f 	bl	80077ec <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800954e:	480c      	ldr	r0, [pc, #48]	; (8009580 <prvInitialiseTaskLists+0x70>)
 8009550:	f7fe f94c 	bl	80077ec <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009554:	480b      	ldr	r0, [pc, #44]	; (8009584 <prvInitialiseTaskLists+0x74>)
 8009556:	f7fe f949 	bl	80077ec <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800955a:	4b0b      	ldr	r3, [pc, #44]	; (8009588 <prvInitialiseTaskLists+0x78>)
 800955c:	4a05      	ldr	r2, [pc, #20]	; (8009574 <prvInitialiseTaskLists+0x64>)
 800955e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009560:	4b0a      	ldr	r3, [pc, #40]	; (800958c <prvInitialiseTaskLists+0x7c>)
 8009562:	4a05      	ldr	r2, [pc, #20]	; (8009578 <prvInitialiseTaskLists+0x68>)
 8009564:	601a      	str	r2, [r3, #0]
}
 8009566:	bf00      	nop
 8009568:	3708      	adds	r7, #8
 800956a:	46bd      	mov	sp, r7
 800956c:	bd80      	pop	{r7, pc}
 800956e:	bf00      	nop
 8009570:	20000a14 	.word	0x20000a14
 8009574:	20000e74 	.word	0x20000e74
 8009578:	20000e88 	.word	0x20000e88
 800957c:	20000ea4 	.word	0x20000ea4
 8009580:	20000eb8 	.word	0x20000eb8
 8009584:	20000ed0 	.word	0x20000ed0
 8009588:	20000e9c 	.word	0x20000e9c
 800958c:	20000ea0 	.word	0x20000ea0

08009590 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009590:	b580      	push	{r7, lr}
 8009592:	b082      	sub	sp, #8
 8009594:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009596:	e019      	b.n	80095cc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009598:	f001 f998 	bl	800a8cc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800959c:	4b10      	ldr	r3, [pc, #64]	; (80095e0 <prvCheckTasksWaitingTermination+0x50>)
 800959e:	68db      	ldr	r3, [r3, #12]
 80095a0:	68db      	ldr	r3, [r3, #12]
 80095a2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	3304      	adds	r3, #4
 80095a8:	4618      	mov	r0, r3
 80095aa:	f7fe f9a9 	bl	8007900 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80095ae:	4b0d      	ldr	r3, [pc, #52]	; (80095e4 <prvCheckTasksWaitingTermination+0x54>)
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	3b01      	subs	r3, #1
 80095b4:	4a0b      	ldr	r2, [pc, #44]	; (80095e4 <prvCheckTasksWaitingTermination+0x54>)
 80095b6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80095b8:	4b0b      	ldr	r3, [pc, #44]	; (80095e8 <prvCheckTasksWaitingTermination+0x58>)
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	3b01      	subs	r3, #1
 80095be:	4a0a      	ldr	r2, [pc, #40]	; (80095e8 <prvCheckTasksWaitingTermination+0x58>)
 80095c0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80095c2:	f001 f9b7 	bl	800a934 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80095c6:	6878      	ldr	r0, [r7, #4]
 80095c8:	f000 f810 	bl	80095ec <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80095cc:	4b06      	ldr	r3, [pc, #24]	; (80095e8 <prvCheckTasksWaitingTermination+0x58>)
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	d1e1      	bne.n	8009598 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80095d4:	bf00      	nop
 80095d6:	bf00      	nop
 80095d8:	3708      	adds	r7, #8
 80095da:	46bd      	mov	sp, r7
 80095dc:	bd80      	pop	{r7, pc}
 80095de:	bf00      	nop
 80095e0:	20000eb8 	.word	0x20000eb8
 80095e4:	20000ee4 	.word	0x20000ee4
 80095e8:	20000ecc 	.word	0x20000ecc

080095ec <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80095ec:	b580      	push	{r7, lr}
 80095ee:	b084      	sub	sp, #16
 80095f0:	af00      	add	r7, sp, #0
 80095f2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80095fa:	2b00      	cmp	r3, #0
 80095fc:	d108      	bne.n	8009610 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009602:	4618      	mov	r0, r3
 8009604:	f001 fb58 	bl	800acb8 <vPortFree>
				vPortFree( pxTCB );
 8009608:	6878      	ldr	r0, [r7, #4]
 800960a:	f001 fb55 	bl	800acb8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800960e:	e01a      	b.n	8009646 <prvDeleteTCB+0x5a>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8009616:	2b01      	cmp	r3, #1
 8009618:	d103      	bne.n	8009622 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800961a:	6878      	ldr	r0, [r7, #4]
 800961c:	f001 fb4c 	bl	800acb8 <vPortFree>
	}
 8009620:	e011      	b.n	8009646 <prvDeleteTCB+0x5a>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8009628:	2b02      	cmp	r3, #2
 800962a:	d00c      	beq.n	8009646 <prvDeleteTCB+0x5a>
	__asm volatile
 800962c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009630:	b672      	cpsid	i
 8009632:	f383 8811 	msr	BASEPRI, r3
 8009636:	f3bf 8f6f 	isb	sy
 800963a:	f3bf 8f4f 	dsb	sy
 800963e:	b662      	cpsie	i
 8009640:	60fb      	str	r3, [r7, #12]
}
 8009642:	bf00      	nop
 8009644:	e7fe      	b.n	8009644 <prvDeleteTCB+0x58>
	}
 8009646:	bf00      	nop
 8009648:	3710      	adds	r7, #16
 800964a:	46bd      	mov	sp, r7
 800964c:	bd80      	pop	{r7, pc}
	...

08009650 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009650:	b480      	push	{r7}
 8009652:	b083      	sub	sp, #12
 8009654:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009656:	4b0c      	ldr	r3, [pc, #48]	; (8009688 <prvResetNextTaskUnblockTime+0x38>)
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	2b00      	cmp	r3, #0
 800965e:	d104      	bne.n	800966a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009660:	4b0a      	ldr	r3, [pc, #40]	; (800968c <prvResetNextTaskUnblockTime+0x3c>)
 8009662:	f04f 32ff 	mov.w	r2, #4294967295
 8009666:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009668:	e008      	b.n	800967c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800966a:	4b07      	ldr	r3, [pc, #28]	; (8009688 <prvResetNextTaskUnblockTime+0x38>)
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	68db      	ldr	r3, [r3, #12]
 8009670:	68db      	ldr	r3, [r3, #12]
 8009672:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	685b      	ldr	r3, [r3, #4]
 8009678:	4a04      	ldr	r2, [pc, #16]	; (800968c <prvResetNextTaskUnblockTime+0x3c>)
 800967a:	6013      	str	r3, [r2, #0]
}
 800967c:	bf00      	nop
 800967e:	370c      	adds	r7, #12
 8009680:	46bd      	mov	sp, r7
 8009682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009686:	4770      	bx	lr
 8009688:	20000e9c 	.word	0x20000e9c
 800968c:	20000f04 	.word	0x20000f04

08009690 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8009690:	b480      	push	{r7}
 8009692:	b083      	sub	sp, #12
 8009694:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8009696:	4b05      	ldr	r3, [pc, #20]	; (80096ac <xTaskGetCurrentTaskHandle+0x1c>)
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	607b      	str	r3, [r7, #4]

		return xReturn;
 800969c:	687b      	ldr	r3, [r7, #4]
	}
 800969e:	4618      	mov	r0, r3
 80096a0:	370c      	adds	r7, #12
 80096a2:	46bd      	mov	sp, r7
 80096a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096a8:	4770      	bx	lr
 80096aa:	bf00      	nop
 80096ac:	20000a10 	.word	0x20000a10

080096b0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80096b0:	b480      	push	{r7}
 80096b2:	b083      	sub	sp, #12
 80096b4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80096b6:	4b0b      	ldr	r3, [pc, #44]	; (80096e4 <xTaskGetSchedulerState+0x34>)
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	d102      	bne.n	80096c4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80096be:	2301      	movs	r3, #1
 80096c0:	607b      	str	r3, [r7, #4]
 80096c2:	e008      	b.n	80096d6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80096c4:	4b08      	ldr	r3, [pc, #32]	; (80096e8 <xTaskGetSchedulerState+0x38>)
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	d102      	bne.n	80096d2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80096cc:	2302      	movs	r3, #2
 80096ce:	607b      	str	r3, [r7, #4]
 80096d0:	e001      	b.n	80096d6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80096d2:	2300      	movs	r3, #0
 80096d4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80096d6:	687b      	ldr	r3, [r7, #4]
	}
 80096d8:	4618      	mov	r0, r3
 80096da:	370c      	adds	r7, #12
 80096dc:	46bd      	mov	sp, r7
 80096de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096e2:	4770      	bx	lr
 80096e4:	20000ef0 	.word	0x20000ef0
 80096e8:	20000f0c 	.word	0x20000f0c

080096ec <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80096ec:	b580      	push	{r7, lr}
 80096ee:	b084      	sub	sp, #16
 80096f0:	af00      	add	r7, sp, #0
 80096f2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80096f8:	2300      	movs	r3, #0
 80096fa:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	2b00      	cmp	r3, #0
 8009700:	d051      	beq.n	80097a6 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8009702:	68bb      	ldr	r3, [r7, #8]
 8009704:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009706:	4b2a      	ldr	r3, [pc, #168]	; (80097b0 <xTaskPriorityInherit+0xc4>)
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800970c:	429a      	cmp	r2, r3
 800970e:	d241      	bcs.n	8009794 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8009710:	68bb      	ldr	r3, [r7, #8]
 8009712:	699b      	ldr	r3, [r3, #24]
 8009714:	2b00      	cmp	r3, #0
 8009716:	db06      	blt.n	8009726 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009718:	4b25      	ldr	r3, [pc, #148]	; (80097b0 <xTaskPriorityInherit+0xc4>)
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800971e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009722:	68bb      	ldr	r3, [r7, #8]
 8009724:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8009726:	68bb      	ldr	r3, [r7, #8]
 8009728:	6959      	ldr	r1, [r3, #20]
 800972a:	68bb      	ldr	r3, [r7, #8]
 800972c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800972e:	4613      	mov	r3, r2
 8009730:	009b      	lsls	r3, r3, #2
 8009732:	4413      	add	r3, r2
 8009734:	009b      	lsls	r3, r3, #2
 8009736:	4a1f      	ldr	r2, [pc, #124]	; (80097b4 <xTaskPriorityInherit+0xc8>)
 8009738:	4413      	add	r3, r2
 800973a:	4299      	cmp	r1, r3
 800973c:	d122      	bne.n	8009784 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800973e:	68bb      	ldr	r3, [r7, #8]
 8009740:	3304      	adds	r3, #4
 8009742:	4618      	mov	r0, r3
 8009744:	f7fe f8dc 	bl	8007900 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009748:	4b19      	ldr	r3, [pc, #100]	; (80097b0 <xTaskPriorityInherit+0xc4>)
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800974e:	68bb      	ldr	r3, [r7, #8]
 8009750:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8009752:	68bb      	ldr	r3, [r7, #8]
 8009754:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009756:	4b18      	ldr	r3, [pc, #96]	; (80097b8 <xTaskPriorityInherit+0xcc>)
 8009758:	681b      	ldr	r3, [r3, #0]
 800975a:	429a      	cmp	r2, r3
 800975c:	d903      	bls.n	8009766 <xTaskPriorityInherit+0x7a>
 800975e:	68bb      	ldr	r3, [r7, #8]
 8009760:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009762:	4a15      	ldr	r2, [pc, #84]	; (80097b8 <xTaskPriorityInherit+0xcc>)
 8009764:	6013      	str	r3, [r2, #0]
 8009766:	68bb      	ldr	r3, [r7, #8]
 8009768:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800976a:	4613      	mov	r3, r2
 800976c:	009b      	lsls	r3, r3, #2
 800976e:	4413      	add	r3, r2
 8009770:	009b      	lsls	r3, r3, #2
 8009772:	4a10      	ldr	r2, [pc, #64]	; (80097b4 <xTaskPriorityInherit+0xc8>)
 8009774:	441a      	add	r2, r3
 8009776:	68bb      	ldr	r3, [r7, #8]
 8009778:	3304      	adds	r3, #4
 800977a:	4619      	mov	r1, r3
 800977c:	4610      	mov	r0, r2
 800977e:	f7fe f862 	bl	8007846 <vListInsertEnd>
 8009782:	e004      	b.n	800978e <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009784:	4b0a      	ldr	r3, [pc, #40]	; (80097b0 <xTaskPriorityInherit+0xc4>)
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800978a:	68bb      	ldr	r3, [r7, #8]
 800978c:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800978e:	2301      	movs	r3, #1
 8009790:	60fb      	str	r3, [r7, #12]
 8009792:	e008      	b.n	80097a6 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8009794:	68bb      	ldr	r3, [r7, #8]
 8009796:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009798:	4b05      	ldr	r3, [pc, #20]	; (80097b0 <xTaskPriorityInherit+0xc4>)
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800979e:	429a      	cmp	r2, r3
 80097a0:	d201      	bcs.n	80097a6 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80097a2:	2301      	movs	r3, #1
 80097a4:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80097a6:	68fb      	ldr	r3, [r7, #12]
	}
 80097a8:	4618      	mov	r0, r3
 80097aa:	3710      	adds	r7, #16
 80097ac:	46bd      	mov	sp, r7
 80097ae:	bd80      	pop	{r7, pc}
 80097b0:	20000a10 	.word	0x20000a10
 80097b4:	20000a14 	.word	0x20000a14
 80097b8:	20000eec 	.word	0x20000eec

080097bc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80097bc:	b580      	push	{r7, lr}
 80097be:	b086      	sub	sp, #24
 80097c0:	af00      	add	r7, sp, #0
 80097c2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80097c8:	2300      	movs	r3, #0
 80097ca:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	2b00      	cmp	r3, #0
 80097d0:	d05a      	beq.n	8009888 <xTaskPriorityDisinherit+0xcc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80097d2:	4b30      	ldr	r3, [pc, #192]	; (8009894 <xTaskPriorityDisinherit+0xd8>)
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	693a      	ldr	r2, [r7, #16]
 80097d8:	429a      	cmp	r2, r3
 80097da:	d00c      	beq.n	80097f6 <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 80097dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097e0:	b672      	cpsid	i
 80097e2:	f383 8811 	msr	BASEPRI, r3
 80097e6:	f3bf 8f6f 	isb	sy
 80097ea:	f3bf 8f4f 	dsb	sy
 80097ee:	b662      	cpsie	i
 80097f0:	60fb      	str	r3, [r7, #12]
}
 80097f2:	bf00      	nop
 80097f4:	e7fe      	b.n	80097f4 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 80097f6:	693b      	ldr	r3, [r7, #16]
 80097f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80097fa:	2b00      	cmp	r3, #0
 80097fc:	d10c      	bne.n	8009818 <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 80097fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009802:	b672      	cpsid	i
 8009804:	f383 8811 	msr	BASEPRI, r3
 8009808:	f3bf 8f6f 	isb	sy
 800980c:	f3bf 8f4f 	dsb	sy
 8009810:	b662      	cpsie	i
 8009812:	60bb      	str	r3, [r7, #8]
}
 8009814:	bf00      	nop
 8009816:	e7fe      	b.n	8009816 <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 8009818:	693b      	ldr	r3, [r7, #16]
 800981a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800981c:	1e5a      	subs	r2, r3, #1
 800981e:	693b      	ldr	r3, [r7, #16]
 8009820:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009822:	693b      	ldr	r3, [r7, #16]
 8009824:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009826:	693b      	ldr	r3, [r7, #16]
 8009828:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800982a:	429a      	cmp	r2, r3
 800982c:	d02c      	beq.n	8009888 <xTaskPriorityDisinherit+0xcc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800982e:	693b      	ldr	r3, [r7, #16]
 8009830:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009832:	2b00      	cmp	r3, #0
 8009834:	d128      	bne.n	8009888 <xTaskPriorityDisinherit+0xcc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009836:	693b      	ldr	r3, [r7, #16]
 8009838:	3304      	adds	r3, #4
 800983a:	4618      	mov	r0, r3
 800983c:	f7fe f860 	bl	8007900 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009840:	693b      	ldr	r3, [r7, #16]
 8009842:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009844:	693b      	ldr	r3, [r7, #16]
 8009846:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009848:	693b      	ldr	r3, [r7, #16]
 800984a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800984c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009850:	693b      	ldr	r3, [r7, #16]
 8009852:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009854:	693b      	ldr	r3, [r7, #16]
 8009856:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009858:	4b0f      	ldr	r3, [pc, #60]	; (8009898 <xTaskPriorityDisinherit+0xdc>)
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	429a      	cmp	r2, r3
 800985e:	d903      	bls.n	8009868 <xTaskPriorityDisinherit+0xac>
 8009860:	693b      	ldr	r3, [r7, #16]
 8009862:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009864:	4a0c      	ldr	r2, [pc, #48]	; (8009898 <xTaskPriorityDisinherit+0xdc>)
 8009866:	6013      	str	r3, [r2, #0]
 8009868:	693b      	ldr	r3, [r7, #16]
 800986a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800986c:	4613      	mov	r3, r2
 800986e:	009b      	lsls	r3, r3, #2
 8009870:	4413      	add	r3, r2
 8009872:	009b      	lsls	r3, r3, #2
 8009874:	4a09      	ldr	r2, [pc, #36]	; (800989c <xTaskPriorityDisinherit+0xe0>)
 8009876:	441a      	add	r2, r3
 8009878:	693b      	ldr	r3, [r7, #16]
 800987a:	3304      	adds	r3, #4
 800987c:	4619      	mov	r1, r3
 800987e:	4610      	mov	r0, r2
 8009880:	f7fd ffe1 	bl	8007846 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009884:	2301      	movs	r3, #1
 8009886:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009888:	697b      	ldr	r3, [r7, #20]
	}
 800988a:	4618      	mov	r0, r3
 800988c:	3718      	adds	r7, #24
 800988e:	46bd      	mov	sp, r7
 8009890:	bd80      	pop	{r7, pc}
 8009892:	bf00      	nop
 8009894:	20000a10 	.word	0x20000a10
 8009898:	20000eec 	.word	0x20000eec
 800989c:	20000a14 	.word	0x20000a14

080098a0 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80098a0:	b580      	push	{r7, lr}
 80098a2:	b088      	sub	sp, #32
 80098a4:	af00      	add	r7, sp, #0
 80098a6:	6078      	str	r0, [r7, #4]
 80098a8:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80098ae:	2301      	movs	r3, #1
 80098b0:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	d06e      	beq.n	8009996 <vTaskPriorityDisinheritAfterTimeout+0xf6>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80098b8:	69bb      	ldr	r3, [r7, #24]
 80098ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80098bc:	2b00      	cmp	r3, #0
 80098be:	d10c      	bne.n	80098da <vTaskPriorityDisinheritAfterTimeout+0x3a>
	__asm volatile
 80098c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098c4:	b672      	cpsid	i
 80098c6:	f383 8811 	msr	BASEPRI, r3
 80098ca:	f3bf 8f6f 	isb	sy
 80098ce:	f3bf 8f4f 	dsb	sy
 80098d2:	b662      	cpsie	i
 80098d4:	60fb      	str	r3, [r7, #12]
}
 80098d6:	bf00      	nop
 80098d8:	e7fe      	b.n	80098d8 <vTaskPriorityDisinheritAfterTimeout+0x38>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80098da:	69bb      	ldr	r3, [r7, #24]
 80098dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80098de:	683a      	ldr	r2, [r7, #0]
 80098e0:	429a      	cmp	r2, r3
 80098e2:	d902      	bls.n	80098ea <vTaskPriorityDisinheritAfterTimeout+0x4a>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80098e4:	683b      	ldr	r3, [r7, #0]
 80098e6:	61fb      	str	r3, [r7, #28]
 80098e8:	e002      	b.n	80098f0 <vTaskPriorityDisinheritAfterTimeout+0x50>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80098ea:	69bb      	ldr	r3, [r7, #24]
 80098ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80098ee:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80098f0:	69bb      	ldr	r3, [r7, #24]
 80098f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098f4:	69fa      	ldr	r2, [r7, #28]
 80098f6:	429a      	cmp	r2, r3
 80098f8:	d04d      	beq.n	8009996 <vTaskPriorityDisinheritAfterTimeout+0xf6>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80098fa:	69bb      	ldr	r3, [r7, #24]
 80098fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80098fe:	697a      	ldr	r2, [r7, #20]
 8009900:	429a      	cmp	r2, r3
 8009902:	d148      	bne.n	8009996 <vTaskPriorityDisinheritAfterTimeout+0xf6>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8009904:	4b26      	ldr	r3, [pc, #152]	; (80099a0 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	69ba      	ldr	r2, [r7, #24]
 800990a:	429a      	cmp	r2, r3
 800990c:	d10c      	bne.n	8009928 <vTaskPriorityDisinheritAfterTimeout+0x88>
	__asm volatile
 800990e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009912:	b672      	cpsid	i
 8009914:	f383 8811 	msr	BASEPRI, r3
 8009918:	f3bf 8f6f 	isb	sy
 800991c:	f3bf 8f4f 	dsb	sy
 8009920:	b662      	cpsie	i
 8009922:	60bb      	str	r3, [r7, #8]
}
 8009924:	bf00      	nop
 8009926:	e7fe      	b.n	8009926 <vTaskPriorityDisinheritAfterTimeout+0x86>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8009928:	69bb      	ldr	r3, [r7, #24]
 800992a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800992c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800992e:	69bb      	ldr	r3, [r7, #24]
 8009930:	69fa      	ldr	r2, [r7, #28]
 8009932:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8009934:	69bb      	ldr	r3, [r7, #24]
 8009936:	699b      	ldr	r3, [r3, #24]
 8009938:	2b00      	cmp	r3, #0
 800993a:	db04      	blt.n	8009946 <vTaskPriorityDisinheritAfterTimeout+0xa6>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800993c:	69fb      	ldr	r3, [r7, #28]
 800993e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009942:	69bb      	ldr	r3, [r7, #24]
 8009944:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8009946:	69bb      	ldr	r3, [r7, #24]
 8009948:	6959      	ldr	r1, [r3, #20]
 800994a:	693a      	ldr	r2, [r7, #16]
 800994c:	4613      	mov	r3, r2
 800994e:	009b      	lsls	r3, r3, #2
 8009950:	4413      	add	r3, r2
 8009952:	009b      	lsls	r3, r3, #2
 8009954:	4a13      	ldr	r2, [pc, #76]	; (80099a4 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8009956:	4413      	add	r3, r2
 8009958:	4299      	cmp	r1, r3
 800995a:	d11c      	bne.n	8009996 <vTaskPriorityDisinheritAfterTimeout+0xf6>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800995c:	69bb      	ldr	r3, [r7, #24]
 800995e:	3304      	adds	r3, #4
 8009960:	4618      	mov	r0, r3
 8009962:	f7fd ffcd 	bl	8007900 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8009966:	69bb      	ldr	r3, [r7, #24]
 8009968:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800996a:	4b0f      	ldr	r3, [pc, #60]	; (80099a8 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	429a      	cmp	r2, r3
 8009970:	d903      	bls.n	800997a <vTaskPriorityDisinheritAfterTimeout+0xda>
 8009972:	69bb      	ldr	r3, [r7, #24]
 8009974:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009976:	4a0c      	ldr	r2, [pc, #48]	; (80099a8 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 8009978:	6013      	str	r3, [r2, #0]
 800997a:	69bb      	ldr	r3, [r7, #24]
 800997c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800997e:	4613      	mov	r3, r2
 8009980:	009b      	lsls	r3, r3, #2
 8009982:	4413      	add	r3, r2
 8009984:	009b      	lsls	r3, r3, #2
 8009986:	4a07      	ldr	r2, [pc, #28]	; (80099a4 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8009988:	441a      	add	r2, r3
 800998a:	69bb      	ldr	r3, [r7, #24]
 800998c:	3304      	adds	r3, #4
 800998e:	4619      	mov	r1, r3
 8009990:	4610      	mov	r0, r2
 8009992:	f7fd ff58 	bl	8007846 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009996:	bf00      	nop
 8009998:	3720      	adds	r7, #32
 800999a:	46bd      	mov	sp, r7
 800999c:	bd80      	pop	{r7, pc}
 800999e:	bf00      	nop
 80099a0:	20000a10 	.word	0x20000a10
 80099a4:	20000a14 	.word	0x20000a14
 80099a8:	20000eec 	.word	0x20000eec

080099ac <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80099ac:	b480      	push	{r7}
 80099ae:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80099b0:	4b07      	ldr	r3, [pc, #28]	; (80099d0 <pvTaskIncrementMutexHeldCount+0x24>)
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	2b00      	cmp	r3, #0
 80099b6:	d004      	beq.n	80099c2 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80099b8:	4b05      	ldr	r3, [pc, #20]	; (80099d0 <pvTaskIncrementMutexHeldCount+0x24>)
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80099be:	3201      	adds	r2, #1
 80099c0:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 80099c2:	4b03      	ldr	r3, [pc, #12]	; (80099d0 <pvTaskIncrementMutexHeldCount+0x24>)
 80099c4:	681b      	ldr	r3, [r3, #0]
	}
 80099c6:	4618      	mov	r0, r3
 80099c8:	46bd      	mov	sp, r7
 80099ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ce:	4770      	bx	lr
 80099d0:	20000a10 	.word	0x20000a10

080099d4 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 80099d4:	b580      	push	{r7, lr}
 80099d6:	b086      	sub	sp, #24
 80099d8:	af00      	add	r7, sp, #0
 80099da:	60f8      	str	r0, [r7, #12]
 80099dc:	60b9      	str	r1, [r7, #8]
 80099de:	607a      	str	r2, [r7, #4]
 80099e0:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 80099e2:	f000 ff73 	bl	800a8cc <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 80099e6:	4b26      	ldr	r3, [pc, #152]	; (8009a80 <xTaskNotifyWait+0xac>)
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80099ee:	b2db      	uxtb	r3, r3
 80099f0:	2b02      	cmp	r3, #2
 80099f2:	d01a      	beq.n	8009a2a <xTaskNotifyWait+0x56>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 80099f4:	4b22      	ldr	r3, [pc, #136]	; (8009a80 <xTaskNotifyWait+0xac>)
 80099f6:	681b      	ldr	r3, [r3, #0]
 80099f8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80099fa:	68fa      	ldr	r2, [r7, #12]
 80099fc:	43d2      	mvns	r2, r2
 80099fe:	400a      	ands	r2, r1
 8009a00:	655a      	str	r2, [r3, #84]	; 0x54

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8009a02:	4b1f      	ldr	r3, [pc, #124]	; (8009a80 <xTaskNotifyWait+0xac>)
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	2201      	movs	r2, #1
 8009a08:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

				if( xTicksToWait > ( TickType_t ) 0 )
 8009a0c:	683b      	ldr	r3, [r7, #0]
 8009a0e:	2b00      	cmp	r3, #0
 8009a10:	d00b      	beq.n	8009a2a <xTaskNotifyWait+0x56>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009a12:	2101      	movs	r1, #1
 8009a14:	6838      	ldr	r0, [r7, #0]
 8009a16:	f000 f9d9 	bl	8009dcc <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8009a1a:	4b1a      	ldr	r3, [pc, #104]	; (8009a84 <xTaskNotifyWait+0xb0>)
 8009a1c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009a20:	601a      	str	r2, [r3, #0]
 8009a22:	f3bf 8f4f 	dsb	sy
 8009a26:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8009a2a:	f000 ff83 	bl	800a934 <vPortExitCritical>

		taskENTER_CRITICAL();
 8009a2e:	f000 ff4d 	bl	800a8cc <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	2b00      	cmp	r3, #0
 8009a36:	d004      	beq.n	8009a42 <xTaskNotifyWait+0x6e>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 8009a38:	4b11      	ldr	r3, [pc, #68]	; (8009a80 <xTaskNotifyWait+0xac>)
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8009a42:	4b0f      	ldr	r3, [pc, #60]	; (8009a80 <xTaskNotifyWait+0xac>)
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8009a4a:	b2db      	uxtb	r3, r3
 8009a4c:	2b02      	cmp	r3, #2
 8009a4e:	d002      	beq.n	8009a56 <xTaskNotifyWait+0x82>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 8009a50:	2300      	movs	r3, #0
 8009a52:	617b      	str	r3, [r7, #20]
 8009a54:	e008      	b.n	8009a68 <xTaskNotifyWait+0x94>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 8009a56:	4b0a      	ldr	r3, [pc, #40]	; (8009a80 <xTaskNotifyWait+0xac>)
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8009a5c:	68ba      	ldr	r2, [r7, #8]
 8009a5e:	43d2      	mvns	r2, r2
 8009a60:	400a      	ands	r2, r1
 8009a62:	655a      	str	r2, [r3, #84]	; 0x54
				xReturn = pdTRUE;
 8009a64:	2301      	movs	r3, #1
 8009a66:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009a68:	4b05      	ldr	r3, [pc, #20]	; (8009a80 <xTaskNotifyWait+0xac>)
 8009a6a:	681b      	ldr	r3, [r3, #0]
 8009a6c:	2200      	movs	r2, #0
 8009a6e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
		}
		taskEXIT_CRITICAL();
 8009a72:	f000 ff5f 	bl	800a934 <vPortExitCritical>

		return xReturn;
 8009a76:	697b      	ldr	r3, [r7, #20]
	}
 8009a78:	4618      	mov	r0, r3
 8009a7a:	3718      	adds	r7, #24
 8009a7c:	46bd      	mov	sp, r7
 8009a7e:	bd80      	pop	{r7, pc}
 8009a80:	20000a10 	.word	0x20000a10
 8009a84:	e000ed04 	.word	0xe000ed04

08009a88 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 8009a88:	b580      	push	{r7, lr}
 8009a8a:	b08a      	sub	sp, #40	; 0x28
 8009a8c:	af00      	add	r7, sp, #0
 8009a8e:	60f8      	str	r0, [r7, #12]
 8009a90:	60b9      	str	r1, [r7, #8]
 8009a92:	603b      	str	r3, [r7, #0]
 8009a94:	4613      	mov	r3, r2
 8009a96:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 8009a98:	2301      	movs	r3, #1
 8009a9a:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 8009a9c:	68fb      	ldr	r3, [r7, #12]
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	d10c      	bne.n	8009abc <xTaskGenericNotify+0x34>
	__asm volatile
 8009aa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009aa6:	b672      	cpsid	i
 8009aa8:	f383 8811 	msr	BASEPRI, r3
 8009aac:	f3bf 8f6f 	isb	sy
 8009ab0:	f3bf 8f4f 	dsb	sy
 8009ab4:	b662      	cpsie	i
 8009ab6:	61bb      	str	r3, [r7, #24]
}
 8009ab8:	bf00      	nop
 8009aba:	e7fe      	b.n	8009aba <xTaskGenericNotify+0x32>
		pxTCB = xTaskToNotify;
 8009abc:	68fb      	ldr	r3, [r7, #12]
 8009abe:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 8009ac0:	f000 ff04 	bl	800a8cc <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 8009ac4:	683b      	ldr	r3, [r7, #0]
 8009ac6:	2b00      	cmp	r3, #0
 8009ac8:	d003      	beq.n	8009ad2 <xTaskGenericNotify+0x4a>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8009aca:	6a3b      	ldr	r3, [r7, #32]
 8009acc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009ace:	683b      	ldr	r3, [r7, #0]
 8009ad0:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8009ad2:	6a3b      	ldr	r3, [r7, #32]
 8009ad4:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8009ad8:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8009ada:	6a3b      	ldr	r3, [r7, #32]
 8009adc:	2202      	movs	r2, #2
 8009ade:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

			switch( eAction )
 8009ae2:	79fb      	ldrb	r3, [r7, #7]
 8009ae4:	2b04      	cmp	r3, #4
 8009ae6:	d828      	bhi.n	8009b3a <xTaskGenericNotify+0xb2>
 8009ae8:	a201      	add	r2, pc, #4	; (adr r2, 8009af0 <xTaskGenericNotify+0x68>)
 8009aea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009aee:	bf00      	nop
 8009af0:	08009b5f 	.word	0x08009b5f
 8009af4:	08009b05 	.word	0x08009b05
 8009af8:	08009b13 	.word	0x08009b13
 8009afc:	08009b1f 	.word	0x08009b1f
 8009b00:	08009b27 	.word	0x08009b27
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8009b04:	6a3b      	ldr	r3, [r7, #32]
 8009b06:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009b08:	68bb      	ldr	r3, [r7, #8]
 8009b0a:	431a      	orrs	r2, r3
 8009b0c:	6a3b      	ldr	r3, [r7, #32]
 8009b0e:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 8009b10:	e028      	b.n	8009b64 <xTaskGenericNotify+0xdc>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8009b12:	6a3b      	ldr	r3, [r7, #32]
 8009b14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009b16:	1c5a      	adds	r2, r3, #1
 8009b18:	6a3b      	ldr	r3, [r7, #32]
 8009b1a:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 8009b1c:	e022      	b.n	8009b64 <xTaskGenericNotify+0xdc>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8009b1e:	6a3b      	ldr	r3, [r7, #32]
 8009b20:	68ba      	ldr	r2, [r7, #8]
 8009b22:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 8009b24:	e01e      	b.n	8009b64 <xTaskGenericNotify+0xdc>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8009b26:	7ffb      	ldrb	r3, [r7, #31]
 8009b28:	2b02      	cmp	r3, #2
 8009b2a:	d003      	beq.n	8009b34 <xTaskGenericNotify+0xac>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8009b2c:	6a3b      	ldr	r3, [r7, #32]
 8009b2e:	68ba      	ldr	r2, [r7, #8]
 8009b30:	655a      	str	r2, [r3, #84]	; 0x54
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8009b32:	e017      	b.n	8009b64 <xTaskGenericNotify+0xdc>
						xReturn = pdFAIL;
 8009b34:	2300      	movs	r3, #0
 8009b36:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 8009b38:	e014      	b.n	8009b64 <xTaskGenericNotify+0xdc>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8009b3a:	6a3b      	ldr	r3, [r7, #32]
 8009b3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009b3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b42:	d00e      	beq.n	8009b62 <xTaskGenericNotify+0xda>
	__asm volatile
 8009b44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b48:	b672      	cpsid	i
 8009b4a:	f383 8811 	msr	BASEPRI, r3
 8009b4e:	f3bf 8f6f 	isb	sy
 8009b52:	f3bf 8f4f 	dsb	sy
 8009b56:	b662      	cpsie	i
 8009b58:	617b      	str	r3, [r7, #20]
}
 8009b5a:	bf00      	nop
 8009b5c:	e7fe      	b.n	8009b5c <xTaskGenericNotify+0xd4>
					break;
 8009b5e:	bf00      	nop
 8009b60:	e000      	b.n	8009b64 <xTaskGenericNotify+0xdc>

					break;
 8009b62:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8009b64:	7ffb      	ldrb	r3, [r7, #31]
 8009b66:	2b01      	cmp	r3, #1
 8009b68:	d13c      	bne.n	8009be4 <xTaskGenericNotify+0x15c>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009b6a:	6a3b      	ldr	r3, [r7, #32]
 8009b6c:	3304      	adds	r3, #4
 8009b6e:	4618      	mov	r0, r3
 8009b70:	f7fd fec6 	bl	8007900 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 8009b74:	6a3b      	ldr	r3, [r7, #32]
 8009b76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009b78:	4b1e      	ldr	r3, [pc, #120]	; (8009bf4 <xTaskGenericNotify+0x16c>)
 8009b7a:	681b      	ldr	r3, [r3, #0]
 8009b7c:	429a      	cmp	r2, r3
 8009b7e:	d903      	bls.n	8009b88 <xTaskGenericNotify+0x100>
 8009b80:	6a3b      	ldr	r3, [r7, #32]
 8009b82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b84:	4a1b      	ldr	r2, [pc, #108]	; (8009bf4 <xTaskGenericNotify+0x16c>)
 8009b86:	6013      	str	r3, [r2, #0]
 8009b88:	6a3b      	ldr	r3, [r7, #32]
 8009b8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009b8c:	4613      	mov	r3, r2
 8009b8e:	009b      	lsls	r3, r3, #2
 8009b90:	4413      	add	r3, r2
 8009b92:	009b      	lsls	r3, r3, #2
 8009b94:	4a18      	ldr	r2, [pc, #96]	; (8009bf8 <xTaskGenericNotify+0x170>)
 8009b96:	441a      	add	r2, r3
 8009b98:	6a3b      	ldr	r3, [r7, #32]
 8009b9a:	3304      	adds	r3, #4
 8009b9c:	4619      	mov	r1, r3
 8009b9e:	4610      	mov	r0, r2
 8009ba0:	f7fd fe51 	bl	8007846 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8009ba4:	6a3b      	ldr	r3, [r7, #32]
 8009ba6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ba8:	2b00      	cmp	r3, #0
 8009baa:	d00c      	beq.n	8009bc6 <xTaskGenericNotify+0x13e>
	__asm volatile
 8009bac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bb0:	b672      	cpsid	i
 8009bb2:	f383 8811 	msr	BASEPRI, r3
 8009bb6:	f3bf 8f6f 	isb	sy
 8009bba:	f3bf 8f4f 	dsb	sy
 8009bbe:	b662      	cpsie	i
 8009bc0:	613b      	str	r3, [r7, #16]
}
 8009bc2:	bf00      	nop
 8009bc4:	e7fe      	b.n	8009bc4 <xTaskGenericNotify+0x13c>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009bc6:	6a3b      	ldr	r3, [r7, #32]
 8009bc8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009bca:	4b0c      	ldr	r3, [pc, #48]	; (8009bfc <xTaskGenericNotify+0x174>)
 8009bcc:	681b      	ldr	r3, [r3, #0]
 8009bce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009bd0:	429a      	cmp	r2, r3
 8009bd2:	d907      	bls.n	8009be4 <xTaskGenericNotify+0x15c>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 8009bd4:	4b0a      	ldr	r3, [pc, #40]	; (8009c00 <xTaskGenericNotify+0x178>)
 8009bd6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009bda:	601a      	str	r2, [r3, #0]
 8009bdc:	f3bf 8f4f 	dsb	sy
 8009be0:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8009be4:	f000 fea6 	bl	800a934 <vPortExitCritical>

		return xReturn;
 8009be8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8009bea:	4618      	mov	r0, r3
 8009bec:	3728      	adds	r7, #40	; 0x28
 8009bee:	46bd      	mov	sp, r7
 8009bf0:	bd80      	pop	{r7, pc}
 8009bf2:	bf00      	nop
 8009bf4:	20000eec 	.word	0x20000eec
 8009bf8:	20000a14 	.word	0x20000a14
 8009bfc:	20000a10 	.word	0x20000a10
 8009c00:	e000ed04 	.word	0xe000ed04

08009c04 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8009c04:	b580      	push	{r7, lr}
 8009c06:	b08e      	sub	sp, #56	; 0x38
 8009c08:	af00      	add	r7, sp, #0
 8009c0a:	60f8      	str	r0, [r7, #12]
 8009c0c:	60b9      	str	r1, [r7, #8]
 8009c0e:	603b      	str	r3, [r7, #0]
 8009c10:	4613      	mov	r3, r2
 8009c12:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 8009c14:	2301      	movs	r3, #1
 8009c16:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 8009c18:	68fb      	ldr	r3, [r7, #12]
 8009c1a:	2b00      	cmp	r3, #0
 8009c1c:	d10c      	bne.n	8009c38 <xTaskGenericNotifyFromISR+0x34>
	__asm volatile
 8009c1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c22:	b672      	cpsid	i
 8009c24:	f383 8811 	msr	BASEPRI, r3
 8009c28:	f3bf 8f6f 	isb	sy
 8009c2c:	f3bf 8f4f 	dsb	sy
 8009c30:	b662      	cpsie	i
 8009c32:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009c34:	bf00      	nop
 8009c36:	e7fe      	b.n	8009c36 <xTaskGenericNotifyFromISR+0x32>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009c38:	f000 ff30 	bl	800aa9c <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 8009c3c:	68fb      	ldr	r3, [r7, #12]
 8009c3e:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 8009c40:	f3ef 8211 	mrs	r2, BASEPRI
 8009c44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c48:	b672      	cpsid	i
 8009c4a:	f383 8811 	msr	BASEPRI, r3
 8009c4e:	f3bf 8f6f 	isb	sy
 8009c52:	f3bf 8f4f 	dsb	sy
 8009c56:	b662      	cpsie	i
 8009c58:	623a      	str	r2, [r7, #32]
 8009c5a:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 8009c5c:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009c5e:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 8009c60:	683b      	ldr	r3, [r7, #0]
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	d003      	beq.n	8009c6e <xTaskGenericNotifyFromISR+0x6a>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8009c66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c68:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009c6a:	683b      	ldr	r3, [r7, #0]
 8009c6c:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8009c6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c70:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8009c74:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8009c78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c7a:	2202      	movs	r2, #2
 8009c7c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

			switch( eAction )
 8009c80:	79fb      	ldrb	r3, [r7, #7]
 8009c82:	2b04      	cmp	r3, #4
 8009c84:	d828      	bhi.n	8009cd8 <xTaskGenericNotifyFromISR+0xd4>
 8009c86:	a201      	add	r2, pc, #4	; (adr r2, 8009c8c <xTaskGenericNotifyFromISR+0x88>)
 8009c88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c8c:	08009cfd 	.word	0x08009cfd
 8009c90:	08009ca1 	.word	0x08009ca1
 8009c94:	08009caf 	.word	0x08009caf
 8009c98:	08009cbb 	.word	0x08009cbb
 8009c9c:	08009cc3 	.word	0x08009cc3
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8009ca0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ca2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009ca4:	68bb      	ldr	r3, [r7, #8]
 8009ca6:	431a      	orrs	r2, r3
 8009ca8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009caa:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 8009cac:	e029      	b.n	8009d02 <xTaskGenericNotifyFromISR+0xfe>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8009cae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009cb2:	1c5a      	adds	r2, r3, #1
 8009cb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cb6:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 8009cb8:	e023      	b.n	8009d02 <xTaskGenericNotifyFromISR+0xfe>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8009cba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cbc:	68ba      	ldr	r2, [r7, #8]
 8009cbe:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 8009cc0:	e01f      	b.n	8009d02 <xTaskGenericNotifyFromISR+0xfe>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8009cc2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8009cc6:	2b02      	cmp	r3, #2
 8009cc8:	d003      	beq.n	8009cd2 <xTaskGenericNotifyFromISR+0xce>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8009cca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ccc:	68ba      	ldr	r2, [r7, #8]
 8009cce:	655a      	str	r2, [r3, #84]	; 0x54
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8009cd0:	e017      	b.n	8009d02 <xTaskGenericNotifyFromISR+0xfe>
						xReturn = pdFAIL;
 8009cd2:	2300      	movs	r3, #0
 8009cd4:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 8009cd6:	e014      	b.n	8009d02 <xTaskGenericNotifyFromISR+0xfe>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8009cd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009cdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ce0:	d00e      	beq.n	8009d00 <xTaskGenericNotifyFromISR+0xfc>
	__asm volatile
 8009ce2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ce6:	b672      	cpsid	i
 8009ce8:	f383 8811 	msr	BASEPRI, r3
 8009cec:	f3bf 8f6f 	isb	sy
 8009cf0:	f3bf 8f4f 	dsb	sy
 8009cf4:	b662      	cpsie	i
 8009cf6:	61bb      	str	r3, [r7, #24]
}
 8009cf8:	bf00      	nop
 8009cfa:	e7fe      	b.n	8009cfa <xTaskGenericNotifyFromISR+0xf6>
					break;
 8009cfc:	bf00      	nop
 8009cfe:	e000      	b.n	8009d02 <xTaskGenericNotifyFromISR+0xfe>
					break;
 8009d00:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8009d02:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8009d06:	2b01      	cmp	r3, #1
 8009d08:	d148      	bne.n	8009d9c <xTaskGenericNotifyFromISR+0x198>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8009d0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	d00c      	beq.n	8009d2c <xTaskGenericNotifyFromISR+0x128>
	__asm volatile
 8009d12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d16:	b672      	cpsid	i
 8009d18:	f383 8811 	msr	BASEPRI, r3
 8009d1c:	f3bf 8f6f 	isb	sy
 8009d20:	f3bf 8f4f 	dsb	sy
 8009d24:	b662      	cpsie	i
 8009d26:	617b      	str	r3, [r7, #20]
}
 8009d28:	bf00      	nop
 8009d2a:	e7fe      	b.n	8009d2a <xTaskGenericNotifyFromISR+0x126>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009d2c:	4b21      	ldr	r3, [pc, #132]	; (8009db4 <xTaskGenericNotifyFromISR+0x1b0>)
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	2b00      	cmp	r3, #0
 8009d32:	d11d      	bne.n	8009d70 <xTaskGenericNotifyFromISR+0x16c>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009d34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d36:	3304      	adds	r3, #4
 8009d38:	4618      	mov	r0, r3
 8009d3a:	f7fd fde1 	bl	8007900 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009d3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009d42:	4b1d      	ldr	r3, [pc, #116]	; (8009db8 <xTaskGenericNotifyFromISR+0x1b4>)
 8009d44:	681b      	ldr	r3, [r3, #0]
 8009d46:	429a      	cmp	r2, r3
 8009d48:	d903      	bls.n	8009d52 <xTaskGenericNotifyFromISR+0x14e>
 8009d4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d4e:	4a1a      	ldr	r2, [pc, #104]	; (8009db8 <xTaskGenericNotifyFromISR+0x1b4>)
 8009d50:	6013      	str	r3, [r2, #0]
 8009d52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009d56:	4613      	mov	r3, r2
 8009d58:	009b      	lsls	r3, r3, #2
 8009d5a:	4413      	add	r3, r2
 8009d5c:	009b      	lsls	r3, r3, #2
 8009d5e:	4a17      	ldr	r2, [pc, #92]	; (8009dbc <xTaskGenericNotifyFromISR+0x1b8>)
 8009d60:	441a      	add	r2, r3
 8009d62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d64:	3304      	adds	r3, #4
 8009d66:	4619      	mov	r1, r3
 8009d68:	4610      	mov	r0, r2
 8009d6a:	f7fd fd6c 	bl	8007846 <vListInsertEnd>
 8009d6e:	e005      	b.n	8009d7c <xTaskGenericNotifyFromISR+0x178>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8009d70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d72:	3318      	adds	r3, #24
 8009d74:	4619      	mov	r1, r3
 8009d76:	4812      	ldr	r0, [pc, #72]	; (8009dc0 <xTaskGenericNotifyFromISR+0x1bc>)
 8009d78:	f7fd fd65 	bl	8007846 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009d7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009d80:	4b10      	ldr	r3, [pc, #64]	; (8009dc4 <xTaskGenericNotifyFromISR+0x1c0>)
 8009d82:	681b      	ldr	r3, [r3, #0]
 8009d84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d86:	429a      	cmp	r2, r3
 8009d88:	d908      	bls.n	8009d9c <xTaskGenericNotifyFromISR+0x198>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 8009d8a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	d002      	beq.n	8009d96 <xTaskGenericNotifyFromISR+0x192>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 8009d90:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009d92:	2201      	movs	r2, #1
 8009d94:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 8009d96:	4b0c      	ldr	r3, [pc, #48]	; (8009dc8 <xTaskGenericNotifyFromISR+0x1c4>)
 8009d98:	2201      	movs	r2, #1
 8009d9a:	601a      	str	r2, [r3, #0]
 8009d9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d9e:	613b      	str	r3, [r7, #16]
	__asm volatile
 8009da0:	693b      	ldr	r3, [r7, #16]
 8009da2:	f383 8811 	msr	BASEPRI, r3
}
 8009da6:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 8009da8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 8009daa:	4618      	mov	r0, r3
 8009dac:	3738      	adds	r7, #56	; 0x38
 8009dae:	46bd      	mov	sp, r7
 8009db0:	bd80      	pop	{r7, pc}
 8009db2:	bf00      	nop
 8009db4:	20000f0c 	.word	0x20000f0c
 8009db8:	20000eec 	.word	0x20000eec
 8009dbc:	20000a14 	.word	0x20000a14
 8009dc0:	20000ea4 	.word	0x20000ea4
 8009dc4:	20000a10 	.word	0x20000a10
 8009dc8:	20000ef8 	.word	0x20000ef8

08009dcc <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009dcc:	b580      	push	{r7, lr}
 8009dce:	b084      	sub	sp, #16
 8009dd0:	af00      	add	r7, sp, #0
 8009dd2:	6078      	str	r0, [r7, #4]
 8009dd4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009dd6:	4b21      	ldr	r3, [pc, #132]	; (8009e5c <prvAddCurrentTaskToDelayedList+0x90>)
 8009dd8:	681b      	ldr	r3, [r3, #0]
 8009dda:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009ddc:	4b20      	ldr	r3, [pc, #128]	; (8009e60 <prvAddCurrentTaskToDelayedList+0x94>)
 8009dde:	681b      	ldr	r3, [r3, #0]
 8009de0:	3304      	adds	r3, #4
 8009de2:	4618      	mov	r0, r3
 8009de4:	f7fd fd8c 	bl	8007900 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009dee:	d10a      	bne.n	8009e06 <prvAddCurrentTaskToDelayedList+0x3a>
 8009df0:	683b      	ldr	r3, [r7, #0]
 8009df2:	2b00      	cmp	r3, #0
 8009df4:	d007      	beq.n	8009e06 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009df6:	4b1a      	ldr	r3, [pc, #104]	; (8009e60 <prvAddCurrentTaskToDelayedList+0x94>)
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	3304      	adds	r3, #4
 8009dfc:	4619      	mov	r1, r3
 8009dfe:	4819      	ldr	r0, [pc, #100]	; (8009e64 <prvAddCurrentTaskToDelayedList+0x98>)
 8009e00:	f7fd fd21 	bl	8007846 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009e04:	e026      	b.n	8009e54 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009e06:	68fa      	ldr	r2, [r7, #12]
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	4413      	add	r3, r2
 8009e0c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009e0e:	4b14      	ldr	r3, [pc, #80]	; (8009e60 <prvAddCurrentTaskToDelayedList+0x94>)
 8009e10:	681b      	ldr	r3, [r3, #0]
 8009e12:	68ba      	ldr	r2, [r7, #8]
 8009e14:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009e16:	68ba      	ldr	r2, [r7, #8]
 8009e18:	68fb      	ldr	r3, [r7, #12]
 8009e1a:	429a      	cmp	r2, r3
 8009e1c:	d209      	bcs.n	8009e32 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009e1e:	4b12      	ldr	r3, [pc, #72]	; (8009e68 <prvAddCurrentTaskToDelayedList+0x9c>)
 8009e20:	681a      	ldr	r2, [r3, #0]
 8009e22:	4b0f      	ldr	r3, [pc, #60]	; (8009e60 <prvAddCurrentTaskToDelayedList+0x94>)
 8009e24:	681b      	ldr	r3, [r3, #0]
 8009e26:	3304      	adds	r3, #4
 8009e28:	4619      	mov	r1, r3
 8009e2a:	4610      	mov	r0, r2
 8009e2c:	f7fd fd2f 	bl	800788e <vListInsert>
}
 8009e30:	e010      	b.n	8009e54 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009e32:	4b0e      	ldr	r3, [pc, #56]	; (8009e6c <prvAddCurrentTaskToDelayedList+0xa0>)
 8009e34:	681a      	ldr	r2, [r3, #0]
 8009e36:	4b0a      	ldr	r3, [pc, #40]	; (8009e60 <prvAddCurrentTaskToDelayedList+0x94>)
 8009e38:	681b      	ldr	r3, [r3, #0]
 8009e3a:	3304      	adds	r3, #4
 8009e3c:	4619      	mov	r1, r3
 8009e3e:	4610      	mov	r0, r2
 8009e40:	f7fd fd25 	bl	800788e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009e44:	4b0a      	ldr	r3, [pc, #40]	; (8009e70 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	68ba      	ldr	r2, [r7, #8]
 8009e4a:	429a      	cmp	r2, r3
 8009e4c:	d202      	bcs.n	8009e54 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8009e4e:	4a08      	ldr	r2, [pc, #32]	; (8009e70 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009e50:	68bb      	ldr	r3, [r7, #8]
 8009e52:	6013      	str	r3, [r2, #0]
}
 8009e54:	bf00      	nop
 8009e56:	3710      	adds	r7, #16
 8009e58:	46bd      	mov	sp, r7
 8009e5a:	bd80      	pop	{r7, pc}
 8009e5c:	20000ee8 	.word	0x20000ee8
 8009e60:	20000a10 	.word	0x20000a10
 8009e64:	20000ed0 	.word	0x20000ed0
 8009e68:	20000ea0 	.word	0x20000ea0
 8009e6c:	20000e9c 	.word	0x20000e9c
 8009e70:	20000f04 	.word	0x20000f04

08009e74 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8009e74:	b580      	push	{r7, lr}
 8009e76:	b08a      	sub	sp, #40	; 0x28
 8009e78:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8009e7a:	2300      	movs	r3, #0
 8009e7c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8009e7e:	f000 fbb5 	bl	800a5ec <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8009e82:	4b1d      	ldr	r3, [pc, #116]	; (8009ef8 <xTimerCreateTimerTask+0x84>)
 8009e84:	681b      	ldr	r3, [r3, #0]
 8009e86:	2b00      	cmp	r3, #0
 8009e88:	d021      	beq.n	8009ece <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8009e8a:	2300      	movs	r3, #0
 8009e8c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8009e8e:	2300      	movs	r3, #0
 8009e90:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8009e92:	1d3a      	adds	r2, r7, #4
 8009e94:	f107 0108 	add.w	r1, r7, #8
 8009e98:	f107 030c 	add.w	r3, r7, #12
 8009e9c:	4618      	mov	r0, r3
 8009e9e:	f7fd fc8b 	bl	80077b8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8009ea2:	6879      	ldr	r1, [r7, #4]
 8009ea4:	68bb      	ldr	r3, [r7, #8]
 8009ea6:	68fa      	ldr	r2, [r7, #12]
 8009ea8:	9202      	str	r2, [sp, #8]
 8009eaa:	9301      	str	r3, [sp, #4]
 8009eac:	2332      	movs	r3, #50	; 0x32
 8009eae:	9300      	str	r3, [sp, #0]
 8009eb0:	2300      	movs	r3, #0
 8009eb2:	460a      	mov	r2, r1
 8009eb4:	4911      	ldr	r1, [pc, #68]	; (8009efc <xTimerCreateTimerTask+0x88>)
 8009eb6:	4812      	ldr	r0, [pc, #72]	; (8009f00 <xTimerCreateTimerTask+0x8c>)
 8009eb8:	f7fe fd04 	bl	80088c4 <xTaskCreateStatic>
 8009ebc:	4603      	mov	r3, r0
 8009ebe:	4a11      	ldr	r2, [pc, #68]	; (8009f04 <xTimerCreateTimerTask+0x90>)
 8009ec0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8009ec2:	4b10      	ldr	r3, [pc, #64]	; (8009f04 <xTimerCreateTimerTask+0x90>)
 8009ec4:	681b      	ldr	r3, [r3, #0]
 8009ec6:	2b00      	cmp	r3, #0
 8009ec8:	d001      	beq.n	8009ece <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8009eca:	2301      	movs	r3, #1
 8009ecc:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8009ece:	697b      	ldr	r3, [r7, #20]
 8009ed0:	2b00      	cmp	r3, #0
 8009ed2:	d10c      	bne.n	8009eee <xTimerCreateTimerTask+0x7a>
	__asm volatile
 8009ed4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ed8:	b672      	cpsid	i
 8009eda:	f383 8811 	msr	BASEPRI, r3
 8009ede:	f3bf 8f6f 	isb	sy
 8009ee2:	f3bf 8f4f 	dsb	sy
 8009ee6:	b662      	cpsie	i
 8009ee8:	613b      	str	r3, [r7, #16]
}
 8009eea:	bf00      	nop
 8009eec:	e7fe      	b.n	8009eec <xTimerCreateTimerTask+0x78>
	return xReturn;
 8009eee:	697b      	ldr	r3, [r7, #20]
}
 8009ef0:	4618      	mov	r0, r3
 8009ef2:	3718      	adds	r7, #24
 8009ef4:	46bd      	mov	sp, r7
 8009ef6:	bd80      	pop	{r7, pc}
 8009ef8:	20000f40 	.word	0x20000f40
 8009efc:	0801a260 	.word	0x0801a260
 8009f00:	0800a185 	.word	0x0800a185
 8009f04:	20000f44 	.word	0x20000f44

08009f08 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 8009f08:	b580      	push	{r7, lr}
 8009f0a:	b088      	sub	sp, #32
 8009f0c:	af02      	add	r7, sp, #8
 8009f0e:	60f8      	str	r0, [r7, #12]
 8009f10:	60b9      	str	r1, [r7, #8]
 8009f12:	607a      	str	r2, [r7, #4]
 8009f14:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 8009f16:	202c      	movs	r0, #44	; 0x2c
 8009f18:	f000 fe04 	bl	800ab24 <pvPortMalloc>
 8009f1c:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 8009f1e:	697b      	ldr	r3, [r7, #20]
 8009f20:	2b00      	cmp	r3, #0
 8009f22:	d00d      	beq.n	8009f40 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The autoreload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 8009f24:	697b      	ldr	r3, [r7, #20]
 8009f26:	2200      	movs	r2, #0
 8009f28:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8009f2c:	697b      	ldr	r3, [r7, #20]
 8009f2e:	9301      	str	r3, [sp, #4]
 8009f30:	6a3b      	ldr	r3, [r7, #32]
 8009f32:	9300      	str	r3, [sp, #0]
 8009f34:	683b      	ldr	r3, [r7, #0]
 8009f36:	687a      	ldr	r2, [r7, #4]
 8009f38:	68b9      	ldr	r1, [r7, #8]
 8009f3a:	68f8      	ldr	r0, [r7, #12]
 8009f3c:	f000 f847 	bl	8009fce <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8009f40:	697b      	ldr	r3, [r7, #20]
	}
 8009f42:	4618      	mov	r0, r3
 8009f44:	3718      	adds	r7, #24
 8009f46:	46bd      	mov	sp, r7
 8009f48:	bd80      	pop	{r7, pc}

08009f4a <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 8009f4a:	b580      	push	{r7, lr}
 8009f4c:	b08a      	sub	sp, #40	; 0x28
 8009f4e:	af02      	add	r7, sp, #8
 8009f50:	60f8      	str	r0, [r7, #12]
 8009f52:	60b9      	str	r1, [r7, #8]
 8009f54:	607a      	str	r2, [r7, #4]
 8009f56:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 8009f58:	232c      	movs	r3, #44	; 0x2c
 8009f5a:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 8009f5c:	693b      	ldr	r3, [r7, #16]
 8009f5e:	2b2c      	cmp	r3, #44	; 0x2c
 8009f60:	d00c      	beq.n	8009f7c <xTimerCreateStatic+0x32>
	__asm volatile
 8009f62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f66:	b672      	cpsid	i
 8009f68:	f383 8811 	msr	BASEPRI, r3
 8009f6c:	f3bf 8f6f 	isb	sy
 8009f70:	f3bf 8f4f 	dsb	sy
 8009f74:	b662      	cpsie	i
 8009f76:	61bb      	str	r3, [r7, #24]
}
 8009f78:	bf00      	nop
 8009f7a:	e7fe      	b.n	8009f7a <xTimerCreateStatic+0x30>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8009f7c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 8009f7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f80:	2b00      	cmp	r3, #0
 8009f82:	d10c      	bne.n	8009f9e <xTimerCreateStatic+0x54>
	__asm volatile
 8009f84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f88:	b672      	cpsid	i
 8009f8a:	f383 8811 	msr	BASEPRI, r3
 8009f8e:	f3bf 8f6f 	isb	sy
 8009f92:	f3bf 8f4f 	dsb	sy
 8009f96:	b662      	cpsie	i
 8009f98:	617b      	str	r3, [r7, #20]
}
 8009f9a:	bf00      	nop
 8009f9c:	e7fe      	b.n	8009f9c <xTimerCreateStatic+0x52>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 8009f9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009fa0:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 8009fa2:	69fb      	ldr	r3, [r7, #28]
 8009fa4:	2b00      	cmp	r3, #0
 8009fa6:	d00d      	beq.n	8009fc4 <xTimerCreateStatic+0x7a>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			autoreload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 8009fa8:	69fb      	ldr	r3, [r7, #28]
 8009faa:	2202      	movs	r2, #2
 8009fac:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8009fb0:	69fb      	ldr	r3, [r7, #28]
 8009fb2:	9301      	str	r3, [sp, #4]
 8009fb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fb6:	9300      	str	r3, [sp, #0]
 8009fb8:	683b      	ldr	r3, [r7, #0]
 8009fba:	687a      	ldr	r2, [r7, #4]
 8009fbc:	68b9      	ldr	r1, [r7, #8]
 8009fbe:	68f8      	ldr	r0, [r7, #12]
 8009fc0:	f000 f805 	bl	8009fce <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8009fc4:	69fb      	ldr	r3, [r7, #28]
	}
 8009fc6:	4618      	mov	r0, r3
 8009fc8:	3720      	adds	r7, #32
 8009fca:	46bd      	mov	sp, r7
 8009fcc:	bd80      	pop	{r7, pc}

08009fce <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 8009fce:	b580      	push	{r7, lr}
 8009fd0:	b086      	sub	sp, #24
 8009fd2:	af00      	add	r7, sp, #0
 8009fd4:	60f8      	str	r0, [r7, #12]
 8009fd6:	60b9      	str	r1, [r7, #8]
 8009fd8:	607a      	str	r2, [r7, #4]
 8009fda:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8009fdc:	68bb      	ldr	r3, [r7, #8]
 8009fde:	2b00      	cmp	r3, #0
 8009fe0:	d10c      	bne.n	8009ffc <prvInitialiseNewTimer+0x2e>
	__asm volatile
 8009fe2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fe6:	b672      	cpsid	i
 8009fe8:	f383 8811 	msr	BASEPRI, r3
 8009fec:	f3bf 8f6f 	isb	sy
 8009ff0:	f3bf 8f4f 	dsb	sy
 8009ff4:	b662      	cpsie	i
 8009ff6:	617b      	str	r3, [r7, #20]
}
 8009ff8:	bf00      	nop
 8009ffa:	e7fe      	b.n	8009ffa <prvInitialiseNewTimer+0x2c>

	if( pxNewTimer != NULL )
 8009ffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	d01e      	beq.n	800a040 <prvInitialiseNewTimer+0x72>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 800a002:	f000 faf3 	bl	800a5ec <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 800a006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a008:	68fa      	ldr	r2, [r7, #12]
 800a00a:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800a00c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a00e:	68ba      	ldr	r2, [r7, #8]
 800a010:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 800a012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a014:	683a      	ldr	r2, [r7, #0]
 800a016:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800a018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a01a:	6a3a      	ldr	r2, [r7, #32]
 800a01c:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800a01e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a020:	3304      	adds	r3, #4
 800a022:	4618      	mov	r0, r3
 800a024:	f7fd fc02 	bl	800782c <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	2b00      	cmp	r3, #0
 800a02c:	d008      	beq.n	800a040 <prvInitialiseNewTimer+0x72>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 800a02e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a030:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a034:	f043 0304 	orr.w	r3, r3, #4
 800a038:	b2da      	uxtb	r2, r3
 800a03a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a03c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 800a040:	bf00      	nop
 800a042:	3718      	adds	r7, #24
 800a044:	46bd      	mov	sp, r7
 800a046:	bd80      	pop	{r7, pc}

0800a048 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800a048:	b580      	push	{r7, lr}
 800a04a:	b08a      	sub	sp, #40	; 0x28
 800a04c:	af00      	add	r7, sp, #0
 800a04e:	60f8      	str	r0, [r7, #12]
 800a050:	60b9      	str	r1, [r7, #8]
 800a052:	607a      	str	r2, [r7, #4]
 800a054:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800a056:	2300      	movs	r3, #0
 800a058:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800a05a:	68fb      	ldr	r3, [r7, #12]
 800a05c:	2b00      	cmp	r3, #0
 800a05e:	d10c      	bne.n	800a07a <xTimerGenericCommand+0x32>
	__asm volatile
 800a060:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a064:	b672      	cpsid	i
 800a066:	f383 8811 	msr	BASEPRI, r3
 800a06a:	f3bf 8f6f 	isb	sy
 800a06e:	f3bf 8f4f 	dsb	sy
 800a072:	b662      	cpsie	i
 800a074:	623b      	str	r3, [r7, #32]
}
 800a076:	bf00      	nop
 800a078:	e7fe      	b.n	800a078 <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800a07a:	4b1a      	ldr	r3, [pc, #104]	; (800a0e4 <xTimerGenericCommand+0x9c>)
 800a07c:	681b      	ldr	r3, [r3, #0]
 800a07e:	2b00      	cmp	r3, #0
 800a080:	d02a      	beq.n	800a0d8 <xTimerGenericCommand+0x90>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800a082:	68bb      	ldr	r3, [r7, #8]
 800a084:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800a08a:	68fb      	ldr	r3, [r7, #12]
 800a08c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800a08e:	68bb      	ldr	r3, [r7, #8]
 800a090:	2b05      	cmp	r3, #5
 800a092:	dc18      	bgt.n	800a0c6 <xTimerGenericCommand+0x7e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800a094:	f7ff fb0c 	bl	80096b0 <xTaskGetSchedulerState>
 800a098:	4603      	mov	r3, r0
 800a09a:	2b02      	cmp	r3, #2
 800a09c:	d109      	bne.n	800a0b2 <xTimerGenericCommand+0x6a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800a09e:	4b11      	ldr	r3, [pc, #68]	; (800a0e4 <xTimerGenericCommand+0x9c>)
 800a0a0:	6818      	ldr	r0, [r3, #0]
 800a0a2:	f107 0110 	add.w	r1, r7, #16
 800a0a6:	2300      	movs	r3, #0
 800a0a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a0aa:	f7fd fe5f 	bl	8007d6c <xQueueGenericSend>
 800a0ae:	6278      	str	r0, [r7, #36]	; 0x24
 800a0b0:	e012      	b.n	800a0d8 <xTimerGenericCommand+0x90>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800a0b2:	4b0c      	ldr	r3, [pc, #48]	; (800a0e4 <xTimerGenericCommand+0x9c>)
 800a0b4:	6818      	ldr	r0, [r3, #0]
 800a0b6:	f107 0110 	add.w	r1, r7, #16
 800a0ba:	2300      	movs	r3, #0
 800a0bc:	2200      	movs	r2, #0
 800a0be:	f7fd fe55 	bl	8007d6c <xQueueGenericSend>
 800a0c2:	6278      	str	r0, [r7, #36]	; 0x24
 800a0c4:	e008      	b.n	800a0d8 <xTimerGenericCommand+0x90>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800a0c6:	4b07      	ldr	r3, [pc, #28]	; (800a0e4 <xTimerGenericCommand+0x9c>)
 800a0c8:	6818      	ldr	r0, [r3, #0]
 800a0ca:	f107 0110 	add.w	r1, r7, #16
 800a0ce:	2300      	movs	r3, #0
 800a0d0:	683a      	ldr	r2, [r7, #0]
 800a0d2:	f7fd ff51 	bl	8007f78 <xQueueGenericSendFromISR>
 800a0d6:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800a0d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a0da:	4618      	mov	r0, r3
 800a0dc:	3728      	adds	r7, #40	; 0x28
 800a0de:	46bd      	mov	sp, r7
 800a0e0:	bd80      	pop	{r7, pc}
 800a0e2:	bf00      	nop
 800a0e4:	20000f40 	.word	0x20000f40

0800a0e8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800a0e8:	b580      	push	{r7, lr}
 800a0ea:	b088      	sub	sp, #32
 800a0ec:	af02      	add	r7, sp, #8
 800a0ee:	6078      	str	r0, [r7, #4]
 800a0f0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a0f2:	4b23      	ldr	r3, [pc, #140]	; (800a180 <prvProcessExpiredTimer+0x98>)
 800a0f4:	681b      	ldr	r3, [r3, #0]
 800a0f6:	68db      	ldr	r3, [r3, #12]
 800a0f8:	68db      	ldr	r3, [r3, #12]
 800a0fa:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a0fc:	697b      	ldr	r3, [r7, #20]
 800a0fe:	3304      	adds	r3, #4
 800a100:	4618      	mov	r0, r3
 800a102:	f7fd fbfd 	bl	8007900 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a106:	697b      	ldr	r3, [r7, #20]
 800a108:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a10c:	f003 0304 	and.w	r3, r3, #4
 800a110:	2b00      	cmp	r3, #0
 800a112:	d024      	beq.n	800a15e <prvProcessExpiredTimer+0x76>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800a114:	697b      	ldr	r3, [r7, #20]
 800a116:	699a      	ldr	r2, [r3, #24]
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	18d1      	adds	r1, r2, r3
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	683a      	ldr	r2, [r7, #0]
 800a120:	6978      	ldr	r0, [r7, #20]
 800a122:	f000 f8d3 	bl	800a2cc <prvInsertTimerInActiveList>
 800a126:	4603      	mov	r3, r0
 800a128:	2b00      	cmp	r3, #0
 800a12a:	d021      	beq.n	800a170 <prvProcessExpiredTimer+0x88>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a12c:	2300      	movs	r3, #0
 800a12e:	9300      	str	r3, [sp, #0]
 800a130:	2300      	movs	r3, #0
 800a132:	687a      	ldr	r2, [r7, #4]
 800a134:	2100      	movs	r1, #0
 800a136:	6978      	ldr	r0, [r7, #20]
 800a138:	f7ff ff86 	bl	800a048 <xTimerGenericCommand>
 800a13c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800a13e:	693b      	ldr	r3, [r7, #16]
 800a140:	2b00      	cmp	r3, #0
 800a142:	d115      	bne.n	800a170 <prvProcessExpiredTimer+0x88>
	__asm volatile
 800a144:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a148:	b672      	cpsid	i
 800a14a:	f383 8811 	msr	BASEPRI, r3
 800a14e:	f3bf 8f6f 	isb	sy
 800a152:	f3bf 8f4f 	dsb	sy
 800a156:	b662      	cpsie	i
 800a158:	60fb      	str	r3, [r7, #12]
}
 800a15a:	bf00      	nop
 800a15c:	e7fe      	b.n	800a15c <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a15e:	697b      	ldr	r3, [r7, #20]
 800a160:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a164:	f023 0301 	bic.w	r3, r3, #1
 800a168:	b2da      	uxtb	r2, r3
 800a16a:	697b      	ldr	r3, [r7, #20]
 800a16c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a170:	697b      	ldr	r3, [r7, #20]
 800a172:	6a1b      	ldr	r3, [r3, #32]
 800a174:	6978      	ldr	r0, [r7, #20]
 800a176:	4798      	blx	r3
}
 800a178:	bf00      	nop
 800a17a:	3718      	adds	r7, #24
 800a17c:	46bd      	mov	sp, r7
 800a17e:	bd80      	pop	{r7, pc}
 800a180:	20000f38 	.word	0x20000f38

0800a184 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800a184:	b580      	push	{r7, lr}
 800a186:	b084      	sub	sp, #16
 800a188:	af00      	add	r7, sp, #0
 800a18a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a18c:	f107 0308 	add.w	r3, r7, #8
 800a190:	4618      	mov	r0, r3
 800a192:	f000 f857 	bl	800a244 <prvGetNextExpireTime>
 800a196:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800a198:	68bb      	ldr	r3, [r7, #8]
 800a19a:	4619      	mov	r1, r3
 800a19c:	68f8      	ldr	r0, [r7, #12]
 800a19e:	f000 f803 	bl	800a1a8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800a1a2:	f000 f8d5 	bl	800a350 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a1a6:	e7f1      	b.n	800a18c <prvTimerTask+0x8>

0800a1a8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800a1a8:	b580      	push	{r7, lr}
 800a1aa:	b084      	sub	sp, #16
 800a1ac:	af00      	add	r7, sp, #0
 800a1ae:	6078      	str	r0, [r7, #4]
 800a1b0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800a1b2:	f7fe fe77 	bl	8008ea4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a1b6:	f107 0308 	add.w	r3, r7, #8
 800a1ba:	4618      	mov	r0, r3
 800a1bc:	f000 f866 	bl	800a28c <prvSampleTimeNow>
 800a1c0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800a1c2:	68bb      	ldr	r3, [r7, #8]
 800a1c4:	2b00      	cmp	r3, #0
 800a1c6:	d130      	bne.n	800a22a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800a1c8:	683b      	ldr	r3, [r7, #0]
 800a1ca:	2b00      	cmp	r3, #0
 800a1cc:	d10a      	bne.n	800a1e4 <prvProcessTimerOrBlockTask+0x3c>
 800a1ce:	687a      	ldr	r2, [r7, #4]
 800a1d0:	68fb      	ldr	r3, [r7, #12]
 800a1d2:	429a      	cmp	r2, r3
 800a1d4:	d806      	bhi.n	800a1e4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800a1d6:	f7fe fe73 	bl	8008ec0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800a1da:	68f9      	ldr	r1, [r7, #12]
 800a1dc:	6878      	ldr	r0, [r7, #4]
 800a1de:	f7ff ff83 	bl	800a0e8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800a1e2:	e024      	b.n	800a22e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800a1e4:	683b      	ldr	r3, [r7, #0]
 800a1e6:	2b00      	cmp	r3, #0
 800a1e8:	d008      	beq.n	800a1fc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800a1ea:	4b13      	ldr	r3, [pc, #76]	; (800a238 <prvProcessTimerOrBlockTask+0x90>)
 800a1ec:	681b      	ldr	r3, [r3, #0]
 800a1ee:	681b      	ldr	r3, [r3, #0]
 800a1f0:	2b00      	cmp	r3, #0
 800a1f2:	d101      	bne.n	800a1f8 <prvProcessTimerOrBlockTask+0x50>
 800a1f4:	2301      	movs	r3, #1
 800a1f6:	e000      	b.n	800a1fa <prvProcessTimerOrBlockTask+0x52>
 800a1f8:	2300      	movs	r3, #0
 800a1fa:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800a1fc:	4b0f      	ldr	r3, [pc, #60]	; (800a23c <prvProcessTimerOrBlockTask+0x94>)
 800a1fe:	6818      	ldr	r0, [r3, #0]
 800a200:	687a      	ldr	r2, [r7, #4]
 800a202:	68fb      	ldr	r3, [r7, #12]
 800a204:	1ad3      	subs	r3, r2, r3
 800a206:	683a      	ldr	r2, [r7, #0]
 800a208:	4619      	mov	r1, r3
 800a20a:	f7fe fb27 	bl	800885c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800a20e:	f7fe fe57 	bl	8008ec0 <xTaskResumeAll>
 800a212:	4603      	mov	r3, r0
 800a214:	2b00      	cmp	r3, #0
 800a216:	d10a      	bne.n	800a22e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800a218:	4b09      	ldr	r3, [pc, #36]	; (800a240 <prvProcessTimerOrBlockTask+0x98>)
 800a21a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a21e:	601a      	str	r2, [r3, #0]
 800a220:	f3bf 8f4f 	dsb	sy
 800a224:	f3bf 8f6f 	isb	sy
}
 800a228:	e001      	b.n	800a22e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800a22a:	f7fe fe49 	bl	8008ec0 <xTaskResumeAll>
}
 800a22e:	bf00      	nop
 800a230:	3710      	adds	r7, #16
 800a232:	46bd      	mov	sp, r7
 800a234:	bd80      	pop	{r7, pc}
 800a236:	bf00      	nop
 800a238:	20000f3c 	.word	0x20000f3c
 800a23c:	20000f40 	.word	0x20000f40
 800a240:	e000ed04 	.word	0xe000ed04

0800a244 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800a244:	b480      	push	{r7}
 800a246:	b085      	sub	sp, #20
 800a248:	af00      	add	r7, sp, #0
 800a24a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800a24c:	4b0e      	ldr	r3, [pc, #56]	; (800a288 <prvGetNextExpireTime+0x44>)
 800a24e:	681b      	ldr	r3, [r3, #0]
 800a250:	681b      	ldr	r3, [r3, #0]
 800a252:	2b00      	cmp	r3, #0
 800a254:	d101      	bne.n	800a25a <prvGetNextExpireTime+0x16>
 800a256:	2201      	movs	r2, #1
 800a258:	e000      	b.n	800a25c <prvGetNextExpireTime+0x18>
 800a25a:	2200      	movs	r2, #0
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	681b      	ldr	r3, [r3, #0]
 800a264:	2b00      	cmp	r3, #0
 800a266:	d105      	bne.n	800a274 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a268:	4b07      	ldr	r3, [pc, #28]	; (800a288 <prvGetNextExpireTime+0x44>)
 800a26a:	681b      	ldr	r3, [r3, #0]
 800a26c:	68db      	ldr	r3, [r3, #12]
 800a26e:	681b      	ldr	r3, [r3, #0]
 800a270:	60fb      	str	r3, [r7, #12]
 800a272:	e001      	b.n	800a278 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800a274:	2300      	movs	r3, #0
 800a276:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800a278:	68fb      	ldr	r3, [r7, #12]
}
 800a27a:	4618      	mov	r0, r3
 800a27c:	3714      	adds	r7, #20
 800a27e:	46bd      	mov	sp, r7
 800a280:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a284:	4770      	bx	lr
 800a286:	bf00      	nop
 800a288:	20000f38 	.word	0x20000f38

0800a28c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800a28c:	b580      	push	{r7, lr}
 800a28e:	b084      	sub	sp, #16
 800a290:	af00      	add	r7, sp, #0
 800a292:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800a294:	f7fe feb4 	bl	8009000 <xTaskGetTickCount>
 800a298:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800a29a:	4b0b      	ldr	r3, [pc, #44]	; (800a2c8 <prvSampleTimeNow+0x3c>)
 800a29c:	681b      	ldr	r3, [r3, #0]
 800a29e:	68fa      	ldr	r2, [r7, #12]
 800a2a0:	429a      	cmp	r2, r3
 800a2a2:	d205      	bcs.n	800a2b0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800a2a4:	f000 f93c 	bl	800a520 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	2201      	movs	r2, #1
 800a2ac:	601a      	str	r2, [r3, #0]
 800a2ae:	e002      	b.n	800a2b6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	2200      	movs	r2, #0
 800a2b4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800a2b6:	4a04      	ldr	r2, [pc, #16]	; (800a2c8 <prvSampleTimeNow+0x3c>)
 800a2b8:	68fb      	ldr	r3, [r7, #12]
 800a2ba:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800a2bc:	68fb      	ldr	r3, [r7, #12]
}
 800a2be:	4618      	mov	r0, r3
 800a2c0:	3710      	adds	r7, #16
 800a2c2:	46bd      	mov	sp, r7
 800a2c4:	bd80      	pop	{r7, pc}
 800a2c6:	bf00      	nop
 800a2c8:	20000f48 	.word	0x20000f48

0800a2cc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800a2cc:	b580      	push	{r7, lr}
 800a2ce:	b086      	sub	sp, #24
 800a2d0:	af00      	add	r7, sp, #0
 800a2d2:	60f8      	str	r0, [r7, #12]
 800a2d4:	60b9      	str	r1, [r7, #8]
 800a2d6:	607a      	str	r2, [r7, #4]
 800a2d8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800a2da:	2300      	movs	r3, #0
 800a2dc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800a2de:	68fb      	ldr	r3, [r7, #12]
 800a2e0:	68ba      	ldr	r2, [r7, #8]
 800a2e2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a2e4:	68fb      	ldr	r3, [r7, #12]
 800a2e6:	68fa      	ldr	r2, [r7, #12]
 800a2e8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800a2ea:	68ba      	ldr	r2, [r7, #8]
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	429a      	cmp	r2, r3
 800a2f0:	d812      	bhi.n	800a318 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a2f2:	687a      	ldr	r2, [r7, #4]
 800a2f4:	683b      	ldr	r3, [r7, #0]
 800a2f6:	1ad2      	subs	r2, r2, r3
 800a2f8:	68fb      	ldr	r3, [r7, #12]
 800a2fa:	699b      	ldr	r3, [r3, #24]
 800a2fc:	429a      	cmp	r2, r3
 800a2fe:	d302      	bcc.n	800a306 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800a300:	2301      	movs	r3, #1
 800a302:	617b      	str	r3, [r7, #20]
 800a304:	e01b      	b.n	800a33e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800a306:	4b10      	ldr	r3, [pc, #64]	; (800a348 <prvInsertTimerInActiveList+0x7c>)
 800a308:	681a      	ldr	r2, [r3, #0]
 800a30a:	68fb      	ldr	r3, [r7, #12]
 800a30c:	3304      	adds	r3, #4
 800a30e:	4619      	mov	r1, r3
 800a310:	4610      	mov	r0, r2
 800a312:	f7fd fabc 	bl	800788e <vListInsert>
 800a316:	e012      	b.n	800a33e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800a318:	687a      	ldr	r2, [r7, #4]
 800a31a:	683b      	ldr	r3, [r7, #0]
 800a31c:	429a      	cmp	r2, r3
 800a31e:	d206      	bcs.n	800a32e <prvInsertTimerInActiveList+0x62>
 800a320:	68ba      	ldr	r2, [r7, #8]
 800a322:	683b      	ldr	r3, [r7, #0]
 800a324:	429a      	cmp	r2, r3
 800a326:	d302      	bcc.n	800a32e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800a328:	2301      	movs	r3, #1
 800a32a:	617b      	str	r3, [r7, #20]
 800a32c:	e007      	b.n	800a33e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a32e:	4b07      	ldr	r3, [pc, #28]	; (800a34c <prvInsertTimerInActiveList+0x80>)
 800a330:	681a      	ldr	r2, [r3, #0]
 800a332:	68fb      	ldr	r3, [r7, #12]
 800a334:	3304      	adds	r3, #4
 800a336:	4619      	mov	r1, r3
 800a338:	4610      	mov	r0, r2
 800a33a:	f7fd faa8 	bl	800788e <vListInsert>
		}
	}

	return xProcessTimerNow;
 800a33e:	697b      	ldr	r3, [r7, #20]
}
 800a340:	4618      	mov	r0, r3
 800a342:	3718      	adds	r7, #24
 800a344:	46bd      	mov	sp, r7
 800a346:	bd80      	pop	{r7, pc}
 800a348:	20000f3c 	.word	0x20000f3c
 800a34c:	20000f38 	.word	0x20000f38

0800a350 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800a350:	b580      	push	{r7, lr}
 800a352:	b08e      	sub	sp, #56	; 0x38
 800a354:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a356:	e0d0      	b.n	800a4fa <prvProcessReceivedCommands+0x1aa>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	2b00      	cmp	r3, #0
 800a35c:	da1a      	bge.n	800a394 <prvProcessReceivedCommands+0x44>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800a35e:	1d3b      	adds	r3, r7, #4
 800a360:	3304      	adds	r3, #4
 800a362:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800a364:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a366:	2b00      	cmp	r3, #0
 800a368:	d10c      	bne.n	800a384 <prvProcessReceivedCommands+0x34>
	__asm volatile
 800a36a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a36e:	b672      	cpsid	i
 800a370:	f383 8811 	msr	BASEPRI, r3
 800a374:	f3bf 8f6f 	isb	sy
 800a378:	f3bf 8f4f 	dsb	sy
 800a37c:	b662      	cpsie	i
 800a37e:	61fb      	str	r3, [r7, #28]
}
 800a380:	bf00      	nop
 800a382:	e7fe      	b.n	800a382 <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800a384:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a386:	681b      	ldr	r3, [r3, #0]
 800a388:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a38a:	6850      	ldr	r0, [r2, #4]
 800a38c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a38e:	6892      	ldr	r2, [r2, #8]
 800a390:	4611      	mov	r1, r2
 800a392:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	2b00      	cmp	r3, #0
 800a398:	f2c0 80ae 	blt.w	800a4f8 <prvProcessReceivedCommands+0x1a8>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800a39c:	68fb      	ldr	r3, [r7, #12]
 800a39e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800a3a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3a2:	695b      	ldr	r3, [r3, #20]
 800a3a4:	2b00      	cmp	r3, #0
 800a3a6:	d004      	beq.n	800a3b2 <prvProcessReceivedCommands+0x62>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a3a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3aa:	3304      	adds	r3, #4
 800a3ac:	4618      	mov	r0, r3
 800a3ae:	f7fd faa7 	bl	8007900 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a3b2:	463b      	mov	r3, r7
 800a3b4:	4618      	mov	r0, r3
 800a3b6:	f7ff ff69 	bl	800a28c <prvSampleTimeNow>
 800a3ba:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	2b09      	cmp	r3, #9
 800a3c0:	f200 809b 	bhi.w	800a4fa <prvProcessReceivedCommands+0x1aa>
 800a3c4:	a201      	add	r2, pc, #4	; (adr r2, 800a3cc <prvProcessReceivedCommands+0x7c>)
 800a3c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a3ca:	bf00      	nop
 800a3cc:	0800a3f5 	.word	0x0800a3f5
 800a3d0:	0800a3f5 	.word	0x0800a3f5
 800a3d4:	0800a3f5 	.word	0x0800a3f5
 800a3d8:	0800a46d 	.word	0x0800a46d
 800a3dc:	0800a481 	.word	0x0800a481
 800a3e0:	0800a4cf 	.word	0x0800a4cf
 800a3e4:	0800a3f5 	.word	0x0800a3f5
 800a3e8:	0800a3f5 	.word	0x0800a3f5
 800a3ec:	0800a46d 	.word	0x0800a46d
 800a3f0:	0800a481 	.word	0x0800a481
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a3f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3f6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a3fa:	f043 0301 	orr.w	r3, r3, #1
 800a3fe:	b2da      	uxtb	r2, r3
 800a400:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a402:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800a406:	68ba      	ldr	r2, [r7, #8]
 800a408:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a40a:	699b      	ldr	r3, [r3, #24]
 800a40c:	18d1      	adds	r1, r2, r3
 800a40e:	68bb      	ldr	r3, [r7, #8]
 800a410:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a412:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a414:	f7ff ff5a 	bl	800a2cc <prvInsertTimerInActiveList>
 800a418:	4603      	mov	r3, r0
 800a41a:	2b00      	cmp	r3, #0
 800a41c:	d06d      	beq.n	800a4fa <prvProcessReceivedCommands+0x1aa>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a41e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a420:	6a1b      	ldr	r3, [r3, #32]
 800a422:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a424:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a426:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a428:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a42c:	f003 0304 	and.w	r3, r3, #4
 800a430:	2b00      	cmp	r3, #0
 800a432:	d062      	beq.n	800a4fa <prvProcessReceivedCommands+0x1aa>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800a434:	68ba      	ldr	r2, [r7, #8]
 800a436:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a438:	699b      	ldr	r3, [r3, #24]
 800a43a:	441a      	add	r2, r3
 800a43c:	2300      	movs	r3, #0
 800a43e:	9300      	str	r3, [sp, #0]
 800a440:	2300      	movs	r3, #0
 800a442:	2100      	movs	r1, #0
 800a444:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a446:	f7ff fdff 	bl	800a048 <xTimerGenericCommand>
 800a44a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800a44c:	6a3b      	ldr	r3, [r7, #32]
 800a44e:	2b00      	cmp	r3, #0
 800a450:	d153      	bne.n	800a4fa <prvProcessReceivedCommands+0x1aa>
	__asm volatile
 800a452:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a456:	b672      	cpsid	i
 800a458:	f383 8811 	msr	BASEPRI, r3
 800a45c:	f3bf 8f6f 	isb	sy
 800a460:	f3bf 8f4f 	dsb	sy
 800a464:	b662      	cpsie	i
 800a466:	61bb      	str	r3, [r7, #24]
}
 800a468:	bf00      	nop
 800a46a:	e7fe      	b.n	800a46a <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a46c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a46e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a472:	f023 0301 	bic.w	r3, r3, #1
 800a476:	b2da      	uxtb	r2, r3
 800a478:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a47a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800a47e:	e03c      	b.n	800a4fa <prvProcessReceivedCommands+0x1aa>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a480:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a482:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a486:	f043 0301 	orr.w	r3, r3, #1
 800a48a:	b2da      	uxtb	r2, r3
 800a48c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a48e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800a492:	68ba      	ldr	r2, [r7, #8]
 800a494:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a496:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800a498:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a49a:	699b      	ldr	r3, [r3, #24]
 800a49c:	2b00      	cmp	r3, #0
 800a49e:	d10c      	bne.n	800a4ba <prvProcessReceivedCommands+0x16a>
	__asm volatile
 800a4a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4a4:	b672      	cpsid	i
 800a4a6:	f383 8811 	msr	BASEPRI, r3
 800a4aa:	f3bf 8f6f 	isb	sy
 800a4ae:	f3bf 8f4f 	dsb	sy
 800a4b2:	b662      	cpsie	i
 800a4b4:	617b      	str	r3, [r7, #20]
}
 800a4b6:	bf00      	nop
 800a4b8:	e7fe      	b.n	800a4b8 <prvProcessReceivedCommands+0x168>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800a4ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4bc:	699a      	ldr	r2, [r3, #24]
 800a4be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4c0:	18d1      	adds	r1, r2, r3
 800a4c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a4c6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a4c8:	f7ff ff00 	bl	800a2cc <prvInsertTimerInActiveList>
					break;
 800a4cc:	e015      	b.n	800a4fa <prvProcessReceivedCommands+0x1aa>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800a4ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4d0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a4d4:	f003 0302 	and.w	r3, r3, #2
 800a4d8:	2b00      	cmp	r3, #0
 800a4da:	d103      	bne.n	800a4e4 <prvProcessReceivedCommands+0x194>
						{
							vPortFree( pxTimer );
 800a4dc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a4de:	f000 fbeb 	bl	800acb8 <vPortFree>
 800a4e2:	e00a      	b.n	800a4fa <prvProcessReceivedCommands+0x1aa>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a4e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4e6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a4ea:	f023 0301 	bic.w	r3, r3, #1
 800a4ee:	b2da      	uxtb	r2, r3
 800a4f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4f2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800a4f6:	e000      	b.n	800a4fa <prvProcessReceivedCommands+0x1aa>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800a4f8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a4fa:	4b08      	ldr	r3, [pc, #32]	; (800a51c <prvProcessReceivedCommands+0x1cc>)
 800a4fc:	681b      	ldr	r3, [r3, #0]
 800a4fe:	1d39      	adds	r1, r7, #4
 800a500:	2200      	movs	r2, #0
 800a502:	4618      	mov	r0, r3
 800a504:	f7fd fdd8 	bl	80080b8 <xQueueReceive>
 800a508:	4603      	mov	r3, r0
 800a50a:	2b00      	cmp	r3, #0
 800a50c:	f47f af24 	bne.w	800a358 <prvProcessReceivedCommands+0x8>
	}
}
 800a510:	bf00      	nop
 800a512:	bf00      	nop
 800a514:	3730      	adds	r7, #48	; 0x30
 800a516:	46bd      	mov	sp, r7
 800a518:	bd80      	pop	{r7, pc}
 800a51a:	bf00      	nop
 800a51c:	20000f40 	.word	0x20000f40

0800a520 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800a520:	b580      	push	{r7, lr}
 800a522:	b088      	sub	sp, #32
 800a524:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a526:	e04a      	b.n	800a5be <prvSwitchTimerLists+0x9e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a528:	4b2e      	ldr	r3, [pc, #184]	; (800a5e4 <prvSwitchTimerLists+0xc4>)
 800a52a:	681b      	ldr	r3, [r3, #0]
 800a52c:	68db      	ldr	r3, [r3, #12]
 800a52e:	681b      	ldr	r3, [r3, #0]
 800a530:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a532:	4b2c      	ldr	r3, [pc, #176]	; (800a5e4 <prvSwitchTimerLists+0xc4>)
 800a534:	681b      	ldr	r3, [r3, #0]
 800a536:	68db      	ldr	r3, [r3, #12]
 800a538:	68db      	ldr	r3, [r3, #12]
 800a53a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a53c:	68fb      	ldr	r3, [r7, #12]
 800a53e:	3304      	adds	r3, #4
 800a540:	4618      	mov	r0, r3
 800a542:	f7fd f9dd 	bl	8007900 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a546:	68fb      	ldr	r3, [r7, #12]
 800a548:	6a1b      	ldr	r3, [r3, #32]
 800a54a:	68f8      	ldr	r0, [r7, #12]
 800a54c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a54e:	68fb      	ldr	r3, [r7, #12]
 800a550:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a554:	f003 0304 	and.w	r3, r3, #4
 800a558:	2b00      	cmp	r3, #0
 800a55a:	d030      	beq.n	800a5be <prvSwitchTimerLists+0x9e>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800a55c:	68fb      	ldr	r3, [r7, #12]
 800a55e:	699b      	ldr	r3, [r3, #24]
 800a560:	693a      	ldr	r2, [r7, #16]
 800a562:	4413      	add	r3, r2
 800a564:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800a566:	68ba      	ldr	r2, [r7, #8]
 800a568:	693b      	ldr	r3, [r7, #16]
 800a56a:	429a      	cmp	r2, r3
 800a56c:	d90e      	bls.n	800a58c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800a56e:	68fb      	ldr	r3, [r7, #12]
 800a570:	68ba      	ldr	r2, [r7, #8]
 800a572:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a574:	68fb      	ldr	r3, [r7, #12]
 800a576:	68fa      	ldr	r2, [r7, #12]
 800a578:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a57a:	4b1a      	ldr	r3, [pc, #104]	; (800a5e4 <prvSwitchTimerLists+0xc4>)
 800a57c:	681a      	ldr	r2, [r3, #0]
 800a57e:	68fb      	ldr	r3, [r7, #12]
 800a580:	3304      	adds	r3, #4
 800a582:	4619      	mov	r1, r3
 800a584:	4610      	mov	r0, r2
 800a586:	f7fd f982 	bl	800788e <vListInsert>
 800a58a:	e018      	b.n	800a5be <prvSwitchTimerLists+0x9e>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a58c:	2300      	movs	r3, #0
 800a58e:	9300      	str	r3, [sp, #0]
 800a590:	2300      	movs	r3, #0
 800a592:	693a      	ldr	r2, [r7, #16]
 800a594:	2100      	movs	r1, #0
 800a596:	68f8      	ldr	r0, [r7, #12]
 800a598:	f7ff fd56 	bl	800a048 <xTimerGenericCommand>
 800a59c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	2b00      	cmp	r3, #0
 800a5a2:	d10c      	bne.n	800a5be <prvSwitchTimerLists+0x9e>
	__asm volatile
 800a5a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5a8:	b672      	cpsid	i
 800a5aa:	f383 8811 	msr	BASEPRI, r3
 800a5ae:	f3bf 8f6f 	isb	sy
 800a5b2:	f3bf 8f4f 	dsb	sy
 800a5b6:	b662      	cpsie	i
 800a5b8:	603b      	str	r3, [r7, #0]
}
 800a5ba:	bf00      	nop
 800a5bc:	e7fe      	b.n	800a5bc <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a5be:	4b09      	ldr	r3, [pc, #36]	; (800a5e4 <prvSwitchTimerLists+0xc4>)
 800a5c0:	681b      	ldr	r3, [r3, #0]
 800a5c2:	681b      	ldr	r3, [r3, #0]
 800a5c4:	2b00      	cmp	r3, #0
 800a5c6:	d1af      	bne.n	800a528 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800a5c8:	4b06      	ldr	r3, [pc, #24]	; (800a5e4 <prvSwitchTimerLists+0xc4>)
 800a5ca:	681b      	ldr	r3, [r3, #0]
 800a5cc:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800a5ce:	4b06      	ldr	r3, [pc, #24]	; (800a5e8 <prvSwitchTimerLists+0xc8>)
 800a5d0:	681b      	ldr	r3, [r3, #0]
 800a5d2:	4a04      	ldr	r2, [pc, #16]	; (800a5e4 <prvSwitchTimerLists+0xc4>)
 800a5d4:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800a5d6:	4a04      	ldr	r2, [pc, #16]	; (800a5e8 <prvSwitchTimerLists+0xc8>)
 800a5d8:	697b      	ldr	r3, [r7, #20]
 800a5da:	6013      	str	r3, [r2, #0]
}
 800a5dc:	bf00      	nop
 800a5de:	3718      	adds	r7, #24
 800a5e0:	46bd      	mov	sp, r7
 800a5e2:	bd80      	pop	{r7, pc}
 800a5e4:	20000f38 	.word	0x20000f38
 800a5e8:	20000f3c 	.word	0x20000f3c

0800a5ec <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800a5ec:	b580      	push	{r7, lr}
 800a5ee:	b082      	sub	sp, #8
 800a5f0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800a5f2:	f000 f96b 	bl	800a8cc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800a5f6:	4b15      	ldr	r3, [pc, #84]	; (800a64c <prvCheckForValidListAndQueue+0x60>)
 800a5f8:	681b      	ldr	r3, [r3, #0]
 800a5fa:	2b00      	cmp	r3, #0
 800a5fc:	d120      	bne.n	800a640 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800a5fe:	4814      	ldr	r0, [pc, #80]	; (800a650 <prvCheckForValidListAndQueue+0x64>)
 800a600:	f7fd f8f4 	bl	80077ec <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800a604:	4813      	ldr	r0, [pc, #76]	; (800a654 <prvCheckForValidListAndQueue+0x68>)
 800a606:	f7fd f8f1 	bl	80077ec <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800a60a:	4b13      	ldr	r3, [pc, #76]	; (800a658 <prvCheckForValidListAndQueue+0x6c>)
 800a60c:	4a10      	ldr	r2, [pc, #64]	; (800a650 <prvCheckForValidListAndQueue+0x64>)
 800a60e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800a610:	4b12      	ldr	r3, [pc, #72]	; (800a65c <prvCheckForValidListAndQueue+0x70>)
 800a612:	4a10      	ldr	r2, [pc, #64]	; (800a654 <prvCheckForValidListAndQueue+0x68>)
 800a614:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800a616:	2300      	movs	r3, #0
 800a618:	9300      	str	r3, [sp, #0]
 800a61a:	4b11      	ldr	r3, [pc, #68]	; (800a660 <prvCheckForValidListAndQueue+0x74>)
 800a61c:	4a11      	ldr	r2, [pc, #68]	; (800a664 <prvCheckForValidListAndQueue+0x78>)
 800a61e:	2110      	movs	r1, #16
 800a620:	200a      	movs	r0, #10
 800a622:	f7fd fa01 	bl	8007a28 <xQueueGenericCreateStatic>
 800a626:	4603      	mov	r3, r0
 800a628:	4a08      	ldr	r2, [pc, #32]	; (800a64c <prvCheckForValidListAndQueue+0x60>)
 800a62a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800a62c:	4b07      	ldr	r3, [pc, #28]	; (800a64c <prvCheckForValidListAndQueue+0x60>)
 800a62e:	681b      	ldr	r3, [r3, #0]
 800a630:	2b00      	cmp	r3, #0
 800a632:	d005      	beq.n	800a640 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800a634:	4b05      	ldr	r3, [pc, #20]	; (800a64c <prvCheckForValidListAndQueue+0x60>)
 800a636:	681b      	ldr	r3, [r3, #0]
 800a638:	490b      	ldr	r1, [pc, #44]	; (800a668 <prvCheckForValidListAndQueue+0x7c>)
 800a63a:	4618      	mov	r0, r3
 800a63c:	f7fe f8e4 	bl	8008808 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a640:	f000 f978 	bl	800a934 <vPortExitCritical>
}
 800a644:	bf00      	nop
 800a646:	46bd      	mov	sp, r7
 800a648:	bd80      	pop	{r7, pc}
 800a64a:	bf00      	nop
 800a64c:	20000f40 	.word	0x20000f40
 800a650:	20000f10 	.word	0x20000f10
 800a654:	20000f24 	.word	0x20000f24
 800a658:	20000f38 	.word	0x20000f38
 800a65c:	20000f3c 	.word	0x20000f3c
 800a660:	20000fec 	.word	0x20000fec
 800a664:	20000f4c 	.word	0x20000f4c
 800a668:	0801a268 	.word	0x0801a268

0800a66c <pvTimerGetTimerID>:
	return xReturn;
} /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 800a66c:	b580      	push	{r7, lr}
 800a66e:	b086      	sub	sp, #24
 800a670:	af00      	add	r7, sp, #0
 800a672:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = xTimer;
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	617b      	str	r3, [r7, #20]
void *pvReturn;

	configASSERT( xTimer );
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	2b00      	cmp	r3, #0
 800a67c:	d10c      	bne.n	800a698 <pvTimerGetTimerID+0x2c>
	__asm volatile
 800a67e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a682:	b672      	cpsid	i
 800a684:	f383 8811 	msr	BASEPRI, r3
 800a688:	f3bf 8f6f 	isb	sy
 800a68c:	f3bf 8f4f 	dsb	sy
 800a690:	b662      	cpsie	i
 800a692:	60fb      	str	r3, [r7, #12]
}
 800a694:	bf00      	nop
 800a696:	e7fe      	b.n	800a696 <pvTimerGetTimerID+0x2a>

	taskENTER_CRITICAL();
 800a698:	f000 f918 	bl	800a8cc <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 800a69c:	697b      	ldr	r3, [r7, #20]
 800a69e:	69db      	ldr	r3, [r3, #28]
 800a6a0:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 800a6a2:	f000 f947 	bl	800a934 <vPortExitCritical>

	return pvReturn;
 800a6a6:	693b      	ldr	r3, [r7, #16]
}
 800a6a8:	4618      	mov	r0, r3
 800a6aa:	3718      	adds	r7, #24
 800a6ac:	46bd      	mov	sp, r7
 800a6ae:	bd80      	pop	{r7, pc}

0800a6b0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800a6b0:	b480      	push	{r7}
 800a6b2:	b085      	sub	sp, #20
 800a6b4:	af00      	add	r7, sp, #0
 800a6b6:	60f8      	str	r0, [r7, #12]
 800a6b8:	60b9      	str	r1, [r7, #8]
 800a6ba:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800a6bc:	68fb      	ldr	r3, [r7, #12]
 800a6be:	3b04      	subs	r3, #4
 800a6c0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a6c2:	68fb      	ldr	r3, [r7, #12]
 800a6c4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800a6c8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a6ca:	68fb      	ldr	r3, [r7, #12]
 800a6cc:	3b04      	subs	r3, #4
 800a6ce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a6d0:	68bb      	ldr	r3, [r7, #8]
 800a6d2:	f023 0201 	bic.w	r2, r3, #1
 800a6d6:	68fb      	ldr	r3, [r7, #12]
 800a6d8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a6da:	68fb      	ldr	r3, [r7, #12]
 800a6dc:	3b04      	subs	r3, #4
 800a6de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a6e0:	4a0c      	ldr	r2, [pc, #48]	; (800a714 <pxPortInitialiseStack+0x64>)
 800a6e2:	68fb      	ldr	r3, [r7, #12]
 800a6e4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a6e6:	68fb      	ldr	r3, [r7, #12]
 800a6e8:	3b14      	subs	r3, #20
 800a6ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a6ec:	687a      	ldr	r2, [r7, #4]
 800a6ee:	68fb      	ldr	r3, [r7, #12]
 800a6f0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800a6f2:	68fb      	ldr	r3, [r7, #12]
 800a6f4:	3b04      	subs	r3, #4
 800a6f6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800a6f8:	68fb      	ldr	r3, [r7, #12]
 800a6fa:	f06f 0202 	mvn.w	r2, #2
 800a6fe:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a700:	68fb      	ldr	r3, [r7, #12]
 800a702:	3b20      	subs	r3, #32
 800a704:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a706:	68fb      	ldr	r3, [r7, #12]
}
 800a708:	4618      	mov	r0, r3
 800a70a:	3714      	adds	r7, #20
 800a70c:	46bd      	mov	sp, r7
 800a70e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a712:	4770      	bx	lr
 800a714:	0800a719 	.word	0x0800a719

0800a718 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a718:	b480      	push	{r7}
 800a71a:	b085      	sub	sp, #20
 800a71c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800a71e:	2300      	movs	r3, #0
 800a720:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a722:	4b14      	ldr	r3, [pc, #80]	; (800a774 <prvTaskExitError+0x5c>)
 800a724:	681b      	ldr	r3, [r3, #0]
 800a726:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a72a:	d00c      	beq.n	800a746 <prvTaskExitError+0x2e>
	__asm volatile
 800a72c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a730:	b672      	cpsid	i
 800a732:	f383 8811 	msr	BASEPRI, r3
 800a736:	f3bf 8f6f 	isb	sy
 800a73a:	f3bf 8f4f 	dsb	sy
 800a73e:	b662      	cpsie	i
 800a740:	60fb      	str	r3, [r7, #12]
}
 800a742:	bf00      	nop
 800a744:	e7fe      	b.n	800a744 <prvTaskExitError+0x2c>
	__asm volatile
 800a746:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a74a:	b672      	cpsid	i
 800a74c:	f383 8811 	msr	BASEPRI, r3
 800a750:	f3bf 8f6f 	isb	sy
 800a754:	f3bf 8f4f 	dsb	sy
 800a758:	b662      	cpsie	i
 800a75a:	60bb      	str	r3, [r7, #8]
}
 800a75c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a75e:	bf00      	nop
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	2b00      	cmp	r3, #0
 800a764:	d0fc      	beq.n	800a760 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a766:	bf00      	nop
 800a768:	bf00      	nop
 800a76a:	3714      	adds	r7, #20
 800a76c:	46bd      	mov	sp, r7
 800a76e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a772:	4770      	bx	lr
 800a774:	2000000c 	.word	0x2000000c
	...

0800a780 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a780:	4b07      	ldr	r3, [pc, #28]	; (800a7a0 <pxCurrentTCBConst2>)
 800a782:	6819      	ldr	r1, [r3, #0]
 800a784:	6808      	ldr	r0, [r1, #0]
 800a786:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a78a:	f380 8809 	msr	PSP, r0
 800a78e:	f3bf 8f6f 	isb	sy
 800a792:	f04f 0000 	mov.w	r0, #0
 800a796:	f380 8811 	msr	BASEPRI, r0
 800a79a:	4770      	bx	lr
 800a79c:	f3af 8000 	nop.w

0800a7a0 <pxCurrentTCBConst2>:
 800a7a0:	20000a10 	.word	0x20000a10
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a7a4:	bf00      	nop
 800a7a6:	bf00      	nop

0800a7a8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800a7a8:	4808      	ldr	r0, [pc, #32]	; (800a7cc <prvPortStartFirstTask+0x24>)
 800a7aa:	6800      	ldr	r0, [r0, #0]
 800a7ac:	6800      	ldr	r0, [r0, #0]
 800a7ae:	f380 8808 	msr	MSP, r0
 800a7b2:	f04f 0000 	mov.w	r0, #0
 800a7b6:	f380 8814 	msr	CONTROL, r0
 800a7ba:	b662      	cpsie	i
 800a7bc:	b661      	cpsie	f
 800a7be:	f3bf 8f4f 	dsb	sy
 800a7c2:	f3bf 8f6f 	isb	sy
 800a7c6:	df00      	svc	0
 800a7c8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a7ca:	bf00      	nop
 800a7cc:	e000ed08 	.word	0xe000ed08

0800a7d0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a7d0:	b580      	push	{r7, lr}
 800a7d2:	b084      	sub	sp, #16
 800a7d4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a7d6:	4b37      	ldr	r3, [pc, #220]	; (800a8b4 <xPortStartScheduler+0xe4>)
 800a7d8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a7da:	68fb      	ldr	r3, [r7, #12]
 800a7dc:	781b      	ldrb	r3, [r3, #0]
 800a7de:	b2db      	uxtb	r3, r3
 800a7e0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a7e2:	68fb      	ldr	r3, [r7, #12]
 800a7e4:	22ff      	movs	r2, #255	; 0xff
 800a7e6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a7e8:	68fb      	ldr	r3, [r7, #12]
 800a7ea:	781b      	ldrb	r3, [r3, #0]
 800a7ec:	b2db      	uxtb	r3, r3
 800a7ee:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a7f0:	78fb      	ldrb	r3, [r7, #3]
 800a7f2:	b2db      	uxtb	r3, r3
 800a7f4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800a7f8:	b2da      	uxtb	r2, r3
 800a7fa:	4b2f      	ldr	r3, [pc, #188]	; (800a8b8 <xPortStartScheduler+0xe8>)
 800a7fc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a7fe:	4b2f      	ldr	r3, [pc, #188]	; (800a8bc <xPortStartScheduler+0xec>)
 800a800:	2207      	movs	r2, #7
 800a802:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a804:	e009      	b.n	800a81a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800a806:	4b2d      	ldr	r3, [pc, #180]	; (800a8bc <xPortStartScheduler+0xec>)
 800a808:	681b      	ldr	r3, [r3, #0]
 800a80a:	3b01      	subs	r3, #1
 800a80c:	4a2b      	ldr	r2, [pc, #172]	; (800a8bc <xPortStartScheduler+0xec>)
 800a80e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a810:	78fb      	ldrb	r3, [r7, #3]
 800a812:	b2db      	uxtb	r3, r3
 800a814:	005b      	lsls	r3, r3, #1
 800a816:	b2db      	uxtb	r3, r3
 800a818:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a81a:	78fb      	ldrb	r3, [r7, #3]
 800a81c:	b2db      	uxtb	r3, r3
 800a81e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a822:	2b80      	cmp	r3, #128	; 0x80
 800a824:	d0ef      	beq.n	800a806 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a826:	4b25      	ldr	r3, [pc, #148]	; (800a8bc <xPortStartScheduler+0xec>)
 800a828:	681b      	ldr	r3, [r3, #0]
 800a82a:	f1c3 0307 	rsb	r3, r3, #7
 800a82e:	2b04      	cmp	r3, #4
 800a830:	d00c      	beq.n	800a84c <xPortStartScheduler+0x7c>
	__asm volatile
 800a832:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a836:	b672      	cpsid	i
 800a838:	f383 8811 	msr	BASEPRI, r3
 800a83c:	f3bf 8f6f 	isb	sy
 800a840:	f3bf 8f4f 	dsb	sy
 800a844:	b662      	cpsie	i
 800a846:	60bb      	str	r3, [r7, #8]
}
 800a848:	bf00      	nop
 800a84a:	e7fe      	b.n	800a84a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a84c:	4b1b      	ldr	r3, [pc, #108]	; (800a8bc <xPortStartScheduler+0xec>)
 800a84e:	681b      	ldr	r3, [r3, #0]
 800a850:	021b      	lsls	r3, r3, #8
 800a852:	4a1a      	ldr	r2, [pc, #104]	; (800a8bc <xPortStartScheduler+0xec>)
 800a854:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a856:	4b19      	ldr	r3, [pc, #100]	; (800a8bc <xPortStartScheduler+0xec>)
 800a858:	681b      	ldr	r3, [r3, #0]
 800a85a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a85e:	4a17      	ldr	r2, [pc, #92]	; (800a8bc <xPortStartScheduler+0xec>)
 800a860:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	b2da      	uxtb	r2, r3
 800a866:	68fb      	ldr	r3, [r7, #12]
 800a868:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a86a:	4b15      	ldr	r3, [pc, #84]	; (800a8c0 <xPortStartScheduler+0xf0>)
 800a86c:	681b      	ldr	r3, [r3, #0]
 800a86e:	4a14      	ldr	r2, [pc, #80]	; (800a8c0 <xPortStartScheduler+0xf0>)
 800a870:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800a874:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a876:	4b12      	ldr	r3, [pc, #72]	; (800a8c0 <xPortStartScheduler+0xf0>)
 800a878:	681b      	ldr	r3, [r3, #0]
 800a87a:	4a11      	ldr	r2, [pc, #68]	; (800a8c0 <xPortStartScheduler+0xf0>)
 800a87c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800a880:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a882:	f000 f8dd 	bl	800aa40 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a886:	4b0f      	ldr	r3, [pc, #60]	; (800a8c4 <xPortStartScheduler+0xf4>)
 800a888:	2200      	movs	r2, #0
 800a88a:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800a88c:	f000 f8fc 	bl	800aa88 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800a890:	4b0d      	ldr	r3, [pc, #52]	; (800a8c8 <xPortStartScheduler+0xf8>)
 800a892:	681b      	ldr	r3, [r3, #0]
 800a894:	4a0c      	ldr	r2, [pc, #48]	; (800a8c8 <xPortStartScheduler+0xf8>)
 800a896:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800a89a:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a89c:	f7ff ff84 	bl	800a7a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a8a0:	f7fe fc7a 	bl	8009198 <vTaskSwitchContext>
	prvTaskExitError();
 800a8a4:	f7ff ff38 	bl	800a718 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a8a8:	2300      	movs	r3, #0
}
 800a8aa:	4618      	mov	r0, r3
 800a8ac:	3710      	adds	r7, #16
 800a8ae:	46bd      	mov	sp, r7
 800a8b0:	bd80      	pop	{r7, pc}
 800a8b2:	bf00      	nop
 800a8b4:	e000e400 	.word	0xe000e400
 800a8b8:	2000103c 	.word	0x2000103c
 800a8bc:	20001040 	.word	0x20001040
 800a8c0:	e000ed20 	.word	0xe000ed20
 800a8c4:	2000000c 	.word	0x2000000c
 800a8c8:	e000ef34 	.word	0xe000ef34

0800a8cc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a8cc:	b480      	push	{r7}
 800a8ce:	b083      	sub	sp, #12
 800a8d0:	af00      	add	r7, sp, #0
	__asm volatile
 800a8d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8d6:	b672      	cpsid	i
 800a8d8:	f383 8811 	msr	BASEPRI, r3
 800a8dc:	f3bf 8f6f 	isb	sy
 800a8e0:	f3bf 8f4f 	dsb	sy
 800a8e4:	b662      	cpsie	i
 800a8e6:	607b      	str	r3, [r7, #4]
}
 800a8e8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a8ea:	4b10      	ldr	r3, [pc, #64]	; (800a92c <vPortEnterCritical+0x60>)
 800a8ec:	681b      	ldr	r3, [r3, #0]
 800a8ee:	3301      	adds	r3, #1
 800a8f0:	4a0e      	ldr	r2, [pc, #56]	; (800a92c <vPortEnterCritical+0x60>)
 800a8f2:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a8f4:	4b0d      	ldr	r3, [pc, #52]	; (800a92c <vPortEnterCritical+0x60>)
 800a8f6:	681b      	ldr	r3, [r3, #0]
 800a8f8:	2b01      	cmp	r3, #1
 800a8fa:	d111      	bne.n	800a920 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a8fc:	4b0c      	ldr	r3, [pc, #48]	; (800a930 <vPortEnterCritical+0x64>)
 800a8fe:	681b      	ldr	r3, [r3, #0]
 800a900:	b2db      	uxtb	r3, r3
 800a902:	2b00      	cmp	r3, #0
 800a904:	d00c      	beq.n	800a920 <vPortEnterCritical+0x54>
	__asm volatile
 800a906:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a90a:	b672      	cpsid	i
 800a90c:	f383 8811 	msr	BASEPRI, r3
 800a910:	f3bf 8f6f 	isb	sy
 800a914:	f3bf 8f4f 	dsb	sy
 800a918:	b662      	cpsie	i
 800a91a:	603b      	str	r3, [r7, #0]
}
 800a91c:	bf00      	nop
 800a91e:	e7fe      	b.n	800a91e <vPortEnterCritical+0x52>
	}
}
 800a920:	bf00      	nop
 800a922:	370c      	adds	r7, #12
 800a924:	46bd      	mov	sp, r7
 800a926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a92a:	4770      	bx	lr
 800a92c:	2000000c 	.word	0x2000000c
 800a930:	e000ed04 	.word	0xe000ed04

0800a934 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a934:	b480      	push	{r7}
 800a936:	b083      	sub	sp, #12
 800a938:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a93a:	4b13      	ldr	r3, [pc, #76]	; (800a988 <vPortExitCritical+0x54>)
 800a93c:	681b      	ldr	r3, [r3, #0]
 800a93e:	2b00      	cmp	r3, #0
 800a940:	d10c      	bne.n	800a95c <vPortExitCritical+0x28>
	__asm volatile
 800a942:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a946:	b672      	cpsid	i
 800a948:	f383 8811 	msr	BASEPRI, r3
 800a94c:	f3bf 8f6f 	isb	sy
 800a950:	f3bf 8f4f 	dsb	sy
 800a954:	b662      	cpsie	i
 800a956:	607b      	str	r3, [r7, #4]
}
 800a958:	bf00      	nop
 800a95a:	e7fe      	b.n	800a95a <vPortExitCritical+0x26>
	uxCriticalNesting--;
 800a95c:	4b0a      	ldr	r3, [pc, #40]	; (800a988 <vPortExitCritical+0x54>)
 800a95e:	681b      	ldr	r3, [r3, #0]
 800a960:	3b01      	subs	r3, #1
 800a962:	4a09      	ldr	r2, [pc, #36]	; (800a988 <vPortExitCritical+0x54>)
 800a964:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a966:	4b08      	ldr	r3, [pc, #32]	; (800a988 <vPortExitCritical+0x54>)
 800a968:	681b      	ldr	r3, [r3, #0]
 800a96a:	2b00      	cmp	r3, #0
 800a96c:	d105      	bne.n	800a97a <vPortExitCritical+0x46>
 800a96e:	2300      	movs	r3, #0
 800a970:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a972:	683b      	ldr	r3, [r7, #0]
 800a974:	f383 8811 	msr	BASEPRI, r3
}
 800a978:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800a97a:	bf00      	nop
 800a97c:	370c      	adds	r7, #12
 800a97e:	46bd      	mov	sp, r7
 800a980:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a984:	4770      	bx	lr
 800a986:	bf00      	nop
 800a988:	2000000c 	.word	0x2000000c
 800a98c:	00000000 	.word	0x00000000

0800a990 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a990:	f3ef 8009 	mrs	r0, PSP
 800a994:	f3bf 8f6f 	isb	sy
 800a998:	4b15      	ldr	r3, [pc, #84]	; (800a9f0 <pxCurrentTCBConst>)
 800a99a:	681a      	ldr	r2, [r3, #0]
 800a99c:	f01e 0f10 	tst.w	lr, #16
 800a9a0:	bf08      	it	eq
 800a9a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a9a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a9aa:	6010      	str	r0, [r2, #0]
 800a9ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a9b0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800a9b4:	b672      	cpsid	i
 800a9b6:	f380 8811 	msr	BASEPRI, r0
 800a9ba:	f3bf 8f4f 	dsb	sy
 800a9be:	f3bf 8f6f 	isb	sy
 800a9c2:	b662      	cpsie	i
 800a9c4:	f7fe fbe8 	bl	8009198 <vTaskSwitchContext>
 800a9c8:	f04f 0000 	mov.w	r0, #0
 800a9cc:	f380 8811 	msr	BASEPRI, r0
 800a9d0:	bc09      	pop	{r0, r3}
 800a9d2:	6819      	ldr	r1, [r3, #0]
 800a9d4:	6808      	ldr	r0, [r1, #0]
 800a9d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a9da:	f01e 0f10 	tst.w	lr, #16
 800a9de:	bf08      	it	eq
 800a9e0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a9e4:	f380 8809 	msr	PSP, r0
 800a9e8:	f3bf 8f6f 	isb	sy
 800a9ec:	4770      	bx	lr
 800a9ee:	bf00      	nop

0800a9f0 <pxCurrentTCBConst>:
 800a9f0:	20000a10 	.word	0x20000a10
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a9f4:	bf00      	nop
 800a9f6:	bf00      	nop

0800a9f8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a9f8:	b580      	push	{r7, lr}
 800a9fa:	b082      	sub	sp, #8
 800a9fc:	af00      	add	r7, sp, #0
	__asm volatile
 800a9fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa02:	b672      	cpsid	i
 800aa04:	f383 8811 	msr	BASEPRI, r3
 800aa08:	f3bf 8f6f 	isb	sy
 800aa0c:	f3bf 8f4f 	dsb	sy
 800aa10:	b662      	cpsie	i
 800aa12:	607b      	str	r3, [r7, #4]
}
 800aa14:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800aa16:	f7fe fb03 	bl	8009020 <xTaskIncrementTick>
 800aa1a:	4603      	mov	r3, r0
 800aa1c:	2b00      	cmp	r3, #0
 800aa1e:	d003      	beq.n	800aa28 <xPortSysTickHandler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800aa20:	4b06      	ldr	r3, [pc, #24]	; (800aa3c <xPortSysTickHandler+0x44>)
 800aa22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aa26:	601a      	str	r2, [r3, #0]
 800aa28:	2300      	movs	r3, #0
 800aa2a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800aa2c:	683b      	ldr	r3, [r7, #0]
 800aa2e:	f383 8811 	msr	BASEPRI, r3
}
 800aa32:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800aa34:	bf00      	nop
 800aa36:	3708      	adds	r7, #8
 800aa38:	46bd      	mov	sp, r7
 800aa3a:	bd80      	pop	{r7, pc}
 800aa3c:	e000ed04 	.word	0xe000ed04

0800aa40 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800aa40:	b480      	push	{r7}
 800aa42:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800aa44:	4b0b      	ldr	r3, [pc, #44]	; (800aa74 <vPortSetupTimerInterrupt+0x34>)
 800aa46:	2200      	movs	r2, #0
 800aa48:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800aa4a:	4b0b      	ldr	r3, [pc, #44]	; (800aa78 <vPortSetupTimerInterrupt+0x38>)
 800aa4c:	2200      	movs	r2, #0
 800aa4e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800aa50:	4b0a      	ldr	r3, [pc, #40]	; (800aa7c <vPortSetupTimerInterrupt+0x3c>)
 800aa52:	681b      	ldr	r3, [r3, #0]
 800aa54:	4a0a      	ldr	r2, [pc, #40]	; (800aa80 <vPortSetupTimerInterrupt+0x40>)
 800aa56:	fba2 2303 	umull	r2, r3, r2, r3
 800aa5a:	099b      	lsrs	r3, r3, #6
 800aa5c:	4a09      	ldr	r2, [pc, #36]	; (800aa84 <vPortSetupTimerInterrupt+0x44>)
 800aa5e:	3b01      	subs	r3, #1
 800aa60:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800aa62:	4b04      	ldr	r3, [pc, #16]	; (800aa74 <vPortSetupTimerInterrupt+0x34>)
 800aa64:	2207      	movs	r2, #7
 800aa66:	601a      	str	r2, [r3, #0]
}
 800aa68:	bf00      	nop
 800aa6a:	46bd      	mov	sp, r7
 800aa6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa70:	4770      	bx	lr
 800aa72:	bf00      	nop
 800aa74:	e000e010 	.word	0xe000e010
 800aa78:	e000e018 	.word	0xe000e018
 800aa7c:	20000000 	.word	0x20000000
 800aa80:	10624dd3 	.word	0x10624dd3
 800aa84:	e000e014 	.word	0xe000e014

0800aa88 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800aa88:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800aa98 <vPortEnableVFP+0x10>
 800aa8c:	6801      	ldr	r1, [r0, #0]
 800aa8e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800aa92:	6001      	str	r1, [r0, #0]
 800aa94:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800aa96:	bf00      	nop
 800aa98:	e000ed88 	.word	0xe000ed88

0800aa9c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800aa9c:	b480      	push	{r7}
 800aa9e:	b085      	sub	sp, #20
 800aaa0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800aaa2:	f3ef 8305 	mrs	r3, IPSR
 800aaa6:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800aaa8:	68fb      	ldr	r3, [r7, #12]
 800aaaa:	2b0f      	cmp	r3, #15
 800aaac:	d916      	bls.n	800aadc <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800aaae:	4a19      	ldr	r2, [pc, #100]	; (800ab14 <vPortValidateInterruptPriority+0x78>)
 800aab0:	68fb      	ldr	r3, [r7, #12]
 800aab2:	4413      	add	r3, r2
 800aab4:	781b      	ldrb	r3, [r3, #0]
 800aab6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800aab8:	4b17      	ldr	r3, [pc, #92]	; (800ab18 <vPortValidateInterruptPriority+0x7c>)
 800aaba:	781b      	ldrb	r3, [r3, #0]
 800aabc:	7afa      	ldrb	r2, [r7, #11]
 800aabe:	429a      	cmp	r2, r3
 800aac0:	d20c      	bcs.n	800aadc <vPortValidateInterruptPriority+0x40>
	__asm volatile
 800aac2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aac6:	b672      	cpsid	i
 800aac8:	f383 8811 	msr	BASEPRI, r3
 800aacc:	f3bf 8f6f 	isb	sy
 800aad0:	f3bf 8f4f 	dsb	sy
 800aad4:	b662      	cpsie	i
 800aad6:	607b      	str	r3, [r7, #4]
}
 800aad8:	bf00      	nop
 800aada:	e7fe      	b.n	800aada <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800aadc:	4b0f      	ldr	r3, [pc, #60]	; (800ab1c <vPortValidateInterruptPriority+0x80>)
 800aade:	681b      	ldr	r3, [r3, #0]
 800aae0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800aae4:	4b0e      	ldr	r3, [pc, #56]	; (800ab20 <vPortValidateInterruptPriority+0x84>)
 800aae6:	681b      	ldr	r3, [r3, #0]
 800aae8:	429a      	cmp	r2, r3
 800aaea:	d90c      	bls.n	800ab06 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 800aaec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aaf0:	b672      	cpsid	i
 800aaf2:	f383 8811 	msr	BASEPRI, r3
 800aaf6:	f3bf 8f6f 	isb	sy
 800aafa:	f3bf 8f4f 	dsb	sy
 800aafe:	b662      	cpsie	i
 800ab00:	603b      	str	r3, [r7, #0]
}
 800ab02:	bf00      	nop
 800ab04:	e7fe      	b.n	800ab04 <vPortValidateInterruptPriority+0x68>
	}
 800ab06:	bf00      	nop
 800ab08:	3714      	adds	r7, #20
 800ab0a:	46bd      	mov	sp, r7
 800ab0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab10:	4770      	bx	lr
 800ab12:	bf00      	nop
 800ab14:	e000e3f0 	.word	0xe000e3f0
 800ab18:	2000103c 	.word	0x2000103c
 800ab1c:	e000ed0c 	.word	0xe000ed0c
 800ab20:	20001040 	.word	0x20001040

0800ab24 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800ab24:	b580      	push	{r7, lr}
 800ab26:	b08a      	sub	sp, #40	; 0x28
 800ab28:	af00      	add	r7, sp, #0
 800ab2a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800ab2c:	2300      	movs	r3, #0
 800ab2e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800ab30:	f7fe f9b8 	bl	8008ea4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800ab34:	4b5b      	ldr	r3, [pc, #364]	; (800aca4 <pvPortMalloc+0x180>)
 800ab36:	681b      	ldr	r3, [r3, #0]
 800ab38:	2b00      	cmp	r3, #0
 800ab3a:	d101      	bne.n	800ab40 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800ab3c:	f000 f91a 	bl	800ad74 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800ab40:	4b59      	ldr	r3, [pc, #356]	; (800aca8 <pvPortMalloc+0x184>)
 800ab42:	681a      	ldr	r2, [r3, #0]
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	4013      	ands	r3, r2
 800ab48:	2b00      	cmp	r3, #0
 800ab4a:	f040 8092 	bne.w	800ac72 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	2b00      	cmp	r3, #0
 800ab52:	d01f      	beq.n	800ab94 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 800ab54:	2208      	movs	r2, #8
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	4413      	add	r3, r2
 800ab5a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	f003 0307 	and.w	r3, r3, #7
 800ab62:	2b00      	cmp	r3, #0
 800ab64:	d016      	beq.n	800ab94 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	f023 0307 	bic.w	r3, r3, #7
 800ab6c:	3308      	adds	r3, #8
 800ab6e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	f003 0307 	and.w	r3, r3, #7
 800ab76:	2b00      	cmp	r3, #0
 800ab78:	d00c      	beq.n	800ab94 <pvPortMalloc+0x70>
	__asm volatile
 800ab7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab7e:	b672      	cpsid	i
 800ab80:	f383 8811 	msr	BASEPRI, r3
 800ab84:	f3bf 8f6f 	isb	sy
 800ab88:	f3bf 8f4f 	dsb	sy
 800ab8c:	b662      	cpsie	i
 800ab8e:	617b      	str	r3, [r7, #20]
}
 800ab90:	bf00      	nop
 800ab92:	e7fe      	b.n	800ab92 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	2b00      	cmp	r3, #0
 800ab98:	d06b      	beq.n	800ac72 <pvPortMalloc+0x14e>
 800ab9a:	4b44      	ldr	r3, [pc, #272]	; (800acac <pvPortMalloc+0x188>)
 800ab9c:	681b      	ldr	r3, [r3, #0]
 800ab9e:	687a      	ldr	r2, [r7, #4]
 800aba0:	429a      	cmp	r2, r3
 800aba2:	d866      	bhi.n	800ac72 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800aba4:	4b42      	ldr	r3, [pc, #264]	; (800acb0 <pvPortMalloc+0x18c>)
 800aba6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800aba8:	4b41      	ldr	r3, [pc, #260]	; (800acb0 <pvPortMalloc+0x18c>)
 800abaa:	681b      	ldr	r3, [r3, #0]
 800abac:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800abae:	e004      	b.n	800abba <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 800abb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abb2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800abb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abb6:	681b      	ldr	r3, [r3, #0]
 800abb8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800abba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abbc:	685b      	ldr	r3, [r3, #4]
 800abbe:	687a      	ldr	r2, [r7, #4]
 800abc0:	429a      	cmp	r2, r3
 800abc2:	d903      	bls.n	800abcc <pvPortMalloc+0xa8>
 800abc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abc6:	681b      	ldr	r3, [r3, #0]
 800abc8:	2b00      	cmp	r3, #0
 800abca:	d1f1      	bne.n	800abb0 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800abcc:	4b35      	ldr	r3, [pc, #212]	; (800aca4 <pvPortMalloc+0x180>)
 800abce:	681b      	ldr	r3, [r3, #0]
 800abd0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800abd2:	429a      	cmp	r2, r3
 800abd4:	d04d      	beq.n	800ac72 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800abd6:	6a3b      	ldr	r3, [r7, #32]
 800abd8:	681b      	ldr	r3, [r3, #0]
 800abda:	2208      	movs	r2, #8
 800abdc:	4413      	add	r3, r2
 800abde:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800abe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abe2:	681a      	ldr	r2, [r3, #0]
 800abe4:	6a3b      	ldr	r3, [r7, #32]
 800abe6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800abe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abea:	685a      	ldr	r2, [r3, #4]
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	1ad2      	subs	r2, r2, r3
 800abf0:	2308      	movs	r3, #8
 800abf2:	005b      	lsls	r3, r3, #1
 800abf4:	429a      	cmp	r2, r3
 800abf6:	d921      	bls.n	800ac3c <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800abf8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	4413      	add	r3, r2
 800abfe:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ac00:	69bb      	ldr	r3, [r7, #24]
 800ac02:	f003 0307 	and.w	r3, r3, #7
 800ac06:	2b00      	cmp	r3, #0
 800ac08:	d00c      	beq.n	800ac24 <pvPortMalloc+0x100>
	__asm volatile
 800ac0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac0e:	b672      	cpsid	i
 800ac10:	f383 8811 	msr	BASEPRI, r3
 800ac14:	f3bf 8f6f 	isb	sy
 800ac18:	f3bf 8f4f 	dsb	sy
 800ac1c:	b662      	cpsie	i
 800ac1e:	613b      	str	r3, [r7, #16]
}
 800ac20:	bf00      	nop
 800ac22:	e7fe      	b.n	800ac22 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800ac24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac26:	685a      	ldr	r2, [r3, #4]
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	1ad2      	subs	r2, r2, r3
 800ac2c:	69bb      	ldr	r3, [r7, #24]
 800ac2e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800ac30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac32:	687a      	ldr	r2, [r7, #4]
 800ac34:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800ac36:	69b8      	ldr	r0, [r7, #24]
 800ac38:	f000 f8fe 	bl	800ae38 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800ac3c:	4b1b      	ldr	r3, [pc, #108]	; (800acac <pvPortMalloc+0x188>)
 800ac3e:	681a      	ldr	r2, [r3, #0]
 800ac40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac42:	685b      	ldr	r3, [r3, #4]
 800ac44:	1ad3      	subs	r3, r2, r3
 800ac46:	4a19      	ldr	r2, [pc, #100]	; (800acac <pvPortMalloc+0x188>)
 800ac48:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800ac4a:	4b18      	ldr	r3, [pc, #96]	; (800acac <pvPortMalloc+0x188>)
 800ac4c:	681a      	ldr	r2, [r3, #0]
 800ac4e:	4b19      	ldr	r3, [pc, #100]	; (800acb4 <pvPortMalloc+0x190>)
 800ac50:	681b      	ldr	r3, [r3, #0]
 800ac52:	429a      	cmp	r2, r3
 800ac54:	d203      	bcs.n	800ac5e <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800ac56:	4b15      	ldr	r3, [pc, #84]	; (800acac <pvPortMalloc+0x188>)
 800ac58:	681b      	ldr	r3, [r3, #0]
 800ac5a:	4a16      	ldr	r2, [pc, #88]	; (800acb4 <pvPortMalloc+0x190>)
 800ac5c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800ac5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac60:	685a      	ldr	r2, [r3, #4]
 800ac62:	4b11      	ldr	r3, [pc, #68]	; (800aca8 <pvPortMalloc+0x184>)
 800ac64:	681b      	ldr	r3, [r3, #0]
 800ac66:	431a      	orrs	r2, r3
 800ac68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac6a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800ac6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac6e:	2200      	movs	r2, #0
 800ac70:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800ac72:	f7fe f925 	bl	8008ec0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800ac76:	69fb      	ldr	r3, [r7, #28]
 800ac78:	f003 0307 	and.w	r3, r3, #7
 800ac7c:	2b00      	cmp	r3, #0
 800ac7e:	d00c      	beq.n	800ac9a <pvPortMalloc+0x176>
	__asm volatile
 800ac80:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac84:	b672      	cpsid	i
 800ac86:	f383 8811 	msr	BASEPRI, r3
 800ac8a:	f3bf 8f6f 	isb	sy
 800ac8e:	f3bf 8f4f 	dsb	sy
 800ac92:	b662      	cpsie	i
 800ac94:	60fb      	str	r3, [r7, #12]
}
 800ac96:	bf00      	nop
 800ac98:	e7fe      	b.n	800ac98 <pvPortMalloc+0x174>
	return pvReturn;
 800ac9a:	69fb      	ldr	r3, [r7, #28]
}
 800ac9c:	4618      	mov	r0, r3
 800ac9e:	3728      	adds	r7, #40	; 0x28
 800aca0:	46bd      	mov	sp, r7
 800aca2:	bd80      	pop	{r7, pc}
 800aca4:	20004c4c 	.word	0x20004c4c
 800aca8:	20004c58 	.word	0x20004c58
 800acac:	20004c50 	.word	0x20004c50
 800acb0:	20004c44 	.word	0x20004c44
 800acb4:	20004c54 	.word	0x20004c54

0800acb8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800acb8:	b580      	push	{r7, lr}
 800acba:	b086      	sub	sp, #24
 800acbc:	af00      	add	r7, sp, #0
 800acbe:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	2b00      	cmp	r3, #0
 800acc8:	d04c      	beq.n	800ad64 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800acca:	2308      	movs	r3, #8
 800accc:	425b      	negs	r3, r3
 800acce:	697a      	ldr	r2, [r7, #20]
 800acd0:	4413      	add	r3, r2
 800acd2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800acd4:	697b      	ldr	r3, [r7, #20]
 800acd6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800acd8:	693b      	ldr	r3, [r7, #16]
 800acda:	685a      	ldr	r2, [r3, #4]
 800acdc:	4b23      	ldr	r3, [pc, #140]	; (800ad6c <vPortFree+0xb4>)
 800acde:	681b      	ldr	r3, [r3, #0]
 800ace0:	4013      	ands	r3, r2
 800ace2:	2b00      	cmp	r3, #0
 800ace4:	d10c      	bne.n	800ad00 <vPortFree+0x48>
	__asm volatile
 800ace6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acea:	b672      	cpsid	i
 800acec:	f383 8811 	msr	BASEPRI, r3
 800acf0:	f3bf 8f6f 	isb	sy
 800acf4:	f3bf 8f4f 	dsb	sy
 800acf8:	b662      	cpsie	i
 800acfa:	60fb      	str	r3, [r7, #12]
}
 800acfc:	bf00      	nop
 800acfe:	e7fe      	b.n	800acfe <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800ad00:	693b      	ldr	r3, [r7, #16]
 800ad02:	681b      	ldr	r3, [r3, #0]
 800ad04:	2b00      	cmp	r3, #0
 800ad06:	d00c      	beq.n	800ad22 <vPortFree+0x6a>
	__asm volatile
 800ad08:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad0c:	b672      	cpsid	i
 800ad0e:	f383 8811 	msr	BASEPRI, r3
 800ad12:	f3bf 8f6f 	isb	sy
 800ad16:	f3bf 8f4f 	dsb	sy
 800ad1a:	b662      	cpsie	i
 800ad1c:	60bb      	str	r3, [r7, #8]
}
 800ad1e:	bf00      	nop
 800ad20:	e7fe      	b.n	800ad20 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800ad22:	693b      	ldr	r3, [r7, #16]
 800ad24:	685a      	ldr	r2, [r3, #4]
 800ad26:	4b11      	ldr	r3, [pc, #68]	; (800ad6c <vPortFree+0xb4>)
 800ad28:	681b      	ldr	r3, [r3, #0]
 800ad2a:	4013      	ands	r3, r2
 800ad2c:	2b00      	cmp	r3, #0
 800ad2e:	d019      	beq.n	800ad64 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800ad30:	693b      	ldr	r3, [r7, #16]
 800ad32:	681b      	ldr	r3, [r3, #0]
 800ad34:	2b00      	cmp	r3, #0
 800ad36:	d115      	bne.n	800ad64 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800ad38:	693b      	ldr	r3, [r7, #16]
 800ad3a:	685a      	ldr	r2, [r3, #4]
 800ad3c:	4b0b      	ldr	r3, [pc, #44]	; (800ad6c <vPortFree+0xb4>)
 800ad3e:	681b      	ldr	r3, [r3, #0]
 800ad40:	43db      	mvns	r3, r3
 800ad42:	401a      	ands	r2, r3
 800ad44:	693b      	ldr	r3, [r7, #16]
 800ad46:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800ad48:	f7fe f8ac 	bl	8008ea4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800ad4c:	693b      	ldr	r3, [r7, #16]
 800ad4e:	685a      	ldr	r2, [r3, #4]
 800ad50:	4b07      	ldr	r3, [pc, #28]	; (800ad70 <vPortFree+0xb8>)
 800ad52:	681b      	ldr	r3, [r3, #0]
 800ad54:	4413      	add	r3, r2
 800ad56:	4a06      	ldr	r2, [pc, #24]	; (800ad70 <vPortFree+0xb8>)
 800ad58:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800ad5a:	6938      	ldr	r0, [r7, #16]
 800ad5c:	f000 f86c 	bl	800ae38 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800ad60:	f7fe f8ae 	bl	8008ec0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800ad64:	bf00      	nop
 800ad66:	3718      	adds	r7, #24
 800ad68:	46bd      	mov	sp, r7
 800ad6a:	bd80      	pop	{r7, pc}
 800ad6c:	20004c58 	.word	0x20004c58
 800ad70:	20004c50 	.word	0x20004c50

0800ad74 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800ad74:	b480      	push	{r7}
 800ad76:	b085      	sub	sp, #20
 800ad78:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800ad7a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800ad7e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800ad80:	4b27      	ldr	r3, [pc, #156]	; (800ae20 <prvHeapInit+0xac>)
 800ad82:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800ad84:	68fb      	ldr	r3, [r7, #12]
 800ad86:	f003 0307 	and.w	r3, r3, #7
 800ad8a:	2b00      	cmp	r3, #0
 800ad8c:	d00c      	beq.n	800ada8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800ad8e:	68fb      	ldr	r3, [r7, #12]
 800ad90:	3307      	adds	r3, #7
 800ad92:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ad94:	68fb      	ldr	r3, [r7, #12]
 800ad96:	f023 0307 	bic.w	r3, r3, #7
 800ad9a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800ad9c:	68ba      	ldr	r2, [r7, #8]
 800ad9e:	68fb      	ldr	r3, [r7, #12]
 800ada0:	1ad3      	subs	r3, r2, r3
 800ada2:	4a1f      	ldr	r2, [pc, #124]	; (800ae20 <prvHeapInit+0xac>)
 800ada4:	4413      	add	r3, r2
 800ada6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800ada8:	68fb      	ldr	r3, [r7, #12]
 800adaa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800adac:	4a1d      	ldr	r2, [pc, #116]	; (800ae24 <prvHeapInit+0xb0>)
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800adb2:	4b1c      	ldr	r3, [pc, #112]	; (800ae24 <prvHeapInit+0xb0>)
 800adb4:	2200      	movs	r2, #0
 800adb6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	68ba      	ldr	r2, [r7, #8]
 800adbc:	4413      	add	r3, r2
 800adbe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800adc0:	2208      	movs	r2, #8
 800adc2:	68fb      	ldr	r3, [r7, #12]
 800adc4:	1a9b      	subs	r3, r3, r2
 800adc6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800adc8:	68fb      	ldr	r3, [r7, #12]
 800adca:	f023 0307 	bic.w	r3, r3, #7
 800adce:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800add0:	68fb      	ldr	r3, [r7, #12]
 800add2:	4a15      	ldr	r2, [pc, #84]	; (800ae28 <prvHeapInit+0xb4>)
 800add4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800add6:	4b14      	ldr	r3, [pc, #80]	; (800ae28 <prvHeapInit+0xb4>)
 800add8:	681b      	ldr	r3, [r3, #0]
 800adda:	2200      	movs	r2, #0
 800addc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800adde:	4b12      	ldr	r3, [pc, #72]	; (800ae28 <prvHeapInit+0xb4>)
 800ade0:	681b      	ldr	r3, [r3, #0]
 800ade2:	2200      	movs	r2, #0
 800ade4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800adea:	683b      	ldr	r3, [r7, #0]
 800adec:	68fa      	ldr	r2, [r7, #12]
 800adee:	1ad2      	subs	r2, r2, r3
 800adf0:	683b      	ldr	r3, [r7, #0]
 800adf2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800adf4:	4b0c      	ldr	r3, [pc, #48]	; (800ae28 <prvHeapInit+0xb4>)
 800adf6:	681a      	ldr	r2, [r3, #0]
 800adf8:	683b      	ldr	r3, [r7, #0]
 800adfa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800adfc:	683b      	ldr	r3, [r7, #0]
 800adfe:	685b      	ldr	r3, [r3, #4]
 800ae00:	4a0a      	ldr	r2, [pc, #40]	; (800ae2c <prvHeapInit+0xb8>)
 800ae02:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ae04:	683b      	ldr	r3, [r7, #0]
 800ae06:	685b      	ldr	r3, [r3, #4]
 800ae08:	4a09      	ldr	r2, [pc, #36]	; (800ae30 <prvHeapInit+0xbc>)
 800ae0a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800ae0c:	4b09      	ldr	r3, [pc, #36]	; (800ae34 <prvHeapInit+0xc0>)
 800ae0e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800ae12:	601a      	str	r2, [r3, #0]
}
 800ae14:	bf00      	nop
 800ae16:	3714      	adds	r7, #20
 800ae18:	46bd      	mov	sp, r7
 800ae1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae1e:	4770      	bx	lr
 800ae20:	20001044 	.word	0x20001044
 800ae24:	20004c44 	.word	0x20004c44
 800ae28:	20004c4c 	.word	0x20004c4c
 800ae2c:	20004c54 	.word	0x20004c54
 800ae30:	20004c50 	.word	0x20004c50
 800ae34:	20004c58 	.word	0x20004c58

0800ae38 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800ae38:	b480      	push	{r7}
 800ae3a:	b085      	sub	sp, #20
 800ae3c:	af00      	add	r7, sp, #0
 800ae3e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800ae40:	4b28      	ldr	r3, [pc, #160]	; (800aee4 <prvInsertBlockIntoFreeList+0xac>)
 800ae42:	60fb      	str	r3, [r7, #12]
 800ae44:	e002      	b.n	800ae4c <prvInsertBlockIntoFreeList+0x14>
 800ae46:	68fb      	ldr	r3, [r7, #12]
 800ae48:	681b      	ldr	r3, [r3, #0]
 800ae4a:	60fb      	str	r3, [r7, #12]
 800ae4c:	68fb      	ldr	r3, [r7, #12]
 800ae4e:	681b      	ldr	r3, [r3, #0]
 800ae50:	687a      	ldr	r2, [r7, #4]
 800ae52:	429a      	cmp	r2, r3
 800ae54:	d8f7      	bhi.n	800ae46 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800ae56:	68fb      	ldr	r3, [r7, #12]
 800ae58:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800ae5a:	68fb      	ldr	r3, [r7, #12]
 800ae5c:	685b      	ldr	r3, [r3, #4]
 800ae5e:	68ba      	ldr	r2, [r7, #8]
 800ae60:	4413      	add	r3, r2
 800ae62:	687a      	ldr	r2, [r7, #4]
 800ae64:	429a      	cmp	r2, r3
 800ae66:	d108      	bne.n	800ae7a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800ae68:	68fb      	ldr	r3, [r7, #12]
 800ae6a:	685a      	ldr	r2, [r3, #4]
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	685b      	ldr	r3, [r3, #4]
 800ae70:	441a      	add	r2, r3
 800ae72:	68fb      	ldr	r3, [r7, #12]
 800ae74:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800ae76:	68fb      	ldr	r3, [r7, #12]
 800ae78:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	685b      	ldr	r3, [r3, #4]
 800ae82:	68ba      	ldr	r2, [r7, #8]
 800ae84:	441a      	add	r2, r3
 800ae86:	68fb      	ldr	r3, [r7, #12]
 800ae88:	681b      	ldr	r3, [r3, #0]
 800ae8a:	429a      	cmp	r2, r3
 800ae8c:	d118      	bne.n	800aec0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800ae8e:	68fb      	ldr	r3, [r7, #12]
 800ae90:	681a      	ldr	r2, [r3, #0]
 800ae92:	4b15      	ldr	r3, [pc, #84]	; (800aee8 <prvInsertBlockIntoFreeList+0xb0>)
 800ae94:	681b      	ldr	r3, [r3, #0]
 800ae96:	429a      	cmp	r2, r3
 800ae98:	d00d      	beq.n	800aeb6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	685a      	ldr	r2, [r3, #4]
 800ae9e:	68fb      	ldr	r3, [r7, #12]
 800aea0:	681b      	ldr	r3, [r3, #0]
 800aea2:	685b      	ldr	r3, [r3, #4]
 800aea4:	441a      	add	r2, r3
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800aeaa:	68fb      	ldr	r3, [r7, #12]
 800aeac:	681b      	ldr	r3, [r3, #0]
 800aeae:	681a      	ldr	r2, [r3, #0]
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	601a      	str	r2, [r3, #0]
 800aeb4:	e008      	b.n	800aec8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800aeb6:	4b0c      	ldr	r3, [pc, #48]	; (800aee8 <prvInsertBlockIntoFreeList+0xb0>)
 800aeb8:	681a      	ldr	r2, [r3, #0]
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	601a      	str	r2, [r3, #0]
 800aebe:	e003      	b.n	800aec8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800aec0:	68fb      	ldr	r3, [r7, #12]
 800aec2:	681a      	ldr	r2, [r3, #0]
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800aec8:	68fa      	ldr	r2, [r7, #12]
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	429a      	cmp	r2, r3
 800aece:	d002      	beq.n	800aed6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800aed0:	68fb      	ldr	r3, [r7, #12]
 800aed2:	687a      	ldr	r2, [r7, #4]
 800aed4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800aed6:	bf00      	nop
 800aed8:	3714      	adds	r7, #20
 800aeda:	46bd      	mov	sp, r7
 800aedc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aee0:	4770      	bx	lr
 800aee2:	bf00      	nop
 800aee4:	20004c44 	.word	0x20004c44
 800aee8:	20004c4c 	.word	0x20004c4c

0800aeec <app_low_init>:
*
* @return 		none
*/
////////////////////////////////////////////////////////////////////////////////
void app_low_init(void)
{
 800aeec:	b580      	push	{r7, lr}
 800aeee:	af00      	add	r7, sp, #0
	// Init periphery
	gpio_init();
 800aef0:	f005 fafa 	bl	80104e8 <gpio_init>

	if ( eTIMER_OK != timer_init())
 800aef4:	f006 f97a 	bl	80111ec <timer_init>
 800aef8:	4603      	mov	r3, r0
 800aefa:	2b00      	cmp	r3, #0
 800aefc:	d001      	beq.n	800af02 <app_low_init+0x16>
	{
		PROJECT_CONFIG_ASSERT( 0 );
 800aefe:	f00a f875 	bl	8014fec <project_config_assert_fail>
	}

	if ( eI2C_OK != i2c_init())
 800af02:	f005 fcdd 	bl	80108c0 <i2c_init>
 800af06:	4603      	mov	r3, r0
 800af08:	2b00      	cmp	r3, #0
 800af0a:	d001      	beq.n	800af10 <app_low_init+0x24>
	{
		PROJECT_CONFIG_ASSERT( 0 );
 800af0c:	f00a f86e 	bl	8014fec <project_config_assert_fail>
	}

	if ( eSPI_OK != spi_init())
 800af10:	f005 fe8c 	bl	8010c2c <spi_init>
 800af14:	4603      	mov	r3, r0
 800af16:	2b00      	cmp	r3, #0
 800af18:	d001      	beq.n	800af1e <app_low_init+0x32>
	{
		PROJECT_CONFIG_ASSERT( 0 );
 800af1a:	f00a f867 	bl	8014fec <project_config_assert_fail>
	}

	if ( eADC_OK != adc_init())
 800af1e:	f005 f951 	bl	80101c4 <adc_init>
 800af22:	4603      	mov	r3, r0
 800af24:	2b00      	cmp	r3, #0
 800af26:	d001      	beq.n	800af2c <app_low_init+0x40>
	{
		PROJECT_CONFIG_ASSERT( 0 );
 800af28:	f00a f860 	bl	8014fec <project_config_assert_fail>
	}

	// HMI init
	led_init();
 800af2c:	f004 fd83 	bl	800fa36 <led_init>

	// Init power management
	pwr_init();
 800af30:	f000 fc8a 	bl	800b848 <pwr_init>

	// NOTE: This delay becouse EEPROM is on 3V3LP voltage domain!
	HAL_Delay( 100 );
 800af34:	2064      	movs	r0, #100	; 0x64
 800af36:	f7f6 fcd9 	bl	80018ec <HAL_Delay>

	if ( eNVM_OK != nvm_init())
 800af3a:	f008 fa67 	bl	801340c <nvm_init>
 800af3e:	4603      	mov	r3, r0
 800af40:	2b00      	cmp	r3, #0
 800af42:	d001      	beq.n	800af48 <app_low_init+0x5c>
	{
		PROJECT_CONFIG_ASSERT( 0 );
 800af44:	f00a f852 	bl	8014fec <project_config_assert_fail>
	}

	if ( ePAR_OK != par_init())
 800af48:	f008 fc4a 	bl	80137e0 <par_init>
 800af4c:	4603      	mov	r3, r0
 800af4e:	2b00      	cmp	r3, #0
 800af50:	d001      	beq.n	800af56 <app_low_init+0x6a>
	{
		PROJECT_CONFIG_ASSERT( 0 );
 800af52:	f00a f84b 	bl	8014fec <project_config_assert_fail>
	}

	// Create task
	g_thread_app_low_id = osThreadNew( app_low_thread, NULL, &g_thread_app_low_attr );
 800af56:	4a05      	ldr	r2, [pc, #20]	; (800af6c <app_low_init+0x80>)
 800af58:	2100      	movs	r1, #0
 800af5a:	4805      	ldr	r0, [pc, #20]	; (800af70 <app_low_init+0x84>)
 800af5c:	f7fb feaa 	bl	8006cb4 <osThreadNew>
 800af60:	4603      	mov	r3, r0
 800af62:	4a04      	ldr	r2, [pc, #16]	; (800af74 <app_low_init+0x88>)
 800af64:	6013      	str	r3, [r2, #0]
}
 800af66:	bf00      	nop
 800af68:	bd80      	pop	{r7, pc}
 800af6a:	bf00      	nop
 800af6c:	0801b078 	.word	0x0801b078
 800af70:	0800af79 	.word	0x0800af79
 800af74:	20004c5c 	.word	0x20004c5c

0800af78 <app_low_thread>:
* @param[in] 	args - Optional arguments
* @return 		none
*/
////////////////////////////////////////////////////////////////////////////////
static void app_low_thread(void * args)
{
 800af78:	b580      	push	{r7, lr}
 800af7a:	b084      	sub	sp, #16
 800af7c:	af00      	add	r7, sp, #0
 800af7e:	6078      	str	r0, [r7, #4]
	uint32_t flags;

	// Create timer
	g_timer_app_low_id = osTimerNew( app_low_timer_callback, osTimerPeriodic, NULL, NULL );
 800af80:	2300      	movs	r3, #0
 800af82:	2200      	movs	r2, #0
 800af84:	2101      	movs	r1, #1
 800af86:	4810      	ldr	r0, [pc, #64]	; (800afc8 <app_low_thread+0x50>)
 800af88:	f7fc f884 	bl	8007094 <osTimerNew>
 800af8c:	4603      	mov	r3, r0
 800af8e:	4a0f      	ldr	r2, [pc, #60]	; (800afcc <app_low_thread+0x54>)
 800af90:	6013      	str	r3, [r2, #0]
    osTimerStart( g_timer_app_low_id, 10UL );
 800af92:	4b0e      	ldr	r3, [pc, #56]	; (800afcc <app_low_thread+0x54>)
 800af94:	681b      	ldr	r3, [r3, #0]
 800af96:	210a      	movs	r1, #10
 800af98:	4618      	mov	r0, r3
 800af9a:	f7fc f8ff 	bl	800719c <osTimerStart>

    while(1)
    {
    	// Get flags
    	flags = osThreadFlagsWait( 0x01, osFlagsWaitAny, osWaitForever );
 800af9e:	f04f 32ff 	mov.w	r2, #4294967295
 800afa2:	2100      	movs	r1, #0
 800afa4:	2001      	movs	r0, #1
 800afa6:	f7fb ffcb 	bl	8006f40 <osThreadFlagsWait>
 800afaa:	60f8      	str	r0, [r7, #12]

    	// 10ms loop
    	if ( flags & 0x01 )
 800afac:	68fb      	ldr	r3, [r7, #12]
 800afae:	f003 0301 	and.w	r3, r3, #1
 800afb2:	2b00      	cmp	r3, #0
 800afb4:	d0f3      	beq.n	800af9e <app_low_thread+0x26>
    	{
    		// HMI handlers
    		led_hndl();
 800afb6:	f004 fd4b 	bl	800fa50 <led_hndl>
    		button_hndl();
 800afba:	f004 fd03 	bl	800f9c4 <button_hndl>

    		// Power management
    		pwr_hndl();
 800afbe:	f000 fcdf 	bl	800b980 <pwr_hndl>

    		// LED HMI
    		app_low_hmi_led_show();
 800afc2:	f000 f815 	bl	800aff0 <app_low_hmi_led_show>
    	flags = osThreadFlagsWait( 0x01, osFlagsWaitAny, osWaitForever );
 800afc6:	e7ea      	b.n	800af9e <app_low_thread+0x26>
 800afc8:	0800afd1 	.word	0x0800afd1
 800afcc:	20004c60 	.word	0x20004c60

0800afd0 <app_low_timer_callback>:
* @param[in] 	args - Optional arguments
* @return 		void
*/
////////////////////////////////////////////////////////////////////////////////
static void app_low_timer_callback(void * args)
{
 800afd0:	b580      	push	{r7, lr}
 800afd2:	b082      	sub	sp, #8
 800afd4:	af00      	add	r7, sp, #0
 800afd6:	6078      	str	r0, [r7, #4]
	osThreadFlagsSet( g_thread_app_low_id, 0x01 );
 800afd8:	4b04      	ldr	r3, [pc, #16]	; (800afec <app_low_timer_callback+0x1c>)
 800afda:	681b      	ldr	r3, [r3, #0]
 800afdc:	2101      	movs	r1, #1
 800afde:	4618      	mov	r0, r3
 800afe0:	f7fb ff4e 	bl	8006e80 <osThreadFlagsSet>
}
 800afe4:	bf00      	nop
 800afe6:	3708      	adds	r7, #8
 800afe8:	46bd      	mov	sp, r7
 800afea:	bd80      	pop	{r7, pc}
 800afec:	20004c5c 	.word	0x20004c5c

0800aff0 <app_low_hmi_led_show>:
*
* @return 		void
*/
////////////////////////////////////////////////////////////////////////////////
static void app_low_hmi_led_show(void)
{
 800aff0:	b580      	push	{r7, lr}
 800aff2:	af00      	add	r7, sp, #0
	// GREEN LED
	if ( true == pwr_get_is_battery_charging())
 800aff4:	f000 fd08 	bl	800ba08 <pwr_get_is_battery_charging>
 800aff8:	4603      	mov	r3, r0
 800affa:	2b00      	cmp	r3, #0
 800affc:	d008      	beq.n	800b010 <app_low_hmi_led_show+0x20>
	{
		led_blink_smooth( eLED_GREEN, 0.5f, 2.0f, eLED_BLINK_CONTINUOUS );
 800affe:	2105      	movs	r1, #5
 800b000:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 800b004:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 800b008:	2001      	movs	r0, #1
 800b00a:	f004 fdb9 	bl	800fb80 <led_blink_smooth>
	}
	else
	{
		led_set( eLED_GREEN, eLED_OFF );
	}
}
 800b00e:	e003      	b.n	800b018 <app_low_hmi_led_show+0x28>
		led_set( eLED_GREEN, eLED_OFF );
 800b010:	2100      	movs	r1, #0
 800b012:	2001      	movs	r0, #1
 800b014:	f004 fd7e 	bl	800fb14 <led_set>
}
 800b018:	bf00      	nop
 800b01a:	bd80      	pop	{r7, pc}

0800b01c <button_pressed_callback>:
*
* @return 		void
*/
////////////////////////////////////////////////////////////////////////////////
void button_pressed_callback(void)
{
 800b01c:	b580      	push	{r7, lr}
 800b01e:	b082      	sub	sp, #8
 800b020:	af00      	add	r7, sp, #0
	uint8_t bat_soc;

	bat_soc = pwr_get_battery_soc();
 800b022:	f000 fcdf 	bl	800b9e4 <pwr_get_battery_soc>
 800b026:	4603      	mov	r3, r0
 800b028:	71fb      	strb	r3, [r7, #7]

	if ( 20U >= bat_soc )
 800b02a:	79fb      	ldrb	r3, [r7, #7]
 800b02c:	2b14      	cmp	r3, #20
 800b02e:	d808      	bhi.n	800b042 <button_pressed_callback+0x26>
	{
		led_blink_smooth( eLED_RED, 0.10f, 0.5f, eLED_BLINK_1X );
 800b030:	2100      	movs	r1, #0
 800b032:	eef6 0a00 	vmov.f32	s1, #96	; 0x3f000000  0.5
 800b036:	ed9f 0a1b 	vldr	s0, [pc, #108]	; 800b0a4 <button_pressed_callback+0x88>
 800b03a:	2000      	movs	r0, #0
 800b03c:	f004 fda0 	bl	800fb80 <led_blink_smooth>
	}
	else
	{
		led_blink_smooth( eLED_RED, 0.10f, 0.5f, eLED_BLINK_5X );
	}
}
 800b040:	e02b      	b.n	800b09a <button_pressed_callback+0x7e>
	else if ( 40U >= bat_soc )
 800b042:	79fb      	ldrb	r3, [r7, #7]
 800b044:	2b28      	cmp	r3, #40	; 0x28
 800b046:	d808      	bhi.n	800b05a <button_pressed_callback+0x3e>
		led_blink_smooth( eLED_RED, 0.10f, 0.5f, eLED_BLINK_2X );
 800b048:	2101      	movs	r1, #1
 800b04a:	eef6 0a00 	vmov.f32	s1, #96	; 0x3f000000  0.5
 800b04e:	ed9f 0a15 	vldr	s0, [pc, #84]	; 800b0a4 <button_pressed_callback+0x88>
 800b052:	2000      	movs	r0, #0
 800b054:	f004 fd94 	bl	800fb80 <led_blink_smooth>
}
 800b058:	e01f      	b.n	800b09a <button_pressed_callback+0x7e>
	else if ( 60U >= bat_soc )
 800b05a:	79fb      	ldrb	r3, [r7, #7]
 800b05c:	2b3c      	cmp	r3, #60	; 0x3c
 800b05e:	d808      	bhi.n	800b072 <button_pressed_callback+0x56>
		led_blink_smooth( eLED_RED, 0.10f, 0.5f, eLED_BLINK_3X );
 800b060:	2102      	movs	r1, #2
 800b062:	eef6 0a00 	vmov.f32	s1, #96	; 0x3f000000  0.5
 800b066:	ed9f 0a0f 	vldr	s0, [pc, #60]	; 800b0a4 <button_pressed_callback+0x88>
 800b06a:	2000      	movs	r0, #0
 800b06c:	f004 fd88 	bl	800fb80 <led_blink_smooth>
}
 800b070:	e013      	b.n	800b09a <button_pressed_callback+0x7e>
	else if ( 80U >= bat_soc )
 800b072:	79fb      	ldrb	r3, [r7, #7]
 800b074:	2b50      	cmp	r3, #80	; 0x50
 800b076:	d808      	bhi.n	800b08a <button_pressed_callback+0x6e>
		led_blink_smooth( eLED_RED, 0.10f, 0.5f, eLED_BLINK_4X );
 800b078:	2103      	movs	r1, #3
 800b07a:	eef6 0a00 	vmov.f32	s1, #96	; 0x3f000000  0.5
 800b07e:	ed9f 0a09 	vldr	s0, [pc, #36]	; 800b0a4 <button_pressed_callback+0x88>
 800b082:	2000      	movs	r0, #0
 800b084:	f004 fd7c 	bl	800fb80 <led_blink_smooth>
}
 800b088:	e007      	b.n	800b09a <button_pressed_callback+0x7e>
		led_blink_smooth( eLED_RED, 0.10f, 0.5f, eLED_BLINK_5X );
 800b08a:	2104      	movs	r1, #4
 800b08c:	eef6 0a00 	vmov.f32	s1, #96	; 0x3f000000  0.5
 800b090:	ed9f 0a04 	vldr	s0, [pc, #16]	; 800b0a4 <button_pressed_callback+0x88>
 800b094:	2000      	movs	r0, #0
 800b096:	f004 fd73 	bl	800fb80 <led_blink_smooth>
}
 800b09a:	bf00      	nop
 800b09c:	3708      	adds	r7, #8
 800b09e:	46bd      	mov	sp, r7
 800b0a0:	bd80      	pop	{r7, pc}
 800b0a2:	bf00      	nop
 800b0a4:	3dcccccd 	.word	0x3dcccccd

0800b0a8 <button_release_callback>:
*
* @return 		void
*/
////////////////////////////////////////////////////////////////////////////////
void button_release_callback(void)
{
 800b0a8:	b480      	push	{r7}
 800b0aa:	af00      	add	r7, sp, #0
	// No actions...
}
 800b0ac:	bf00      	nop
 800b0ae:	46bd      	mov	sp, r7
 800b0b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0b4:	4770      	bx	lr

0800b0b6 <pwr_3v3_lp_rail_change_callback>:
* @param[in]	state - State of 3V3 LP rail. True-ON, false-OFF
* @return 		void
*/
////////////////////////////////////////////////////////////////////////////////
void pwr_3v3_lp_rail_change_callback(const bool state)
{
 800b0b6:	b580      	push	{r7, lr}
 800b0b8:	b082      	sub	sp, #8
 800b0ba:	af00      	add	r7, sp, #0
 800b0bc:	4603      	mov	r3, r0
 800b0be:	71fb      	strb	r3, [r7, #7]
	if ( true == state )
 800b0c0:	79fb      	ldrb	r3, [r7, #7]
 800b0c2:	2b00      	cmp	r3, #0
 800b0c4:	d002      	beq.n	800b0cc <pwr_3v3_lp_rail_change_callback+0x16>
	{
		display_send_cmd( eDISPLAY_CMD_INIT );
 800b0c6:	2000      	movs	r0, #0
 800b0c8:	f000 f816 	bl	800b0f8 <display_send_cmd>
	}
	else
	{
		// No action...
	}
}
 800b0cc:	bf00      	nop
 800b0ce:	3708      	adds	r7, #8
 800b0d0:	46bd      	mov	sp, r7
 800b0d2:	bd80      	pop	{r7, pc}

0800b0d4 <display_init>:
////////////////////////////////////////////////////////////////////////////////
// Functions
////////////////////////////////////////////////////////////////////////////////

void display_init(void)
{
 800b0d4:	b580      	push	{r7, lr}
 800b0d6:	af00      	add	r7, sp, #0
	// Create task
	g_thread_display_id = osThreadNew( display_thread, NULL, &g_thread_display_attr );
 800b0d8:	4a04      	ldr	r2, [pc, #16]	; (800b0ec <display_init+0x18>)
 800b0da:	2100      	movs	r1, #0
 800b0dc:	4804      	ldr	r0, [pc, #16]	; (800b0f0 <display_init+0x1c>)
 800b0de:	f7fb fde9 	bl	8006cb4 <osThreadNew>
 800b0e2:	4603      	mov	r3, r0
 800b0e4:	4a03      	ldr	r2, [pc, #12]	; (800b0f4 <display_init+0x20>)
 800b0e6:	6013      	str	r3, [r2, #0]
}
 800b0e8:	bf00      	nop
 800b0ea:	bd80      	pop	{r7, pc}
 800b0ec:	0801b09c 	.word	0x0801b09c
 800b0f0:	0800b11d 	.word	0x0800b11d
 800b0f4:	20004c64 	.word	0x20004c64

0800b0f8 <display_send_cmd>:


void display_send_cmd(const display_cmd_t cmd)
{
 800b0f8:	b580      	push	{r7, lr}
 800b0fa:	b082      	sub	sp, #8
 800b0fc:	af00      	add	r7, sp, #0
 800b0fe:	4603      	mov	r3, r0
 800b100:	71fb      	strb	r3, [r7, #7]
	osMessageQueuePut( g_queue_display_id, &cmd, 0, 0 );
 800b102:	4b05      	ldr	r3, [pc, #20]	; (800b118 <display_send_cmd+0x20>)
 800b104:	6818      	ldr	r0, [r3, #0]
 800b106:	1df9      	adds	r1, r7, #7
 800b108:	2300      	movs	r3, #0
 800b10a:	2200      	movs	r2, #0
 800b10c:	f7fc fa54 	bl	80075b8 <osMessageQueuePut>
}
 800b110:	bf00      	nop
 800b112:	3708      	adds	r7, #8
 800b114:	46bd      	mov	sp, r7
 800b116:	bd80      	pop	{r7, pc}
 800b118:	20004c70 	.word	0x20004c70

0800b11c <display_thread>:


static void display_thread (void * args)
{
 800b11c:	b580      	push	{r7, lr}
 800b11e:	b084      	sub	sp, #16
 800b120:	af00      	add	r7, sp, #0
 800b122:	6078      	str	r0, [r7, #4]
	display_cmd_t 	cmd;

	// Create command queue
	g_queue_display_id = osMessageQueueNew( 16, sizeof( display_cmd_t ), NULL );
 800b124:	2200      	movs	r2, #0
 800b126:	2101      	movs	r1, #1
 800b128:	2010      	movs	r0, #16
 800b12a:	f7fc f9bf 	bl	80074ac <osMessageQueueNew>
 800b12e:	4603      	mov	r3, r0
 800b130:	4a27      	ldr	r2, [pc, #156]	; (800b1d0 <display_thread+0xb4>)
 800b132:	6013      	str	r3, [r2, #0]
	PROJECT_CONFIG_ASSERT( NULL != g_queue_display_id );
 800b134:	4b26      	ldr	r3, [pc, #152]	; (800b1d0 <display_thread+0xb4>)
 800b136:	681b      	ldr	r3, [r3, #0]
 800b138:	2b00      	cmp	r3, #0
 800b13a:	d101      	bne.n	800b140 <display_thread+0x24>
 800b13c:	f009 ff56 	bl	8014fec <project_config_assert_fail>

	// Create OS refresh timer
	g_timer_display_id = osTimerNew( display_refresh_timer_callback, osTimerPeriodic, NULL, NULL );
 800b140:	2300      	movs	r3, #0
 800b142:	2200      	movs	r2, #0
 800b144:	2101      	movs	r1, #1
 800b146:	4823      	ldr	r0, [pc, #140]	; (800b1d4 <display_thread+0xb8>)
 800b148:	f7fb ffa4 	bl	8007094 <osTimerNew>
 800b14c:	4603      	mov	r3, r0
 800b14e:	4a22      	ldr	r2, [pc, #136]	; (800b1d8 <display_thread+0xbc>)
 800b150:	6013      	str	r3, [r2, #0]
	g_timer_touch_id = osTimerNew( touch_timer_callback, osTimerPeriodic, NULL, NULL );
 800b152:	2300      	movs	r3, #0
 800b154:	2200      	movs	r2, #0
 800b156:	2101      	movs	r1, #1
 800b158:	4820      	ldr	r0, [pc, #128]	; (800b1dc <display_thread+0xc0>)
 800b15a:	f7fb ff9b 	bl	8007094 <osTimerNew>
 800b15e:	4603      	mov	r3, r0
 800b160:	4a1f      	ldr	r2, [pc, #124]	; (800b1e0 <display_thread+0xc4>)
 800b162:	6013      	str	r3, [r2, #0]

	while ( 1 )
	{
		// Get queue
		if ( osOK == osMessageQueueGet(g_queue_display_id, &cmd, NULL, osWaitForever ))
 800b164:	4b1a      	ldr	r3, [pc, #104]	; (800b1d0 <display_thread+0xb4>)
 800b166:	6818      	ldr	r0, [r3, #0]
 800b168:	f107 010f 	add.w	r1, r7, #15
 800b16c:	f04f 33ff 	mov.w	r3, #4294967295
 800b170:	2200      	movs	r2, #0
 800b172:	f7fc fa95 	bl	80076a0 <osMessageQueueGet>
 800b176:	4603      	mov	r3, r0
 800b178:	2b00      	cmp	r3, #0
 800b17a:	d126      	bne.n	800b1ca <display_thread+0xae>
		{
			switch ( cmd )
 800b17c:	7bfb      	ldrb	r3, [r7, #15]
 800b17e:	2b05      	cmp	r3, #5
 800b180:	d820      	bhi.n	800b1c4 <display_thread+0xa8>
 800b182:	a201      	add	r2, pc, #4	; (adr r2, 800b188 <display_thread+0x6c>)
 800b184:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b188:	0800b1a1 	.word	0x0800b1a1
 800b18c:	0800b1a7 	.word	0x0800b1a7
 800b190:	0800b1ad 	.word	0x0800b1ad
 800b194:	0800b1b3 	.word	0x0800b1b3
 800b198:	0800b1bf 	.word	0x0800b1bf
 800b19c:	0800b1b9 	.word	0x0800b1b9
			{
				case eDISPLAY_CMD_INIT:
					display_cmd_init();
 800b1a0:	f000 f836 	bl	800b210 <display_cmd_init>
					break;
 800b1a4:	e012      	b.n	800b1cc <display_thread+0xb0>

				case eDISPLAY_CMD_DEINIT:
					display_cmd_deinit();
 800b1a6:	f000 f8b5 	bl	800b314 <display_cmd_deinit>
					break;
 800b1aa:	e00f      	b.n	800b1cc <display_thread+0xb0>

				case eDISPLAY_CMD_REFRESH:
					display_cmd_refresh();
 800b1ac:	f000 f8bc 	bl	800b328 <display_cmd_refresh>
					break;
 800b1b0:	e00c      	b.n	800b1cc <display_thread+0xb0>

				case eDISPLAY_CMD_TOUCH:
					display_cmd_touch();
 800b1b2:	f000 f8bf 	bl	800b334 <display_cmd_touch>
					break;
 800b1b6:	e009      	b.n	800b1cc <display_thread+0xb0>

				case eDISPLAY_CMD_ON:
					display_cmd_on();
 800b1b8:	f000 f922 	bl	800b400 <display_cmd_on>
					break;
 800b1bc:	e006      	b.n	800b1cc <display_thread+0xb0>

				case eDISPLAY_CMD_OFF:
					display_cmd_off();
 800b1be:	f000 f913 	bl	800b3e8 <display_cmd_off>
					break;
 800b1c2:	e003      	b.n	800b1cc <display_thread+0xb0>

				default:
					PROJECT_CONFIG_ASSERT( 0 );
 800b1c4:	f009 ff12 	bl	8014fec <project_config_assert_fail>
					break;
 800b1c8:	e000      	b.n	800b1cc <display_thread+0xb0>
			}
		}
 800b1ca:	bf00      	nop
		if ( osOK == osMessageQueueGet(g_queue_display_id, &cmd, NULL, osWaitForever ))
 800b1cc:	e7ca      	b.n	800b164 <display_thread+0x48>
 800b1ce:	bf00      	nop
 800b1d0:	20004c70 	.word	0x20004c70
 800b1d4:	0800b1e5 	.word	0x0800b1e5
 800b1d8:	20004c68 	.word	0x20004c68
 800b1dc:	0800b1fb 	.word	0x0800b1fb
 800b1e0:	20004c6c 	.word	0x20004c6c

0800b1e4 <display_refresh_timer_callback>:
* @param[in] 	args - Optional arguments
* @return 		void
*/
////////////////////////////////////////////////////////////////////////////////
static void display_refresh_timer_callback(void * args)
{
 800b1e4:	b580      	push	{r7, lr}
 800b1e6:	b082      	sub	sp, #8
 800b1e8:	af00      	add	r7, sp, #0
 800b1ea:	6078      	str	r0, [r7, #4]
	display_send_cmd( eDISPLAY_CMD_REFRESH );
 800b1ec:	2002      	movs	r0, #2
 800b1ee:	f7ff ff83 	bl	800b0f8 <display_send_cmd>
}
 800b1f2:	bf00      	nop
 800b1f4:	3708      	adds	r7, #8
 800b1f6:	46bd      	mov	sp, r7
 800b1f8:	bd80      	pop	{r7, pc}

0800b1fa <touch_timer_callback>:
* @param[in] 	args - Optional arguments
* @return 		void
*/
////////////////////////////////////////////////////////////////////////////////
static void touch_timer_callback(void * args)
{
 800b1fa:	b580      	push	{r7, lr}
 800b1fc:	b082      	sub	sp, #8
 800b1fe:	af00      	add	r7, sp, #0
 800b200:	6078      	str	r0, [r7, #4]
	display_send_cmd( eDISPLAY_CMD_TOUCH );
 800b202:	2003      	movs	r0, #3
 800b204:	f7ff ff78 	bl	800b0f8 <display_send_cmd>
}
 800b208:	bf00      	nop
 800b20a:	3708      	adds	r7, #8
 800b20c:	46bd      	mov	sp, r7
 800b20e:	bd80      	pop	{r7, pc}

0800b210 <display_cmd_init>:
*
* @return 		void
*/
////////////////////////////////////////////////////////////////////////////////
static void display_cmd_init(void)
{
 800b210:	b580      	push	{r7, lr}
 800b212:	b088      	sub	sp, #32
 800b214:	af00      	add	r7, sp, #0
	uint8_t status;
	int32_t cal_factors[7];

	// Initialize display
	if ( eILI9488_OK != ili9488_init())
 800b216:	f001 fcb3 	bl	800cb80 <ili9488_init>
 800b21a:	4603      	mov	r3, r0
 800b21c:	2b00      	cmp	r3, #0
 800b21e:	d006      	beq.n	800b22e <display_cmd_init+0x1e>
	{
		COM_DBG_PRINT( eCOM_DBG_CH_NONE, "DISPLAY: Init failed!" );
 800b220:	4935      	ldr	r1, [pc, #212]	; (800b2f8 <display_cmd_init+0xe8>)
 800b222:	2000      	movs	r0, #0
 800b224:	f006 fd8a 	bl	8011d3c <com_dbg_print>
		PROJECT_CONFIG_ASSERT( 0 );
 800b228:	f009 fee0 	bl	8014fec <project_config_assert_fail>
 800b22c:	e00f      	b.n	800b24e <display_cmd_init+0x3e>
	}
	else
	{
		COM_DBG_PRINT( eCOM_DBG_CH_NONE, "DISPLAY: Init success!" );
 800b22e:	4933      	ldr	r1, [pc, #204]	; (800b2fc <display_cmd_init+0xec>)
 800b230:	2000      	movs	r0, #0
 800b232:	f006 fd83 	bl	8011d3c <com_dbg_print>

		// Turn display OFF
		ili9488_set_background( eILI9488_COLOR_GRAY );
 800b236:	2009      	movs	r0, #9
 800b238:	f001 fcd6 	bl	800cbe8 <ili9488_set_background>

		// Set home page
		// TODO:..

	    // Start refresh timer
		osTimerStart( g_timer_display_id, DISPLAY_REFRESH_HNDL_PERIOD_S * 1000UL );
 800b23c:	4b30      	ldr	r3, [pc, #192]	; (800b300 <display_cmd_init+0xf0>)
 800b23e:	681b      	ldr	r3, [r3, #0]
 800b240:	210a      	movs	r1, #10
 800b242:	4618      	mov	r0, r3
 800b244:	f7fb ffaa 	bl	800719c <osTimerStart>

		// Turn on display
		display_send_cmd( eDISPLAY_CMD_ON );
 800b248:	2005      	movs	r0, #5
 800b24a:	f7ff ff55 	bl	800b0f8 <display_send_cmd>
	}

	// Init touch controller
	if ( eXPT2046_OK != xpt2046_init())
 800b24e:	f003 fae1 	bl	800e814 <xpt2046_init>
 800b252:	4603      	mov	r3, r0
 800b254:	2b00      	cmp	r3, #0
 800b256:	d006      	beq.n	800b266 <display_cmd_init+0x56>
	{
		COM_DBG_PRINT( eCOM_DBG_CH_NONE, "TOUCH: Init failed!" );
 800b258:	492a      	ldr	r1, [pc, #168]	; (800b304 <display_cmd_init+0xf4>)
 800b25a:	2000      	movs	r0, #0
 800b25c:	f006 fd6e 	bl	8011d3c <com_dbg_print>
		PROJECT_CONFIG_ASSERT( 0 );
 800b260:	f009 fec4 	bl	8014fec <project_config_assert_fail>

		// Start touch timer
		osTimerStart( g_timer_touch_id, 50UL );
	}

}
 800b264:	e043      	b.n	800b2ee <display_cmd_init+0xde>
		COM_DBG_PRINT( eCOM_DBG_CH_NONE, "TOUCH: Init success!" );
 800b266:	4928      	ldr	r1, [pc, #160]	; (800b308 <display_cmd_init+0xf8>)
 800b268:	2000      	movs	r0, #0
 800b26a:	f006 fd67 	bl	8011d3c <com_dbg_print>
		par_get( ePAR_TOUCH_STATUS, (uint8_t*) &status );
 800b26e:	f107 031f 	add.w	r3, r7, #31
 800b272:	4619      	mov	r1, r3
 800b274:	2001      	movs	r0, #1
 800b276:	f008 fbd7 	bl	8013a28 <par_get>
		if ( eDISPLAY_TOUCH_CAL_DONE == status )
 800b27a:	7ffb      	ldrb	r3, [r7, #31]
 800b27c:	2b02      	cmp	r3, #2
 800b27e:	d130      	bne.n	800b2e2 <display_cmd_init+0xd2>
			COM_DBG_PRINT( eCOM_DBG_CH_NONE, "TOUCH: Calibration already done. Loading calibration factors..." );
 800b280:	4922      	ldr	r1, [pc, #136]	; (800b30c <display_cmd_init+0xfc>)
 800b282:	2000      	movs	r0, #0
 800b284:	f006 fd5a 	bl	8011d3c <com_dbg_print>
			par_get( ePAR_TOUCH_CAL_C0, (int32_t*) &cal_factors[0] );
 800b288:	463b      	mov	r3, r7
 800b28a:	4619      	mov	r1, r3
 800b28c:	2002      	movs	r0, #2
 800b28e:	f008 fbcb 	bl	8013a28 <par_get>
			par_get( ePAR_TOUCH_CAL_C1, (int32_t*) &cal_factors[1] );
 800b292:	463b      	mov	r3, r7
 800b294:	3304      	adds	r3, #4
 800b296:	4619      	mov	r1, r3
 800b298:	2003      	movs	r0, #3
 800b29a:	f008 fbc5 	bl	8013a28 <par_get>
			par_get( ePAR_TOUCH_CAL_C2, (int32_t*) &cal_factors[2] );
 800b29e:	463b      	mov	r3, r7
 800b2a0:	3308      	adds	r3, #8
 800b2a2:	4619      	mov	r1, r3
 800b2a4:	2004      	movs	r0, #4
 800b2a6:	f008 fbbf 	bl	8013a28 <par_get>
			par_get( ePAR_TOUCH_CAL_C3, (int32_t*) &cal_factors[3] );
 800b2aa:	463b      	mov	r3, r7
 800b2ac:	330c      	adds	r3, #12
 800b2ae:	4619      	mov	r1, r3
 800b2b0:	2005      	movs	r0, #5
 800b2b2:	f008 fbb9 	bl	8013a28 <par_get>
			par_get( ePAR_TOUCH_CAL_C4, (int32_t*) &cal_factors[4] );
 800b2b6:	463b      	mov	r3, r7
 800b2b8:	3310      	adds	r3, #16
 800b2ba:	4619      	mov	r1, r3
 800b2bc:	2006      	movs	r0, #6
 800b2be:	f008 fbb3 	bl	8013a28 <par_get>
			par_get( ePAR_TOUCH_CAL_C5, (int32_t*) &cal_factors[5] );
 800b2c2:	463b      	mov	r3, r7
 800b2c4:	3314      	adds	r3, #20
 800b2c6:	4619      	mov	r1, r3
 800b2c8:	2007      	movs	r0, #7
 800b2ca:	f008 fbad 	bl	8013a28 <par_get>
			par_get( ePAR_TOUCH_CAL_C6, (int32_t*) &cal_factors[6] );
 800b2ce:	463b      	mov	r3, r7
 800b2d0:	3318      	adds	r3, #24
 800b2d2:	4619      	mov	r1, r3
 800b2d4:	2008      	movs	r0, #8
 800b2d6:	f008 fba7 	bl	8013a28 <par_get>
			xpt2046_set_cal_factors( (int32_t*) &cal_factors );
 800b2da:	463b      	mov	r3, r7
 800b2dc:	4618      	mov	r0, r3
 800b2de:	f004 fa9b 	bl	800f818 <xpt2046_set_cal_factors>
		osTimerStart( g_timer_touch_id, 50UL );
 800b2e2:	4b0b      	ldr	r3, [pc, #44]	; (800b310 <display_cmd_init+0x100>)
 800b2e4:	681b      	ldr	r3, [r3, #0]
 800b2e6:	2132      	movs	r1, #50	; 0x32
 800b2e8:	4618      	mov	r0, r3
 800b2ea:	f7fb ff57 	bl	800719c <osTimerStart>
}
 800b2ee:	bf00      	nop
 800b2f0:	3720      	adds	r7, #32
 800b2f2:	46bd      	mov	sp, r7
 800b2f4:	bd80      	pop	{r7, pc}
 800b2f6:	bf00      	nop
 800b2f8:	0801a270 	.word	0x0801a270
 800b2fc:	0801a288 	.word	0x0801a288
 800b300:	20004c68 	.word	0x20004c68
 800b304:	0801a2a0 	.word	0x0801a2a0
 800b308:	0801a2b4 	.word	0x0801a2b4
 800b30c:	0801a2cc 	.word	0x0801a2cc
 800b310:	20004c6c 	.word	0x20004c6c

0800b314 <display_cmd_deinit>:
*
* @return 		void
*/
////////////////////////////////////////////////////////////////////////////////
static void display_cmd_deinit(void)
{
 800b314:	b580      	push	{r7, lr}
 800b316:	af00      	add	r7, sp, #0
	COM_DBG_PRINT( eCOM_DBG_CH_NONE, "DISPLAY: De-Init..." );
 800b318:	4902      	ldr	r1, [pc, #8]	; (800b324 <display_cmd_deinit+0x10>)
 800b31a:	2000      	movs	r0, #0
 800b31c:	f006 fd0e 	bl	8011d3c <com_dbg_print>

	// TODO: ...
}
 800b320:	bf00      	nop
 800b322:	bd80      	pop	{r7, pc}
 800b324:	0801a30c 	.word	0x0801a30c

0800b328 <display_cmd_refresh>:
*
* @return 		void
*/
////////////////////////////////////////////////////////////////////////////////
static void display_cmd_refresh(void)
{
 800b328:	b580      	push	{r7, lr}
 800b32a:	af00      	add	r7, sp, #0
	// Handle display background
	display_background_led_hndl();
 800b32c:	f000 f874 	bl	800b418 <display_background_led_hndl>

	// Refresh display data
	// TODO: ...
}
 800b330:	bf00      	nop
 800b332:	bd80      	pop	{r7, pc}

0800b334 <display_cmd_touch>:
*
* @return 		void
*/
////////////////////////////////////////////////////////////////////////////////
static void display_cmd_touch(void)
{
 800b334:	b580      	push	{r7, lr}
 800b336:	b084      	sub	sp, #16
 800b338:	af00      	add	r7, sp, #0
	static bool active_prev;

    // Handle touch controller
    xpt2046_hndl();
 800b33a:	f003 facf 	bl	800e8dc <xpt2046_hndl>

    // Handle touch calibration
    display_touch_cal_hndl();
 800b33e:	f000 f9a3 	bl	800b688 <display_touch_cal_hndl>

    // Get touch data
    xpt2046_get_touch( &g_touch.x, &g_touch.y, &g_touch.force, &g_touch.active );
 800b342:	4b24      	ldr	r3, [pc, #144]	; (800b3d4 <display_cmd_touch+0xa0>)
 800b344:	4a24      	ldr	r2, [pc, #144]	; (800b3d8 <display_cmd_touch+0xa4>)
 800b346:	4925      	ldr	r1, [pc, #148]	; (800b3dc <display_cmd_touch+0xa8>)
 800b348:	4825      	ldr	r0, [pc, #148]	; (800b3e0 <display_cmd_touch+0xac>)
 800b34a:	f003 fa8f 	bl	800e86c <xpt2046_get_touch>

    // Turn ON display on touch detection
    if ( g_touch.active && !active_prev )
 800b34e:	4b24      	ldr	r3, [pc, #144]	; (800b3e0 <display_cmd_touch+0xac>)
 800b350:	799b      	ldrb	r3, [r3, #6]
 800b352:	2b00      	cmp	r3, #0
 800b354:	d009      	beq.n	800b36a <display_cmd_touch+0x36>
 800b356:	4b23      	ldr	r3, [pc, #140]	; (800b3e4 <display_cmd_touch+0xb0>)
 800b358:	781b      	ldrb	r3, [r3, #0]
 800b35a:	f083 0301 	eor.w	r3, r3, #1
 800b35e:	b2db      	uxtb	r3, r3
 800b360:	2b00      	cmp	r3, #0
 800b362:	d002      	beq.n	800b36a <display_cmd_touch+0x36>
    {
    	display_send_cmd( eDISPLAY_CMD_ON );
 800b364:	2005      	movs	r0, #5
 800b366:	f7ff fec7 	bl	800b0f8 <display_send_cmd>
    }

    active_prev = g_touch.active;
 800b36a:	4b1d      	ldr	r3, [pc, #116]	; (800b3e0 <display_cmd_touch+0xac>)
 800b36c:	799a      	ldrb	r2, [r3, #6]
 800b36e:	4b1d      	ldr	r3, [pc, #116]	; (800b3e4 <display_cmd_touch+0xb0>)
 800b370:	701a      	strb	r2, [r3, #0]


	ili9488_circ_attr_t circ_attr;
	circ_attr.position.start_page	= g_touch.x;
 800b372:	4b1b      	ldr	r3, [pc, #108]	; (800b3e0 <display_cmd_touch+0xac>)
 800b374:	881b      	ldrh	r3, [r3, #0]
 800b376:	80bb      	strh	r3, [r7, #4]
	circ_attr.position.start_col	= g_touch.y;
 800b378:	4b19      	ldr	r3, [pc, #100]	; (800b3e0 <display_cmd_touch+0xac>)
 800b37a:	885b      	ldrh	r3, [r3, #2]
 800b37c:	80fb      	strh	r3, [r7, #6]
	circ_attr.position.radius		= 5;
 800b37e:	2305      	movs	r3, #5
 800b380:	723b      	strb	r3, [r7, #8]

	circ_attr.border.enable			= false;
 800b382:	2300      	movs	r3, #0
 800b384:	733b      	strb	r3, [r7, #12]
	circ_attr.border.width			= 0;
 800b386:	2300      	movs	r3, #0
 800b388:	73bb      	strb	r3, [r7, #14]
	circ_attr.border.color			= eILI9488_COLOR_BLACK;
 800b38a:	2300      	movs	r3, #0
 800b38c:	737b      	strb	r3, [r7, #13]

	circ_attr.fill.enable			= true;
 800b38e:	2301      	movs	r3, #1
 800b390:	72bb      	strb	r3, [r7, #10]
	circ_attr.fill.color			= eILI9488_COLOR_YELLOW;
 800b392:	2306      	movs	r3, #6
 800b394:	72fb      	strb	r3, [r7, #11]

	if ( true == g_touch.active )
 800b396:	4b12      	ldr	r3, [pc, #72]	; (800b3e0 <display_cmd_touch+0xac>)
 800b398:	799b      	ldrb	r3, [r3, #6]
 800b39a:	2b00      	cmp	r3, #0
 800b39c:	d015      	beq.n	800b3ca <display_cmd_touch+0x96>
	{
		if 	(	( g_touch.x > 10 && g_touch.x < 470 )
 800b39e:	4b10      	ldr	r3, [pc, #64]	; (800b3e0 <display_cmd_touch+0xac>)
 800b3a0:	881b      	ldrh	r3, [r3, #0]
 800b3a2:	2b0a      	cmp	r3, #10
 800b3a4:	d911      	bls.n	800b3ca <display_cmd_touch+0x96>
 800b3a6:	4b0e      	ldr	r3, [pc, #56]	; (800b3e0 <display_cmd_touch+0xac>)
 800b3a8:	881b      	ldrh	r3, [r3, #0]
 800b3aa:	f5b3 7feb 	cmp.w	r3, #470	; 0x1d6
 800b3ae:	d20c      	bcs.n	800b3ca <display_cmd_touch+0x96>
			&&	( g_touch.y > 10 && g_touch.y < 310 ))
 800b3b0:	4b0b      	ldr	r3, [pc, #44]	; (800b3e0 <display_cmd_touch+0xac>)
 800b3b2:	885b      	ldrh	r3, [r3, #2]
 800b3b4:	2b0a      	cmp	r3, #10
 800b3b6:	d908      	bls.n	800b3ca <display_cmd_touch+0x96>
 800b3b8:	4b09      	ldr	r3, [pc, #36]	; (800b3e0 <display_cmd_touch+0xac>)
 800b3ba:	885b      	ldrh	r3, [r3, #2]
 800b3bc:	f5b3 7f9b 	cmp.w	r3, #310	; 0x136
 800b3c0:	d203      	bcs.n	800b3ca <display_cmd_touch+0x96>
		{
			ili9488_draw_circle( &circ_attr );
 800b3c2:	1d3b      	adds	r3, r7, #4
 800b3c4:	4618      	mov	r0, r3
 800b3c6:	f001 fca9 	bl	800cd1c <ili9488_draw_circle>
		}
	}

}
 800b3ca:	bf00      	nop
 800b3cc:	3710      	adds	r7, #16
 800b3ce:	46bd      	mov	sp, r7
 800b3d0:	bd80      	pop	{r7, pc}
 800b3d2:	bf00      	nop
 800b3d4:	20004c7e 	.word	0x20004c7e
 800b3d8:	20004c7c 	.word	0x20004c7c
 800b3dc:	20004c7a 	.word	0x20004c7a
 800b3e0:	20004c78 	.word	0x20004c78
 800b3e4:	20004c80 	.word	0x20004c80

0800b3e8 <display_cmd_off>:
*
* @return 		void
*/
////////////////////////////////////////////////////////////////////////////////
static void display_cmd_off	(void)
{
 800b3e8:	b480      	push	{r7}
 800b3ea:	af00      	add	r7, sp, #0
	// Turn display OFF
	gb_display_pwr = false;
 800b3ec:	4b03      	ldr	r3, [pc, #12]	; (800b3fc <display_cmd_off+0x14>)
 800b3ee:	2200      	movs	r2, #0
 800b3f0:	701a      	strb	r2, [r3, #0]
}
 800b3f2:	bf00      	nop
 800b3f4:	46bd      	mov	sp, r7
 800b3f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3fa:	4770      	bx	lr
 800b3fc:	20004c74 	.word	0x20004c74

0800b400 <display_cmd_on>:
*
* @return 		void
*/
////////////////////////////////////////////////////////////////////////////////
static void display_cmd_on(void)
{
 800b400:	b480      	push	{r7}
 800b402:	af00      	add	r7, sp, #0
	// Turn display ON
	gb_display_pwr = true;
 800b404:	4b03      	ldr	r3, [pc, #12]	; (800b414 <display_cmd_on+0x14>)
 800b406:	2201      	movs	r2, #1
 800b408:	701a      	strb	r2, [r3, #0]
}
 800b40a:	bf00      	nop
 800b40c:	46bd      	mov	sp, r7
 800b40e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b412:	4770      	bx	lr
 800b414:	20004c74 	.word	0x20004c74

0800b418 <display_background_led_hndl>:



// FADING BACKLIGHT DISPLAY LED
static void	display_background_led_hndl(void)
{
 800b418:	b580      	push	{r7, lr}
 800b41a:	b082      	sub	sp, #8
 800b41c:	af00      	add	r7, sp, #0
	bool timeouted = false;
 800b41e:	2300      	movs	r3, #0
 800b420:	71fb      	strb	r3, [r7, #7]

	// Fade in
	if ( true == gb_display_pwr )
 800b422:	4b0f      	ldr	r3, [pc, #60]	; (800b460 <display_background_led_hndl+0x48>)
 800b424:	781b      	ldrb	r3, [r3, #0]
 800b426:	2b00      	cmp	r3, #0
 800b428:	d002      	beq.n	800b430 <display_background_led_hndl+0x18>
	{
		display_fade_in_hndl();
 800b42a:	f000 f81d 	bl	800b468 <display_fade_in_hndl>
 800b42e:	e001      	b.n	800b434 <display_background_led_hndl+0x1c>
	}

	// Fade out
	else
	{
		display_fade_out_hndl();
 800b430:	f000 f886 	bl	800b540 <display_fade_out_hndl>
	}

	// Check for timeout
	timeouted = display_pwr_timeout_hndl( gb_display_pwr, g_touch.active, DISPLAY_TURN_OFF_TIMEOUT_MS );
 800b434:	4b0a      	ldr	r3, [pc, #40]	; (800b460 <display_background_led_hndl+0x48>)
 800b436:	781b      	ldrb	r3, [r3, #0]
 800b438:	4a0a      	ldr	r2, [pc, #40]	; (800b464 <display_background_led_hndl+0x4c>)
 800b43a:	7991      	ldrb	r1, [r2, #6]
 800b43c:	f242 7210 	movw	r2, #10000	; 0x2710
 800b440:	4618      	mov	r0, r3
 800b442:	f000 f8e3 	bl	800b60c <display_pwr_timeout_hndl>
 800b446:	4603      	mov	r3, r0
 800b448:	71fb      	strb	r3, [r7, #7]

	// Turn OFF on timeout
	if ( true == timeouted )
 800b44a:	79fb      	ldrb	r3, [r7, #7]
 800b44c:	2b00      	cmp	r3, #0
 800b44e:	d002      	beq.n	800b456 <display_background_led_hndl+0x3e>
	{
		display_send_cmd( eDISPLAY_CMD_OFF );
 800b450:	2004      	movs	r0, #4
 800b452:	f7ff fe51 	bl	800b0f8 <display_send_cmd>
	}
}
 800b456:	bf00      	nop
 800b458:	3708      	adds	r7, #8
 800b45a:	46bd      	mov	sp, r7
 800b45c:	bd80      	pop	{r7, pc}
 800b45e:	bf00      	nop
 800b460:	20004c74 	.word	0x20004c74
 800b464:	20004c78 	.word	0x20004c78

0800b468 <display_fade_in_hndl>:


static void display_fade_in_hndl(void)
{
 800b468:	b580      	push	{r7, lr}
 800b46a:	b082      	sub	sp, #8
 800b46c:	af00      	add	r7, sp, #0
	float32_t duty = 0.0f;
 800b46e:	f04f 0300 	mov.w	r3, #0
 800b472:	607b      	str	r3, [r7, #4]
	static float32_t fade_time = 0.0f;

	// Get current value
	ili9488_get_backlight( &duty );
 800b474:	1d3b      	adds	r3, r7, #4
 800b476:	4618      	mov	r0, r3
 800b478:	f001 fd06 	bl	800ce88 <ili9488_get_backlight>

	// Increase duty by the square function
	duty += DISPLAY_FADE_IN_COEF_T_TO_DUTY * fade_time * (float32_t) DISPLAY_REFRESH_HNDL_PERIOD_S;
 800b47c:	4b2a      	ldr	r3, [pc, #168]	; (800b528 <display_fade_in_hndl+0xc0>)
 800b47e:	edd3 7a00 	vldr	s15, [r3]
 800b482:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 800b52c <display_fade_in_hndl+0xc4>
 800b486:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b48a:	ed9f 7a29 	vldr	s14, [pc, #164]	; 800b530 <display_fade_in_hndl+0xc8>
 800b48e:	ee27 7a87 	vmul.f32	s14, s15, s14
 800b492:	edd7 7a01 	vldr	s15, [r7, #4]
 800b496:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b49a:	edc7 7a01 	vstr	s15, [r7, #4]

	// Is LED fully ON?
	if ( duty < 1.0f )
 800b49e:	edd7 7a01 	vldr	s15, [r7, #4]
 800b4a2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b4a6:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b4aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b4ae:	d523      	bpl.n	800b4f8 <display_fade_in_hndl+0x90>
	{
		// Increment time
		fade_time += DISPLAY_REFRESH_HNDL_PERIOD_S;
 800b4b0:	4b1d      	ldr	r3, [pc, #116]	; (800b528 <display_fade_in_hndl+0xc0>)
 800b4b2:	681b      	ldr	r3, [r3, #0]
 800b4b4:	4618      	mov	r0, r3
 800b4b6:	f7f5 f877 	bl	80005a8 <__aeabi_f2d>
 800b4ba:	a319      	add	r3, pc, #100	; (adr r3, 800b520 <display_fade_in_hndl+0xb8>)
 800b4bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4c0:	f7f4 ff14 	bl	80002ec <__adddf3>
 800b4c4:	4602      	mov	r2, r0
 800b4c6:	460b      	mov	r3, r1
 800b4c8:	4610      	mov	r0, r2
 800b4ca:	4619      	mov	r1, r3
 800b4cc:	f7f5 fbbc 	bl	8000c48 <__aeabi_d2f>
 800b4d0:	4603      	mov	r3, r0
 800b4d2:	4a15      	ldr	r2, [pc, #84]	; (800b528 <display_fade_in_hndl+0xc0>)
 800b4d4:	6013      	str	r3, [r2, #0]
		fade_time = DISPLAY_TIME_LIM( fade_time );
 800b4d6:	4b14      	ldr	r3, [pc, #80]	; (800b528 <display_fade_in_hndl+0xc0>)
 800b4d8:	edd3 7a00 	vldr	s15, [r3]
 800b4dc:	ed9f 7a15 	vldr	s14, [pc, #84]	; 800b534 <display_fade_in_hndl+0xcc>
 800b4e0:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b4e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b4e8:	dd01      	ble.n	800b4ee <display_fade_in_hndl+0x86>
 800b4ea:	4b13      	ldr	r3, [pc, #76]	; (800b538 <display_fade_in_hndl+0xd0>)
 800b4ec:	e001      	b.n	800b4f2 <display_fade_in_hndl+0x8a>
 800b4ee:	4b0e      	ldr	r3, [pc, #56]	; (800b528 <display_fade_in_hndl+0xc0>)
 800b4f0:	681b      	ldr	r3, [r3, #0]
 800b4f2:	4a0d      	ldr	r2, [pc, #52]	; (800b528 <display_fade_in_hndl+0xc0>)
 800b4f4:	6013      	str	r3, [r2, #0]
 800b4f6:	e006      	b.n	800b506 <display_fade_in_hndl+0x9e>

	// LED fully ON
	else
	{
		// Limit duty
		duty = 1.0f;
 800b4f8:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800b4fc:	607b      	str	r3, [r7, #4]

		// Reset time
		fade_time = 0.0f;
 800b4fe:	4b0a      	ldr	r3, [pc, #40]	; (800b528 <display_fade_in_hndl+0xc0>)
 800b500:	f04f 0200 	mov.w	r2, #0
 800b504:	601a      	str	r2, [r3, #0]
	}

	// Set brightness
	ili9488_set_backlight( duty );
 800b506:	edd7 7a01 	vldr	s15, [r7, #4]
 800b50a:	eeb0 0a67 	vmov.f32	s0, s15
 800b50e:	f001 fc95 	bl	800ce3c <ili9488_set_backlight>
}
 800b512:	bf00      	nop
 800b514:	3708      	adds	r7, #8
 800b516:	46bd      	mov	sp, r7
 800b518:	bd80      	pop	{r7, pc}
 800b51a:	bf00      	nop
 800b51c:	f3af 8000 	nop.w
 800b520:	47ae147b 	.word	0x47ae147b
 800b524:	3f847ae1 	.word	0x3f847ae1
 800b528:	20004c84 	.word	0x20004c84
 800b52c:	42480000 	.word	0x42480000
 800b530:	3c23d70a 	.word	0x3c23d70a
 800b534:	42c80000 	.word	0x42c80000
 800b538:	42c80000 	.word	0x42c80000
 800b53c:	00000000 	.word	0x00000000

0800b540 <display_fade_out_hndl>:

static void display_fade_out_hndl(void)
{
 800b540:	b580      	push	{r7, lr}
 800b542:	b082      	sub	sp, #8
 800b544:	af00      	add	r7, sp, #0
	float32_t duty = 0.0f;
 800b546:	f04f 0300 	mov.w	r3, #0
 800b54a:	607b      	str	r3, [r7, #4]
	static float32_t fade_time = 0.0f;

	// Get current value
	ili9488_get_backlight( &duty );
 800b54c:	1d3b      	adds	r3, r7, #4
 800b54e:	4618      	mov	r0, r3
 800b550:	f001 fc9a 	bl	800ce88 <ili9488_get_backlight>

	// Decrease duty by the square function
	duty -= DISPLAY_FADE_OUT_COEF_T_TO_DUTY * fade_time * (float32_t) DISPLAY_REFRESH_HNDL_PERIOD_S;
 800b554:	ed97 7a01 	vldr	s14, [r7, #4]
 800b558:	4b27      	ldr	r3, [pc, #156]	; (800b5f8 <display_fade_out_hndl+0xb8>)
 800b55a:	edd3 7a00 	vldr	s15, [r3]
 800b55e:	eddf 6a27 	vldr	s13, [pc, #156]	; 800b5fc <display_fade_out_hndl+0xbc>
 800b562:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800b566:	eddf 6a26 	vldr	s13, [pc, #152]	; 800b600 <display_fade_out_hndl+0xc0>
 800b56a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800b56e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b572:	edc7 7a01 	vstr	s15, [r7, #4]

	// Is LED fully OFF?
	if ( duty > 0.0f )
 800b576:	edd7 7a01 	vldr	s15, [r7, #4]
 800b57a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800b57e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b582:	dd23      	ble.n	800b5cc <display_fade_out_hndl+0x8c>
	{
		// Increment time
		fade_time += DISPLAY_REFRESH_HNDL_PERIOD_S;
 800b584:	4b1c      	ldr	r3, [pc, #112]	; (800b5f8 <display_fade_out_hndl+0xb8>)
 800b586:	681b      	ldr	r3, [r3, #0]
 800b588:	4618      	mov	r0, r3
 800b58a:	f7f5 f80d 	bl	80005a8 <__aeabi_f2d>
 800b58e:	a318      	add	r3, pc, #96	; (adr r3, 800b5f0 <display_fade_out_hndl+0xb0>)
 800b590:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b594:	f7f4 feaa 	bl	80002ec <__adddf3>
 800b598:	4602      	mov	r2, r0
 800b59a:	460b      	mov	r3, r1
 800b59c:	4610      	mov	r0, r2
 800b59e:	4619      	mov	r1, r3
 800b5a0:	f7f5 fb52 	bl	8000c48 <__aeabi_d2f>
 800b5a4:	4603      	mov	r3, r0
 800b5a6:	4a14      	ldr	r2, [pc, #80]	; (800b5f8 <display_fade_out_hndl+0xb8>)
 800b5a8:	6013      	str	r3, [r2, #0]
		fade_time = DISPLAY_TIME_LIM( fade_time );
 800b5aa:	4b13      	ldr	r3, [pc, #76]	; (800b5f8 <display_fade_out_hndl+0xb8>)
 800b5ac:	edd3 7a00 	vldr	s15, [r3]
 800b5b0:	ed9f 7a14 	vldr	s14, [pc, #80]	; 800b604 <display_fade_out_hndl+0xc4>
 800b5b4:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b5b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b5bc:	dd01      	ble.n	800b5c2 <display_fade_out_hndl+0x82>
 800b5be:	4b12      	ldr	r3, [pc, #72]	; (800b608 <display_fade_out_hndl+0xc8>)
 800b5c0:	e001      	b.n	800b5c6 <display_fade_out_hndl+0x86>
 800b5c2:	4b0d      	ldr	r3, [pc, #52]	; (800b5f8 <display_fade_out_hndl+0xb8>)
 800b5c4:	681b      	ldr	r3, [r3, #0]
 800b5c6:	4a0c      	ldr	r2, [pc, #48]	; (800b5f8 <display_fade_out_hndl+0xb8>)
 800b5c8:	6013      	str	r3, [r2, #0]
 800b5ca:	e006      	b.n	800b5da <display_fade_out_hndl+0x9a>

	// LED fully OFF
	else
	{
		// Limit duty
		duty = 0.0f;
 800b5cc:	f04f 0300 	mov.w	r3, #0
 800b5d0:	607b      	str	r3, [r7, #4]

		// Reset time
		fade_time = 0.0f;
 800b5d2:	4b09      	ldr	r3, [pc, #36]	; (800b5f8 <display_fade_out_hndl+0xb8>)
 800b5d4:	f04f 0200 	mov.w	r2, #0
 800b5d8:	601a      	str	r2, [r3, #0]
	}

	// Set brightness
	ili9488_set_backlight( duty );
 800b5da:	edd7 7a01 	vldr	s15, [r7, #4]
 800b5de:	eeb0 0a67 	vmov.f32	s0, s15
 800b5e2:	f001 fc2b 	bl	800ce3c <ili9488_set_backlight>
}
 800b5e6:	bf00      	nop
 800b5e8:	3708      	adds	r7, #8
 800b5ea:	46bd      	mov	sp, r7
 800b5ec:	bd80      	pop	{r7, pc}
 800b5ee:	bf00      	nop
 800b5f0:	47ae147b 	.word	0x47ae147b
 800b5f4:	3f847ae1 	.word	0x3f847ae1
 800b5f8:	20004c88 	.word	0x20004c88
 800b5fc:	40b1c71c 	.word	0x40b1c71c
 800b600:	3c23d70a 	.word	0x3c23d70a
 800b604:	42c80000 	.word	0x42c80000
 800b608:	42c80000 	.word	0x42c80000

0800b60c <display_pwr_timeout_hndl>:


static bool display_pwr_timeout_hndl(const bool pwr_state, const bool active, const uint32_t timeout)
{
 800b60c:	b580      	push	{r7, lr}
 800b60e:	b084      	sub	sp, #16
 800b610:	af00      	add	r7, sp, #0
 800b612:	4603      	mov	r3, r0
 800b614:	603a      	str	r2, [r7, #0]
 800b616:	71fb      	strb	r3, [r7, #7]
 800b618:	460b      	mov	r3, r1
 800b61a:	71bb      	strb	r3, [r7, #6]
	static 	uint32_t 	time 			= 0UL;
			bool 		timeout_flag 	= false;
 800b61c:	2300      	movs	r3, #0
 800b61e:	73fb      	strb	r3, [r7, #15]

	// Display ON
	if ( true == pwr_state )
 800b620:	79fb      	ldrb	r3, [r7, #7]
 800b622:	2b00      	cmp	r3, #0
 800b624:	d01a      	beq.n	800b65c <display_pwr_timeout_hndl+0x50>
	{
		// Touch active
		if ( true == active )
 800b626:	79bb      	ldrb	r3, [r7, #6]
 800b628:	2b00      	cmp	r3, #0
 800b62a:	d003      	beq.n	800b634 <display_pwr_timeout_hndl+0x28>
		{
			time = 0UL;
 800b62c:	4b14      	ldr	r3, [pc, #80]	; (800b680 <display_pwr_timeout_hndl+0x74>)
 800b62e:	2200      	movs	r2, #0
 800b630:	601a      	str	r2, [r3, #0]
 800b632:	e016      	b.n	800b662 <display_pwr_timeout_hndl+0x56>
		}

		// No touch
		else
		{
			time += DISPLAY_REFRESH_HNDL_PERIOD_S * 1000UL;
 800b634:	4b12      	ldr	r3, [pc, #72]	; (800b680 <display_pwr_timeout_hndl+0x74>)
 800b636:	681b      	ldr	r3, [r3, #0]
 800b638:	4618      	mov	r0, r3
 800b63a:	f7f4 ff93 	bl	8000564 <__aeabi_ui2d>
 800b63e:	f04f 0200 	mov.w	r2, #0
 800b642:	4b10      	ldr	r3, [pc, #64]	; (800b684 <display_pwr_timeout_hndl+0x78>)
 800b644:	f7f4 fe52 	bl	80002ec <__adddf3>
 800b648:	4602      	mov	r2, r0
 800b64a:	460b      	mov	r3, r1
 800b64c:	4610      	mov	r0, r2
 800b64e:	4619      	mov	r1, r3
 800b650:	f7f5 fada 	bl	8000c08 <__aeabi_d2uiz>
 800b654:	4603      	mov	r3, r0
 800b656:	4a0a      	ldr	r2, [pc, #40]	; (800b680 <display_pwr_timeout_hndl+0x74>)
 800b658:	6013      	str	r3, [r2, #0]
 800b65a:	e002      	b.n	800b662 <display_pwr_timeout_hndl+0x56>
		}
	}
	else
	{
		time = 0UL;
 800b65c:	4b08      	ldr	r3, [pc, #32]	; (800b680 <display_pwr_timeout_hndl+0x74>)
 800b65e:	2200      	movs	r2, #0
 800b660:	601a      	str	r2, [r3, #0]
	}

	if ( time >= timeout )
 800b662:	4b07      	ldr	r3, [pc, #28]	; (800b680 <display_pwr_timeout_hndl+0x74>)
 800b664:	681b      	ldr	r3, [r3, #0]
 800b666:	683a      	ldr	r2, [r7, #0]
 800b668:	429a      	cmp	r2, r3
 800b66a:	d804      	bhi.n	800b676 <display_pwr_timeout_hndl+0x6a>
	{
		timeout_flag = true;
 800b66c:	2301      	movs	r3, #1
 800b66e:	73fb      	strb	r3, [r7, #15]
		time = 0UL;
 800b670:	4b03      	ldr	r3, [pc, #12]	; (800b680 <display_pwr_timeout_hndl+0x74>)
 800b672:	2200      	movs	r2, #0
 800b674:	601a      	str	r2, [r3, #0]
	}

	return timeout_flag;
 800b676:	7bfb      	ldrb	r3, [r7, #15]
}
 800b678:	4618      	mov	r0, r3
 800b67a:	3710      	adds	r7, #16
 800b67c:	46bd      	mov	sp, r7
 800b67e:	bd80      	pop	{r7, pc}
 800b680:	20004c8c 	.word	0x20004c8c
 800b684:	40240000 	.word	0x40240000

0800b688 <display_touch_cal_hndl>:



// TOUCH CALIBARTION ROUTINE HANDLING
static void display_touch_cal_hndl(void)
{
 800b688:	b580      	push	{r7, lr}
 800b68a:	b088      	sub	sp, #32
 800b68c:	af00      	add	r7, sp, #0
			display_touch_status_t 	status			= eDISPLAY_TOUCH_CAL_IDLE;
 800b68e:	2300      	movs	r3, #0
 800b690:	77bb      	strb	r3, [r7, #30]
			uint8_t 				ctrl			= 0;
 800b692:	2300      	movs	r3, #0
 800b694:	777b      	strb	r3, [r7, #29]
	static 	bool 					cal_req 		= false;
			int32_t					cal_factors[7]	= { 0 };
 800b696:	463b      	mov	r3, r7
 800b698:	2200      	movs	r2, #0
 800b69a:	601a      	str	r2, [r3, #0]
 800b69c:	605a      	str	r2, [r3, #4]
 800b69e:	609a      	str	r2, [r3, #8]
 800b6a0:	60da      	str	r2, [r3, #12]
 800b6a2:	611a      	str	r2, [r3, #16]
 800b6a4:	615a      	str	r2, [r3, #20]
 800b6a6:	619a      	str	r2, [r3, #24]
				par_status_t 		par_status 		= ePAR_OK;
 800b6a8:	2300      	movs	r3, #0
 800b6aa:	77fb      	strb	r3, [r7, #31]

	// Get control
	par_get( ePAR_TOUCH_CONTROL, (uint8_t*) &ctrl );
 800b6ac:	f107 031d 	add.w	r3, r7, #29
 800b6b0:	4619      	mov	r1, r3
 800b6b2:	2000      	movs	r0, #0
 800b6b4:	f008 f9b8 	bl	8013a28 <par_get>

	// Calibration requested
	if ( 1 == ctrl )
 800b6b8:	7f7b      	ldrb	r3, [r7, #29]
 800b6ba:	2b01      	cmp	r3, #1
 800b6bc:	d11a      	bne.n	800b6f4 <display_touch_cal_hndl+0x6c>
	{
		ctrl = 0;
 800b6be:	2300      	movs	r3, #0
 800b6c0:	777b      	strb	r3, [r7, #29]
		par_set( ePAR_TOUCH_CONTROL, (uint8_t*) &ctrl );
 800b6c2:	f107 031d 	add.w	r3, r7, #29
 800b6c6:	4619      	mov	r1, r3
 800b6c8:	2000      	movs	r0, #0
 800b6ca:	f008 f919 	bl	8013900 <par_set>

		// Start calibration
		if ( eXPT2046_OK == xpt2046_start_calibration())
 800b6ce:	f003 fa93 	bl	800ebf8 <xpt2046_start_calibration>
 800b6d2:	4603      	mov	r3, r0
 800b6d4:	2b00      	cmp	r3, #0
 800b6d6:	d105      	bne.n	800b6e4 <display_touch_cal_hndl+0x5c>
		{
			status = eDISPLAY_TOUCH_CAL_IN_PROGRESS;
 800b6d8:	2301      	movs	r3, #1
 800b6da:	77bb      	strb	r3, [r7, #30]
			cal_req = true;
 800b6dc:	4b59      	ldr	r3, [pc, #356]	; (800b844 <display_touch_cal_hndl+0x1bc>)
 800b6de:	2201      	movs	r2, #1
 800b6e0:	701a      	strb	r2, [r3, #0]
 800b6e2:	e001      	b.n	800b6e8 <display_touch_cal_hndl+0x60>
		}
		else
		{
			status = eDISPLAY_TOUCH_CAL_ERROR;
 800b6e4:	2303      	movs	r3, #3
 800b6e6:	77bb      	strb	r3, [r7, #30]
		}

		par_set( ePAR_TOUCH_STATUS, (uint8_t*) &status );
 800b6e8:	f107 031e 	add.w	r3, r7, #30
 800b6ec:	4619      	mov	r1, r3
 800b6ee:	2001      	movs	r0, #1
 800b6f0:	f008 f906 	bl	8013900 <par_set>
	}

	// Calibration finished
	if ( true == xpt2046_is_calibrated())
 800b6f4:	f004 f884 	bl	800f800 <xpt2046_is_calibrated>
 800b6f8:	4603      	mov	r3, r0
 800b6fa:	2b00      	cmp	r3, #0
 800b6fc:	f000 809e 	beq.w	800b83c <display_touch_cal_hndl+0x1b4>
	{
		// Calibration has been requested
		if ( true == cal_req )
 800b700:	4b50      	ldr	r3, [pc, #320]	; (800b844 <display_touch_cal_hndl+0x1bc>)
 800b702:	781b      	ldrb	r3, [r3, #0]
 800b704:	2b00      	cmp	r3, #0
 800b706:	f000 8099 	beq.w	800b83c <display_touch_cal_hndl+0x1b4>
		{
			cal_req = false;
 800b70a:	4b4e      	ldr	r3, [pc, #312]	; (800b844 <display_touch_cal_hndl+0x1bc>)
 800b70c:	2200      	movs	r2, #0
 800b70e:	701a      	strb	r2, [r3, #0]

			// Get calibration factors
			xpt2046_get_cal_factors( (int32_t*) &cal_factors );
 800b710:	463b      	mov	r3, r7
 800b712:	4618      	mov	r0, r3
 800b714:	f004 f89e 	bl	800f854 <xpt2046_get_cal_factors>

			// Store to calibration factors to NVM
			par_status |= par_set( ePAR_TOUCH_CAL_C0, (int32_t*) &cal_factors[0] );
 800b718:	463b      	mov	r3, r7
 800b71a:	4619      	mov	r1, r3
 800b71c:	2002      	movs	r0, #2
 800b71e:	f008 f8ef 	bl	8013900 <par_set>
 800b722:	4603      	mov	r3, r0
 800b724:	461a      	mov	r2, r3
 800b726:	7ffb      	ldrb	r3, [r7, #31]
 800b728:	4313      	orrs	r3, r2
 800b72a:	77fb      	strb	r3, [r7, #31]
			par_status |= par_store_to_nvm( ePAR_TOUCH_CAL_C0 );
 800b72c:	2002      	movs	r0, #2
 800b72e:	f008 fb83 	bl	8013e38 <par_store_to_nvm>
 800b732:	4603      	mov	r3, r0
 800b734:	461a      	mov	r2, r3
 800b736:	7ffb      	ldrb	r3, [r7, #31]
 800b738:	4313      	orrs	r3, r2
 800b73a:	77fb      	strb	r3, [r7, #31]

			par_status |= par_set( ePAR_TOUCH_CAL_C1, (int32_t*) &cal_factors[1] );
 800b73c:	463b      	mov	r3, r7
 800b73e:	3304      	adds	r3, #4
 800b740:	4619      	mov	r1, r3
 800b742:	2003      	movs	r0, #3
 800b744:	f008 f8dc 	bl	8013900 <par_set>
 800b748:	4603      	mov	r3, r0
 800b74a:	461a      	mov	r2, r3
 800b74c:	7ffb      	ldrb	r3, [r7, #31]
 800b74e:	4313      	orrs	r3, r2
 800b750:	77fb      	strb	r3, [r7, #31]
			par_status |= par_store_to_nvm( ePAR_TOUCH_CAL_C1 );
 800b752:	2003      	movs	r0, #3
 800b754:	f008 fb70 	bl	8013e38 <par_store_to_nvm>
 800b758:	4603      	mov	r3, r0
 800b75a:	461a      	mov	r2, r3
 800b75c:	7ffb      	ldrb	r3, [r7, #31]
 800b75e:	4313      	orrs	r3, r2
 800b760:	77fb      	strb	r3, [r7, #31]

			par_status |= par_set( ePAR_TOUCH_CAL_C2, (int32_t*) &cal_factors[2] );
 800b762:	463b      	mov	r3, r7
 800b764:	3308      	adds	r3, #8
 800b766:	4619      	mov	r1, r3
 800b768:	2004      	movs	r0, #4
 800b76a:	f008 f8c9 	bl	8013900 <par_set>
 800b76e:	4603      	mov	r3, r0
 800b770:	461a      	mov	r2, r3
 800b772:	7ffb      	ldrb	r3, [r7, #31]
 800b774:	4313      	orrs	r3, r2
 800b776:	77fb      	strb	r3, [r7, #31]
			par_status |= par_store_to_nvm( ePAR_TOUCH_CAL_C2 );
 800b778:	2004      	movs	r0, #4
 800b77a:	f008 fb5d 	bl	8013e38 <par_store_to_nvm>
 800b77e:	4603      	mov	r3, r0
 800b780:	461a      	mov	r2, r3
 800b782:	7ffb      	ldrb	r3, [r7, #31]
 800b784:	4313      	orrs	r3, r2
 800b786:	77fb      	strb	r3, [r7, #31]

			par_status |= par_set( ePAR_TOUCH_CAL_C3, (int32_t*) &cal_factors[3] );
 800b788:	463b      	mov	r3, r7
 800b78a:	330c      	adds	r3, #12
 800b78c:	4619      	mov	r1, r3
 800b78e:	2005      	movs	r0, #5
 800b790:	f008 f8b6 	bl	8013900 <par_set>
 800b794:	4603      	mov	r3, r0
 800b796:	461a      	mov	r2, r3
 800b798:	7ffb      	ldrb	r3, [r7, #31]
 800b79a:	4313      	orrs	r3, r2
 800b79c:	77fb      	strb	r3, [r7, #31]
			par_status |= par_store_to_nvm( ePAR_TOUCH_CAL_C3 );
 800b79e:	2005      	movs	r0, #5
 800b7a0:	f008 fb4a 	bl	8013e38 <par_store_to_nvm>
 800b7a4:	4603      	mov	r3, r0
 800b7a6:	461a      	mov	r2, r3
 800b7a8:	7ffb      	ldrb	r3, [r7, #31]
 800b7aa:	4313      	orrs	r3, r2
 800b7ac:	77fb      	strb	r3, [r7, #31]

			par_status |= par_set( ePAR_TOUCH_CAL_C4, (int32_t*) &cal_factors[4] );
 800b7ae:	463b      	mov	r3, r7
 800b7b0:	3310      	adds	r3, #16
 800b7b2:	4619      	mov	r1, r3
 800b7b4:	2006      	movs	r0, #6
 800b7b6:	f008 f8a3 	bl	8013900 <par_set>
 800b7ba:	4603      	mov	r3, r0
 800b7bc:	461a      	mov	r2, r3
 800b7be:	7ffb      	ldrb	r3, [r7, #31]
 800b7c0:	4313      	orrs	r3, r2
 800b7c2:	77fb      	strb	r3, [r7, #31]
			par_status |= par_store_to_nvm( ePAR_TOUCH_CAL_C4 );
 800b7c4:	2006      	movs	r0, #6
 800b7c6:	f008 fb37 	bl	8013e38 <par_store_to_nvm>
 800b7ca:	4603      	mov	r3, r0
 800b7cc:	461a      	mov	r2, r3
 800b7ce:	7ffb      	ldrb	r3, [r7, #31]
 800b7d0:	4313      	orrs	r3, r2
 800b7d2:	77fb      	strb	r3, [r7, #31]

			par_status |= par_set( ePAR_TOUCH_CAL_C5, (int32_t*) &cal_factors[5] );
 800b7d4:	463b      	mov	r3, r7
 800b7d6:	3314      	adds	r3, #20
 800b7d8:	4619      	mov	r1, r3
 800b7da:	2007      	movs	r0, #7
 800b7dc:	f008 f890 	bl	8013900 <par_set>
 800b7e0:	4603      	mov	r3, r0
 800b7e2:	461a      	mov	r2, r3
 800b7e4:	7ffb      	ldrb	r3, [r7, #31]
 800b7e6:	4313      	orrs	r3, r2
 800b7e8:	77fb      	strb	r3, [r7, #31]
			par_status |= par_store_to_nvm( ePAR_TOUCH_CAL_C5 );
 800b7ea:	2007      	movs	r0, #7
 800b7ec:	f008 fb24 	bl	8013e38 <par_store_to_nvm>
 800b7f0:	4603      	mov	r3, r0
 800b7f2:	461a      	mov	r2, r3
 800b7f4:	7ffb      	ldrb	r3, [r7, #31]
 800b7f6:	4313      	orrs	r3, r2
 800b7f8:	77fb      	strb	r3, [r7, #31]

			par_status |= par_set( ePAR_TOUCH_CAL_C6, (int32_t*) &cal_factors[6] );
 800b7fa:	463b      	mov	r3, r7
 800b7fc:	3318      	adds	r3, #24
 800b7fe:	4619      	mov	r1, r3
 800b800:	2008      	movs	r0, #8
 800b802:	f008 f87d 	bl	8013900 <par_set>
 800b806:	4603      	mov	r3, r0
 800b808:	461a      	mov	r2, r3
 800b80a:	7ffb      	ldrb	r3, [r7, #31]
 800b80c:	4313      	orrs	r3, r2
 800b80e:	77fb      	strb	r3, [r7, #31]
			par_status |= par_store_to_nvm( ePAR_TOUCH_CAL_C6 );
 800b810:	2008      	movs	r0, #8
 800b812:	f008 fb11 	bl	8013e38 <par_store_to_nvm>
 800b816:	4603      	mov	r3, r0
 800b818:	461a      	mov	r2, r3
 800b81a:	7ffb      	ldrb	r3, [r7, #31]
 800b81c:	4313      	orrs	r3, r2
 800b81e:	77fb      	strb	r3, [r7, #31]

			if ( ePAR_OK == par_status )
 800b820:	7ffb      	ldrb	r3, [r7, #31]
 800b822:	2b00      	cmp	r3, #0
 800b824:	d10a      	bne.n	800b83c <display_touch_cal_hndl+0x1b4>
			{
				status = eDISPLAY_TOUCH_CAL_DONE;
 800b826:	2302      	movs	r3, #2
 800b828:	77bb      	strb	r3, [r7, #30]
				par_set( ePAR_TOUCH_STATUS, (uint8_t*) &status );
 800b82a:	f107 031e 	add.w	r3, r7, #30
 800b82e:	4619      	mov	r1, r3
 800b830:	2001      	movs	r0, #1
 800b832:	f008 f865 	bl	8013900 <par_set>
				par_store_to_nvm( ePAR_TOUCH_STATUS );
 800b836:	2001      	movs	r0, #1
 800b838:	f008 fafe 	bl	8013e38 <par_store_to_nvm>
			}
		}
	}
}
 800b83c:	bf00      	nop
 800b83e:	3720      	adds	r7, #32
 800b840:	46bd      	mov	sp, r7
 800b842:	bd80      	pop	{r7, pc}
 800b844:	20004c90 	.word	0x20004c90

0800b848 <pwr_init>:
*
* @return 	void
*/
////////////////////////////////////////////////////////////////////////////////
void pwr_init(void)
{
 800b848:	b580      	push	{r7, lr}
 800b84a:	b082      	sub	sp, #8
 800b84c:	af00      	add	r7, sp, #0
	filter_status_t 	filter_status 	= eFILTER_OK;
 800b84e:	2300      	movs	r3, #0
 800b850:	71fb      	strb	r3, [r7, #7]
	stusb4500_status_t	usbc_status		= eSTUSB4500_OK;
 800b852:	2300      	movs	r3, #0
 800b854:	71bb      	strb	r3, [r7, #6]

	// Disable battery charger
	pwr_set_battery_charger_enable( g_pwr_data.bat.charger.enable );
 800b856:	4b44      	ldr	r3, [pc, #272]	; (800b968 <pwr_init+0x120>)
 800b858:	f893 3020 	ldrb.w	r3, [r3, #32]
 800b85c:	4618      	mov	r0, r3
 800b85e:	f000 fa09 	bl	800bc74 <pwr_set_battery_charger_enable>

	// Enable battery voltage measurement
	pwr_set_battery_measure_enable( g_pwr_data.bat.measure_en );
 800b862:	4b41      	ldr	r3, [pc, #260]	; (800b968 <pwr_init+0x120>)
 800b864:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800b868:	4618      	mov	r0, r3
 800b86a:	f000 f9af 	bl	800bbcc <pwr_set_battery_measure_enable>

	// Turn OFF both power switches
	pwr_set_usb_switch_enable( g_pwr_data.inp.usb.sw_state );
 800b86e:	4b3e      	ldr	r3, [pc, #248]	; (800b968 <pwr_init+0x120>)
 800b870:	7a5b      	ldrb	r3, [r3, #9]
 800b872:	4618      	mov	r0, r3
 800b874:	f000 fa98 	bl	800bda8 <pwr_set_usb_switch_enable>
	pwr_set_ext_switch_enable( g_pwr_data.inp.ext.sw_state );
 800b878:	4b3b      	ldr	r3, [pc, #236]	; (800b968 <pwr_init+0x120>)
 800b87a:	7d5b      	ldrb	r3, [r3, #21]
 800b87c:	4618      	mov	r0, r3
 800b87e:	f000 faad 	bl	800bddc <pwr_set_ext_switch_enable>

	// 5V power supply
	pwr_set_5v_regulator( g_pwr_data._5v_en );
 800b882:	4b39      	ldr	r3, [pc, #228]	; (800b968 <pwr_init+0x120>)
 800b884:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800b888:	4618      	mov	r0, r3
 800b88a:	f000 fd71 	bl	800c370 <pwr_set_5v_regulator>

	// 3V3 low power domain precharge
	pwr_set_3v3_lp_precharge( g_pwr_data._3v3_lp.sw_precharge );
 800b88e:	4b36      	ldr	r3, [pc, #216]	; (800b968 <pwr_init+0x120>)
 800b890:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 800b894:	4618      	mov	r0, r3
 800b896:	f000 fde6 	bl	800c466 <pwr_set_3v3_lp_precharge>

	// Initialize battery filters
	filter_status |= filter_rc_init( &g_pwr_data.bat.bat_filter, PWR_BAT_FILTER_FC_HZ, PWR_HNDL_FREQ_HZ, PWR_BAT_FILTER_ORDER, pwr_get_battery_voltage());
 800b89a:	f000 f984 	bl	800bba6 <pwr_get_battery_voltage>
 800b89e:	eef0 7a40 	vmov.f32	s15, s0
 800b8a2:	eeb0 1a67 	vmov.f32	s2, s15
 800b8a6:	2101      	movs	r1, #1
 800b8a8:	eddf 0a30 	vldr	s1, [pc, #192]	; 800b96c <pwr_init+0x124>
 800b8ac:	ed9f 0a30 	vldr	s0, [pc, #192]	; 800b970 <pwr_init+0x128>
 800b8b0:	4830      	ldr	r0, [pc, #192]	; (800b974 <pwr_init+0x12c>)
 800b8b2:	f007 fb8f 	bl	8012fd4 <filter_rc_init>
 800b8b6:	4603      	mov	r3, r0
 800b8b8:	461a      	mov	r2, r3
 800b8ba:	79fb      	ldrb	r3, [r7, #7]
 800b8bc:	4313      	orrs	r3, r2
 800b8be:	71fb      	strb	r3, [r7, #7]

	// Initialize power filters
	filter_status |= filter_rc_init( &g_pwr_data.inp.ext.filter, PWR_EXT_INPUT_FILTER_FC_HZ, PWR_HNDL_FREQ_HZ, PWR_EXT_INPUT_FILTER_ORDER, adc_get_real( eADC_V_EXT ));
 800b8c0:	2001      	movs	r0, #1
 800b8c2:	f004 fddb 	bl	801047c <adc_get_real>
 800b8c6:	eef0 7a40 	vmov.f32	s15, s0
 800b8ca:	eeb0 1a67 	vmov.f32	s2, s15
 800b8ce:	2102      	movs	r1, #2
 800b8d0:	eddf 0a26 	vldr	s1, [pc, #152]	; 800b96c <pwr_init+0x124>
 800b8d4:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800b8d8:	4827      	ldr	r0, [pc, #156]	; (800b978 <pwr_init+0x130>)
 800b8da:	f007 fb7b 	bl	8012fd4 <filter_rc_init>
 800b8de:	4603      	mov	r3, r0
 800b8e0:	461a      	mov	r2, r3
 800b8e2:	79fb      	ldrb	r3, [r7, #7]
 800b8e4:	4313      	orrs	r3, r2
 800b8e6:	71fb      	strb	r3, [r7, #7]
	filter_status |= filter_rc_init( &g_pwr_data.inp.usb.filter, PWR_USB_INPUT_FILTER_FC_HZ, PWR_HNDL_FREQ_HZ, PWR_USB_INPUT_FILTER_ORDER, adc_get_real( eADC_V_USB ));
 800b8e8:	2000      	movs	r0, #0
 800b8ea:	f004 fdc7 	bl	801047c <adc_get_real>
 800b8ee:	eef0 7a40 	vmov.f32	s15, s0
 800b8f2:	eeb0 1a67 	vmov.f32	s2, s15
 800b8f6:	2102      	movs	r1, #2
 800b8f8:	eddf 0a1c 	vldr	s1, [pc, #112]	; 800b96c <pwr_init+0x124>
 800b8fc:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800b900:	4819      	ldr	r0, [pc, #100]	; (800b968 <pwr_init+0x120>)
 800b902:	f007 fb67 	bl	8012fd4 <filter_rc_init>
 800b906:	4603      	mov	r3, r0
 800b908:	461a      	mov	r2, r3
 800b90a:	79fb      	ldrb	r3, [r7, #7]
 800b90c:	4313      	orrs	r3, r2
 800b90e:	71fb      	strb	r3, [r7, #7]
	filter_status |= filter_rc_init( &g_pwr_data.inp.sys_cur_filt, PWR_SYS_CUR_FILTER_FC_HZ, PWR_HNDL_FREQ_HZ, PWR_SYS_CUR_FILTER_ORDER, adc_get_real( eADC_SYS_CUR ));
 800b910:	2003      	movs	r0, #3
 800b912:	f004 fdb3 	bl	801047c <adc_get_real>
 800b916:	eef0 7a40 	vmov.f32	s15, s0
 800b91a:	eeb0 1a67 	vmov.f32	s2, s15
 800b91e:	2101      	movs	r1, #1
 800b920:	eddf 0a12 	vldr	s1, [pc, #72]	; 800b96c <pwr_init+0x124>
 800b924:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800b928:	4814      	ldr	r0, [pc, #80]	; (800b97c <pwr_init+0x134>)
 800b92a:	f007 fb53 	bl	8012fd4 <filter_rc_init>
 800b92e:	4603      	mov	r3, r0
 800b930:	461a      	mov	r2, r3
 800b932:	79fb      	ldrb	r3, [r7, #7]
 800b934:	4313      	orrs	r3, r2
 800b936:	71fb      	strb	r3, [r7, #7]

	PROJECT_CONFIG_ASSERT( eFILTER_OK == filter_status );
 800b938:	79fb      	ldrb	r3, [r7, #7]
 800b93a:	2b00      	cmp	r3, #0
 800b93c:	d001      	beq.n	800b942 <pwr_init+0xfa>
 800b93e:	f009 fb55 	bl	8014fec <project_config_assert_fail>

	// Initialize USBC PD chip
	usbc_status = stusb4500_init();
 800b942:	f002 faf3 	bl	800df2c <stusb4500_init>
 800b946:	4603      	mov	r3, r0
 800b948:	71bb      	strb	r3, [r7, #6]

	PROJECT_CONFIG_ASSERT( eSTUSB4500_OK == usbc_status );
 800b94a:	79bb      	ldrb	r3, [r7, #6]
 800b94c:	2b00      	cmp	r3, #0
 800b94e:	d001      	beq.n	800b954 <pwr_init+0x10c>
 800b950:	f009 fb4c 	bl	8014fec <project_config_assert_fail>

	// Get pointer to USBC detailed status
	g_pwr_data.p_usbc_details = stusb4500_get_status();
 800b954:	f002 fbaa 	bl	800e0ac <stusb4500_get_status>
 800b958:	4603      	mov	r3, r0
 800b95a:	4a03      	ldr	r2, [pc, #12]	; (800b968 <pwr_init+0x120>)
 800b95c:	6393      	str	r3, [r2, #56]	; 0x38
}
 800b95e:	bf00      	nop
 800b960:	3708      	adds	r7, #8
 800b962:	46bd      	mov	sp, r7
 800b964:	bd80      	pop	{r7, pc}
 800b966:	bf00      	nop
 800b968:	20000010 	.word	0x20000010
 800b96c:	42c80000 	.word	0x42c80000
 800b970:	3dcccccd 	.word	0x3dcccccd
 800b974:	2000003c 	.word	0x2000003c
 800b978:	2000001c 	.word	0x2000001c
 800b97c:	20000028 	.word	0x20000028

0800b980 <pwr_hndl>:
*
* @return 	void
*/
////////////////////////////////////////////////////////////////////////////////
void pwr_hndl(void)
{
 800b980:	b580      	push	{r7, lr}
 800b982:	af00      	add	r7, sp, #0
	// *****************************************************************************
	// 		INPUTS
	// *****************************************************************************

	// Get input power state
	pwr_get_input_power( &g_pwr_data.inp );
 800b984:	4815      	ldr	r0, [pc, #84]	; (800b9dc <pwr_hndl+0x5c>)
 800b986:	f000 fa43 	bl	800be10 <pwr_get_input_power>

	// Get battery state
	pwr_get_battery( &g_pwr_data.bat );
 800b98a:	4815      	ldr	r0, [pc, #84]	; (800b9e0 <pwr_hndl+0x60>)
 800b98c:	f000 f852 	bl	800ba34 <pwr_get_battery>
	// *****************************************************************************
	// 		LOGIC
	// *****************************************************************************

	// Battery charger logic
	pwr_logic_battery_charger( &g_pwr_data.bat.charger, &g_pwr_data.inp, g_pwr_data.bat.status );
 800b990:	4b12      	ldr	r3, [pc, #72]	; (800b9dc <pwr_hndl+0x5c>)
 800b992:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800b996:	461a      	mov	r2, r3
 800b998:	4910      	ldr	r1, [pc, #64]	; (800b9dc <pwr_hndl+0x5c>)
 800b99a:	4811      	ldr	r0, [pc, #68]	; (800b9e0 <pwr_hndl+0x60>)
 800b99c:	f000 fc54 	bl	800c248 <pwr_logic_battery_charger>

	// Power switches logic
	pwr_logic_input_power( &g_pwr_data.inp );
 800b9a0:	480e      	ldr	r0, [pc, #56]	; (800b9dc <pwr_hndl+0x5c>)
 800b9a2:	f000 fbf1 	bl	800c188 <pwr_logic_input_power>

	// Handle USBC PD chip
	stusb4500_hndl();
 800b9a6:	f002 fb5d 	bl	800e064 <stusb4500_hndl>

	// Handle 3V3 low power switch
	pwr_3v3_lp_hndl();
 800b9aa:	f000 fcf7 	bl	800c39c <pwr_3v3_lp_hndl>
	// *****************************************************************************
	// 		OUTPUTS
	// *****************************************************************************

	// Set power switches
	pwr_set_input_power( &g_pwr_data.inp );
 800b9ae:	480b      	ldr	r0, [pc, #44]	; (800b9dc <pwr_hndl+0x5c>)
 800b9b0:	f000 fa82 	bl	800beb8 <pwr_set_input_power>

	// Set battery charger
	pwr_set_battery( &g_pwr_data.bat );
 800b9b4:	480a      	ldr	r0, [pc, #40]	; (800b9e0 <pwr_hndl+0x60>)
 800b9b6:	f000 f889 	bl	800bacc <pwr_set_battery>

	// Set 3v3 lp supply
	pwr_set_3v3_lp_precharge( g_pwr_data._3v3_lp.sw_precharge );
 800b9ba:	4b08      	ldr	r3, [pc, #32]	; (800b9dc <pwr_hndl+0x5c>)
 800b9bc:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 800b9c0:	4618      	mov	r0, r3
 800b9c2:	f000 fd50 	bl	800c466 <pwr_set_3v3_lp_precharge>
	pwr_set_3v3_lp_switch( g_pwr_data._3v3_lp.sw_main );
 800b9c6:	4b05      	ldr	r3, [pc, #20]	; (800b9dc <pwr_hndl+0x5c>)
 800b9c8:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800b9cc:	4618      	mov	r0, r3
 800b9ce:	f000 fd35 	bl	800c43c <pwr_set_3v3_lp_switch>


	// *****************************************************************************
	// 		UPDATE PARAMETERS
	// *****************************************************************************
	pwr_update_pars();
 800b9d2:	f000 fd5d 	bl	800c490 <pwr_update_pars>
}
 800b9d6:	bf00      	nop
 800b9d8:	bd80      	pop	{r7, pc}
 800b9da:	bf00      	nop
 800b9dc:	20000010 	.word	0x20000010
 800b9e0:	20000030 	.word	0x20000030

0800b9e4 <pwr_get_battery_soc>:
*
* @return 	void
*/
////////////////////////////////////////////////////////////////////////////////
uint8_t pwr_get_battery_soc	(void)
{
 800b9e4:	b480      	push	{r7}
 800b9e6:	b083      	sub	sp, #12
 800b9e8:	af00      	add	r7, sp, #0
	uint8_t bat_soc = 0U;
 800b9ea:	2300      	movs	r3, #0
 800b9ec:	71fb      	strb	r3, [r7, #7]

	bat_soc = g_pwr_data.bat.soc;
 800b9ee:	4b05      	ldr	r3, [pc, #20]	; (800ba04 <pwr_get_battery_soc+0x20>)
 800b9f0:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800b9f4:	71fb      	strb	r3, [r7, #7]

	return bat_soc;
 800b9f6:	79fb      	ldrb	r3, [r7, #7]
}
 800b9f8:	4618      	mov	r0, r3
 800b9fa:	370c      	adds	r7, #12
 800b9fc:	46bd      	mov	sp, r7
 800b9fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba02:	4770      	bx	lr
 800ba04:	20000010 	.word	0x20000010

0800ba08 <pwr_get_is_battery_charging>:
*
* @return 	is_bat_charging - Battery charging status
*/
////////////////////////////////////////////////////////////////////////////////
bool pwr_get_is_battery_charging(void)
{
 800ba08:	b480      	push	{r7}
 800ba0a:	b083      	sub	sp, #12
 800ba0c:	af00      	add	r7, sp, #0
	bool is_bat_charging = false;
 800ba0e:	2300      	movs	r3, #0
 800ba10:	71fb      	strb	r3, [r7, #7]

	//is_bat_charging = g_pwr_data.bat.charger.enable;

	if ( ePWR_BAT_CHARGER_STAT_CHARGING == g_pwr_data.bat.charger.status )
 800ba12:	4b07      	ldr	r3, [pc, #28]	; (800ba30 <pwr_get_is_battery_charging+0x28>)
 800ba14:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800ba18:	2b01      	cmp	r3, #1
 800ba1a:	d101      	bne.n	800ba20 <pwr_get_is_battery_charging+0x18>
	{
		is_bat_charging = true;
 800ba1c:	2301      	movs	r3, #1
 800ba1e:	71fb      	strb	r3, [r7, #7]
	}

	return is_bat_charging;
 800ba20:	79fb      	ldrb	r3, [r7, #7]
}
 800ba22:	4618      	mov	r0, r3
 800ba24:	370c      	adds	r7, #12
 800ba26:	46bd      	mov	sp, r7
 800ba28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba2c:	4770      	bx	lr
 800ba2e:	bf00      	nop
 800ba30:	20000010 	.word	0x20000010

0800ba34 <pwr_get_battery>:
* @param[in]	p_bat	- Pointer to battery data
* @return 		status 	- Status of battery charger
*/
////////////////////////////////////////////////////////////////////////////////
static void pwr_get_battery(pwr_battery_t * const p_bat)
{
 800ba34:	b580      	push	{r7, lr}
 800ba36:	b082      	sub	sp, #8
 800ba38:	af00      	add	r7, sp, #0
 800ba3a:	6078      	str	r0, [r7, #4]
	// Get battery status
	p_bat->charger.status = pwr_get_battery_charger_status();
 800ba3c:	f000 f858 	bl	800baf0 <pwr_get_battery_charger_status>
 800ba40:	4603      	mov	r3, r0
 800ba42:	461a      	mov	r2, r3
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	709a      	strb	r2, [r3, #2]

	// Get battery power good indicator
	p_bat->charger.power_good = pwr_get_battery_charger_power_good();
 800ba48:	f000 f898 	bl	800bb7c <pwr_get_battery_charger_power_good>
 800ba4c:	4603      	mov	r3, r0
 800ba4e:	461a      	mov	r2, r3
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	705a      	strb	r2, [r3, #1]

	// Get battery voltage
	p_bat->voltage = pwr_get_battery_voltage();
 800ba54:	f000 f8a7 	bl	800bba6 <pwr_get_battery_voltage>
 800ba58:	eef0 7a40 	vmov.f32	s15, s0
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	edc3 7a01 	vstr	s15, [r3, #4]
	p_bat->voltage_filt = filter_rc_update( g_pwr_data.bat.bat_filter, p_bat->voltage );
 800ba62:	4b19      	ldr	r3, [pc, #100]	; (800bac8 <pwr_get_battery+0x94>)
 800ba64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	edd3 7a01 	vldr	s15, [r3, #4]
 800ba6c:	eeb0 0a67 	vmov.f32	s0, s15
 800ba70:	4610      	mov	r0, r2
 800ba72:	f007 fb11 	bl	8013098 <filter_rc_update>
 800ba76:	eef0 7a40 	vmov.f32	s15, s0
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	edc3 7a02 	vstr	s15, [r3, #8]

	// Get battery status
	p_bat->status = pwr_get_battery_status( p_bat->voltage, p_bat->measure_en, p_bat->charger.enable );
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	edd3 7a01 	vldr	s15, [r3, #4]
 800ba86:	687b      	ldr	r3, [r7, #4]
 800ba88:	7c5a      	ldrb	r2, [r3, #17]
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	781b      	ldrb	r3, [r3, #0]
 800ba8e:	4619      	mov	r1, r3
 800ba90:	4610      	mov	r0, r2
 800ba92:	eeb0 0a67 	vmov.f32	s0, s15
 800ba96:	f000 f8af 	bl	800bbf8 <pwr_get_battery_status>
 800ba9a:	4603      	mov	r3, r0
 800ba9c:	461a      	mov	r2, r3
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	741a      	strb	r2, [r3, #16]

	// Estimate SOC
	p_bat->soc = pwr_estimate_battery_soc( p_bat->voltage_filt, p_bat->status );
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	edd3 7a02 	vldr	s15, [r3, #8]
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	7c1b      	ldrb	r3, [r3, #16]
 800baac:	4618      	mov	r0, r3
 800baae:	eeb0 0a67 	vmov.f32	s0, s15
 800bab2:	f000 f8f5 	bl	800bca0 <pwr_estimate_battery_soc>
 800bab6:	4603      	mov	r3, r0
 800bab8:	461a      	mov	r2, r3
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	749a      	strb	r2, [r3, #18]
}
 800babe:	bf00      	nop
 800bac0:	3708      	adds	r7, #8
 800bac2:	46bd      	mov	sp, r7
 800bac4:	bd80      	pop	{r7, pc}
 800bac6:	bf00      	nop
 800bac8:	20000010 	.word	0x20000010

0800bacc <pwr_set_battery>:
* @param[in]	p_bat	- Pointer to battery data
* @return 		void
*/
////////////////////////////////////////////////////////////////////////////////
static void pwr_set_battery(const pwr_battery_t * const p_bat)
{
 800bacc:	b580      	push	{r7, lr}
 800bace:	b082      	sub	sp, #8
 800bad0:	af00      	add	r7, sp, #0
 800bad2:	6078      	str	r0, [r7, #4]
	// Battery voltage measurement enable
	pwr_set_battery_measure_enable( p_bat->measure_en );
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	7c5b      	ldrb	r3, [r3, #17]
 800bad8:	4618      	mov	r0, r3
 800bada:	f000 f877 	bl	800bbcc <pwr_set_battery_measure_enable>

	// Battery charger enable
	pwr_set_battery_charger_enable( p_bat->charger.enable );
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	781b      	ldrb	r3, [r3, #0]
 800bae2:	4618      	mov	r0, r3
 800bae4:	f000 f8c6 	bl	800bc74 <pwr_set_battery_charger_enable>
}
 800bae8:	bf00      	nop
 800baea:	3708      	adds	r7, #8
 800baec:	46bd      	mov	sp, r7
 800baee:	bd80      	pop	{r7, pc}

0800baf0 <pwr_get_battery_charger_status>:
*
* @return 		status - Status of battery charger
*/
////////////////////////////////////////////////////////////////////////////////
static pwr_bat_charger_stat_t pwr_get_battery_charger_status(void)
{
 800baf0:	b580      	push	{r7, lr}
 800baf2:	b082      	sub	sp, #8
 800baf4:	af00      	add	r7, sp, #0
	static 	pwr_bat_charger_stat_t	rtn_status	= ePWR_BAT_CHARGER_STAT_UKNOWN;
	static 	uint32_t 				tick_prev 	= 0UL;
	static 	uint32_t				change_cnt	= 0UL;
	static 	pwr_bat_charger_stat_t 	status_prev = ePWR_BAT_CHARGER_STAT_UKNOWN;
			pwr_bat_charger_stat_t	status		= ePWR_BAT_CHARGER_STAT_UKNOWN;
 800baf6:	2300      	movs	r3, #0
 800baf8:	71fb      	strb	r3, [r7, #7]

	// Get current status
	if ( eGPIO_HIGH == gpio_get( eGPIO_CHARGER_STAT ))
 800bafa:	200f      	movs	r0, #15
 800bafc:	f004 fdb8 	bl	8010670 <gpio_get>
 800bb00:	4603      	mov	r3, r0
 800bb02:	2b01      	cmp	r3, #1
 800bb04:	d102      	bne.n	800bb0c <pwr_get_battery_charger_status+0x1c>
	{
		status = ePWR_BAT_CHARGER_STAT_COMP_DIS;
 800bb06:	2302      	movs	r3, #2
 800bb08:	71fb      	strb	r3, [r7, #7]
 800bb0a:	e001      	b.n	800bb10 <pwr_get_battery_charger_status+0x20>
	}
	else
	{
		status = ePWR_BAT_CHARGER_STAT_CHARGING;
 800bb0c:	2301      	movs	r3, #1
 800bb0e:	71fb      	strb	r3, [r7, #7]
	}

	// Check for change
	if ( status != status_prev )
 800bb10:	4b16      	ldr	r3, [pc, #88]	; (800bb6c <pwr_get_battery_charger_status+0x7c>)
 800bb12:	781b      	ldrb	r3, [r3, #0]
 800bb14:	79fa      	ldrb	r2, [r7, #7]
 800bb16:	429a      	cmp	r2, r3
 800bb18:	d004      	beq.n	800bb24 <pwr_get_battery_charger_status+0x34>
	{
		change_cnt++;
 800bb1a:	4b15      	ldr	r3, [pc, #84]	; (800bb70 <pwr_get_battery_charger_status+0x80>)
 800bb1c:	681b      	ldr	r3, [r3, #0]
 800bb1e:	3301      	adds	r3, #1
 800bb20:	4a13      	ldr	r2, [pc, #76]	; (800bb70 <pwr_get_battery_charger_status+0x80>)
 800bb22:	6013      	str	r3, [r2, #0]
	}

	// Save status
	status_prev = status;
 800bb24:	4a11      	ldr	r2, [pc, #68]	; (800bb6c <pwr_get_battery_charger_status+0x7c>)
 800bb26:	79fb      	ldrb	r3, [r7, #7]
 800bb28:	7013      	strb	r3, [r2, #0]

	// Check every 200ms
	if ((uint32_t) ( HAL_GetTick() - tick_prev ) >= 200UL )
 800bb2a:	f7f5 fed3 	bl	80018d4 <HAL_GetTick>
 800bb2e:	4602      	mov	r2, r0
 800bb30:	4b10      	ldr	r3, [pc, #64]	; (800bb74 <pwr_get_battery_charger_status+0x84>)
 800bb32:	681b      	ldr	r3, [r3, #0]
 800bb34:	1ad3      	subs	r3, r2, r3
 800bb36:	2bc7      	cmp	r3, #199	; 0xc7
 800bb38:	d912      	bls.n	800bb60 <pwr_get_battery_charger_status+0x70>
	{
		tick_prev = HAL_GetTick();
 800bb3a:	f7f5 fecb 	bl	80018d4 <HAL_GetTick>
 800bb3e:	4603      	mov	r3, r0
 800bb40:	4a0c      	ldr	r2, [pc, #48]	; (800bb74 <pwr_get_battery_charger_status+0x84>)
 800bb42:	6013      	str	r3, [r2, #0]

		// Status line blinking
		if ( change_cnt >= 2UL )
 800bb44:	4b0a      	ldr	r3, [pc, #40]	; (800bb70 <pwr_get_battery_charger_status+0x80>)
 800bb46:	681b      	ldr	r3, [r3, #0]
 800bb48:	2b01      	cmp	r3, #1
 800bb4a:	d903      	bls.n	800bb54 <pwr_get_battery_charger_status+0x64>
		{
			rtn_status = ePWR_BAT_CHARGER_STAT_CHARG_FAULT;
 800bb4c:	4b0a      	ldr	r3, [pc, #40]	; (800bb78 <pwr_get_battery_charger_status+0x88>)
 800bb4e:	2203      	movs	r2, #3
 800bb50:	701a      	strb	r2, [r3, #0]
 800bb52:	e002      	b.n	800bb5a <pwr_get_battery_charger_status+0x6a>
		}

		// Line solid - no blinking
		else
		{
			rtn_status = status;
 800bb54:	4a08      	ldr	r2, [pc, #32]	; (800bb78 <pwr_get_battery_charger_status+0x88>)
 800bb56:	79fb      	ldrb	r3, [r7, #7]
 800bb58:	7013      	strb	r3, [r2, #0]
		}

		// Clear change counter
		change_cnt = 0;
 800bb5a:	4b05      	ldr	r3, [pc, #20]	; (800bb70 <pwr_get_battery_charger_status+0x80>)
 800bb5c:	2200      	movs	r2, #0
 800bb5e:	601a      	str	r2, [r3, #0]
	}

	return rtn_status;
 800bb60:	4b05      	ldr	r3, [pc, #20]	; (800bb78 <pwr_get_battery_charger_status+0x88>)
 800bb62:	781b      	ldrb	r3, [r3, #0]
}
 800bb64:	4618      	mov	r0, r3
 800bb66:	3708      	adds	r7, #8
 800bb68:	46bd      	mov	sp, r7
 800bb6a:	bd80      	pop	{r7, pc}
 800bb6c:	20004c91 	.word	0x20004c91
 800bb70:	20004c94 	.word	0x20004c94
 800bb74:	20004c98 	.word	0x20004c98
 800bb78:	20004c9c 	.word	0x20004c9c

0800bb7c <pwr_get_battery_charger_power_good>:
*
* @return 	pg - Power good indicator
*/
////////////////////////////////////////////////////////////////////////////////
static pwr_bat_charger_pg_t	pwr_get_battery_charger_power_good(void)
{
 800bb7c:	b580      	push	{r7, lr}
 800bb7e:	b082      	sub	sp, #8
 800bb80:	af00      	add	r7, sp, #0
	pwr_bat_charger_pg_t pg = ePWR_BAT_CHARGER_PG_UKNOWN;
 800bb82:	2300      	movs	r3, #0
 800bb84:	71fb      	strb	r3, [r7, #7]

	if ( eGPIO_HIGH == gpio_get( eGPIO_CHARGER_PG ))
 800bb86:	2010      	movs	r0, #16
 800bb88:	f004 fd72 	bl	8010670 <gpio_get>
 800bb8c:	4603      	mov	r3, r0
 800bb8e:	2b01      	cmp	r3, #1
 800bb90:	d102      	bne.n	800bb98 <pwr_get_battery_charger_power_good+0x1c>
	{
		pg = ePWR_BAT_CHARGER_PG_ERROR;
 800bb92:	2302      	movs	r3, #2
 800bb94:	71fb      	strb	r3, [r7, #7]
 800bb96:	e001      	b.n	800bb9c <pwr_get_battery_charger_power_good+0x20>
	}
	else
	{
		pg = ePWR_BAT_CHARGER_PG_OK;
 800bb98:	2301      	movs	r3, #1
 800bb9a:	71fb      	strb	r3, [r7, #7]
	}

	return pg;
 800bb9c:	79fb      	ldrb	r3, [r7, #7]
}
 800bb9e:	4618      	mov	r0, r3
 800bba0:	3708      	adds	r7, #8
 800bba2:	46bd      	mov	sp, r7
 800bba4:	bd80      	pop	{r7, pc}

0800bba6 <pwr_get_battery_voltage>:
*
* @return 	bat_voltage - Battery voltage
*/
////////////////////////////////////////////////////////////////////////////////
static float32_t pwr_get_battery_voltage(void)
{
 800bba6:	b580      	push	{r7, lr}
 800bba8:	b082      	sub	sp, #8
 800bbaa:	af00      	add	r7, sp, #0
	float32_t bat_voltage = 0.0f;
 800bbac:	f04f 0300 	mov.w	r3, #0
 800bbb0:	607b      	str	r3, [r7, #4]

	bat_voltage = adc_get_real( eADC_BAT_MEASURE );
 800bbb2:	2004      	movs	r0, #4
 800bbb4:	f004 fc62 	bl	801047c <adc_get_real>
 800bbb8:	ed87 0a01 	vstr	s0, [r7, #4]

	return bat_voltage;
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	ee07 3a90 	vmov	s15, r3
}
 800bbc2:	eeb0 0a67 	vmov.f32	s0, s15
 800bbc6:	3708      	adds	r7, #8
 800bbc8:	46bd      	mov	sp, r7
 800bbca:	bd80      	pop	{r7, pc}

0800bbcc <pwr_set_battery_measure_enable>:
* @param[in]	enable	- Enable/Disable battery measurement circuit
* @return 		void
*/
////////////////////////////////////////////////////////////////////////////////
static void	pwr_set_battery_measure_enable(const bool enable)
{
 800bbcc:	b580      	push	{r7, lr}
 800bbce:	b082      	sub	sp, #8
 800bbd0:	af00      	add	r7, sp, #0
 800bbd2:	4603      	mov	r3, r0
 800bbd4:	71fb      	strb	r3, [r7, #7]
	if ( true == enable )
 800bbd6:	79fb      	ldrb	r3, [r7, #7]
 800bbd8:	2b00      	cmp	r3, #0
 800bbda:	d004      	beq.n	800bbe6 <pwr_set_battery_measure_enable+0x1a>
	{
		gpio_set( eGPIO_BAT_MEASURE_EN, eGPIO_HIGH );
 800bbdc:	2101      	movs	r1, #1
 800bbde:	2014      	movs	r0, #20
 800bbe0:	f004 fd82 	bl	80106e8 <gpio_set>
	}
	else
	{
		gpio_set( eGPIO_BAT_MEASURE_EN, eGPIO_LOW );
	}
}
 800bbe4:	e003      	b.n	800bbee <pwr_set_battery_measure_enable+0x22>
		gpio_set( eGPIO_BAT_MEASURE_EN, eGPIO_LOW );
 800bbe6:	2100      	movs	r1, #0
 800bbe8:	2014      	movs	r0, #20
 800bbea:	f004 fd7d 	bl	80106e8 <gpio_set>
}
 800bbee:	bf00      	nop
 800bbf0:	3708      	adds	r7, #8
 800bbf2:	46bd      	mov	sp, r7
 800bbf4:	bd80      	pop	{r7, pc}
	...

0800bbf8 <pwr_get_battery_status>:
* @param[in]	charger_enable	- Enable signal for battery charger
* @return 		status 			- Status of battery health
*/
////////////////////////////////////////////////////////////////////////////////
static pwr_bat_status_t pwr_get_battery_status(const float32_t bat_voltage, const bool measure_enable, const bool charger_enable)
{
 800bbf8:	b480      	push	{r7}
 800bbfa:	b085      	sub	sp, #20
 800bbfc:	af00      	add	r7, sp, #0
 800bbfe:	ed87 0a01 	vstr	s0, [r7, #4]
 800bc02:	4603      	mov	r3, r0
 800bc04:	460a      	mov	r2, r1
 800bc06:	70fb      	strb	r3, [r7, #3]
 800bc08:	4613      	mov	r3, r2
 800bc0a:	70bb      	strb	r3, [r7, #2]
	pwr_bat_status_t status = ePWR_BAT_STATUS_UKNOWN;
 800bc0c:	2300      	movs	r3, #0
 800bc0e:	73fb      	strb	r3, [r7, #15]

	// Battery measurement circuit is not enabled - unknown voltage
	if ( false == measure_enable )
 800bc10:	78fb      	ldrb	r3, [r7, #3]
 800bc12:	f083 0301 	eor.w	r3, r3, #1
 800bc16:	b2db      	uxtb	r3, r3
 800bc18:	2b00      	cmp	r3, #0
 800bc1a:	d002      	beq.n	800bc22 <pwr_get_battery_status+0x2a>
	{
		status = ePWR_BAT_STATUS_UKNOWN;
 800bc1c:	2300      	movs	r3, #0
 800bc1e:	73fb      	strb	r3, [r7, #15]
 800bc20:	e01f      	b.n	800bc62 <pwr_get_battery_status+0x6a>
	}

	// Battery is being charged
	else if ( true == charger_enable )
 800bc22:	78bb      	ldrb	r3, [r7, #2]
 800bc24:	2b00      	cmp	r3, #0
 800bc26:	d002      	beq.n	800bc2e <pwr_get_battery_status+0x36>
	{
		status = ePWR_BAT_STATUS_CHARGING;
 800bc28:	2304      	movs	r3, #4
 800bc2a:	73fb      	strb	r3, [r7, #15]
 800bc2c:	e019      	b.n	800bc62 <pwr_get_battery_status+0x6a>
	}

	// Battery voltage measurement valid
	else
	{
		if ( bat_voltage < PWR_BAT_VOLTAGE_MISSING_V )
 800bc2e:	edd7 7a01 	vldr	s15, [r7, #4]
 800bc32:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800bc36:	eef4 7ac7 	vcmpe.f32	s15, s14
 800bc3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bc3e:	d502      	bpl.n	800bc46 <pwr_get_battery_status+0x4e>
		{
			status = ePWR_BAT_STATUS_MISSING;
 800bc40:	2302      	movs	r3, #2
 800bc42:	73fb      	strb	r3, [r7, #15]
 800bc44:	e00d      	b.n	800bc62 <pwr_get_battery_status+0x6a>
		}
		else if ( bat_voltage < PWR_BAT_VOLTAGE_MIN_V )
 800bc46:	edd7 7a01 	vldr	s15, [r7, #4]
 800bc4a:	ed9f 7a09 	vldr	s14, [pc, #36]	; 800bc70 <pwr_get_battery_status+0x78>
 800bc4e:	eef4 7ac7 	vcmpe.f32	s15, s14
 800bc52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bc56:	d502      	bpl.n	800bc5e <pwr_get_battery_status+0x66>
		{
			status = ePWR_BAT_STATUS_DEAD;
 800bc58:	2303      	movs	r3, #3
 800bc5a:	73fb      	strb	r3, [r7, #15]
 800bc5c:	e001      	b.n	800bc62 <pwr_get_battery_status+0x6a>
		}
		else
		{
			status = ePWR_BAT_STATUS_OK;
 800bc5e:	2301      	movs	r3, #1
 800bc60:	73fb      	strb	r3, [r7, #15]
		}
	}

	return status;
 800bc62:	7bfb      	ldrb	r3, [r7, #15]
}
 800bc64:	4618      	mov	r0, r3
 800bc66:	3714      	adds	r7, #20
 800bc68:	46bd      	mov	sp, r7
 800bc6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc6e:	4770      	bx	lr
 800bc70:	40333333 	.word	0x40333333

0800bc74 <pwr_set_battery_charger_enable>:
* @param[in]	enable	- Enable/Disable battery charger
* @return 		void
*/
////////////////////////////////////////////////////////////////////////////////
static void	pwr_set_battery_charger_enable(const bool enable)
{
 800bc74:	b580      	push	{r7, lr}
 800bc76:	b082      	sub	sp, #8
 800bc78:	af00      	add	r7, sp, #0
 800bc7a:	4603      	mov	r3, r0
 800bc7c:	71fb      	strb	r3, [r7, #7]
	if ( true == enable )
 800bc7e:	79fb      	ldrb	r3, [r7, #7]
 800bc80:	2b00      	cmp	r3, #0
 800bc82:	d004      	beq.n	800bc8e <pwr_set_battery_charger_enable+0x1a>
	{
		gpio_set( eGPIO_CHARGER_ENABLE, eGPIO_LOW );
 800bc84:	2100      	movs	r1, #0
 800bc86:	2011      	movs	r0, #17
 800bc88:	f004 fd2e 	bl	80106e8 <gpio_set>
	}
	else
	{
		gpio_set( eGPIO_CHARGER_ENABLE, eGPIO_HIGH );
	}
}
 800bc8c:	e003      	b.n	800bc96 <pwr_set_battery_charger_enable+0x22>
		gpio_set( eGPIO_CHARGER_ENABLE, eGPIO_HIGH );
 800bc8e:	2101      	movs	r1, #1
 800bc90:	2011      	movs	r0, #17
 800bc92:	f004 fd29 	bl	80106e8 <gpio_set>
}
 800bc96:	bf00      	nop
 800bc98:	3708      	adds	r7, #8
 800bc9a:	46bd      	mov	sp, r7
 800bc9c:	bd80      	pop	{r7, pc}
	...

0800bca0 <pwr_estimate_battery_soc>:
* @param[in]	vol		- Battery terminal voltage
* @return 		bat_soc	- Rough estimation of SOC
*/
////////////////////////////////////////////////////////////////////////////////
static uint8_t pwr_estimate_battery_soc(const float32_t vol, const pwr_bat_status_t bat_status)
{
 800bca0:	b4b0      	push	{r4, r5, r7}
 800bca2:	b095      	sub	sp, #84	; 0x54
 800bca4:	af00      	add	r7, sp, #0
 800bca6:	ed87 0a03 	vstr	s0, [r7, #12]
 800bcaa:	4603      	mov	r3, r0
 800bcac:	72fb      	strb	r3, [r7, #11]
	uint8_t bat_soc 	= 0U;
 800bcae:	2300      	movs	r3, #0
 800bcb0:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	uint8_t	volt_sec	= 0U;
 800bcb4:	2300      	movs	r3, #0
 800bcb6:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
	 *
	 * 	See link: https://github.com/ZiGaMi/BatterySocEstimation
	 *
	 * 	@note	First voltage point is not needed!
	 */
	const float32_t volt_sections[PWR_BAT_SOC_EST_SECTION_NUM] 	= { 3.66f, 3.48f, 3.35f, 3.0f, 2.5f };
 800bcba:	4b37      	ldr	r3, [pc, #220]	; (800bd98 <pwr_estimate_battery_soc+0xf8>)
 800bcbc:	f107 0438 	add.w	r4, r7, #56	; 0x38
 800bcc0:	461d      	mov	r5, r3
 800bcc2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800bcc4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800bcc6:	682b      	ldr	r3, [r5, #0]
 800bcc8:	6023      	str	r3, [r4, #0]
	const float32_t soc_est_k[PWR_BAT_SOC_EST_SECTION_NUM] 		= { 0.93337f, 2.05752f, 1.04682f, 0.12741f, 0.01747f };
 800bcca:	4b34      	ldr	r3, [pc, #208]	; (800bd9c <pwr_estimate_battery_soc+0xfc>)
 800bccc:	f107 0424 	add.w	r4, r7, #36	; 0x24
 800bcd0:	461d      	mov	r5, r3
 800bcd2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800bcd4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800bcd6:	682b      	ldr	r3, [r5, #0]
 800bcd8:	6023      	str	r3, [r4, #0]
	const float32_t soc_est_n[PWR_BAT_SOC_EST_SECTION_NUM] 		= { -2.85564f, -6.97004f, -3.45279f, -0.37278f, -0.04297f };
 800bcda:	4b31      	ldr	r3, [pc, #196]	; (800bda0 <pwr_estimate_battery_soc+0x100>)
 800bcdc:	f107 0410 	add.w	r4, r7, #16
 800bce0:	461d      	mov	r5, r3
 800bce2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800bce4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800bce6:	682b      	ldr	r3, [r5, #0]
 800bce8:	6023      	str	r3, [r4, #0]

	// Battery missing
	if ( ePWR_BAT_STATUS_MISSING == bat_status )
 800bcea:	7afb      	ldrb	r3, [r7, #11]
 800bcec:	2b02      	cmp	r3, #2
 800bcee:	d103      	bne.n	800bcf8 <pwr_estimate_battery_soc+0x58>
	{
		bat_soc = 0U;
 800bcf0:	2300      	movs	r3, #0
 800bcf2:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800bcf6:	e047      	b.n	800bd88 <pwr_estimate_battery_soc+0xe8>

	// Battery present
	else
	{
		// Calculate SOC
		for ( volt_sec = 0; volt_sec < PWR_BAT_SOC_EST_SECTION_NUM; volt_sec++ )
 800bcf8:	2300      	movs	r3, #0
 800bcfa:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 800bcfe:	e038      	b.n	800bd72 <pwr_estimate_battery_soc+0xd2>
		{
			// Find current voltage sector
			if ( vol > volt_sections[volt_sec] )
 800bd00:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 800bd04:	009b      	lsls	r3, r3, #2
 800bd06:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800bd0a:	4413      	add	r3, r2
 800bd0c:	3b18      	subs	r3, #24
 800bd0e:	edd3 7a00 	vldr	s15, [r3]
 800bd12:	ed97 7a03 	vldr	s14, [r7, #12]
 800bd16:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800bd1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bd1e:	dd23      	ble.n	800bd68 <pwr_estimate_battery_soc+0xc8>
			{
				bat_soc = (uint8_t)( 100U * (( soc_est_k[volt_sec] * vol ) + soc_est_n[volt_sec] ));
 800bd20:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 800bd24:	009b      	lsls	r3, r3, #2
 800bd26:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800bd2a:	4413      	add	r3, r2
 800bd2c:	3b2c      	subs	r3, #44	; 0x2c
 800bd2e:	ed93 7a00 	vldr	s14, [r3]
 800bd32:	edd7 7a03 	vldr	s15, [r7, #12]
 800bd36:	ee27 7a27 	vmul.f32	s14, s14, s15
 800bd3a:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 800bd3e:	009b      	lsls	r3, r3, #2
 800bd40:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800bd44:	4413      	add	r3, r2
 800bd46:	3b40      	subs	r3, #64	; 0x40
 800bd48:	edd3 7a00 	vldr	s15, [r3]
 800bd4c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800bd50:	ed9f 7a14 	vldr	s14, [pc, #80]	; 800bda4 <pwr_estimate_battery_soc+0x104>
 800bd54:	ee67 7a87 	vmul.f32	s15, s15, s14
 800bd58:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bd5c:	edc7 7a01 	vstr	s15, [r7, #4]
 800bd60:	793b      	ldrb	r3, [r7, #4]
 800bd62:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
				break;
 800bd66:	e008      	b.n	800bd7a <pwr_estimate_battery_soc+0xda>
		for ( volt_sec = 0; volt_sec < PWR_BAT_SOC_EST_SECTION_NUM; volt_sec++ )
 800bd68:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 800bd6c:	3301      	adds	r3, #1
 800bd6e:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 800bd72:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 800bd76:	2b04      	cmp	r3, #4
 800bd78:	d9c2      	bls.n	800bd00 <pwr_estimate_battery_soc+0x60>
			}
		}

		// Limit calculations
		if ( bat_soc > 100U )
 800bd7a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800bd7e:	2b64      	cmp	r3, #100	; 0x64
 800bd80:	d902      	bls.n	800bd88 <pwr_estimate_battery_soc+0xe8>
		{
			bat_soc = 100U;
 800bd82:	2364      	movs	r3, #100	; 0x64
 800bd84:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
		{
			// No actions...
		}
	}

	return bat_soc;
 800bd88:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 800bd8c:	4618      	mov	r0, r3
 800bd8e:	3754      	adds	r7, #84	; 0x54
 800bd90:	46bd      	mov	sp, r7
 800bd92:	bcb0      	pop	{r4, r5, r7}
 800bd94:	4770      	bx	lr
 800bd96:	bf00      	nop
 800bd98:	0801a320 	.word	0x0801a320
 800bd9c:	0801a334 	.word	0x0801a334
 800bda0:	0801a348 	.word	0x0801a348
 800bda4:	42c80000 	.word	0x42c80000

0800bda8 <pwr_set_usb_switch_enable>:
* @param[in]	enable	- Open/Close USB power switch
* @return 		void
*/
////////////////////////////////////////////////////////////////////////////////
static void pwr_set_usb_switch_enable(const bool enable)
{
 800bda8:	b580      	push	{r7, lr}
 800bdaa:	b082      	sub	sp, #8
 800bdac:	af00      	add	r7, sp, #0
 800bdae:	4603      	mov	r3, r0
 800bdb0:	71fb      	strb	r3, [r7, #7]
	if ( true == enable )
 800bdb2:	79fb      	ldrb	r3, [r7, #7]
 800bdb4:	2b00      	cmp	r3, #0
 800bdb6:	d005      	beq.n	800bdc4 <pwr_set_usb_switch_enable+0x1c>
	{
		timer_set_pwm( eTIMER_TIM4_CH3_VUSB_SWITCH_PWM, 0.5f );
 800bdb8:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 800bdbc:	2002      	movs	r0, #2
 800bdbe:	f005 fce7 	bl	8011790 <timer_set_pwm>
	}
	else
	{
		timer_set_pwm( eTIMER_TIM4_CH3_VUSB_SWITCH_PWM, 0.0f );
	}
}
 800bdc2:	e004      	b.n	800bdce <pwr_set_usb_switch_enable+0x26>
		timer_set_pwm( eTIMER_TIM4_CH3_VUSB_SWITCH_PWM, 0.0f );
 800bdc4:	ed9f 0a04 	vldr	s0, [pc, #16]	; 800bdd8 <pwr_set_usb_switch_enable+0x30>
 800bdc8:	2002      	movs	r0, #2
 800bdca:	f005 fce1 	bl	8011790 <timer_set_pwm>
}
 800bdce:	bf00      	nop
 800bdd0:	3708      	adds	r7, #8
 800bdd2:	46bd      	mov	sp, r7
 800bdd4:	bd80      	pop	{r7, pc}
 800bdd6:	bf00      	nop
 800bdd8:	00000000 	.word	0x00000000

0800bddc <pwr_set_ext_switch_enable>:
* @param[in]	enable	- Open/Close EXT power switch
* @return 		void
*/
////////////////////////////////////////////////////////////////////////////////
static void pwr_set_ext_switch_enable(const bool enable)
{
 800bddc:	b580      	push	{r7, lr}
 800bdde:	b082      	sub	sp, #8
 800bde0:	af00      	add	r7, sp, #0
 800bde2:	4603      	mov	r3, r0
 800bde4:	71fb      	strb	r3, [r7, #7]
	if ( true == enable )
 800bde6:	79fb      	ldrb	r3, [r7, #7]
 800bde8:	2b00      	cmp	r3, #0
 800bdea:	d005      	beq.n	800bdf8 <pwr_set_ext_switch_enable+0x1c>
	{
		timer_set_pwm( eTIMER_TIM4_CH4_VEXT_SWITCH_PWM, 0.5f );
 800bdec:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 800bdf0:	2003      	movs	r0, #3
 800bdf2:	f005 fccd 	bl	8011790 <timer_set_pwm>
	}
	else
	{
		timer_set_pwm( eTIMER_TIM4_CH4_VEXT_SWITCH_PWM, 0.0f );
	}
}
 800bdf6:	e004      	b.n	800be02 <pwr_set_ext_switch_enable+0x26>
		timer_set_pwm( eTIMER_TIM4_CH4_VEXT_SWITCH_PWM, 0.0f );
 800bdf8:	ed9f 0a04 	vldr	s0, [pc, #16]	; 800be0c <pwr_set_ext_switch_enable+0x30>
 800bdfc:	2003      	movs	r0, #3
 800bdfe:	f005 fcc7 	bl	8011790 <timer_set_pwm>
}
 800be02:	bf00      	nop
 800be04:	3708      	adds	r7, #8
 800be06:	46bd      	mov	sp, r7
 800be08:	bd80      	pop	{r7, pc}
 800be0a:	bf00      	nop
 800be0c:	00000000 	.word	0x00000000

0800be10 <pwr_get_input_power>:
* @param[in]	p_inp	- Pointer to input power data
* @return 		void
*/
////////////////////////////////////////////////////////////////////////////////
static void pwr_get_input_power(pwr_input_t * const p_inp)
{
 800be10:	b590      	push	{r4, r7, lr}
 800be12:	b083      	sub	sp, #12
 800be14:	af00      	add	r7, sp, #0
 800be16:	6078      	str	r0, [r7, #4]
	// Get input voltages
	p_inp->ext.voltage = filter_rc_update( g_pwr_data.inp.ext.filter, adc_get_real( eADC_V_EXT ));
 800be18:	4b26      	ldr	r3, [pc, #152]	; (800beb4 <pwr_get_input_power+0xa4>)
 800be1a:	68dc      	ldr	r4, [r3, #12]
 800be1c:	2001      	movs	r0, #1
 800be1e:	f004 fb2d 	bl	801047c <adc_get_real>
 800be22:	eef0 7a40 	vmov.f32	s15, s0
 800be26:	eeb0 0a67 	vmov.f32	s0, s15
 800be2a:	4620      	mov	r0, r4
 800be2c:	f007 f934 	bl	8013098 <filter_rc_update>
 800be30:	eef0 7a40 	vmov.f32	s15, s0
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	edc3 7a04 	vstr	s15, [r3, #16]
	p_inp->usb.voltage = filter_rc_update( g_pwr_data.inp.usb.filter, adc_get_real( eADC_V_USB ));
 800be3a:	4b1e      	ldr	r3, [pc, #120]	; (800beb4 <pwr_get_input_power+0xa4>)
 800be3c:	681c      	ldr	r4, [r3, #0]
 800be3e:	2000      	movs	r0, #0
 800be40:	f004 fb1c 	bl	801047c <adc_get_real>
 800be44:	eef0 7a40 	vmov.f32	s15, s0
 800be48:	eeb0 0a67 	vmov.f32	s0, s15
 800be4c:	4620      	mov	r0, r4
 800be4e:	f007 f923 	bl	8013098 <filter_rc_update>
 800be52:	eef0 7a40 	vmov.f32	s15, s0
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	edc3 7a01 	vstr	s15, [r3, #4]

	// Get statuses
	p_inp->ext.status = pwr_get_ext_input_status( p_inp->ext.voltage );
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	edd3 7a04 	vldr	s15, [r3, #16]
 800be62:	eeb0 0a67 	vmov.f32	s0, s15
 800be66:	f000 f839 	bl	800bedc <pwr_get_ext_input_status>
 800be6a:	4603      	mov	r3, r0
 800be6c:	461a      	mov	r2, r3
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	751a      	strb	r2, [r3, #20]
	p_inp->usb.status = pwr_get_usb_input_status( p_inp->usb.voltage );
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	edd3 7a01 	vldr	s15, [r3, #4]
 800be78:	eeb0 0a67 	vmov.f32	s0, s15
 800be7c:	f000 f8da 	bl	800c034 <pwr_get_usb_input_status>
 800be80:	4603      	mov	r3, r0
 800be82:	461a      	mov	r2, r3
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	721a      	strb	r2, [r3, #8]

	// Get system current consumption
	p_inp->sys_cur = filter_rc_update( g_pwr_data.inp.sys_cur_filt, adc_get_real( eADC_SYS_CUR ));
 800be88:	4b0a      	ldr	r3, [pc, #40]	; (800beb4 <pwr_get_input_power+0xa4>)
 800be8a:	699c      	ldr	r4, [r3, #24]
 800be8c:	2003      	movs	r0, #3
 800be8e:	f004 faf5 	bl	801047c <adc_get_real>
 800be92:	eef0 7a40 	vmov.f32	s15, s0
 800be96:	eeb0 0a67 	vmov.f32	s0, s15
 800be9a:	4620      	mov	r0, r4
 800be9c:	f007 f8fc 	bl	8013098 <filter_rc_update>
 800bea0:	eef0 7a40 	vmov.f32	s15, s0
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	edc3 7a07 	vstr	s15, [r3, #28]
}
 800beaa:	bf00      	nop
 800beac:	370c      	adds	r7, #12
 800beae:	46bd      	mov	sp, r7
 800beb0:	bd90      	pop	{r4, r7, pc}
 800beb2:	bf00      	nop
 800beb4:	20000010 	.word	0x20000010

0800beb8 <pwr_set_input_power>:
* @param[in]	p_inp	- Pointer to input power data
* @return 		void
*/
////////////////////////////////////////////////////////////////////////////////
static void pwr_set_input_power(const pwr_input_t * const p_inp)
{
 800beb8:	b580      	push	{r7, lr}
 800beba:	b082      	sub	sp, #8
 800bebc:	af00      	add	r7, sp, #0
 800bebe:	6078      	str	r0, [r7, #4]
	// Set power switches
	pwr_set_ext_switch_enable( p_inp->ext.sw_state );
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	7d5b      	ldrb	r3, [r3, #21]
 800bec4:	4618      	mov	r0, r3
 800bec6:	f7ff ff89 	bl	800bddc <pwr_set_ext_switch_enable>
	pwr_set_usb_switch_enable( p_inp->usb.sw_state );
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	7a5b      	ldrb	r3, [r3, #9]
 800bece:	4618      	mov	r0, r3
 800bed0:	f7ff ff6a 	bl	800bda8 <pwr_set_usb_switch_enable>
}
 800bed4:	bf00      	nop
 800bed6:	3708      	adds	r7, #8
 800bed8:	46bd      	mov	sp, r7
 800beda:	bd80      	pop	{r7, pc}

0800bedc <pwr_get_ext_input_status>:
* @param[in]	voltage	- Measured voltage of input power rail
* @return 		status	- Status of input power
*/
////////////////////////////////////////////////////////////////////////////////
static pwr_status_t pwr_get_ext_input_status(const float32_t voltage)
{
 800bedc:	b580      	push	{r7, lr}
 800bede:	b084      	sub	sp, #16
 800bee0:	af00      	add	r7, sp, #0
 800bee2:	ed87 0a01 	vstr	s0, [r7, #4]
			pwr_status_t status 		= ePWR_STATUS_UNKNOWN;
 800bee6:	2300      	movs	r3, #0
 800bee8:	73fb      	strb	r3, [r7, #15]
	static 	pwr_status_t status_prev	= ePWR_STATUS_UNKNOWN;

	switch( status_prev )
 800beea:	4b4c      	ldr	r3, [pc, #304]	; (800c01c <pwr_get_ext_input_status+0x140>)
 800beec:	781b      	ldrb	r3, [r3, #0]
 800beee:	2b04      	cmp	r3, #4
 800bef0:	f200 8089 	bhi.w	800c006 <pwr_get_ext_input_status+0x12a>
 800bef4:	a201      	add	r2, pc, #4	; (adr r2, 800befc <pwr_get_ext_input_status+0x20>)
 800bef6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800befa:	bf00      	nop
 800befc:	0800bfb9 	.word	0x0800bfb9
 800bf00:	0800bf11 	.word	0x0800bf11
 800bf04:	0800bf47 	.word	0x0800bf47
 800bf08:	0800bf65 	.word	0x0800bf65
 800bf0c:	0800bf9b 	.word	0x0800bf9b
	{
		case ePWR_STATUS_OK:

			if ( voltage < ( PWR_EXT_INPUT_VOLTAGE_UNDERVOLTAGE_V - PWR_INPUT_HYS_NEG_V ))
 800bf10:	edd7 7a01 	vldr	s15, [r7, #4]
 800bf14:	eeb1 7a0f 	vmov.f32	s14, #31	; 0x40f80000  7.750
 800bf18:	eef4 7ac7 	vcmpe.f32	s15, s14
 800bf1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bf20:	d502      	bpl.n	800bf28 <pwr_get_ext_input_status+0x4c>
			{
				status = ePWR_STATUS_UV;
 800bf22:	2302      	movs	r3, #2
 800bf24:	73fb      	strb	r3, [r7, #15]
			else
			{
				status = ePWR_STATUS_OK;
			}

			break;
 800bf26:	e071      	b.n	800c00c <pwr_get_ext_input_status+0x130>
			else if ( voltage > ( PWR_EXT_INPUT_VOLTAGE_OVERVOLTAGE_V + PWR_INPUT_HYS_POS_V ))
 800bf28:	edd7 7a01 	vldr	s15, [r7, #4]
 800bf2c:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 800c020 <pwr_get_ext_input_status+0x144>
 800bf30:	eef4 7ac7 	vcmpe.f32	s15, s14
 800bf34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bf38:	dd02      	ble.n	800bf40 <pwr_get_ext_input_status+0x64>
				status = ePWR_STATUS_OV;
 800bf3a:	2303      	movs	r3, #3
 800bf3c:	73fb      	strb	r3, [r7, #15]
			break;
 800bf3e:	e065      	b.n	800c00c <pwr_get_ext_input_status+0x130>
				status = ePWR_STATUS_OK;
 800bf40:	2301      	movs	r3, #1
 800bf42:	73fb      	strb	r3, [r7, #15]
			break;
 800bf44:	e062      	b.n	800c00c <pwr_get_ext_input_status+0x130>

		case ePWR_STATUS_UV:

			if ( voltage > ( PWR_EXT_INPUT_VOLTAGE_UNDERVOLTAGE_V + PWR_INPUT_HYS_POS_V ))
 800bf46:	edd7 7a01 	vldr	s15, [r7, #4]
 800bf4a:	ed9f 7a36 	vldr	s14, [pc, #216]	; 800c024 <pwr_get_ext_input_status+0x148>
 800bf4e:	eef4 7ac7 	vcmpe.f32	s15, s14
 800bf52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bf56:	dd02      	ble.n	800bf5e <pwr_get_ext_input_status+0x82>
			{
				status = ePWR_STATUS_OK;
 800bf58:	2301      	movs	r3, #1
 800bf5a:	73fb      	strb	r3, [r7, #15]
			else
			{
				status = ePWR_STATUS_UV;
			}

			break;
 800bf5c:	e056      	b.n	800c00c <pwr_get_ext_input_status+0x130>
				status = ePWR_STATUS_UV;
 800bf5e:	2302      	movs	r3, #2
 800bf60:	73fb      	strb	r3, [r7, #15]
			break;
 800bf62:	e053      	b.n	800c00c <pwr_get_ext_input_status+0x130>

		case ePWR_STATUS_OV:

			if ( voltage < ( PWR_EXT_INPUT_VOLTAGE_OVERVOLTAGE_V - PWR_INPUT_HYS_NEG_V ))
 800bf64:	edd7 7a01 	vldr	s15, [r7, #4]
 800bf68:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 800c028 <pwr_get_ext_input_status+0x14c>
 800bf6c:	eef4 7ac7 	vcmpe.f32	s15, s14
 800bf70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bf74:	d502      	bpl.n	800bf7c <pwr_get_ext_input_status+0xa0>
			{
				status = ePWR_STATUS_OK;
 800bf76:	2301      	movs	r3, #1
 800bf78:	73fb      	strb	r3, [r7, #15]
			else
			{
				status = ePWR_STATUS_OV;
			}

			break;
 800bf7a:	e047      	b.n	800c00c <pwr_get_ext_input_status+0x130>
			else if ( voltage > ( PWR_EXT_INPUT_VOLTAGE_ERROR_V + PWR_INPUT_HYS_POS_V ))
 800bf7c:	edd7 7a01 	vldr	s15, [r7, #4]
 800bf80:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 800c02c <pwr_get_ext_input_status+0x150>
 800bf84:	eef4 7ac7 	vcmpe.f32	s15, s14
 800bf88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bf8c:	dd02      	ble.n	800bf94 <pwr_get_ext_input_status+0xb8>
				status = ePWR_STATUS_ERROR;
 800bf8e:	2304      	movs	r3, #4
 800bf90:	73fb      	strb	r3, [r7, #15]
			break;
 800bf92:	e03b      	b.n	800c00c <pwr_get_ext_input_status+0x130>
				status = ePWR_STATUS_OV;
 800bf94:	2303      	movs	r3, #3
 800bf96:	73fb      	strb	r3, [r7, #15]
			break;
 800bf98:	e038      	b.n	800c00c <pwr_get_ext_input_status+0x130>

		case ePWR_STATUS_ERROR:

			if ( voltage < ( PWR_EXT_INPUT_VOLTAGE_ERROR_V - PWR_INPUT_HYS_NEG_V ))
 800bf9a:	edd7 7a01 	vldr	s15, [r7, #4]
 800bf9e:	ed9f 7a24 	vldr	s14, [pc, #144]	; 800c030 <pwr_get_ext_input_status+0x154>
 800bfa2:	eef4 7ac7 	vcmpe.f32	s15, s14
 800bfa6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bfaa:	d502      	bpl.n	800bfb2 <pwr_get_ext_input_status+0xd6>
			{
				status = ePWR_STATUS_OV;
 800bfac:	2303      	movs	r3, #3
 800bfae:	73fb      	strb	r3, [r7, #15]
			else
			{
				status = ePWR_STATUS_ERROR;
			}

			break;
 800bfb0:	e02c      	b.n	800c00c <pwr_get_ext_input_status+0x130>
				status = ePWR_STATUS_ERROR;
 800bfb2:	2304      	movs	r3, #4
 800bfb4:	73fb      	strb	r3, [r7, #15]
			break;
 800bfb6:	e029      	b.n	800c00c <pwr_get_ext_input_status+0x130>

		case ePWR_STATUS_UNKNOWN:

			if ( voltage < PWR_EXT_INPUT_VOLTAGE_UNDERVOLTAGE_V )
 800bfb8:	edd7 7a01 	vldr	s15, [r7, #4]
 800bfbc:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 800bfc0:	eef4 7ac7 	vcmpe.f32	s15, s14
 800bfc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bfc8:	d502      	bpl.n	800bfd0 <pwr_get_ext_input_status+0xf4>
			{
				status = ePWR_STATUS_UV;
 800bfca:	2302      	movs	r3, #2
 800bfcc:	73fb      	strb	r3, [r7, #15]
			else
			{
				status = ePWR_STATUS_ERROR;
			}

			break;
 800bfce:	e01d      	b.n	800c00c <pwr_get_ext_input_status+0x130>
			else if ( voltage < PWR_EXT_INPUT_VOLTAGE_OVERVOLTAGE_V )
 800bfd0:	edd7 7a01 	vldr	s15, [r7, #4]
 800bfd4:	eeb2 7a0c 	vmov.f32	s14, #44	; 0x41600000  14.0
 800bfd8:	eef4 7ac7 	vcmpe.f32	s15, s14
 800bfdc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bfe0:	d502      	bpl.n	800bfe8 <pwr_get_ext_input_status+0x10c>
				status = ePWR_STATUS_OK;
 800bfe2:	2301      	movs	r3, #1
 800bfe4:	73fb      	strb	r3, [r7, #15]
			break;
 800bfe6:	e011      	b.n	800c00c <pwr_get_ext_input_status+0x130>
			else if ( voltage < PWR_EXT_INPUT_VOLTAGE_ERROR_V )
 800bfe8:	edd7 7a01 	vldr	s15, [r7, #4]
 800bfec:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 800bff0:	eef4 7ac7 	vcmpe.f32	s15, s14
 800bff4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bff8:	d502      	bpl.n	800c000 <pwr_get_ext_input_status+0x124>
				status = ePWR_STATUS_OV;
 800bffa:	2303      	movs	r3, #3
 800bffc:	73fb      	strb	r3, [r7, #15]
			break;
 800bffe:	e005      	b.n	800c00c <pwr_get_ext_input_status+0x130>
				status = ePWR_STATUS_ERROR;
 800c000:	2304      	movs	r3, #4
 800c002:	73fb      	strb	r3, [r7, #15]
			break;
 800c004:	e002      	b.n	800c00c <pwr_get_ext_input_status+0x130>

		default:
			PROJECT_CONFIG_ASSERT( 0 );
 800c006:	f008 fff1 	bl	8014fec <project_config_assert_fail>
			break;
 800c00a:	bf00      	nop
	}

	// Store status
	status_prev = status;
 800c00c:	4a03      	ldr	r2, [pc, #12]	; (800c01c <pwr_get_ext_input_status+0x140>)
 800c00e:	7bfb      	ldrb	r3, [r7, #15]
 800c010:	7013      	strb	r3, [r2, #0]

	return status;
 800c012:	7bfb      	ldrb	r3, [r7, #15]
}
 800c014:	4618      	mov	r0, r3
 800c016:	3710      	adds	r7, #16
 800c018:	46bd      	mov	sp, r7
 800c01a:	bd80      	pop	{r7, pc}
 800c01c:	20004c9d 	.word	0x20004c9d
 800c020:	41640000 	.word	0x41640000
 800c024:	41040000 	.word	0x41040000
 800c028:	415c0000 	.word	0x415c0000
 800c02c:	41ca0000 	.word	0x41ca0000
 800c030:	41c60000 	.word	0x41c60000

0800c034 <pwr_get_usb_input_status>:
* @param[in]	voltage	- Measured voltage of input power rail
* @return 		status	- Status of input power
*/
////////////////////////////////////////////////////////////////////////////////
static pwr_status_t pwr_get_usb_input_status(const float32_t voltage)
{
 800c034:	b580      	push	{r7, lr}
 800c036:	b084      	sub	sp, #16
 800c038:	af00      	add	r7, sp, #0
 800c03a:	ed87 0a01 	vstr	s0, [r7, #4]
			pwr_status_t status 		= ePWR_STATUS_UNKNOWN;
 800c03e:	2300      	movs	r3, #0
 800c040:	73fb      	strb	r3, [r7, #15]
	static 	pwr_status_t status_prev	= ePWR_STATUS_UNKNOWN;

	switch( status_prev )
 800c042:	4b4c      	ldr	r3, [pc, #304]	; (800c174 <pwr_get_usb_input_status+0x140>)
 800c044:	781b      	ldrb	r3, [r3, #0]
 800c046:	2b04      	cmp	r3, #4
 800c048:	f200 8089 	bhi.w	800c15e <pwr_get_usb_input_status+0x12a>
 800c04c:	a201      	add	r2, pc, #4	; (adr r2, 800c054 <pwr_get_usb_input_status+0x20>)
 800c04e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c052:	bf00      	nop
 800c054:	0800c111 	.word	0x0800c111
 800c058:	0800c069 	.word	0x0800c069
 800c05c:	0800c09f 	.word	0x0800c09f
 800c060:	0800c0bd 	.word	0x0800c0bd
 800c064:	0800c0f3 	.word	0x0800c0f3
	{
		case ePWR_STATUS_OK:

			if ( voltage < ( PWR_USB_INPUT_VOLTAGE_UNDERVOLTAGE_V - PWR_INPUT_HYS_NEG_V ))
 800c068:	edd7 7a01 	vldr	s15, [r7, #4]
 800c06c:	eeb0 7a0e 	vmov.f32	s14, #14	; 0x40700000  3.750
 800c070:	eef4 7ac7 	vcmpe.f32	s15, s14
 800c074:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c078:	d502      	bpl.n	800c080 <pwr_get_usb_input_status+0x4c>
			{
				status = ePWR_STATUS_UV;
 800c07a:	2302      	movs	r3, #2
 800c07c:	73fb      	strb	r3, [r7, #15]
			else
			{
				status = ePWR_STATUS_OK;
			}

			break;
 800c07e:	e071      	b.n	800c164 <pwr_get_usb_input_status+0x130>
			else if ( voltage > ( PWR_USB_INPUT_VOLTAGE_OVERVOLTAGE_V + PWR_INPUT_HYS_POS_V ))
 800c080:	edd7 7a01 	vldr	s15, [r7, #4]
 800c084:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 800c178 <pwr_get_usb_input_status+0x144>
 800c088:	eef4 7ac7 	vcmpe.f32	s15, s14
 800c08c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c090:	dd02      	ble.n	800c098 <pwr_get_usb_input_status+0x64>
				status = ePWR_STATUS_OV;
 800c092:	2303      	movs	r3, #3
 800c094:	73fb      	strb	r3, [r7, #15]
			break;
 800c096:	e065      	b.n	800c164 <pwr_get_usb_input_status+0x130>
				status = ePWR_STATUS_OK;
 800c098:	2301      	movs	r3, #1
 800c09a:	73fb      	strb	r3, [r7, #15]
			break;
 800c09c:	e062      	b.n	800c164 <pwr_get_usb_input_status+0x130>

		case ePWR_STATUS_UV:

			if ( voltage > ( PWR_USB_INPUT_VOLTAGE_UNDERVOLTAGE_V + PWR_INPUT_HYS_POS_V ))
 800c09e:	edd7 7a01 	vldr	s15, [r7, #4]
 800c0a2:	eeb1 7a01 	vmov.f32	s14, #17	; 0x40880000  4.250
 800c0a6:	eef4 7ac7 	vcmpe.f32	s15, s14
 800c0aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c0ae:	dd02      	ble.n	800c0b6 <pwr_get_usb_input_status+0x82>
			{
				status = ePWR_STATUS_OK;
 800c0b0:	2301      	movs	r3, #1
 800c0b2:	73fb      	strb	r3, [r7, #15]
			else
			{
				status = ePWR_STATUS_UV;
			}

			break;
 800c0b4:	e056      	b.n	800c164 <pwr_get_usb_input_status+0x130>
				status = ePWR_STATUS_UV;
 800c0b6:	2302      	movs	r3, #2
 800c0b8:	73fb      	strb	r3, [r7, #15]
			break;
 800c0ba:	e053      	b.n	800c164 <pwr_get_usb_input_status+0x130>

		case ePWR_STATUS_OV:

			if ( voltage < ( PWR_USB_INPUT_VOLTAGE_OVERVOLTAGE_V - PWR_INPUT_HYS_NEG_V ))
 800c0bc:	edd7 7a01 	vldr	s15, [r7, #4]
 800c0c0:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 800c17c <pwr_get_usb_input_status+0x148>
 800c0c4:	eef4 7ac7 	vcmpe.f32	s15, s14
 800c0c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c0cc:	d502      	bpl.n	800c0d4 <pwr_get_usb_input_status+0xa0>
			{
				status = ePWR_STATUS_OK;
 800c0ce:	2301      	movs	r3, #1
 800c0d0:	73fb      	strb	r3, [r7, #15]
			else
			{
				status = ePWR_STATUS_OV;
			}

			break;
 800c0d2:	e047      	b.n	800c164 <pwr_get_usb_input_status+0x130>
			else if ( voltage > ( PWR_USB_INPUT_VOLTAGE_ERROR_V + PWR_INPUT_HYS_POS_V ))
 800c0d4:	edd7 7a01 	vldr	s15, [r7, #4]
 800c0d8:	ed9f 7a29 	vldr	s14, [pc, #164]	; 800c180 <pwr_get_usb_input_status+0x14c>
 800c0dc:	eef4 7ac7 	vcmpe.f32	s15, s14
 800c0e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c0e4:	dd02      	ble.n	800c0ec <pwr_get_usb_input_status+0xb8>
				status = ePWR_STATUS_ERROR;
 800c0e6:	2304      	movs	r3, #4
 800c0e8:	73fb      	strb	r3, [r7, #15]
			break;
 800c0ea:	e03b      	b.n	800c164 <pwr_get_usb_input_status+0x130>
				status = ePWR_STATUS_OV;
 800c0ec:	2303      	movs	r3, #3
 800c0ee:	73fb      	strb	r3, [r7, #15]
			break;
 800c0f0:	e038      	b.n	800c164 <pwr_get_usb_input_status+0x130>

		case ePWR_STATUS_ERROR:

			if ( voltage < ( PWR_USB_INPUT_VOLTAGE_ERROR_V - PWR_INPUT_HYS_NEG_V ))
 800c0f2:	edd7 7a01 	vldr	s15, [r7, #4]
 800c0f6:	ed9f 7a23 	vldr	s14, [pc, #140]	; 800c184 <pwr_get_usb_input_status+0x150>
 800c0fa:	eef4 7ac7 	vcmpe.f32	s15, s14
 800c0fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c102:	d502      	bpl.n	800c10a <pwr_get_usb_input_status+0xd6>
			{
				status = ePWR_STATUS_OV;
 800c104:	2303      	movs	r3, #3
 800c106:	73fb      	strb	r3, [r7, #15]
			else
			{
				status = ePWR_STATUS_ERROR;
			}

			break;
 800c108:	e02c      	b.n	800c164 <pwr_get_usb_input_status+0x130>
				status = ePWR_STATUS_ERROR;
 800c10a:	2304      	movs	r3, #4
 800c10c:	73fb      	strb	r3, [r7, #15]
			break;
 800c10e:	e029      	b.n	800c164 <pwr_get_usb_input_status+0x130>

		case ePWR_STATUS_UNKNOWN:

			if ( voltage < PWR_USB_INPUT_VOLTAGE_UNDERVOLTAGE_V )
 800c110:	edd7 7a01 	vldr	s15, [r7, #4]
 800c114:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 800c118:	eef4 7ac7 	vcmpe.f32	s15, s14
 800c11c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c120:	d502      	bpl.n	800c128 <pwr_get_usb_input_status+0xf4>
			{
				status = ePWR_STATUS_UV;
 800c122:	2302      	movs	r3, #2
 800c124:	73fb      	strb	r3, [r7, #15]
			else
			{
				status = ePWR_STATUS_ERROR;
			}

			break;
 800c126:	e01d      	b.n	800c164 <pwr_get_usb_input_status+0x130>
			else if ( voltage < PWR_USB_INPUT_VOLTAGE_OVERVOLTAGE_V )
 800c128:	edd7 7a01 	vldr	s15, [r7, #4]
 800c12c:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 800c130:	eef4 7ac7 	vcmpe.f32	s15, s14
 800c134:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c138:	d502      	bpl.n	800c140 <pwr_get_usb_input_status+0x10c>
				status = ePWR_STATUS_OK;
 800c13a:	2301      	movs	r3, #1
 800c13c:	73fb      	strb	r3, [r7, #15]
			break;
 800c13e:	e011      	b.n	800c164 <pwr_get_usb_input_status+0x130>
			else if ( voltage < PWR_USB_INPUT_VOLTAGE_ERROR_V )
 800c140:	edd7 7a01 	vldr	s15, [r7, #4]
 800c144:	eeb3 7a06 	vmov.f32	s14, #54	; 0x41b00000  22.0
 800c148:	eef4 7ac7 	vcmpe.f32	s15, s14
 800c14c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c150:	d502      	bpl.n	800c158 <pwr_get_usb_input_status+0x124>
				status = ePWR_STATUS_OV;
 800c152:	2303      	movs	r3, #3
 800c154:	73fb      	strb	r3, [r7, #15]
			break;
 800c156:	e005      	b.n	800c164 <pwr_get_usb_input_status+0x130>
				status = ePWR_STATUS_ERROR;
 800c158:	2304      	movs	r3, #4
 800c15a:	73fb      	strb	r3, [r7, #15]
			break;
 800c15c:	e002      	b.n	800c164 <pwr_get_usb_input_status+0x130>

		default:
			PROJECT_CONFIG_ASSERT( 0 );
 800c15e:	f008 ff45 	bl	8014fec <project_config_assert_fail>
			break;
 800c162:	bf00      	nop
	}

	// Store status
	status_prev = status;
 800c164:	4a03      	ldr	r2, [pc, #12]	; (800c174 <pwr_get_usb_input_status+0x140>)
 800c166:	7bfb      	ldrb	r3, [r7, #15]
 800c168:	7013      	strb	r3, [r2, #0]

	return status;
 800c16a:	7bfb      	ldrb	r3, [r7, #15]
}
 800c16c:	4618      	mov	r0, r3
 800c16e:	3710      	adds	r7, #16
 800c170:	46bd      	mov	sp, r7
 800c172:	bd80      	pop	{r7, pc}
 800c174:	20004c9e 	.word	0x20004c9e
 800c178:	414c0000 	.word	0x414c0000
 800c17c:	41440000 	.word	0x41440000
 800c180:	41b20000 	.word	0x41b20000
 800c184:	41ae0000 	.word	0x41ae0000

0800c188 <pwr_logic_input_power>:
* @param[in]	p_pwr		- Pointer to input power data
* @return 		void
*/
////////////////////////////////////////////////////////////////////////////////
static void pwr_logic_input_power(pwr_input_t * const p_inp)
{
 800c188:	b580      	push	{r7, lr}
 800c18a:	b084      	sub	sp, #16
 800c18c:	af00      	add	r7, sp, #0
 800c18e:	6078      	str	r0, [r7, #4]
	static 	float32_t 	usb_cond_time 	= 0UL;
	static 	float32_t 	ext_cond_time 	= 0UL;
			bool		usb_cond		= false;
 800c190:	2300      	movs	r3, #0
 800c192:	73fb      	strb	r3, [r7, #15]
			bool		ext_cond		= false;
 800c194:	2300      	movs	r3, #0
 800c196:	73bb      	strb	r3, [r7, #14]

	// Get conditions
	if ( ePWR_STATUS_OK == p_inp->usb.status )
 800c198:	687b      	ldr	r3, [r7, #4]
 800c19a:	7a1b      	ldrb	r3, [r3, #8]
 800c19c:	2b01      	cmp	r3, #1
 800c19e:	d101      	bne.n	800c1a4 <pwr_logic_input_power+0x1c>
	{
		usb_cond = true;
 800c1a0:	2301      	movs	r3, #1
 800c1a2:	73fb      	strb	r3, [r7, #15]
	}

	if ( ePWR_STATUS_OK == p_inp->ext.status )
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	7d1b      	ldrb	r3, [r3, #20]
 800c1a8:	2b01      	cmp	r3, #1
 800c1aa:	d101      	bne.n	800c1b0 <pwr_logic_input_power+0x28>
	{
		ext_cond = true;
 800c1ac:	2301      	movs	r3, #1
 800c1ae:	73bb      	strb	r3, [r7, #14]
	}

	// Manage time
	usb_cond_time = pwr_manage_condition_fulfilled_time( usb_cond, usb_cond_time );
 800c1b0:	4b23      	ldr	r3, [pc, #140]	; (800c240 <pwr_logic_input_power+0xb8>)
 800c1b2:	edd3 7a00 	vldr	s15, [r3]
 800c1b6:	7bfb      	ldrb	r3, [r7, #15]
 800c1b8:	eeb0 0a67 	vmov.f32	s0, s15
 800c1bc:	4618      	mov	r0, r3
 800c1be:	f000 f8a5 	bl	800c30c <pwr_manage_condition_fulfilled_time>
 800c1c2:	eef0 7a40 	vmov.f32	s15, s0
 800c1c6:	4b1e      	ldr	r3, [pc, #120]	; (800c240 <pwr_logic_input_power+0xb8>)
 800c1c8:	edc3 7a00 	vstr	s15, [r3]
	ext_cond_time = pwr_manage_condition_fulfilled_time( ext_cond, ext_cond_time );
 800c1cc:	4b1d      	ldr	r3, [pc, #116]	; (800c244 <pwr_logic_input_power+0xbc>)
 800c1ce:	edd3 7a00 	vldr	s15, [r3]
 800c1d2:	7bbb      	ldrb	r3, [r7, #14]
 800c1d4:	eeb0 0a67 	vmov.f32	s0, s15
 800c1d8:	4618      	mov	r0, r3
 800c1da:	f000 f897 	bl	800c30c <pwr_manage_condition_fulfilled_time>
 800c1de:	eef0 7a40 	vmov.f32	s15, s0
 800c1e2:	4b18      	ldr	r3, [pc, #96]	; (800c244 <pwr_logic_input_power+0xbc>)
 800c1e4:	edc3 7a00 	vstr	s15, [r3]

	// USB has a priority
	if ( usb_cond_time >= PWR_SWITCH_COND_TIME_S )
 800c1e8:	4b15      	ldr	r3, [pc, #84]	; (800c240 <pwr_logic_input_power+0xb8>)
 800c1ea:	edd3 7a00 	vldr	s15, [r3]
 800c1ee:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800c1f2:	eef4 7ac7 	vcmpe.f32	s15, s14
 800c1f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c1fa:	db06      	blt.n	800c20a <pwr_logic_input_power+0x82>
	{
		p_inp->ext.sw_state = false;
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	2200      	movs	r2, #0
 800c200:	755a      	strb	r2, [r3, #21]
		p_inp->usb.sw_state = true;
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	2201      	movs	r2, #1
 800c206:	725a      	strb	r2, [r3, #9]
	else
	{
		p_inp->ext.sw_state = false;
		p_inp->usb.sw_state = false;
	}
}
 800c208:	e016      	b.n	800c238 <pwr_logic_input_power+0xb0>
	else if ( ext_cond_time >= PWR_SWITCH_COND_TIME_S )
 800c20a:	4b0e      	ldr	r3, [pc, #56]	; (800c244 <pwr_logic_input_power+0xbc>)
 800c20c:	edd3 7a00 	vldr	s15, [r3]
 800c210:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800c214:	eef4 7ac7 	vcmpe.f32	s15, s14
 800c218:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c21c:	db06      	blt.n	800c22c <pwr_logic_input_power+0xa4>
		p_inp->ext.sw_state = true;
 800c21e:	687b      	ldr	r3, [r7, #4]
 800c220:	2201      	movs	r2, #1
 800c222:	755a      	strb	r2, [r3, #21]
		p_inp->usb.sw_state = false;
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	2200      	movs	r2, #0
 800c228:	725a      	strb	r2, [r3, #9]
}
 800c22a:	e005      	b.n	800c238 <pwr_logic_input_power+0xb0>
		p_inp->ext.sw_state = false;
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	2200      	movs	r2, #0
 800c230:	755a      	strb	r2, [r3, #21]
		p_inp->usb.sw_state = false;
 800c232:	687b      	ldr	r3, [r7, #4]
 800c234:	2200      	movs	r2, #0
 800c236:	725a      	strb	r2, [r3, #9]
}
 800c238:	bf00      	nop
 800c23a:	3710      	adds	r7, #16
 800c23c:	46bd      	mov	sp, r7
 800c23e:	bd80      	pop	{r7, pc}
 800c240:	20004ca0 	.word	0x20004ca0
 800c244:	20004ca4 	.word	0x20004ca4

0800c248 <pwr_logic_battery_charger>:
* @param[in]	bat_status	- Status of battery
* @return 		void
*/
////////////////////////////////////////////////////////////////////////////////
static void pwr_logic_battery_charger(pwr_bat_charger_t * const p_charger, const pwr_input_t * const p_pwr, const pwr_bat_status_t bat_status)
{
 800c248:	b580      	push	{r7, lr}
 800c24a:	b086      	sub	sp, #24
 800c24c:	af00      	add	r7, sp, #0
 800c24e:	60f8      	str	r0, [r7, #12]
 800c250:	60b9      	str	r1, [r7, #8]
 800c252:	4613      	mov	r3, r2
 800c254:	71fb      	strb	r3, [r7, #7]
	static 	float32_t 	cond_time 		= 0UL;
			bool		charger_cond	= false;
 800c256:	2300      	movs	r3, #0
 800c258:	75fb      	strb	r3, [r7, #23]

	// Get charger condition
	charger_cond = pwr_get_charger_logic_conditions( p_charger, p_pwr, bat_status );
 800c25a:	79fb      	ldrb	r3, [r7, #7]
 800c25c:	461a      	mov	r2, r3
 800c25e:	68b9      	ldr	r1, [r7, #8]
 800c260:	68f8      	ldr	r0, [r7, #12]
 800c262:	f000 f827 	bl	800c2b4 <pwr_get_charger_logic_conditions>
 800c266:	4603      	mov	r3, r0
 800c268:	75fb      	strb	r3, [r7, #23]

	// Manage time
	cond_time = pwr_manage_condition_fulfilled_time( charger_cond, cond_time );
 800c26a:	4b11      	ldr	r3, [pc, #68]	; (800c2b0 <pwr_logic_battery_charger+0x68>)
 800c26c:	edd3 7a00 	vldr	s15, [r3]
 800c270:	7dfb      	ldrb	r3, [r7, #23]
 800c272:	eeb0 0a67 	vmov.f32	s0, s15
 800c276:	4618      	mov	r0, r3
 800c278:	f000 f848 	bl	800c30c <pwr_manage_condition_fulfilled_time>
 800c27c:	eef0 7a40 	vmov.f32	s15, s0
 800c280:	4b0b      	ldr	r3, [pc, #44]	; (800c2b0 <pwr_logic_battery_charger+0x68>)
 800c282:	edc3 7a00 	vstr	s15, [r3]

	// Is allow to charge
	if ( cond_time >= PWR_BAT_CHARGE_COND_TIME_S )
 800c286:	4b0a      	ldr	r3, [pc, #40]	; (800c2b0 <pwr_logic_battery_charger+0x68>)
 800c288:	edd3 7a00 	vldr	s15, [r3]
 800c28c:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800c290:	eef4 7ac7 	vcmpe.f32	s15, s14
 800c294:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c298:	db03      	blt.n	800c2a2 <pwr_logic_battery_charger+0x5a>
	{
		p_charger->enable = true;
 800c29a:	68fb      	ldr	r3, [r7, #12]
 800c29c:	2201      	movs	r2, #1
 800c29e:	701a      	strb	r2, [r3, #0]
	}
	else
	{
		p_charger->enable = false;
	}
}
 800c2a0:	e002      	b.n	800c2a8 <pwr_logic_battery_charger+0x60>
		p_charger->enable = false;
 800c2a2:	68fb      	ldr	r3, [r7, #12]
 800c2a4:	2200      	movs	r2, #0
 800c2a6:	701a      	strb	r2, [r3, #0]
}
 800c2a8:	bf00      	nop
 800c2aa:	3718      	adds	r7, #24
 800c2ac:	46bd      	mov	sp, r7
 800c2ae:	bd80      	pop	{r7, pc}
 800c2b0:	20004ca8 	.word	0x20004ca8

0800c2b4 <pwr_get_charger_logic_conditions>:
* @param[in]	bat_status	- Status of battery
* @return 		condition	- Charge condition fulfillement state
*/
////////////////////////////////////////////////////////////////////////////////
static bool pwr_get_charger_logic_conditions(pwr_bat_charger_t * const p_charger, const pwr_input_t * const p_pwr, const pwr_bat_status_t bat_status)
{
 800c2b4:	b480      	push	{r7}
 800c2b6:	b087      	sub	sp, #28
 800c2b8:	af00      	add	r7, sp, #0
 800c2ba:	60f8      	str	r0, [r7, #12]
 800c2bc:	60b9      	str	r1, [r7, #8]
 800c2be:	4613      	mov	r3, r2
 800c2c0:	71fb      	strb	r3, [r7, #7]
	bool condition = false;
 800c2c2:	2300      	movs	r3, #0
 800c2c4:	75fb      	strb	r3, [r7, #23]

	// Check for conditions
	if 	(	(	( true == p_pwr->usb.sw_state )
 800c2c6:	68bb      	ldr	r3, [r7, #8]
 800c2c8:	7a5b      	ldrb	r3, [r3, #9]
 800c2ca:	2b00      	cmp	r3, #0
 800c2cc:	d103      	bne.n	800c2d6 <pwr_get_charger_logic_conditions+0x22>
			|| 	( true == p_pwr->ext.sw_state ))
 800c2ce:	68bb      	ldr	r3, [r7, #8]
 800c2d0:	7d5b      	ldrb	r3, [r3, #21]
 800c2d2:	2b00      	cmp	r3, #0
 800c2d4:	d013      	beq.n	800c2fe <pwr_get_charger_logic_conditions+0x4a>
		&& 	(	( ePWR_BAT_STATUS_OK 		== bat_status )
 800c2d6:	79fb      	ldrb	r3, [r7, #7]
 800c2d8:	2b01      	cmp	r3, #1
 800c2da:	d002      	beq.n	800c2e2 <pwr_get_charger_logic_conditions+0x2e>
			||	( ePWR_BAT_STATUS_CHARGING 	== bat_status ))
 800c2dc:	79fb      	ldrb	r3, [r7, #7]
 800c2de:	2b04      	cmp	r3, #4
 800c2e0:	d10d      	bne.n	800c2fe <pwr_get_charger_logic_conditions+0x4a>
		&&	( ePWR_BAT_CHARGER_PG_OK == p_charger->power_good )
 800c2e2:	68fb      	ldr	r3, [r7, #12]
 800c2e4:	785b      	ldrb	r3, [r3, #1]
 800c2e6:	2b01      	cmp	r3, #1
 800c2e8:	d109      	bne.n	800c2fe <pwr_get_charger_logic_conditions+0x4a>
		&&	(	( ePWR_BAT_CHARGER_STAT_COMP_DIS == p_charger->status )
 800c2ea:	68fb      	ldr	r3, [r7, #12]
 800c2ec:	789b      	ldrb	r3, [r3, #2]
 800c2ee:	2b02      	cmp	r3, #2
 800c2f0:	d003      	beq.n	800c2fa <pwr_get_charger_logic_conditions+0x46>
			||	( ePWR_BAT_CHARGER_STAT_CHARGING == p_charger->status )))
 800c2f2:	68fb      	ldr	r3, [r7, #12]
 800c2f4:	789b      	ldrb	r3, [r3, #2]
 800c2f6:	2b01      	cmp	r3, #1
 800c2f8:	d101      	bne.n	800c2fe <pwr_get_charger_logic_conditions+0x4a>
	{
		condition = true;
 800c2fa:	2301      	movs	r3, #1
 800c2fc:	75fb      	strb	r3, [r7, #23]
	}

	return condition;
 800c2fe:	7dfb      	ldrb	r3, [r7, #23]
}
 800c300:	4618      	mov	r0, r3
 800c302:	371c      	adds	r7, #28
 800c304:	46bd      	mov	sp, r7
 800c306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c30a:	4770      	bx	lr

0800c30c <pwr_manage_condition_fulfilled_time>:
* @param[in]	time		- Current time of condition fulfilled
* @return 		rtn_time	- Total time of fulfilled condition
*/
////////////////////////////////////////////////////////////////////////////////
static float32_t pwr_manage_condition_fulfilled_time(const bool cond, const float32_t time)
{
 800c30c:	b480      	push	{r7}
 800c30e:	b085      	sub	sp, #20
 800c310:	af00      	add	r7, sp, #0
 800c312:	4603      	mov	r3, r0
 800c314:	ed87 0a00 	vstr	s0, [r7]
 800c318:	71fb      	strb	r3, [r7, #7]
	float32_t rtn_time = 0UL;
 800c31a:	f04f 0300 	mov.w	r3, #0
 800c31e:	60fb      	str	r3, [r7, #12]

	if ( true == cond )
 800c320:	79fb      	ldrb	r3, [r7, #7]
 800c322:	2b00      	cmp	r3, #0
 800c324:	d014      	beq.n	800c350 <pwr_manage_condition_fulfilled_time+0x44>
	{
		rtn_time = ( time + PWR_HNDL_PERIOD_S );
 800c326:	edd7 7a00 	vldr	s15, [r7]
 800c32a:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 800c364 <pwr_manage_condition_fulfilled_time+0x58>
 800c32e:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c332:	edc7 7a03 	vstr	s15, [r7, #12]
		rtn_time = PWR_TIME_LIM( rtn_time );
 800c336:	edd7 7a03 	vldr	s15, [r7, #12]
 800c33a:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 800c368 <pwr_manage_condition_fulfilled_time+0x5c>
 800c33e:	eef4 7ac7 	vcmpe.f32	s15, s14
 800c342:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c346:	dd01      	ble.n	800c34c <pwr_manage_condition_fulfilled_time+0x40>
 800c348:	4b08      	ldr	r3, [pc, #32]	; (800c36c <pwr_manage_condition_fulfilled_time+0x60>)
 800c34a:	e000      	b.n	800c34e <pwr_manage_condition_fulfilled_time+0x42>
 800c34c:	68fb      	ldr	r3, [r7, #12]
 800c34e:	60fb      	str	r3, [r7, #12]
	}

	return rtn_time;
 800c350:	68fb      	ldr	r3, [r7, #12]
 800c352:	ee07 3a90 	vmov	s15, r3
}
 800c356:	eeb0 0a67 	vmov.f32	s0, s15
 800c35a:	3714      	adds	r7, #20
 800c35c:	46bd      	mov	sp, r7
 800c35e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c362:	4770      	bx	lr
 800c364:	3c23d70a 	.word	0x3c23d70a
 800c368:	47c35000 	.word	0x47c35000
 800c36c:	47c35000 	.word	0x47c35000

0800c370 <pwr_set_5v_regulator>:
* @param[in]	en	- Enable/Disable 5V voltage regulation
* @return 		void
*/
////////////////////////////////////////////////////////////////////////////////
static void	pwr_set_5v_regulator(const bool en)
{
 800c370:	b580      	push	{r7, lr}
 800c372:	b082      	sub	sp, #8
 800c374:	af00      	add	r7, sp, #0
 800c376:	4603      	mov	r3, r0
 800c378:	71fb      	strb	r3, [r7, #7]
	if ( true == en )
 800c37a:	79fb      	ldrb	r3, [r7, #7]
 800c37c:	2b00      	cmp	r3, #0
 800c37e:	d004      	beq.n	800c38a <pwr_set_5v_regulator+0x1a>
	{
		 gpio_set( eGPIO_5V_SUPPLY_EN, eGPIO_HIGH );
 800c380:	2101      	movs	r1, #1
 800c382:	2002      	movs	r0, #2
 800c384:	f004 f9b0 	bl	80106e8 <gpio_set>
	}
	else
	{
		 gpio_set( eGPIO_5V_SUPPLY_EN, eGPIO_LOW );
	}
}
 800c388:	e003      	b.n	800c392 <pwr_set_5v_regulator+0x22>
		 gpio_set( eGPIO_5V_SUPPLY_EN, eGPIO_LOW );
 800c38a:	2100      	movs	r1, #0
 800c38c:	2002      	movs	r0, #2
 800c38e:	f004 f9ab 	bl	80106e8 <gpio_set>
}
 800c392:	bf00      	nop
 800c394:	3708      	adds	r7, #8
 800c396:	46bd      	mov	sp, r7
 800c398:	bd80      	pop	{r7, pc}
	...

0800c39c <pwr_3v3_lp_hndl>:
*
* @return 		void
*/
////////////////////////////////////////////////////////////////////////////////
static void pwr_3v3_lp_hndl(void)
{
 800c39c:	b580      	push	{r7, lr}
 800c39e:	b082      	sub	sp, #8
 800c3a0:	af00      	add	r7, sp, #0
	static 	float32_t 	precharge_time 		= 0UL;
			bool		precharge_cond		= false;
 800c3a2:	2300      	movs	r3, #0
 800c3a4:	71fb      	strb	r3, [r7, #7]
	static 	bool		_3v3_lp_main_prev	= false;

	// 3V3 precharge condition
	if ( true == g_pwr_data._3v3_lp.enable )
 800c3a6:	4b21      	ldr	r3, [pc, #132]	; (800c42c <pwr_3v3_lp_hndl+0x90>)
 800c3a8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800c3ac:	2b00      	cmp	r3, #0
 800c3ae:	d001      	beq.n	800c3b4 <pwr_3v3_lp_hndl+0x18>
	{
		precharge_cond = true;
 800c3b0:	2301      	movs	r3, #1
 800c3b2:	71fb      	strb	r3, [r7, #7]
	}

	// Set precharge switch
	g_pwr_data._3v3_lp.sw_precharge = precharge_cond;
 800c3b4:	4a1d      	ldr	r2, [pc, #116]	; (800c42c <pwr_3v3_lp_hndl+0x90>)
 800c3b6:	79fb      	ldrb	r3, [r7, #7]
 800c3b8:	f882 3037 	strb.w	r3, [r2, #55]	; 0x37

	// Set main switch
	if ( precharge_time >= PWR_3V3_LP_PRECHARGE_TIME_S )
 800c3bc:	4b1c      	ldr	r3, [pc, #112]	; (800c430 <pwr_3v3_lp_hndl+0x94>)
 800c3be:	edd3 7a00 	vldr	s15, [r3]
 800c3c2:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 800c434 <pwr_3v3_lp_hndl+0x98>
 800c3c6:	eef4 7ac7 	vcmpe.f32	s15, s14
 800c3ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c3ce:	db04      	blt.n	800c3da <pwr_3v3_lp_hndl+0x3e>
	{
		g_pwr_data._3v3_lp.sw_main = true;
 800c3d0:	4b16      	ldr	r3, [pc, #88]	; (800c42c <pwr_3v3_lp_hndl+0x90>)
 800c3d2:	2201      	movs	r2, #1
 800c3d4:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
 800c3d8:	e003      	b.n	800c3e2 <pwr_3v3_lp_hndl+0x46>
	}
	else
	{
		g_pwr_data._3v3_lp.sw_main = false;
 800c3da:	4b14      	ldr	r3, [pc, #80]	; (800c42c <pwr_3v3_lp_hndl+0x90>)
 800c3dc:	2200      	movs	r2, #0
 800c3de:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
	}

	// Manage time
	precharge_time = pwr_manage_condition_fulfilled_time( precharge_cond, precharge_time );
 800c3e2:	4b13      	ldr	r3, [pc, #76]	; (800c430 <pwr_3v3_lp_hndl+0x94>)
 800c3e4:	edd3 7a00 	vldr	s15, [r3]
 800c3e8:	79fb      	ldrb	r3, [r7, #7]
 800c3ea:	eeb0 0a67 	vmov.f32	s0, s15
 800c3ee:	4618      	mov	r0, r3
 800c3f0:	f7ff ff8c 	bl	800c30c <pwr_manage_condition_fulfilled_time>
 800c3f4:	eef0 7a40 	vmov.f32	s15, s0
 800c3f8:	4b0d      	ldr	r3, [pc, #52]	; (800c430 <pwr_3v3_lp_hndl+0x94>)
 800c3fa:	edc3 7a00 	vstr	s15, [r3]

	// Raise callback
	if ( g_pwr_data._3v3_lp.sw_main != _3v3_lp_main_prev )
 800c3fe:	4b0b      	ldr	r3, [pc, #44]	; (800c42c <pwr_3v3_lp_hndl+0x90>)
 800c400:	f893 2036 	ldrb.w	r2, [r3, #54]	; 0x36
 800c404:	4b0c      	ldr	r3, [pc, #48]	; (800c438 <pwr_3v3_lp_hndl+0x9c>)
 800c406:	781b      	ldrb	r3, [r3, #0]
 800c408:	429a      	cmp	r2, r3
 800c40a:	d005      	beq.n	800c418 <pwr_3v3_lp_hndl+0x7c>
	{
		pwr_3v3_lp_rail_change_callback( g_pwr_data._3v3_lp.sw_main );
 800c40c:	4b07      	ldr	r3, [pc, #28]	; (800c42c <pwr_3v3_lp_hndl+0x90>)
 800c40e:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800c412:	4618      	mov	r0, r3
 800c414:	f7fe fe4f 	bl	800b0b6 <pwr_3v3_lp_rail_change_callback>
	}

	// Store previous value
	_3v3_lp_main_prev = g_pwr_data._3v3_lp.sw_main;
 800c418:	4b04      	ldr	r3, [pc, #16]	; (800c42c <pwr_3v3_lp_hndl+0x90>)
 800c41a:	f893 2036 	ldrb.w	r2, [r3, #54]	; 0x36
 800c41e:	4b06      	ldr	r3, [pc, #24]	; (800c438 <pwr_3v3_lp_hndl+0x9c>)
 800c420:	701a      	strb	r2, [r3, #0]
}
 800c422:	bf00      	nop
 800c424:	3708      	adds	r7, #8
 800c426:	46bd      	mov	sp, r7
 800c428:	bd80      	pop	{r7, pc}
 800c42a:	bf00      	nop
 800c42c:	20000010 	.word	0x20000010
 800c430:	20004cac 	.word	0x20004cac
 800c434:	3e4ccccd 	.word	0x3e4ccccd
 800c438:	20004cb0 	.word	0x20004cb0

0800c43c <pwr_set_3v3_lp_switch>:
* @param[in]	en		- Enable/disable low power supply switch
* @return 		void
*/
////////////////////////////////////////////////////////////////////////////////
static void pwr_set_3v3_lp_switch(const bool en)
{
 800c43c:	b580      	push	{r7, lr}
 800c43e:	b082      	sub	sp, #8
 800c440:	af00      	add	r7, sp, #0
 800c442:	4603      	mov	r3, r0
 800c444:	71fb      	strb	r3, [r7, #7]
	if ( true == en )
 800c446:	79fb      	ldrb	r3, [r7, #7]
 800c448:	2b00      	cmp	r3, #0
 800c44a:	d004      	beq.n	800c456 <pwr_set_3v3_lp_switch+0x1a>
	{
		gpio_set( eGPIO_3V3_LP_SWITCH, eGPIO_LOW );
 800c44c:	2100      	movs	r1, #0
 800c44e:	2012      	movs	r0, #18
 800c450:	f004 f94a 	bl	80106e8 <gpio_set>
	}
	else
	{
		gpio_set( eGPIO_3V3_LP_SWITCH, eGPIO_HIGH );
	}
}
 800c454:	e003      	b.n	800c45e <pwr_set_3v3_lp_switch+0x22>
		gpio_set( eGPIO_3V3_LP_SWITCH, eGPIO_HIGH );
 800c456:	2101      	movs	r1, #1
 800c458:	2012      	movs	r0, #18
 800c45a:	f004 f945 	bl	80106e8 <gpio_set>
}
 800c45e:	bf00      	nop
 800c460:	3708      	adds	r7, #8
 800c462:	46bd      	mov	sp, r7
 800c464:	bd80      	pop	{r7, pc}

0800c466 <pwr_set_3v3_lp_precharge>:
* @param[in]	en		- Enable/disable low power supply precharge switch
* @return 		void
*/
////////////////////////////////////////////////////////////////////////////////
static void pwr_set_3v3_lp_precharge(const bool en)
{
 800c466:	b580      	push	{r7, lr}
 800c468:	b082      	sub	sp, #8
 800c46a:	af00      	add	r7, sp, #0
 800c46c:	4603      	mov	r3, r0
 800c46e:	71fb      	strb	r3, [r7, #7]
	if ( true == en )
 800c470:	79fb      	ldrb	r3, [r7, #7]
 800c472:	2b00      	cmp	r3, #0
 800c474:	d004      	beq.n	800c480 <pwr_set_3v3_lp_precharge+0x1a>
	{
		gpio_set( eGPIO_3V3_LP_PRECHARGE, eGPIO_LOW );
 800c476:	2100      	movs	r1, #0
 800c478:	2006      	movs	r0, #6
 800c47a:	f004 f935 	bl	80106e8 <gpio_set>
	}
	else
	{
		gpio_set( eGPIO_3V3_LP_PRECHARGE, eGPIO_HIGH );
	}
}
 800c47e:	e003      	b.n	800c488 <pwr_set_3v3_lp_precharge+0x22>
		gpio_set( eGPIO_3V3_LP_PRECHARGE, eGPIO_HIGH );
 800c480:	2101      	movs	r1, #1
 800c482:	2006      	movs	r0, #6
 800c484:	f004 f930 	bl	80106e8 <gpio_set>
}
 800c488:	bf00      	nop
 800c48a:	3708      	adds	r7, #8
 800c48c:	46bd      	mov	sp, r7
 800c48e:	bd80      	pop	{r7, pc}

0800c490 <pwr_update_pars>:
*
* @return 		void
*/
////////////////////////////////////////////////////////////////////////////////
static void pwr_update_pars(void)
{
 800c490:	b580      	push	{r7, lr}
 800c492:	af00      	add	r7, sp, #0
	par_set( ePAR_BAT_VOLTAGE, (float32_t*) &g_pwr_data.bat.voltage_filt );
 800c494:	4918      	ldr	r1, [pc, #96]	; (800c4f8 <pwr_update_pars+0x68>)
 800c496:	2009      	movs	r0, #9
 800c498:	f007 fa32 	bl	8013900 <par_set>
	par_set( ePAR_BAT_SOC, (uint8_t*) &g_pwr_data.bat.soc );
 800c49c:	4917      	ldr	r1, [pc, #92]	; (800c4fc <pwr_update_pars+0x6c>)
 800c49e:	200a      	movs	r0, #10
 800c4a0:	f007 fa2e 	bl	8013900 <par_set>
	par_set( ePAR_BAT_CHARGER_STATUS, (uint8_t*) &g_pwr_data.bat.charger.enable );
 800c4a4:	4916      	ldr	r1, [pc, #88]	; (800c500 <pwr_update_pars+0x70>)
 800c4a6:	200b      	movs	r0, #11
 800c4a8:	f007 fa2a 	bl	8013900 <par_set>

	par_set( ePAR_SYS_CUR, (float32_t*) &g_pwr_data.inp.sys_cur );
 800c4ac:	4915      	ldr	r1, [pc, #84]	; (800c504 <pwr_update_pars+0x74>)
 800c4ae:	200c      	movs	r0, #12
 800c4b0:	f007 fa26 	bl	8013900 <par_set>

	par_set( ePAR_USB_VOL, (float32_t*) &g_pwr_data.inp.usb.voltage );
 800c4b4:	4914      	ldr	r1, [pc, #80]	; (800c508 <pwr_update_pars+0x78>)
 800c4b6:	200d      	movs	r0, #13
 800c4b8:	f007 fa22 	bl	8013900 <par_set>
	par_set( ePAR_USB_SW_STATUS, (uint8_t*) &g_pwr_data.inp.usb.sw_state );
 800c4bc:	4913      	ldr	r1, [pc, #76]	; (800c50c <pwr_update_pars+0x7c>)
 800c4be:	200e      	movs	r0, #14
 800c4c0:	f007 fa1e 	bl	8013900 <par_set>

	par_set( ePAR_EXT_VOL, (float32_t*) &g_pwr_data.inp.ext.voltage );
 800c4c4:	4912      	ldr	r1, [pc, #72]	; (800c510 <pwr_update_pars+0x80>)
 800c4c6:	200f      	movs	r0, #15
 800c4c8:	f007 fa1a 	bl	8013900 <par_set>
	par_set( ePAR_EXT_SW_STATUS, (uint8_t*) &g_pwr_data.inp.ext.sw_state );
 800c4cc:	4911      	ldr	r1, [pc, #68]	; (800c514 <pwr_update_pars+0x84>)
 800c4ce:	2010      	movs	r0, #16
 800c4d0:	f007 fa16 	bl	8013900 <par_set>

	par_set( ePAR_5V_EN_STATUS, (uint8_t*) &g_pwr_data._5v_en );
 800c4d4:	4910      	ldr	r1, [pc, #64]	; (800c518 <pwr_update_pars+0x88>)
 800c4d6:	2011      	movs	r0, #17
 800c4d8:	f007 fa12 	bl	8013900 <par_set>
	par_set( ePAR_3V3LP_EN_STATUS, (uint8_t*) &g_pwr_data._3v3_lp.enable );
 800c4dc:	490f      	ldr	r1, [pc, #60]	; (800c51c <pwr_update_pars+0x8c>)
 800c4de:	2012      	movs	r0, #18
 800c4e0:	f007 fa0e 	bl	8013900 <par_set>
	par_set( ePAR_USBC_PD_ATTACHED, (uint8_t*) &g_pwr_data.p_usbc_details->attached );
 800c4e4:	4b0e      	ldr	r3, [pc, #56]	; (800c520 <pwr_update_pars+0x90>)
 800c4e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c4e8:	330c      	adds	r3, #12
 800c4ea:	4619      	mov	r1, r3
 800c4ec:	2013      	movs	r0, #19
 800c4ee:	f007 fa07 	bl	8013900 <par_set>
}
 800c4f2:	bf00      	nop
 800c4f4:	bd80      	pop	{r7, pc}
 800c4f6:	bf00      	nop
 800c4f8:	20000038 	.word	0x20000038
 800c4fc:	20000042 	.word	0x20000042
 800c500:	20000030 	.word	0x20000030
 800c504:	2000002c 	.word	0x2000002c
 800c508:	20000014 	.word	0x20000014
 800c50c:	20000019 	.word	0x20000019
 800c510:	20000020 	.word	0x20000020
 800c514:	20000025 	.word	0x20000025
 800c518:	20000044 	.word	0x20000044
 800c51c:	20000045 	.word	0x20000045
 800c520:	20000010 	.word	0x20000010

0800c524 <_25lcxxxx_init>:
*
* @return 	status - Status of initialization
*/
////////////////////////////////////////////////////////////////////////////////
_25lcxxxx_status_t _25lcxxxx_init(void)
{
 800c524:	b580      	push	{r7, lr}
 800c526:	b082      	sub	sp, #8
 800c528:	af00      	add	r7, sp, #0
	_25lcxxxx_status_t 	status 		= e25LCXXXX_OK;
 800c52a:	2300      	movs	r3, #0
 800c52c:	71fb      	strb	r3, [r7, #7]
	bool				wel_flag	= false;
 800c52e:	2300      	movs	r3, #0
 800c530:	71bb      	strb	r3, [r7, #6]

	// Check for init
	_25LCXXXX_ASSERT( false == gb_is_init );
 800c532:	4b18      	ldr	r3, [pc, #96]	; (800c594 <_25lcxxxx_init+0x70>)
 800c534:	781b      	ldrb	r3, [r3, #0]
 800c536:	2b00      	cmp	r3, #0
 800c538:	d001      	beq.n	800c53e <_25lcxxxx_init+0x1a>
 800c53a:	f008 fd57 	bl	8014fec <project_config_assert_fail>

	// Initialize app interface
	status = _25lcxxxx_if_init();
 800c53e:	f000 fad3 	bl	800cae8 <_25lcxxxx_if_init>
 800c542:	4603      	mov	r3, r0
 800c544:	71fb      	strb	r3, [r7, #7]

	// Enable write latch
	status |= _25lcxxxx_write_enable();
 800c546:	f000 f95f 	bl	800c808 <_25lcxxxx_write_enable>
 800c54a:	4603      	mov	r3, r0
 800c54c:	461a      	mov	r2, r3
 800c54e:	79fb      	ldrb	r3, [r7, #7]
 800c550:	4313      	orrs	r3, r2
 800c552:	71fb      	strb	r3, [r7, #7]

	// Read WEL flag
	wel_flag = _25lcxxxx_read_wel_flag();
 800c554:	f000 fa5e 	bl	800ca14 <_25lcxxxx_read_wel_flag>
 800c558:	4603      	mov	r3, r0
 800c55a:	71bb      	strb	r3, [r7, #6]

	if (	( e25LCXXXX_OK == status )
 800c55c:	79fb      	ldrb	r3, [r7, #7]
 800c55e:	2b00      	cmp	r3, #0
 800c560:	d105      	bne.n	800c56e <_25lcxxxx_init+0x4a>
		&& 	( true == wel_flag ))
 800c562:	79bb      	ldrb	r3, [r7, #6]
 800c564:	2b00      	cmp	r3, #0
 800c566:	d002      	beq.n	800c56e <_25lcxxxx_init+0x4a>
	{
		gb_is_init = true;
 800c568:	4b0a      	ldr	r3, [pc, #40]	; (800c594 <_25lcxxxx_init+0x70>)
 800c56a:	2201      	movs	r2, #1
 800c56c:	701a      	strb	r2, [r3, #0]
	}

	_25LCXXXX_ASSERT( e25LCXXXX_OK == status );
 800c56e:	79fb      	ldrb	r3, [r7, #7]
 800c570:	2b00      	cmp	r3, #0
 800c572:	d001      	beq.n	800c578 <_25lcxxxx_init+0x54>
 800c574:	f008 fd3a 	bl	8014fec <project_config_assert_fail>
	_25LCXXXX_ASSERT( true == gb_is_init );
 800c578:	4b06      	ldr	r3, [pc, #24]	; (800c594 <_25lcxxxx_init+0x70>)
 800c57a:	781b      	ldrb	r3, [r3, #0]
 800c57c:	f083 0301 	eor.w	r3, r3, #1
 800c580:	b2db      	uxtb	r3, r3
 800c582:	2b00      	cmp	r3, #0
 800c584:	d001      	beq.n	800c58a <_25lcxxxx_init+0x66>
 800c586:	f008 fd31 	bl	8014fec <project_config_assert_fail>

	return status;
 800c58a:	79fb      	ldrb	r3, [r7, #7]
}
 800c58c:	4618      	mov	r0, r3
 800c58e:	3708      	adds	r7, #8
 800c590:	46bd      	mov	sp, r7
 800c592:	bd80      	pop	{r7, pc}
 800c594:	20004cb1 	.word	0x20004cb1

0800c598 <_25lcxxxx_deinit>:
*
* @return 	status - Status of deinitialization
*/
////////////////////////////////////////////////////////////////////////////////
_25lcxxxx_status_t _25lcxxxx_deinit	(void)
{
 800c598:	b580      	push	{r7, lr}
 800c59a:	b082      	sub	sp, #8
 800c59c:	af00      	add	r7, sp, #0
	_25lcxxxx_status_t 		status 		= e25LCXXXX_OK;
 800c59e:	2300      	movs	r3, #0
 800c5a0:	71fb      	strb	r3, [r7, #7]
	_25lcxxxx_status_reg_t	stat_reg	= { .u = 0 };
 800c5a2:	2300      	movs	r3, #0
 800c5a4:	713b      	strb	r3, [r7, #4]

	// Check for init
	_25LCXXXX_ASSERT( true == gb_is_init );
 800c5a6:	4b1a      	ldr	r3, [pc, #104]	; (800c610 <_25lcxxxx_deinit+0x78>)
 800c5a8:	781b      	ldrb	r3, [r3, #0]
 800c5aa:	f083 0301 	eor.w	r3, r3, #1
 800c5ae:	b2db      	uxtb	r3, r3
 800c5b0:	2b00      	cmp	r3, #0
 800c5b2:	d001      	beq.n	800c5b8 <_25lcxxxx_deinit+0x20>
 800c5b4:	f008 fd1a 	bl	8014fec <project_config_assert_fail>

	// Disable write latch
	status |= _25lcxxxx_write_disable();
 800c5b8:	f000 f93a 	bl	800c830 <_25lcxxxx_write_disable>
 800c5bc:	4603      	mov	r3, r0
 800c5be:	461a      	mov	r2, r3
 800c5c0:	79fb      	ldrb	r3, [r7, #7]
 800c5c2:	4313      	orrs	r3, r2
 800c5c4:	71fb      	strb	r3, [r7, #7]

	// Verify enable write latch
	status |= _25lcxxxx_read_status( &stat_reg );
 800c5c6:	1d3b      	adds	r3, r7, #4
 800c5c8:	4618      	mov	r0, r3
 800c5ca:	f000 f945 	bl	800c858 <_25lcxxxx_read_status>
 800c5ce:	4603      	mov	r3, r0
 800c5d0:	461a      	mov	r2, r3
 800c5d2:	79fb      	ldrb	r3, [r7, #7]
 800c5d4:	4313      	orrs	r3, r2
 800c5d6:	71fb      	strb	r3, [r7, #7]

	if (	( e25LCXXXX_OK == status )
 800c5d8:	79fb      	ldrb	r3, [r7, #7]
 800c5da:	2b00      	cmp	r3, #0
 800c5dc:	d108      	bne.n	800c5f0 <_25lcxxxx_deinit+0x58>
		&& 	( false == stat_reg.b.wel ))
 800c5de:	793b      	ldrb	r3, [r7, #4]
 800c5e0:	f003 0302 	and.w	r3, r3, #2
 800c5e4:	b2db      	uxtb	r3, r3
 800c5e6:	2b00      	cmp	r3, #0
 800c5e8:	d102      	bne.n	800c5f0 <_25lcxxxx_deinit+0x58>
	{
		gb_is_init = false;
 800c5ea:	4b09      	ldr	r3, [pc, #36]	; (800c610 <_25lcxxxx_deinit+0x78>)
 800c5ec:	2200      	movs	r2, #0
 800c5ee:	701a      	strb	r2, [r3, #0]
	}

	_25LCXXXX_ASSERT( e25LCXXXX_OK == status );
 800c5f0:	79fb      	ldrb	r3, [r7, #7]
 800c5f2:	2b00      	cmp	r3, #0
 800c5f4:	d001      	beq.n	800c5fa <_25lcxxxx_deinit+0x62>
 800c5f6:	f008 fcf9 	bl	8014fec <project_config_assert_fail>
	_25LCXXXX_ASSERT( false == gb_is_init );
 800c5fa:	4b05      	ldr	r3, [pc, #20]	; (800c610 <_25lcxxxx_deinit+0x78>)
 800c5fc:	781b      	ldrb	r3, [r3, #0]
 800c5fe:	2b00      	cmp	r3, #0
 800c600:	d001      	beq.n	800c606 <_25lcxxxx_deinit+0x6e>
 800c602:	f008 fcf3 	bl	8014fec <project_config_assert_fail>

	return status;
 800c606:	79fb      	ldrb	r3, [r7, #7]
}
 800c608:	4618      	mov	r0, r3
 800c60a:	3708      	adds	r7, #8
 800c60c:	46bd      	mov	sp, r7
 800c60e:	bd80      	pop	{r7, pc}
 800c610:	20004cb1 	.word	0x20004cb1

0800c614 <_25lcxxxx_write>:
* @param[in]	p_data	- Pointer to write data
* @return 		status 	- Status of operation
*/
////////////////////////////////////////////////////////////////////////////////
_25lcxxxx_status_t _25lcxxxx_write(const uint32_t addr, const uint32_t size, const uint8_t * const p_data)
{
 800c614:	b580      	push	{r7, lr}
 800c616:	b08c      	sub	sp, #48	; 0x30
 800c618:	af00      	add	r7, sp, #0
 800c61a:	60f8      	str	r0, [r7, #12]
 800c61c:	60b9      	str	r1, [r7, #8]
 800c61e:	607a      	str	r2, [r7, #4]
	_25lcxxxx_status_t 		status				= e25LCXXXX_OK;
 800c620:	2300      	movs	r3, #0
 800c622:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint32_t				working_addr		= addr;
 800c626:	68fb      	ldr	r3, [r7, #12]
 800c628:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t				working_size		= size;
 800c62a:	68bb      	ldr	r3, [r7, #8]
 800c62c:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t				bytes_to_transfer	= 0UL;
 800c62e:	2300      	movs	r3, #0
 800c630:	61bb      	str	r3, [r7, #24]
	uint32_t				data_offset			= 0UL;
 800c632:	2300      	movs	r3, #0
 800c634:	623b      	str	r3, [r7, #32]

	// Check for init
	_25LCXXXX_ASSERT( true == gb_is_init );
 800c636:	4b2c      	ldr	r3, [pc, #176]	; (800c6e8 <_25lcxxxx_write+0xd4>)
 800c638:	781b      	ldrb	r3, [r3, #0]
 800c63a:	f083 0301 	eor.w	r3, r3, #1
 800c63e:	b2db      	uxtb	r3, r3
 800c640:	2b00      	cmp	r3, #0
 800c642:	d001      	beq.n	800c648 <_25lcxxxx_write+0x34>
 800c644:	f008 fcd2 	bl	8014fec <project_config_assert_fail>

	// Invalid inputs
	_25LCXXXX_ASSERT( size > 0 );
 800c648:	68bb      	ldr	r3, [r7, #8]
 800c64a:	2b00      	cmp	r3, #0
 800c64c:	d101      	bne.n	800c652 <_25lcxxxx_write+0x3e>
 800c64e:	f008 fccd 	bl	8014fec <project_config_assert_fail>
	_25LCXXXX_ASSERT(( addr + size - 1 ) <= _25LCXXXX_MAX_ADDR );
 800c652:	68fa      	ldr	r2, [r7, #12]
 800c654:	68bb      	ldr	r3, [r7, #8]
 800c656:	4413      	add	r3, r2
 800c658:	3b01      	subs	r3, #1
 800c65a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c65e:	d301      	bcc.n	800c664 <_25lcxxxx_write+0x50>
 800c660:	f008 fcc4 	bl	8014fec <project_config_assert_fail>

	// Calculate how many sectors takes write request
	const uint32_t num_of_sectors = _25lcxxxx_calc_num_of_sectors( addr, size );
 800c664:	68b9      	ldr	r1, [r7, #8]
 800c666:	68f8      	ldr	r0, [r7, #12]
 800c668:	f000 f916 	bl	800c898 <_25lcxxxx_calc_num_of_sectors>
 800c66c:	6178      	str	r0, [r7, #20]

	// Write to all sectors
	for (uint32_t i = 0; i < num_of_sectors; i++ )
 800c66e:	2300      	movs	r3, #0
 800c670:	61fb      	str	r3, [r7, #28]
 800c672:	e028      	b.n	800c6c6 <_25lcxxxx_write+0xb2>
	{
		// Calculate bytes to transfer till end of page
		bytes_to_transfer = _25lcxxxx_calc_transfer_size( working_addr, working_size );
 800c674:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c676:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c678:	f000 f92e 	bl	800c8d8 <_25lcxxxx_calc_transfer_size>
 800c67c:	61b8      	str	r0, [r7, #24]

		// Send write command
		status = _25lcxxxx_write_command( working_addr );
 800c67e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c680:	f000 f968 	bl	800c954 <_25lcxxxx_write_command>
 800c684:	4603      	mov	r3, r0
 800c686:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

		if ( e25LCXXXX_OK == status )
 800c68a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c68e:	2b00      	cmp	r3, #0
 800c690:	d11e      	bne.n	800c6d0 <_25lcxxxx_write+0xbc>
		{
			// Send data payload
			status = _25lcxxxx_if_transmit( ( p_data + data_offset ), bytes_to_transfer, eSPI_CS_HIGH_ON_EXIT );
 800c692:	687a      	ldr	r2, [r7, #4]
 800c694:	6a3b      	ldr	r3, [r7, #32]
 800c696:	4413      	add	r3, r2
 800c698:	2202      	movs	r2, #2
 800c69a:	69b9      	ldr	r1, [r7, #24]
 800c69c:	4618      	mov	r0, r3
 800c69e:	f000 fa2f 	bl	800cb00 <_25lcxxxx_if_transmit>
 800c6a2:	4603      	mov	r3, r0
 800c6a4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

			// Increment address & written data offset
			data_offset += bytes_to_transfer;
 800c6a8:	6a3a      	ldr	r2, [r7, #32]
 800c6aa:	69bb      	ldr	r3, [r7, #24]
 800c6ac:	4413      	add	r3, r2
 800c6ae:	623b      	str	r3, [r7, #32]
			working_addr += bytes_to_transfer;
 800c6b0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c6b2:	69bb      	ldr	r3, [r7, #24]
 800c6b4:	4413      	add	r3, r2
 800c6b6:	62bb      	str	r3, [r7, #40]	; 0x28
			working_size -= bytes_to_transfer;
 800c6b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c6ba:	69bb      	ldr	r3, [r7, #24]
 800c6bc:	1ad3      	subs	r3, r2, r3
 800c6be:	627b      	str	r3, [r7, #36]	; 0x24
	for (uint32_t i = 0; i < num_of_sectors; i++ )
 800c6c0:	69fb      	ldr	r3, [r7, #28]
 800c6c2:	3301      	adds	r3, #1
 800c6c4:	61fb      	str	r3, [r7, #28]
 800c6c6:	69fa      	ldr	r2, [r7, #28]
 800c6c8:	697b      	ldr	r3, [r7, #20]
 800c6ca:	429a      	cmp	r2, r3
 800c6cc:	d3d2      	bcc.n	800c674 <_25lcxxxx_write+0x60>
 800c6ce:	e000      	b.n	800c6d2 <_25lcxxxx_write+0xbe>
		}
		else
		{
			break;
 800c6d0:	bf00      	nop
		}
	}

	// All bytes shall be transfered
	_25LCXXXX_ASSERT( 0UL == working_size );
 800c6d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6d4:	2b00      	cmp	r3, #0
 800c6d6:	d001      	beq.n	800c6dc <_25lcxxxx_write+0xc8>
 800c6d8:	f008 fc88 	bl	8014fec <project_config_assert_fail>

	return status;
 800c6dc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800c6e0:	4618      	mov	r0, r3
 800c6e2:	3730      	adds	r7, #48	; 0x30
 800c6e4:	46bd      	mov	sp, r7
 800c6e6:	bd80      	pop	{r7, pc}
 800c6e8:	20004cb1 	.word	0x20004cb1

0800c6ec <_25lcxxxx_erase>:
* @param[in]	size	- Size of bytes to write
* @return 		status 	- Status of operation
*/
////////////////////////////////////////////////////////////////////////////////
_25lcxxxx_status_t _25lcxxxx_erase(const uint32_t addr, const uint32_t size)
{
 800c6ec:	b580      	push	{r7, lr}
 800c6ee:	b08c      	sub	sp, #48	; 0x30
 800c6f0:	af00      	add	r7, sp, #0
 800c6f2:	6078      	str	r0, [r7, #4]
 800c6f4:	6039      	str	r1, [r7, #0]
	_25lcxxxx_status_t 	status		 	= e25LCXXXX_OK;
 800c6f6:	2300      	movs	r3, #0
 800c6f8:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	uint8_t				erase_data[32] 	= { 0 };
 800c6fc:	2300      	movs	r3, #0
 800c6fe:	60fb      	str	r3, [r7, #12]
 800c700:	f107 0310 	add.w	r3, r7, #16
 800c704:	2200      	movs	r2, #0
 800c706:	601a      	str	r2, [r3, #0]
 800c708:	605a      	str	r2, [r3, #4]
 800c70a:	609a      	str	r2, [r3, #8]
 800c70c:	60da      	str	r2, [r3, #12]
 800c70e:	611a      	str	r2, [r3, #16]
 800c710:	615a      	str	r2, [r3, #20]
 800c712:	619a      	str	r2, [r3, #24]

	_25LCXXXX_ASSERT( true == gb_is_init );
 800c714:	4b19      	ldr	r3, [pc, #100]	; (800c77c <_25lcxxxx_erase+0x90>)
 800c716:	781b      	ldrb	r3, [r3, #0]
 800c718:	f083 0301 	eor.w	r3, r3, #1
 800c71c:	b2db      	uxtb	r3, r3
 800c71e:	2b00      	cmp	r3, #0
 800c720:	d001      	beq.n	800c726 <_25lcxxxx_erase+0x3a>
 800c722:	f008 fc63 	bl	8014fec <project_config_assert_fail>
	_25LCXXXX_ASSERT( size < 32 );
 800c726:	683b      	ldr	r3, [r7, #0]
 800c728:	2b1f      	cmp	r3, #31
 800c72a:	d901      	bls.n	800c730 <_25lcxxxx_erase+0x44>
 800c72c:	f008 fc5e 	bl	8014fec <project_config_assert_fail>

	// Prepare erase data
	for ( uint8_t i = 0; i < 32; i++ )
 800c730:	2300      	movs	r3, #0
 800c732:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800c736:	e00c      	b.n	800c752 <_25lcxxxx_erase+0x66>
	{
		erase_data[i] = _25LCXXX_ERASE_VALUE;
 800c738:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c73c:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800c740:	4413      	add	r3, r2
 800c742:	22ff      	movs	r2, #255	; 0xff
 800c744:	f803 2c24 	strb.w	r2, [r3, #-36]
	for ( uint8_t i = 0; i < 32; i++ )
 800c748:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c74c:	3301      	adds	r3, #1
 800c74e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800c752:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c756:	2b1f      	cmp	r3, #31
 800c758:	d9ee      	bls.n	800c738 <_25lcxxxx_erase+0x4c>
	}

	// Erase memory
	status = _25lcxxxx_write( addr, size, (uint8_t*) erase_data );
 800c75a:	f107 030c 	add.w	r3, r7, #12
 800c75e:	461a      	mov	r2, r3
 800c760:	6839      	ldr	r1, [r7, #0]
 800c762:	6878      	ldr	r0, [r7, #4]
 800c764:	f7ff ff56 	bl	800c614 <_25lcxxxx_write>
 800c768:	4603      	mov	r3, r0
 800c76a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

	return status;
 800c76e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
}
 800c772:	4618      	mov	r0, r3
 800c774:	3730      	adds	r7, #48	; 0x30
 800c776:	46bd      	mov	sp, r7
 800c778:	bd80      	pop	{r7, pc}
 800c77a:	bf00      	nop
 800c77c:	20004cb1 	.word	0x20004cb1

0800c780 <_25lcxxxx_read>:
* @param[out]	p_data	- Pointer to read data
* @return 		status 	- Status of operation
*/
////////////////////////////////////////////////////////////////////////////////
_25lcxxxx_status_t _25lcxxxx_read(const uint32_t addr, const uint32_t size, uint8_t * const p_data)
{
 800c780:	b580      	push	{r7, lr}
 800c782:	b086      	sub	sp, #24
 800c784:	af00      	add	r7, sp, #0
 800c786:	60f8      	str	r0, [r7, #12]
 800c788:	60b9      	str	r1, [r7, #8]
 800c78a:	607a      	str	r2, [r7, #4]
	_25lcxxxx_status_t 	status 		= e25LCXXXX_OK;
 800c78c:	2300      	movs	r3, #0
 800c78e:	75fb      	strb	r3, [r7, #23]
	bool				wip_flag	= true;
 800c790:	2301      	movs	r3, #1
 800c792:	75bb      	strb	r3, [r7, #22]

	// Check for init
	_25LCXXXX_ASSERT( true == gb_is_init );
 800c794:	4b1b      	ldr	r3, [pc, #108]	; (800c804 <_25lcxxxx_read+0x84>)
 800c796:	781b      	ldrb	r3, [r3, #0]
 800c798:	f083 0301 	eor.w	r3, r3, #1
 800c79c:	b2db      	uxtb	r3, r3
 800c79e:	2b00      	cmp	r3, #0
 800c7a0:	d001      	beq.n	800c7a6 <_25lcxxxx_read+0x26>
 800c7a2:	f008 fc23 	bl	8014fec <project_config_assert_fail>

	// Invalid inputs
	_25LCXXXX_ASSERT( size > 0 );
 800c7a6:	68bb      	ldr	r3, [r7, #8]
 800c7a8:	2b00      	cmp	r3, #0
 800c7aa:	d101      	bne.n	800c7b0 <_25lcxxxx_read+0x30>
 800c7ac:	f008 fc1e 	bl	8014fec <project_config_assert_fail>
	_25LCXXXX_ASSERT(( addr + size - 1 ) <= _25LCXXXX_MAX_ADDR );
 800c7b0:	68fa      	ldr	r2, [r7, #12]
 800c7b2:	68bb      	ldr	r3, [r7, #8]
 800c7b4:	4413      	add	r3, r2
 800c7b6:	3b01      	subs	r3, #1
 800c7b8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c7bc:	d301      	bcc.n	800c7c2 <_25lcxxxx_read+0x42>
 800c7be:	f008 fc15 	bl	8014fec <project_config_assert_fail>

	// Get WIP flag
	// NOTE: Reading not possible when write in progress!
	wip_flag = _25lcxxxx_read_wip_flag();
 800c7c2:	f000 f90b 	bl	800c9dc <_25lcxxxx_read_wip_flag>
 800c7c6:	4603      	mov	r3, r0
 800c7c8:	75bb      	strb	r3, [r7, #22]

	// Check if write in progress
	if ( false == wip_flag )
 800c7ca:	7dbb      	ldrb	r3, [r7, #22]
 800c7cc:	f083 0301 	eor.w	r3, r3, #1
 800c7d0:	b2db      	uxtb	r3, r3
 800c7d2:	2b00      	cmp	r3, #0
 800c7d4:	d00f      	beq.n	800c7f6 <_25lcxxxx_read+0x76>
	{
		// Send read command
		status = _25lcxxxx_read_command( addr );
 800c7d6:	68f8      	ldr	r0, [r7, #12]
 800c7d8:	f000 f8e3 	bl	800c9a2 <_25lcxxxx_read_command>
 800c7dc:	4603      	mov	r3, r0
 800c7de:	75fb      	strb	r3, [r7, #23]

		// Send data payload
		status |= _25lcxxxx_if_receive( p_data, size, eSPI_CS_HIGH_ON_EXIT );
 800c7e0:	2202      	movs	r2, #2
 800c7e2:	68b9      	ldr	r1, [r7, #8]
 800c7e4:	6878      	ldr	r0, [r7, #4]
 800c7e6:	f000 f9a4 	bl	800cb32 <_25lcxxxx_if_receive>
 800c7ea:	4603      	mov	r3, r0
 800c7ec:	461a      	mov	r2, r3
 800c7ee:	7dfb      	ldrb	r3, [r7, #23]
 800c7f0:	4313      	orrs	r3, r2
 800c7f2:	75fb      	strb	r3, [r7, #23]
 800c7f4:	e001      	b.n	800c7fa <_25lcxxxx_read+0x7a>
	}
	else
	{
		status = e25LCXXXX_ERROR;
 800c7f6:	2301      	movs	r3, #1
 800c7f8:	75fb      	strb	r3, [r7, #23]
	}

	return status;
 800c7fa:	7dfb      	ldrb	r3, [r7, #23]
}
 800c7fc:	4618      	mov	r0, r3
 800c7fe:	3718      	adds	r7, #24
 800c800:	46bd      	mov	sp, r7
 800c802:	bd80      	pop	{r7, pc}
 800c804:	20004cb1 	.word	0x20004cb1

0800c808 <_25lcxxxx_write_enable>:
*
* @return 		status 	- Status of operation
*/
////////////////////////////////////////////////////////////////////////////////
static _25lcxxxx_status_t _25lcxxxx_write_enable(void)
{
 800c808:	b580      	push	{r7, lr}
 800c80a:	b082      	sub	sp, #8
 800c80c:	af00      	add	r7, sp, #0
	_25lcxxxx_status_t 		status 	= e25LCXXXX_OK;
 800c80e:	2300      	movs	r3, #0
 800c810:	71fb      	strb	r3, [r7, #7]
	const _25lcxxxx_isa_t	cmd		= e25LCXXXX_ISA_WREN;
 800c812:	2306      	movs	r3, #6
 800c814:	71bb      	strb	r3, [r7, #6]

	status = _25lcxxxx_if_transmit( &cmd, 1, ( eSPI_CS_HIGH_ON_EXIT | eSPI_CS_LOW_ON_ENTRY ));
 800c816:	1dbb      	adds	r3, r7, #6
 800c818:	2203      	movs	r2, #3
 800c81a:	2101      	movs	r1, #1
 800c81c:	4618      	mov	r0, r3
 800c81e:	f000 f96f 	bl	800cb00 <_25lcxxxx_if_transmit>
 800c822:	4603      	mov	r3, r0
 800c824:	71fb      	strb	r3, [r7, #7]

	return status;
 800c826:	79fb      	ldrb	r3, [r7, #7]
}
 800c828:	4618      	mov	r0, r3
 800c82a:	3708      	adds	r7, #8
 800c82c:	46bd      	mov	sp, r7
 800c82e:	bd80      	pop	{r7, pc}

0800c830 <_25lcxxxx_write_disable>:
*
* @return 		status 	- Status of operation
*/
////////////////////////////////////////////////////////////////////////////////
static _25lcxxxx_status_t _25lcxxxx_write_disable(void)
{
 800c830:	b580      	push	{r7, lr}
 800c832:	b082      	sub	sp, #8
 800c834:	af00      	add	r7, sp, #0
	_25lcxxxx_status_t 	status 	= e25LCXXXX_OK;
 800c836:	2300      	movs	r3, #0
 800c838:	71fb      	strb	r3, [r7, #7]
	const _25lcxxxx_isa_t		cmd		= e25LCXXXX_ISA_WRDI;
 800c83a:	2304      	movs	r3, #4
 800c83c:	71bb      	strb	r3, [r7, #6]

	status = _25lcxxxx_if_transmit( &cmd, 1, ( eSPI_CS_HIGH_ON_EXIT | eSPI_CS_LOW_ON_ENTRY ));
 800c83e:	1dbb      	adds	r3, r7, #6
 800c840:	2203      	movs	r2, #3
 800c842:	2101      	movs	r1, #1
 800c844:	4618      	mov	r0, r3
 800c846:	f000 f95b 	bl	800cb00 <_25lcxxxx_if_transmit>
 800c84a:	4603      	mov	r3, r0
 800c84c:	71fb      	strb	r3, [r7, #7]

	return status;
 800c84e:	79fb      	ldrb	r3, [r7, #7]
}
 800c850:	4618      	mov	r0, r3
 800c852:	3708      	adds	r7, #8
 800c854:	46bd      	mov	sp, r7
 800c856:	bd80      	pop	{r7, pc}

0800c858 <_25lcxxxx_read_status>:
* @param[out]	p_status_reg	- Pointer to status register
* @return 		status 			- Status of operation
*/
////////////////////////////////////////////////////////////////////////////////
static _25lcxxxx_status_t _25lcxxxx_read_status(_25lcxxxx_status_reg_t * const p_status_reg)
{
 800c858:	b580      	push	{r7, lr}
 800c85a:	b084      	sub	sp, #16
 800c85c:	af00      	add	r7, sp, #0
 800c85e:	6078      	str	r0, [r7, #4]
	_25lcxxxx_status_t 	status 	= e25LCXXXX_OK;
 800c860:	2300      	movs	r3, #0
 800c862:	73fb      	strb	r3, [r7, #15]
	const _25lcxxxx_isa_t		cmd		= e25LCXXXX_ISA_RDST;
 800c864:	2305      	movs	r3, #5
 800c866:	73bb      	strb	r3, [r7, #14]

	status = _25lcxxxx_if_transmit( &cmd, 1, eSPI_CS_LOW_ON_ENTRY );
 800c868:	f107 030e 	add.w	r3, r7, #14
 800c86c:	2201      	movs	r2, #1
 800c86e:	2101      	movs	r1, #1
 800c870:	4618      	mov	r0, r3
 800c872:	f000 f945 	bl	800cb00 <_25lcxxxx_if_transmit>
 800c876:	4603      	mov	r3, r0
 800c878:	73fb      	strb	r3, [r7, #15]
	status |= _25lcxxxx_if_receive((uint8_t*) p_status_reg, 1, eSPI_CS_HIGH_ON_EXIT );
 800c87a:	2202      	movs	r2, #2
 800c87c:	2101      	movs	r1, #1
 800c87e:	6878      	ldr	r0, [r7, #4]
 800c880:	f000 f957 	bl	800cb32 <_25lcxxxx_if_receive>
 800c884:	4603      	mov	r3, r0
 800c886:	461a      	mov	r2, r3
 800c888:	7bfb      	ldrb	r3, [r7, #15]
 800c88a:	4313      	orrs	r3, r2
 800c88c:	73fb      	strb	r3, [r7, #15]

	return status;
 800c88e:	7bfb      	ldrb	r3, [r7, #15]
}
 800c890:	4618      	mov	r0, r3
 800c892:	3710      	adds	r7, #16
 800c894:	46bd      	mov	sp, r7
 800c896:	bd80      	pop	{r7, pc}

0800c898 <_25lcxxxx_calc_num_of_sectors>:
* @param[in]	size		- Size of area
* @return 		sector_num	- Number of sectors in that area
*/
////////////////////////////////////////////////////////////////////////////////
static uint32_t _25lcxxxx_calc_num_of_sectors(const uint32_t addr, const uint32_t size)
{
 800c898:	b480      	push	{r7}
 800c89a:	b087      	sub	sp, #28
 800c89c:	af00      	add	r7, sp, #0
 800c89e:	6078      	str	r0, [r7, #4]
 800c8a0:	6039      	str	r1, [r7, #0]
	uint32_t sector_num = 0UL;
 800c8a2:	2300      	movs	r3, #0
 800c8a4:	617b      	str	r3, [r7, #20]
	uint32_t k_a 		= 0UL;
 800c8a6:	2300      	movs	r3, #0
 800c8a8:	613b      	str	r3, [r7, #16]
	uint32_t k_s		= 0UL;
 800c8aa:	2300      	movs	r3, #0
 800c8ac:	60fb      	str	r3, [r7, #12]

	// Calculate address & size factors of sector size
	k_a = (uint32_t) ( addr / _25LCXXXX_CFG_PAGE_SIZE_BYTE );
 800c8ae:	687b      	ldr	r3, [r7, #4]
 800c8b0:	095b      	lsrs	r3, r3, #5
 800c8b2:	613b      	str	r3, [r7, #16]
	k_s = (uint32_t) (( addr + size - 1UL ) / _25LCXXXX_CFG_PAGE_SIZE_BYTE );
 800c8b4:	687a      	ldr	r2, [r7, #4]
 800c8b6:	683b      	ldr	r3, [r7, #0]
 800c8b8:	4413      	add	r3, r2
 800c8ba:	3b01      	subs	r3, #1
 800c8bc:	095b      	lsrs	r3, r3, #5
 800c8be:	60fb      	str	r3, [r7, #12]

	// Based on address & size factors number of sectors can be calculated
	sector_num = ( k_s - k_a ) + 1UL;
 800c8c0:	68fa      	ldr	r2, [r7, #12]
 800c8c2:	693b      	ldr	r3, [r7, #16]
 800c8c4:	1ad3      	subs	r3, r2, r3
 800c8c6:	3301      	adds	r3, #1
 800c8c8:	617b      	str	r3, [r7, #20]

	return sector_num;
 800c8ca:	697b      	ldr	r3, [r7, #20]
}
 800c8cc:	4618      	mov	r0, r3
 800c8ce:	371c      	adds	r7, #28
 800c8d0:	46bd      	mov	sp, r7
 800c8d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8d6:	4770      	bx	lr

0800c8d8 <_25lcxxxx_calc_transfer_size>:
* @param[in]	size	- Size of bytes
* @return 		status 	- Status of operation
*/
////////////////////////////////////////////////////////////////////////////////
static uint32_t _25lcxxxx_calc_transfer_size(const uint32_t addr, const uint32_t size)
{
 800c8d8:	b480      	push	{r7}
 800c8da:	b085      	sub	sp, #20
 800c8dc:	af00      	add	r7, sp, #0
 800c8de:	6078      	str	r0, [r7, #4]
 800c8e0:	6039      	str	r1, [r7, #0]
	uint32_t bytes_to_transfer 	= 0UL;
 800c8e2:	2300      	movs	r3, #0
 800c8e4:	60fb      	str	r3, [r7, #12]
	uint32_t bytes_in_sector 	= 0UL;
 800c8e6:	2300      	movs	r3, #0
 800c8e8:	60bb      	str	r3, [r7, #8]

	// Calculate how many bytes till page boundary
	bytes_in_sector = _25LCXXXX_CFG_PAGE_SIZE_BYTE - ( addr % _25LCXXXX_CFG_PAGE_SIZE_BYTE );
 800c8ea:	687b      	ldr	r3, [r7, #4]
 800c8ec:	f003 031f 	and.w	r3, r3, #31
 800c8f0:	f1c3 0320 	rsb	r3, r3, #32
 800c8f4:	60bb      	str	r3, [r7, #8]

	// Bytes will not pass page boundary
	if ( size <= bytes_in_sector )
 800c8f6:	683a      	ldr	r2, [r7, #0]
 800c8f8:	68bb      	ldr	r3, [r7, #8]
 800c8fa:	429a      	cmp	r2, r3
 800c8fc:	d802      	bhi.n	800c904 <_25lcxxxx_calc_transfer_size+0x2c>
	{
		bytes_to_transfer = size;
 800c8fe:	683b      	ldr	r3, [r7, #0]
 800c900:	60fb      	str	r3, [r7, #12]
 800c902:	e001      	b.n	800c908 <_25lcxxxx_calc_transfer_size+0x30>
	}

	// Bytes will pass page boundary - limit to boundary
	else
	{
		bytes_to_transfer = bytes_in_sector;
 800c904:	68bb      	ldr	r3, [r7, #8]
 800c906:	60fb      	str	r3, [r7, #12]
	}

	return bytes_to_transfer;
 800c908:	68fb      	ldr	r3, [r7, #12]
}
 800c90a:	4618      	mov	r0, r3
 800c90c:	3714      	adds	r7, #20
 800c90e:	46bd      	mov	sp, r7
 800c910:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c914:	4770      	bx	lr

0800c916 <_25lcxxxx_assemble_rw_cmd>:
* @param[in]	addr		- Start address of read or write
* @return 		void
*/
////////////////////////////////////////////////////////////////////////////////
static void _25lcxxxx_assemble_rw_cmd(_25lcxxxx_rw_cmd_t * const p_frame, const _25lcxxxx_isa_t rw_cmd, const uint32_t addr)
{
 800c916:	b580      	push	{r7, lr}
 800c918:	b084      	sub	sp, #16
 800c91a:	af00      	add	r7, sp, #0
 800c91c:	60f8      	str	r0, [r7, #12]
 800c91e:	460b      	mov	r3, r1
 800c920:	607a      	str	r2, [r7, #4]
 800c922:	72fb      	strb	r3, [r7, #11]
	_25LCXXXX_ASSERT( NULL != p_frame );
 800c924:	68fb      	ldr	r3, [r7, #12]
 800c926:	2b00      	cmp	r3, #0
 800c928:	d101      	bne.n	800c92e <_25lcxxxx_assemble_rw_cmd+0x18>
 800c92a:	f008 fb5f 	bl	8014fec <project_config_assert_fail>

	p_frame->u 				= 0UL;
 800c92e:	68fb      	ldr	r3, [r7, #12]
 800c930:	2200      	movs	r2, #0
 800c932:	601a      	str	r2, [r3, #0]
	p_frame->field.cmd 		= rw_cmd;
 800c934:	68fb      	ldr	r3, [r7, #12]
 800c936:	7afa      	ldrb	r2, [r7, #11]
 800c938:	701a      	strb	r2, [r3, #0]

	#if ( _25LCXXXX_CFG_ADDR_BIT_NUM < 10 )
		p_frame->field.addr[0]	= ( addr 			& 0xFFU );

	#elif ( _25LCXXXX_CFG_ADDR_BIT_NUM < 16 )
		p_frame->field.addr[0]	= (( addr >> 8U ) 	& 0xFFU );
 800c93a:	687b      	ldr	r3, [r7, #4]
 800c93c:	0a1b      	lsrs	r3, r3, #8
 800c93e:	b2da      	uxtb	r2, r3
 800c940:	68fb      	ldr	r3, [r7, #12]
 800c942:	705a      	strb	r2, [r3, #1]
		p_frame->field.addr[1]	= ( addr 			& 0xFFU );
 800c944:	687b      	ldr	r3, [r7, #4]
 800c946:	b2da      	uxtb	r2, r3
 800c948:	68fb      	ldr	r3, [r7, #12]
 800c94a:	709a      	strb	r2, [r3, #2]
		p_frame->field.addr[0]	= (( addr >> 16U ) 	& 0xFFU );
		p_frame->field.addr[1]	= (( addr >> 8U ) 	& 0xFFU );
		p_frame->field.addr[2]	= ( addr 			& 0xFFU );

	#endif
}
 800c94c:	bf00      	nop
 800c94e:	3710      	adds	r7, #16
 800c950:	46bd      	mov	sp, r7
 800c952:	bd80      	pop	{r7, pc}

0800c954 <_25lcxxxx_write_command>:
* @param[in]	addr		- Start address of write transfer
* @return 		status 		- Status of operation
*/
////////////////////////////////////////////////////////////////////////////////
static _25lcxxxx_status_t _25lcxxxx_write_command(const uint32_t addr)
{
 800c954:	b580      	push	{r7, lr}
 800c956:	b084      	sub	sp, #16
 800c958:	af00      	add	r7, sp, #0
 800c95a:	6078      	str	r0, [r7, #4]
	_25lcxxxx_status_t 	status 	= e25LCXXXX_OK;
 800c95c:	2300      	movs	r3, #0
 800c95e:	73fb      	strb	r3, [r7, #15]
	_25lcxxxx_rw_cmd_t	cmd		= { .u = 0 };
 800c960:	2300      	movs	r3, #0
 800c962:	60bb      	str	r3, [r7, #8]

	// Wait for previous write process
	status = _25lcxxxx_wait_for_write_process( _25LCXXXX_WAIT_WRITE_TIMEOUT_MS );
 800c964:	2005      	movs	r0, #5
 800c966:	f000 f871 	bl	800ca4c <_25lcxxxx_wait_for_write_process>
 800c96a:	4603      	mov	r3, r0
 800c96c:	73fb      	strb	r3, [r7, #15]

	if ( e25LCXXXX_OK == status )
 800c96e:	7bfb      	ldrb	r3, [r7, #15]
 800c970:	2b00      	cmp	r3, #0
 800c972:	d111      	bne.n	800c998 <_25lcxxxx_write_command+0x44>
	{
		// Enable write enable latch
		_25lcxxxx_write_enable();
 800c974:	f7ff ff48 	bl	800c808 <_25lcxxxx_write_enable>

		// Assemble command
		_25lcxxxx_assemble_rw_cmd( &cmd, e25LCXXXX_ISA_WRITE, addr );
 800c978:	f107 0308 	add.w	r3, r7, #8
 800c97c:	687a      	ldr	r2, [r7, #4]
 800c97e:	2102      	movs	r1, #2
 800c980:	4618      	mov	r0, r3
 800c982:	f7ff ffc8 	bl	800c916 <_25lcxxxx_assemble_rw_cmd>
			}

			status = _25lcxxxx_if_transmit((uint8_t*) &cmd.u, 2, eSPI_CS_LOW_ON_ENTRY );

		#elif ( _25LCXXXX_CFG_ADDR_BIT_NUM <= 16 )
			status = _25lcxxxx_if_transmit((uint8_t*) &cmd.u, 3, eSPI_CS_LOW_ON_ENTRY );
 800c986:	f107 0308 	add.w	r3, r7, #8
 800c98a:	2201      	movs	r2, #1
 800c98c:	2103      	movs	r1, #3
 800c98e:	4618      	mov	r0, r3
 800c990:	f000 f8b6 	bl	800cb00 <_25lcxxxx_if_transmit>
 800c994:	4603      	mov	r3, r0
 800c996:	73fb      	strb	r3, [r7, #15]
			status = _25lcxxxx_if_transmit((uint8_t*) &cmd.u, 4, eSPI_CS_LOW_ON_ENTRY );

		#endif
	}

	return status;
 800c998:	7bfb      	ldrb	r3, [r7, #15]
}
 800c99a:	4618      	mov	r0, r3
 800c99c:	3710      	adds	r7, #16
 800c99e:	46bd      	mov	sp, r7
 800c9a0:	bd80      	pop	{r7, pc}

0800c9a2 <_25lcxxxx_read_command>:
* @param[in]	addr		- Start address of write transfer
* @return 		status 		- Status of operation
*/
////////////////////////////////////////////////////////////////////////////////
static _25lcxxxx_status_t _25lcxxxx_read_command(const uint32_t addr)
{
 800c9a2:	b580      	push	{r7, lr}
 800c9a4:	b084      	sub	sp, #16
 800c9a6:	af00      	add	r7, sp, #0
 800c9a8:	6078      	str	r0, [r7, #4]
	_25lcxxxx_status_t 		status 	= e25LCXXXX_OK;
 800c9aa:	2300      	movs	r3, #0
 800c9ac:	73fb      	strb	r3, [r7, #15]
	_25lcxxxx_rw_cmd_t		cmd		= { .u = 0 };
 800c9ae:	2300      	movs	r3, #0
 800c9b0:	60bb      	str	r3, [r7, #8]

	// Assemble command
	_25lcxxxx_assemble_rw_cmd( &cmd, e25LCXXXX_ISA_READ, addr );
 800c9b2:	f107 0308 	add.w	r3, r7, #8
 800c9b6:	687a      	ldr	r2, [r7, #4]
 800c9b8:	2103      	movs	r1, #3
 800c9ba:	4618      	mov	r0, r3
 800c9bc:	f7ff ffab 	bl	800c916 <_25lcxxxx_assemble_rw_cmd>
		}

		status = _25lcxxxx_if_transmit((uint8_t*) &cmd.u, 2, eSPI_CS_LOW_ON_ENTRY );

	#elif ( _25LCXXXX_CFG_ADDR_BIT_NUM <= 16 )
		status = _25lcxxxx_if_transmit((uint8_t*) &cmd.u, 3, eSPI_CS_LOW_ON_ENTRY );
 800c9c0:	f107 0308 	add.w	r3, r7, #8
 800c9c4:	2201      	movs	r2, #1
 800c9c6:	2103      	movs	r1, #3
 800c9c8:	4618      	mov	r0, r3
 800c9ca:	f000 f899 	bl	800cb00 <_25lcxxxx_if_transmit>
 800c9ce:	4603      	mov	r3, r0
 800c9d0:	73fb      	strb	r3, [r7, #15]
	#elif ( _25LCXXXX_CFG_ADDR_BIT_NUM <= 24 )
		status = _25lcxxxx_if_transmit((uint8_t*) &cmd.u, 4, eSPI_CS_LOW_ON_ENTRY );

	#endif

	return status;
 800c9d2:	7bfb      	ldrb	r3, [r7, #15]
}
 800c9d4:	4618      	mov	r0, r3
 800c9d6:	3710      	adds	r7, #16
 800c9d8:	46bd      	mov	sp, r7
 800c9da:	bd80      	pop	{r7, pc}

0800c9dc <_25lcxxxx_read_wip_flag>:
*
* @return 		wip - State of Write-In-Progress
*/
////////////////////////////////////////////////////////////////////////////////
static bool _25lcxxxx_read_wip_flag(void)
{
 800c9dc:	b580      	push	{r7, lr}
 800c9de:	b082      	sub	sp, #8
 800c9e0:	af00      	add	r7, sp, #0
	bool 					wip 		= false;
 800c9e2:	2300      	movs	r3, #0
 800c9e4:	71fb      	strb	r3, [r7, #7]
	_25lcxxxx_status_reg_t	stat_reg	= { .u = 0 };
 800c9e6:	2300      	movs	r3, #0
 800c9e8:	713b      	strb	r3, [r7, #4]

	if ( e25LCXXXX_OK == _25lcxxxx_read_status( & stat_reg ))
 800c9ea:	1d3b      	adds	r3, r7, #4
 800c9ec:	4618      	mov	r0, r3
 800c9ee:	f7ff ff33 	bl	800c858 <_25lcxxxx_read_status>
 800c9f2:	4603      	mov	r3, r0
 800c9f4:	2b00      	cmp	r3, #0
 800c9f6:	d108      	bne.n	800ca0a <_25lcxxxx_read_wip_flag+0x2e>
	{
		wip = (bool) ( stat_reg.b.wip );
 800c9f8:	793b      	ldrb	r3, [r7, #4]
 800c9fa:	f003 0301 	and.w	r3, r3, #1
 800c9fe:	b2db      	uxtb	r3, r3
 800ca00:	2b00      	cmp	r3, #0
 800ca02:	bf14      	ite	ne
 800ca04:	2301      	movne	r3, #1
 800ca06:	2300      	moveq	r3, #0
 800ca08:	71fb      	strb	r3, [r7, #7]
	}

	return wip;
 800ca0a:	79fb      	ldrb	r3, [r7, #7]
}
 800ca0c:	4618      	mov	r0, r3
 800ca0e:	3708      	adds	r7, #8
 800ca10:	46bd      	mov	sp, r7
 800ca12:	bd80      	pop	{r7, pc}

0800ca14 <_25lcxxxx_read_wel_flag>:
*
* @return 		wel - State of Write-Enable-Latch
*/
////////////////////////////////////////////////////////////////////////////////
static bool _25lcxxxx_read_wel_flag(void)
{
 800ca14:	b580      	push	{r7, lr}
 800ca16:	b082      	sub	sp, #8
 800ca18:	af00      	add	r7, sp, #0
	bool wel = false;
 800ca1a:	2300      	movs	r3, #0
 800ca1c:	71fb      	strb	r3, [r7, #7]
	_25lcxxxx_status_reg_t	stat_reg	= { .u = 0 };
 800ca1e:	2300      	movs	r3, #0
 800ca20:	713b      	strb	r3, [r7, #4]

	if ( e25LCXXXX_OK == _25lcxxxx_read_status( & stat_reg ))
 800ca22:	1d3b      	adds	r3, r7, #4
 800ca24:	4618      	mov	r0, r3
 800ca26:	f7ff ff17 	bl	800c858 <_25lcxxxx_read_status>
 800ca2a:	4603      	mov	r3, r0
 800ca2c:	2b00      	cmp	r3, #0
 800ca2e:	d108      	bne.n	800ca42 <_25lcxxxx_read_wel_flag+0x2e>
	{
		wel = (bool) ( stat_reg.b.wel );
 800ca30:	793b      	ldrb	r3, [r7, #4]
 800ca32:	f003 0302 	and.w	r3, r3, #2
 800ca36:	b2db      	uxtb	r3, r3
 800ca38:	2b00      	cmp	r3, #0
 800ca3a:	bf14      	ite	ne
 800ca3c:	2301      	movne	r3, #1
 800ca3e:	2300      	moveq	r3, #0
 800ca40:	71fb      	strb	r3, [r7, #7]
	}

	return wel;
 800ca42:	79fb      	ldrb	r3, [r7, #7]
}
 800ca44:	4618      	mov	r0, r3
 800ca46:	3708      	adds	r7, #8
 800ca48:	46bd      	mov	sp, r7
 800ca4a:	bd80      	pop	{r7, pc}

0800ca4c <_25lcxxxx_wait_for_write_process>:
* @param[in]	timeout 	- Timeout in miliseconds
* @return 		status 		- Status of operation
*/
////////////////////////////////////////////////////////////////////////////////
static _25lcxxxx_status_t _25lcxxxx_wait_for_write_process(const uint32_t timeout)
{
 800ca4c:	b580      	push	{r7, lr}
 800ca4e:	b088      	sub	sp, #32
 800ca50:	af00      	add	r7, sp, #0
 800ca52:	6078      	str	r0, [r7, #4]
	_25lcxxxx_status_t 	status 		= e25LCXXXX_OK;
 800ca54:	2300      	movs	r3, #0
 800ca56:	77fb      	strb	r3, [r7, #31]
	uint32_t			tick_prev	= 0UL;
 800ca58:	2300      	movs	r3, #0
 800ca5a:	61bb      	str	r3, [r7, #24]
	uint32_t			tick		= 0UL;
 800ca5c:	2300      	movs	r3, #0
 800ca5e:	60fb      	str	r3, [r7, #12]
	uint32_t 			safe_cnt	= 1000000UL;
 800ca60:	4b20      	ldr	r3, [pc, #128]	; (800cae4 <_25lcxxxx_wait_for_write_process+0x98>)
 800ca62:	617b      	str	r3, [r7, #20]
	bool				wip_flag	= false;
 800ca64:	2300      	movs	r3, #0
 800ca66:	72fb      	strb	r3, [r7, #11]
	uint8_t				timeout_cnt = 0U;
 800ca68:	2300      	movs	r3, #0
 800ca6a:	74fb      	strb	r3, [r7, #19]

	// Read WIP flag
	wip_flag = _25lcxxxx_read_wip_flag();
 800ca6c:	f7ff ffb6 	bl	800c9dc <_25lcxxxx_read_wip_flag>
 800ca70:	4603      	mov	r3, r0
 800ca72:	72fb      	strb	r3, [r7, #11]

	// Write is in progress - check for timeout amount of time
	if ( true == wip_flag )
 800ca74:	7afb      	ldrb	r3, [r7, #11]
 800ca76:	2b00      	cmp	r3, #0
 800ca78:	d02a      	beq.n	800cad0 <_25lcxxxx_wait_for_write_process+0x84>
	{
		// Get current tick
		tick = _25lcxxxx_if_get_sys_time_ms();
 800ca7a:	f000 f873 	bl	800cb64 <_25lcxxxx_if_get_sys_time_ms>
 800ca7e:	60f8      	str	r0, [r7, #12]
		tick_prev = tick;
 800ca80:	68fb      	ldr	r3, [r7, #12]
 800ca82:	61bb      	str	r3, [r7, #24]

		// Continuously check for WIP
		while ( safe_cnt > 0 )
 800ca84:	e01f      	b.n	800cac6 <_25lcxxxx_wait_for_write_process+0x7a>
		{
			// Get current timetick
			tick = _25lcxxxx_if_get_sys_time_ms();
 800ca86:	f000 f86d 	bl	800cb64 <_25lcxxxx_if_get_sys_time_ms>
 800ca8a:	60f8      	str	r0, [r7, #12]

			// Read every 1ms
			if ( (uint32_t) ( tick - tick_prev ) >= 1UL )
 800ca8c:	68fa      	ldr	r2, [r7, #12]
 800ca8e:	69bb      	ldr	r3, [r7, #24]
 800ca90:	429a      	cmp	r2, r3
 800ca92:	d00e      	beq.n	800cab2 <_25lcxxxx_wait_for_write_process+0x66>
			{
				tick_prev = tick;
 800ca94:	68fb      	ldr	r3, [r7, #12]
 800ca96:	61bb      	str	r3, [r7, #24]
				timeout_cnt++;
 800ca98:	7cfb      	ldrb	r3, [r7, #19]
 800ca9a:	3301      	adds	r3, #1
 800ca9c:	74fb      	strb	r3, [r7, #19]

				// Read WIP flag
				wip_flag = _25lcxxxx_read_wip_flag();
 800ca9e:	f7ff ff9d 	bl	800c9dc <_25lcxxxx_read_wip_flag>
 800caa2:	4603      	mov	r3, r0
 800caa4:	72fb      	strb	r3, [r7, #11]

				if ( false == wip_flag )
 800caa6:	7afb      	ldrb	r3, [r7, #11]
 800caa8:	f083 0301 	eor.w	r3, r3, #1
 800caac:	b2db      	uxtb	r3, r3
 800caae:	2b00      	cmp	r3, #0
 800cab0:	d10d      	bne.n	800cace <_25lcxxxx_wait_for_write_process+0x82>
				{
					break;
				}
			}

			if ( timeout_cnt >= timeout )
 800cab2:	7cfb      	ldrb	r3, [r7, #19]
 800cab4:	687a      	ldr	r2, [r7, #4]
 800cab6:	429a      	cmp	r2, r3
 800cab8:	d802      	bhi.n	800cac0 <_25lcxxxx_wait_for_write_process+0x74>
			{
				status = e25LCXXXX_ERROR;
 800caba:	2301      	movs	r3, #1
 800cabc:	77fb      	strb	r3, [r7, #31]
				break;
 800cabe:	e007      	b.n	800cad0 <_25lcxxxx_wait_for_write_process+0x84>
			}

			// Decrement safety counter
			safe_cnt--;
 800cac0:	697b      	ldr	r3, [r7, #20]
 800cac2:	3b01      	subs	r3, #1
 800cac4:	617b      	str	r3, [r7, #20]
		while ( safe_cnt > 0 )
 800cac6:	697b      	ldr	r3, [r7, #20]
 800cac8:	2b00      	cmp	r3, #0
 800caca:	d1dc      	bne.n	800ca86 <_25lcxxxx_wait_for_write_process+0x3a>
 800cacc:	e000      	b.n	800cad0 <_25lcxxxx_wait_for_write_process+0x84>
					break;
 800cace:	bf00      	nop
		}
	}

	_25LCXXXX_ASSERT( safe_cnt > 0 );
 800cad0:	697b      	ldr	r3, [r7, #20]
 800cad2:	2b00      	cmp	r3, #0
 800cad4:	d101      	bne.n	800cada <_25lcxxxx_wait_for_write_process+0x8e>
 800cad6:	f008 fa89 	bl	8014fec <project_config_assert_fail>

	return status;
 800cada:	7ffb      	ldrb	r3, [r7, #31]
}
 800cadc:	4618      	mov	r0, r3
 800cade:	3720      	adds	r7, #32
 800cae0:	46bd      	mov	sp, r7
 800cae2:	bd80      	pop	{r7, pc}
 800cae4:	000f4240 	.word	0x000f4240

0800cae8 <_25lcxxxx_if_init>:
*
* @return 		status - Status of initialization
*/
////////////////////////////////////////////////////////////////////////////////
_25lcxxxx_status_t _25lcxxxx_if_init(void)
{
 800cae8:	b480      	push	{r7}
 800caea:	b083      	sub	sp, #12
 800caec:	af00      	add	r7, sp, #0
	_25lcxxxx_status_t status = e25LCXXXX_OK;
 800caee:	2300      	movs	r3, #0
 800caf0:	71fb      	strb	r3, [r7, #7]

	// Left empty as periphery is initilize elswhere...

	// USER CODE END...

	return status;
 800caf2:	79fb      	ldrb	r3, [r7, #7]
}
 800caf4:	4618      	mov	r0, r3
 800caf6:	370c      	adds	r7, #12
 800caf8:	46bd      	mov	sp, r7
 800cafa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cafe:	4770      	bx	lr

0800cb00 <_25lcxxxx_if_transmit>:
* @param[in] 	size		- Size of transmit data
* @return 		status 		- Status of operation
*/
////////////////////////////////////////////////////////////////////////////////
_25lcxxxx_status_t _25lcxxxx_if_transmit(const uint8_t * p_data, const uint32_t size, const spi_cs_action_t cs_action)
{
 800cb00:	b580      	push	{r7, lr}
 800cb02:	b086      	sub	sp, #24
 800cb04:	af00      	add	r7, sp, #0
 800cb06:	60f8      	str	r0, [r7, #12]
 800cb08:	60b9      	str	r1, [r7, #8]
 800cb0a:	4613      	mov	r3, r2
 800cb0c:	71fb      	strb	r3, [r7, #7]
	_25lcxxxx_status_t status = e25LCXXXX_OK;
 800cb0e:	2300      	movs	r3, #0
 800cb10:	75fb      	strb	r3, [r7, #23]

	// USER CODE BEGIN...

	if ( eSPI_OK != spi_2_transmit( eSPI2_CH_EEPROM, (uint8_t*) p_data, size, cs_action ))
 800cb12:	79fb      	ldrb	r3, [r7, #7]
 800cb14:	68ba      	ldr	r2, [r7, #8]
 800cb16:	68f9      	ldr	r1, [r7, #12]
 800cb18:	2000      	movs	r0, #0
 800cb1a:	f004 f9d3 	bl	8010ec4 <spi_2_transmit>
 800cb1e:	4603      	mov	r3, r0
 800cb20:	2b00      	cmp	r3, #0
 800cb22:	d001      	beq.n	800cb28 <_25lcxxxx_if_transmit+0x28>
	{
		status = e25LCXXXX_ERROR_SPI;
 800cb24:	2302      	movs	r3, #2
 800cb26:	75fb      	strb	r3, [r7, #23]
	}

	// USER CODE END...

	return status;
 800cb28:	7dfb      	ldrb	r3, [r7, #23]
}
 800cb2a:	4618      	mov	r0, r3
 800cb2c:	3718      	adds	r7, #24
 800cb2e:	46bd      	mov	sp, r7
 800cb30:	bd80      	pop	{r7, pc}

0800cb32 <_25lcxxxx_if_receive>:
* @param[in] 	size		- Size of received data
* @return 		status 		- Status of operation
*/
////////////////////////////////////////////////////////////////////////////////
_25lcxxxx_status_t _25lcxxxx_if_receive(uint8_t * p_data, const uint32_t size, const spi_cs_action_t cs_action)
{
 800cb32:	b580      	push	{r7, lr}
 800cb34:	b086      	sub	sp, #24
 800cb36:	af00      	add	r7, sp, #0
 800cb38:	60f8      	str	r0, [r7, #12]
 800cb3a:	60b9      	str	r1, [r7, #8]
 800cb3c:	4613      	mov	r3, r2
 800cb3e:	71fb      	strb	r3, [r7, #7]
	_25lcxxxx_status_t status = e25LCXXXX_OK;
 800cb40:	2300      	movs	r3, #0
 800cb42:	75fb      	strb	r3, [r7, #23]

	// USER CODE BEGIN...

	if ( eSPI_OK != spi_2_receive( eSPI2_CH_EEPROM, p_data, size, cs_action ))
 800cb44:	79fb      	ldrb	r3, [r7, #7]
 800cb46:	68ba      	ldr	r2, [r7, #8]
 800cb48:	68f9      	ldr	r1, [r7, #12]
 800cb4a:	2000      	movs	r0, #0
 800cb4c:	f004 fa20 	bl	8010f90 <spi_2_receive>
 800cb50:	4603      	mov	r3, r0
 800cb52:	2b00      	cmp	r3, #0
 800cb54:	d001      	beq.n	800cb5a <_25lcxxxx_if_receive+0x28>
	{
		status = e25LCXXXX_ERROR_SPI;
 800cb56:	2302      	movs	r3, #2
 800cb58:	75fb      	strb	r3, [r7, #23]
	}

	// USER CODE END...

	return status;
 800cb5a:	7dfb      	ldrb	r3, [r7, #23]
}
 800cb5c:	4618      	mov	r0, r3
 800cb5e:	3718      	adds	r7, #24
 800cb60:	46bd      	mov	sp, r7
 800cb62:	bd80      	pop	{r7, pc}

0800cb64 <_25lcxxxx_if_get_sys_time_ms>:
*
* @return 		time_ms	- System timetick in milisecond
*/
////////////////////////////////////////////////////////////////////////////////
uint32_t _25lcxxxx_if_get_sys_time_ms(void)
{
 800cb64:	b580      	push	{r7, lr}
 800cb66:	b082      	sub	sp, #8
 800cb68:	af00      	add	r7, sp, #0
	uint32_t time_ms = 0;
 800cb6a:	2300      	movs	r3, #0
 800cb6c:	607b      	str	r3, [r7, #4]

	// USER CODE BEGIN...

	time_ms = HAL_GetTick();
 800cb6e:	f7f4 feb1 	bl	80018d4 <HAL_GetTick>
 800cb72:	6078      	str	r0, [r7, #4]

	// USER CODE END...

	return time_ms;
 800cb74:	687b      	ldr	r3, [r7, #4]
}
 800cb76:	4618      	mov	r0, r3
 800cb78:	3708      	adds	r7, #8
 800cb7a:	46bd      	mov	sp, r7
 800cb7c:	bd80      	pop	{r7, pc}
	...

0800cb80 <ili9488_init>:
*
* @return 		status - Either Ok or Error
*/
////////////////////////////////////////////////////////////////////////////////
ili9488_status_t ili9488_init(void)
{
 800cb80:	b580      	push	{r7, lr}
 800cb82:	b082      	sub	sp, #8
 800cb84:	af00      	add	r7, sp, #0
	ili9488_status_t status = eILI9488_OK;
 800cb86:	2300      	movs	r3, #0
 800cb88:	71fb      	strb	r3, [r7, #7]

	// Not jet initialized
	if ( false == gb_is_init )
 800cb8a:	4b14      	ldr	r3, [pc, #80]	; (800cbdc <ili9488_init+0x5c>)
 800cb8c:	781b      	ldrb	r3, [r3, #0]
 800cb8e:	f083 0301 	eor.w	r3, r3, #1
 800cb92:	b2db      	uxtb	r3, r3
 800cb94:	2b00      	cmp	r3, #0
 800cb96:	d01c      	beq.n	800cbd2 <ili9488_init+0x52>
	{
		// Display init procedure
		if ( eILI9488_OK != ili9488_driver_init() )
 800cb98:	f000 f99c 	bl	800ced4 <ili9488_driver_init>
 800cb9c:	4603      	mov	r3, r0
 800cb9e:	2b00      	cmp	r3, #0
 800cba0:	d005      	beq.n	800cbae <ili9488_init+0x2e>
		{
			gb_is_init = false;
 800cba2:	4b0e      	ldr	r3, [pc, #56]	; (800cbdc <ili9488_init+0x5c>)
 800cba4:	2200      	movs	r2, #0
 800cba6:	701a      	strb	r2, [r3, #0]
			status = eILI9488_ERROR;
 800cba8:	2301      	movs	r3, #1
 800cbaa:	71fb      	strb	r3, [r7, #7]
 800cbac:	e002      	b.n	800cbb4 <ili9488_init+0x34>
		}
		else
		{
			gb_is_init = true;
 800cbae:	4b0b      	ldr	r3, [pc, #44]	; (800cbdc <ili9488_init+0x5c>)
 800cbb0:	2201      	movs	r2, #1
 800cbb2:	701a      	strb	r2, [r3, #0]
		}

		// Init string pen
		g_stringPen.bg_color = eILI9488_COLOR_BLACK;
 800cbb4:	4b0a      	ldr	r3, [pc, #40]	; (800cbe0 <ili9488_init+0x60>)
 800cbb6:	2200      	movs	r2, #0
 800cbb8:	705a      	strb	r2, [r3, #1]
		g_stringPen.fg_color = eILI9488_COLOR_WHITE;
 800cbba:	4b09      	ldr	r3, [pc, #36]	; (800cbe0 <ili9488_init+0x60>)
 800cbbc:	2207      	movs	r2, #7
 800cbbe:	701a      	strb	r2, [r3, #0]
		g_stringPen.font_opt = eILI9488_FONT_16;
 800cbc0:	4b07      	ldr	r3, [pc, #28]	; (800cbe0 <ili9488_init+0x60>)
 800cbc2:	2202      	movs	r2, #2
 800cbc4:	709a      	strb	r2, [r3, #2]

		// Init string cursor
		g_stringCursor.page = 0;
 800cbc6:	4b07      	ldr	r3, [pc, #28]	; (800cbe4 <ili9488_init+0x64>)
 800cbc8:	2200      	movs	r2, #0
 800cbca:	801a      	strh	r2, [r3, #0]
		g_stringCursor.col = 0;
 800cbcc:	4b05      	ldr	r3, [pc, #20]	; (800cbe4 <ili9488_init+0x64>)
 800cbce:	2200      	movs	r2, #0
 800cbd0:	805a      	strh	r2, [r3, #2]
	}

	return status;
 800cbd2:	79fb      	ldrb	r3, [r7, #7]
}
 800cbd4:	4618      	mov	r0, r3
 800cbd6:	3708      	adds	r7, #8
 800cbd8:	46bd      	mov	sp, r7
 800cbda:	bd80      	pop	{r7, pc}
 800cbdc:	20004cbc 	.word	0x20004cbc
 800cbe0:	20004cb4 	.word	0x20004cb4
 800cbe4:	20004cb8 	.word	0x20004cb8

0800cbe8 <ili9488_set_background>:
* @param[in] 	color - Color of background
* @return 		status - Status of operation
*/
////////////////////////////////////////////////////////////////////////////////
ili9488_status_t ili9488_set_background(const ili9488_color_t color)
{
 800cbe8:	b580      	push	{r7, lr}
 800cbea:	b086      	sub	sp, #24
 800cbec:	af02      	add	r7, sp, #8
 800cbee:	4603      	mov	r3, r0
 800cbf0:	71fb      	strb	r3, [r7, #7]
	ili9488_status_t status = eILI9488_OK;
 800cbf2:	2300      	movs	r3, #0
 800cbf4:	73fb      	strb	r3, [r7, #15]

	// Check if init
	if ( true == gb_is_init )
 800cbf6:	4b17      	ldr	r3, [pc, #92]	; (800cc54 <ili9488_set_background+0x6c>)
 800cbf8:	781b      	ldrb	r3, [r3, #0]
 800cbfa:	2b00      	cmp	r3, #0
 800cbfc:	d01d      	beq.n	800cc3a <ili9488_set_background+0x52>
	{
		status |= ili9488_driver_fill_rectangle(0, 0, ILI9488_DISPLAY_SIZE_PAGE, ILI9488_DISPLAY_SIZE_COLUMN, color );
 800cbfe:	79fb      	ldrb	r3, [r7, #7]
 800cc00:	9300      	str	r3, [sp, #0]
 800cc02:	f44f 73a0 	mov.w	r3, #320	; 0x140
 800cc06:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800cc0a:	2100      	movs	r1, #0
 800cc0c:	2000      	movs	r0, #0
 800cc0e:	f000 fd37 	bl	800d680 <ili9488_driver_fill_rectangle>
 800cc12:	4603      	mov	r3, r0
 800cc14:	461a      	mov	r2, r3
 800cc16:	7bfb      	ldrb	r3, [r7, #15]
 800cc18:	4313      	orrs	r3, r2
 800cc1a:	73fb      	strb	r3, [r7, #15]

		// NOTE: This is mandatory only first time background is set. Don't know why...
		status |= ili9488_driver_fill_rectangle(0, 0, 3, ILI9488_DISPLAY_SIZE_COLUMN, color );
 800cc1c:	79fb      	ldrb	r3, [r7, #7]
 800cc1e:	9300      	str	r3, [sp, #0]
 800cc20:	f44f 73a0 	mov.w	r3, #320	; 0x140
 800cc24:	2203      	movs	r2, #3
 800cc26:	2100      	movs	r1, #0
 800cc28:	2000      	movs	r0, #0
 800cc2a:	f000 fd29 	bl	800d680 <ili9488_driver_fill_rectangle>
 800cc2e:	4603      	mov	r3, r0
 800cc30:	461a      	mov	r2, r3
 800cc32:	7bfb      	ldrb	r3, [r7, #15]
 800cc34:	4313      	orrs	r3, r2
 800cc36:	73fb      	strb	r3, [r7, #15]
 800cc38:	e007      	b.n	800cc4a <ili9488_set_background+0x62>
	}
	else
	{
		status = eILI9488_ERROR;
 800cc3a:	2301      	movs	r3, #1
 800cc3c:	73fb      	strb	r3, [r7, #15]

		ILI9488_DBG_PRINT( "Module not initialized!" );
 800cc3e:	4906      	ldr	r1, [pc, #24]	; (800cc58 <ili9488_set_background+0x70>)
 800cc40:	2003      	movs	r0, #3
 800cc42:	f005 f87b 	bl	8011d3c <com_dbg_print>
		ILI9488_ASSERT( 0 );
 800cc46:	f008 f9d1 	bl	8014fec <project_config_assert_fail>
	}

	return status;
 800cc4a:	7bfb      	ldrb	r3, [r7, #15]
}
 800cc4c:	4618      	mov	r0, r3
 800cc4e:	3710      	adds	r7, #16
 800cc50:	46bd      	mov	sp, r7
 800cc52:	bd80      	pop	{r7, pc}
 800cc54:	20004cbc 	.word	0x20004cbc
 800cc58:	0801a35c 	.word	0x0801a35c

0800cc5c <ili9488_set_string_pen>:
* @param[in]	font_opt - Font of choise
* @return 		status - Always OK
*/
////////////////////////////////////////////////////////////////////////////////
ili9488_status_t ili9488_set_string_pen(const ili9488_color_t fg_color, const ili9488_color_t bg_color, const ili9488_font_opt_t font_opt)
{
 800cc5c:	b580      	push	{r7, lr}
 800cc5e:	b084      	sub	sp, #16
 800cc60:	af00      	add	r7, sp, #0
 800cc62:	4603      	mov	r3, r0
 800cc64:	71fb      	strb	r3, [r7, #7]
 800cc66:	460b      	mov	r3, r1
 800cc68:	71bb      	strb	r3, [r7, #6]
 800cc6a:	4613      	mov	r3, r2
 800cc6c:	717b      	strb	r3, [r7, #5]
	ili9488_status_t status = eILI9488_OK;
 800cc6e:	2300      	movs	r3, #0
 800cc70:	73fb      	strb	r3, [r7, #15]

	if ( gb_is_init )
 800cc72:	4b0d      	ldr	r3, [pc, #52]	; (800cca8 <ili9488_set_string_pen+0x4c>)
 800cc74:	781b      	ldrb	r3, [r3, #0]
 800cc76:	2b00      	cmp	r3, #0
 800cc78:	d009      	beq.n	800cc8e <ili9488_set_string_pen+0x32>
	{
		g_stringPen.fg_color = fg_color;
 800cc7a:	4a0c      	ldr	r2, [pc, #48]	; (800ccac <ili9488_set_string_pen+0x50>)
 800cc7c:	79fb      	ldrb	r3, [r7, #7]
 800cc7e:	7013      	strb	r3, [r2, #0]
		g_stringPen.bg_color = bg_color;
 800cc80:	4a0a      	ldr	r2, [pc, #40]	; (800ccac <ili9488_set_string_pen+0x50>)
 800cc82:	79bb      	ldrb	r3, [r7, #6]
 800cc84:	7053      	strb	r3, [r2, #1]
		g_stringPen.font_opt = font_opt;
 800cc86:	4a09      	ldr	r2, [pc, #36]	; (800ccac <ili9488_set_string_pen+0x50>)
 800cc88:	797b      	ldrb	r3, [r7, #5]
 800cc8a:	7093      	strb	r3, [r2, #2]
 800cc8c:	e007      	b.n	800cc9e <ili9488_set_string_pen+0x42>
	}
	else
	{
		status = eILI9488_ERROR;
 800cc8e:	2301      	movs	r3, #1
 800cc90:	73fb      	strb	r3, [r7, #15]

		ILI9488_DBG_PRINT( "Module not initialized!" );
 800cc92:	4907      	ldr	r1, [pc, #28]	; (800ccb0 <ili9488_set_string_pen+0x54>)
 800cc94:	2003      	movs	r0, #3
 800cc96:	f005 f851 	bl	8011d3c <com_dbg_print>
		ILI9488_ASSERT( 0 );
 800cc9a:	f008 f9a7 	bl	8014fec <project_config_assert_fail>
	}

	return status;
 800cc9e:	7bfb      	ldrb	r3, [r7, #15]
}
 800cca0:	4618      	mov	r0, r3
 800cca2:	3710      	adds	r7, #16
 800cca4:	46bd      	mov	sp, r7
 800cca6:	bd80      	pop	{r7, pc}
 800cca8:	20004cbc 	.word	0x20004cbc
 800ccac:	20004cb4 	.word	0x20004cb4
 800ccb0:	0801a35c 	.word	0x0801a35c

0800ccb4 <ili9488_set_string>:
* @param[in]	col - Start column
* @return 		status - Either Ok or Error
*/
////////////////////////////////////////////////////////////////////////////////
ili9488_status_t ili9488_set_string(const char* str, const uint16_t page, const uint16_t col)
{
 800ccb4:	b590      	push	{r4, r7, lr}
 800ccb6:	b087      	sub	sp, #28
 800ccb8:	af02      	add	r7, sp, #8
 800ccba:	6078      	str	r0, [r7, #4]
 800ccbc:	460b      	mov	r3, r1
 800ccbe:	807b      	strh	r3, [r7, #2]
 800ccc0:	4613      	mov	r3, r2
 800ccc2:	803b      	strh	r3, [r7, #0]
	ili9488_status_t status = eILI9488_OK;
 800ccc4:	2300      	movs	r3, #0
 800ccc6:	73fb      	strb	r3, [r7, #15]

	if ( true == gb_is_init )
 800ccc8:	4b11      	ldr	r3, [pc, #68]	; (800cd10 <ili9488_set_string+0x5c>)
 800ccca:	781b      	ldrb	r3, [r3, #0]
 800cccc:	2b00      	cmp	r3, #0
 800ccce:	d011      	beq.n	800ccf4 <ili9488_set_string+0x40>
	{
		status = ili9488_driver_set_string( str, page, col, g_stringPen.fg_color, g_stringPen.bg_color, g_stringPen.font_opt );
 800ccd0:	4b10      	ldr	r3, [pc, #64]	; (800cd14 <ili9488_set_string+0x60>)
 800ccd2:	781c      	ldrb	r4, [r3, #0]
 800ccd4:	4b0f      	ldr	r3, [pc, #60]	; (800cd14 <ili9488_set_string+0x60>)
 800ccd6:	785b      	ldrb	r3, [r3, #1]
 800ccd8:	4a0e      	ldr	r2, [pc, #56]	; (800cd14 <ili9488_set_string+0x60>)
 800ccda:	7892      	ldrb	r2, [r2, #2]
 800ccdc:	8838      	ldrh	r0, [r7, #0]
 800ccde:	8879      	ldrh	r1, [r7, #2]
 800cce0:	9201      	str	r2, [sp, #4]
 800cce2:	9300      	str	r3, [sp, #0]
 800cce4:	4623      	mov	r3, r4
 800cce6:	4602      	mov	r2, r0
 800cce8:	6878      	ldr	r0, [r7, #4]
 800ccea:	f000 ff83 	bl	800dbf4 <ili9488_driver_set_string>
 800ccee:	4603      	mov	r3, r0
 800ccf0:	73fb      	strb	r3, [r7, #15]
 800ccf2:	e007      	b.n	800cd04 <ili9488_set_string+0x50>
	}
	else
	{
		status = eILI9488_ERROR;
 800ccf4:	2301      	movs	r3, #1
 800ccf6:	73fb      	strb	r3, [r7, #15]

		ILI9488_DBG_PRINT( "Module not initialized!" );
 800ccf8:	4907      	ldr	r1, [pc, #28]	; (800cd18 <ili9488_set_string+0x64>)
 800ccfa:	2003      	movs	r0, #3
 800ccfc:	f005 f81e 	bl	8011d3c <com_dbg_print>
		ILI9488_ASSERT( 0 );
 800cd00:	f008 f974 	bl	8014fec <project_config_assert_fail>
	}

	return status;
 800cd04:	7bfb      	ldrb	r3, [r7, #15]
}
 800cd06:	4618      	mov	r0, r3
 800cd08:	3714      	adds	r7, #20
 800cd0a:	46bd      	mov	sp, r7
 800cd0c:	bd90      	pop	{r4, r7, pc}
 800cd0e:	bf00      	nop
 800cd10:	20004cbc 	.word	0x20004cbc
 800cd14:	20004cb4 	.word	0x20004cb4
 800cd18:	0801a35c 	.word	0x0801a35c

0800cd1c <ili9488_draw_circle>:
* @param[in] 	p_circle_attr 	- Pointer to circle attributes
* @return 		status 			- Status of operation
*/
////////////////////////////////////////////////////////////////////////////////
ili9488_status_t ili9488_draw_circle(const ili9488_circ_attr_t * const p_circle_attr)
{
 800cd1c:	b580      	push	{r7, lr}
 800cd1e:	b086      	sub	sp, #24
 800cd20:	af00      	add	r7, sp, #0
 800cd22:	6078      	str	r0, [r7, #4]
	ili9488_status_t status = eILI9488_OK;
 800cd24:	2300      	movs	r3, #0
 800cd26:	75fb      	strb	r3, [r7, #23]
	ili9488_color_t fill_color;
	ili9488_color_t border_color;
	uint16_t border_width;

	// Check if init
	if ( true == gb_is_init )
 800cd28:	4b29      	ldr	r3, [pc, #164]	; (800cdd0 <ili9488_draw_circle+0xb4>)
 800cd2a:	781b      	ldrb	r3, [r3, #0]
 800cd2c:	2b00      	cmp	r3, #0
 800cd2e:	d042      	beq.n	800cdb6 <ili9488_draw_circle+0x9a>
	{
		// Get positions
		s_page = p_circle_attr -> position.start_page;
 800cd30:	687b      	ldr	r3, [r7, #4]
 800cd32:	881b      	ldrh	r3, [r3, #0]
 800cd34:	82bb      	strh	r3, [r7, #20]
		s_col = p_circle_attr -> position.start_col;
 800cd36:	687b      	ldr	r3, [r7, #4]
 800cd38:	885b      	ldrh	r3, [r3, #2]
 800cd3a:	827b      	strh	r3, [r7, #18]
		radius = p_circle_attr -> position.radius;
 800cd3c:	687b      	ldr	r3, [r7, #4]
 800cd3e:	791b      	ldrb	r3, [r3, #4]
 800cd40:	823b      	strh	r3, [r7, #16]

		// Get colors
		fill_color = p_circle_attr -> fill.color;
 800cd42:	687b      	ldr	r3, [r7, #4]
 800cd44:	79db      	ldrb	r3, [r3, #7]
 800cd46:	73fb      	strb	r3, [r7, #15]
		border_color = p_circle_attr -> border.color;
 800cd48:	687b      	ldr	r3, [r7, #4]
 800cd4a:	7a5b      	ldrb	r3, [r3, #9]
 800cd4c:	73bb      	strb	r3, [r7, #14]

		// Get border width
		border_width = p_circle_attr -> border.width;
 800cd4e:	687b      	ldr	r3, [r7, #4]
 800cd50:	7a9b      	ldrb	r3, [r3, #10]
 800cd52:	81bb      	strh	r3, [r7, #12]

		// Circle with border
		if ( true == p_circle_attr -> border.enable )
 800cd54:	687b      	ldr	r3, [r7, #4]
 800cd56:	7a1b      	ldrb	r3, [r3, #8]
 800cd58:	2b00      	cmp	r3, #0
 800cd5a:	d019      	beq.n	800cd90 <ili9488_draw_circle+0x74>
		{
			// Fill border
			status |= ili9488_fill_circle( s_page, s_col, radius, border_color );
 800cd5c:	7bbb      	ldrb	r3, [r7, #14]
 800cd5e:	8a3a      	ldrh	r2, [r7, #16]
 800cd60:	8a79      	ldrh	r1, [r7, #18]
 800cd62:	8ab8      	ldrh	r0, [r7, #20]
 800cd64:	f000 f838 	bl	800cdd8 <ili9488_fill_circle>
 800cd68:	4603      	mov	r3, r0
 800cd6a:	461a      	mov	r2, r3
 800cd6c:	7dfb      	ldrb	r3, [r7, #23]
 800cd6e:	4313      	orrs	r3, r2
 800cd70:	75fb      	strb	r3, [r7, #23]

			// Fill background
			status |= ili9488_fill_circle( s_page, s_col, radius - border_width, fill_color );
 800cd72:	8a3a      	ldrh	r2, [r7, #16]
 800cd74:	89bb      	ldrh	r3, [r7, #12]
 800cd76:	1ad3      	subs	r3, r2, r3
 800cd78:	b29a      	uxth	r2, r3
 800cd7a:	7bfb      	ldrb	r3, [r7, #15]
 800cd7c:	8a79      	ldrh	r1, [r7, #18]
 800cd7e:	8ab8      	ldrh	r0, [r7, #20]
 800cd80:	f000 f82a 	bl	800cdd8 <ili9488_fill_circle>
 800cd84:	4603      	mov	r3, r0
 800cd86:	461a      	mov	r2, r3
 800cd88:	7dfb      	ldrb	r3, [r7, #23]
 800cd8a:	4313      	orrs	r3, r2
 800cd8c:	75fb      	strb	r3, [r7, #23]
 800cd8e:	e01a      	b.n	800cdc6 <ili9488_draw_circle+0xaa>
		}

		// Simple filled circle
		else if ( true == p_circle_attr -> fill.enable )
 800cd90:	687b      	ldr	r3, [r7, #4]
 800cd92:	799b      	ldrb	r3, [r3, #6]
 800cd94:	2b00      	cmp	r3, #0
 800cd96:	d00b      	beq.n	800cdb0 <ili9488_draw_circle+0x94>
		{
			status |= ili9488_fill_circle( s_page, s_col, radius, fill_color );
 800cd98:	7bfb      	ldrb	r3, [r7, #15]
 800cd9a:	8a3a      	ldrh	r2, [r7, #16]
 800cd9c:	8a79      	ldrh	r1, [r7, #18]
 800cd9e:	8ab8      	ldrh	r0, [r7, #20]
 800cda0:	f000 f81a 	bl	800cdd8 <ili9488_fill_circle>
 800cda4:	4603      	mov	r3, r0
 800cda6:	461a      	mov	r2, r3
 800cda8:	7dfb      	ldrb	r3, [r7, #23]
 800cdaa:	4313      	orrs	r3, r2
 800cdac:	75fb      	strb	r3, [r7, #23]
 800cdae:	e00a      	b.n	800cdc6 <ili9488_draw_circle+0xaa>
		}

		else
		{
			status = eILI9488_ERROR;
 800cdb0:	2301      	movs	r3, #1
 800cdb2:	75fb      	strb	r3, [r7, #23]
 800cdb4:	e007      	b.n	800cdc6 <ili9488_draw_circle+0xaa>
		}
	}
	else
	{
		status = eILI9488_ERROR;
 800cdb6:	2301      	movs	r3, #1
 800cdb8:	75fb      	strb	r3, [r7, #23]

		ILI9488_DBG_PRINT( "Module not initialized!" );
 800cdba:	4906      	ldr	r1, [pc, #24]	; (800cdd4 <ili9488_draw_circle+0xb8>)
 800cdbc:	2003      	movs	r0, #3
 800cdbe:	f004 ffbd 	bl	8011d3c <com_dbg_print>
		ILI9488_ASSERT( 0 );
 800cdc2:	f008 f913 	bl	8014fec <project_config_assert_fail>
	}


	return status;
 800cdc6:	7dfb      	ldrb	r3, [r7, #23]
}
 800cdc8:	4618      	mov	r0, r3
 800cdca:	3718      	adds	r7, #24
 800cdcc:	46bd      	mov	sp, r7
 800cdce:	bd80      	pop	{r7, pc}
 800cdd0:	20004cbc 	.word	0x20004cbc
 800cdd4:	0801a35c 	.word	0x0801a35c

0800cdd8 <ili9488_fill_circle>:
* @param[in]	color 	- Color of rectangle
* @return 		status 	- Status of operation
*/
////////////////////////////////////////////////////////////////////////////////
static ili9488_status_t ili9488_fill_circle(const uint16_t page, const uint16_t col, const uint16_t radius, const ili9488_color_t color)
{
 800cdd8:	b590      	push	{r4, r7, lr}
 800cdda:	b085      	sub	sp, #20
 800cddc:	af00      	add	r7, sp, #0
 800cdde:	4604      	mov	r4, r0
 800cde0:	4608      	mov	r0, r1
 800cde2:	4611      	mov	r1, r2
 800cde4:	461a      	mov	r2, r3
 800cde6:	4623      	mov	r3, r4
 800cde8:	80fb      	strh	r3, [r7, #6]
 800cdea:	4603      	mov	r3, r0
 800cdec:	80bb      	strh	r3, [r7, #4]
 800cdee:	460b      	mov	r3, r1
 800cdf0:	807b      	strh	r3, [r7, #2]
 800cdf2:	4613      	mov	r3, r2
 800cdf4:	707b      	strb	r3, [r7, #1]
	ili9488_status_t status = eILI9488_OK;
 800cdf6:	2300      	movs	r3, #0
 800cdf8:	73fb      	strb	r3, [r7, #15]

	// Check if init
	if ( true == gb_is_init )
 800cdfa:	4b0e      	ldr	r3, [pc, #56]	; (800ce34 <ili9488_fill_circle+0x5c>)
 800cdfc:	781b      	ldrb	r3, [r3, #0]
 800cdfe:	2b00      	cmp	r3, #0
 800ce00:	d00b      	beq.n	800ce1a <ili9488_fill_circle+0x42>
	{
		if ( eILI9488_OK != ili9488_driver_fill_circle(page, col, radius, color ))
 800ce02:	787b      	ldrb	r3, [r7, #1]
 800ce04:	887a      	ldrh	r2, [r7, #2]
 800ce06:	88b9      	ldrh	r1, [r7, #4]
 800ce08:	88f8      	ldrh	r0, [r7, #6]
 800ce0a:	f000 fcc7 	bl	800d79c <ili9488_driver_fill_circle>
 800ce0e:	4603      	mov	r3, r0
 800ce10:	2b00      	cmp	r3, #0
 800ce12:	d00a      	beq.n	800ce2a <ili9488_fill_circle+0x52>
		{
			status = eILI9488_ERROR;
 800ce14:	2301      	movs	r3, #1
 800ce16:	73fb      	strb	r3, [r7, #15]
 800ce18:	e007      	b.n	800ce2a <ili9488_fill_circle+0x52>
		}
	}
	else
	{
		status = eILI9488_ERROR;
 800ce1a:	2301      	movs	r3, #1
 800ce1c:	73fb      	strb	r3, [r7, #15]

		ILI9488_DBG_PRINT( "Module not initialized!" );
 800ce1e:	4906      	ldr	r1, [pc, #24]	; (800ce38 <ili9488_fill_circle+0x60>)
 800ce20:	2003      	movs	r0, #3
 800ce22:	f004 ff8b 	bl	8011d3c <com_dbg_print>
		ILI9488_ASSERT( 0 );
 800ce26:	f008 f8e1 	bl	8014fec <project_config_assert_fail>
	}

	return status;
 800ce2a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ce2c:	4618      	mov	r0, r3
 800ce2e:	3714      	adds	r7, #20
 800ce30:	46bd      	mov	sp, r7
 800ce32:	bd90      	pop	{r4, r7, pc}
 800ce34:	20004cbc 	.word	0x20004cbc
 800ce38:	0801a35c 	.word	0x0801a35c

0800ce3c <ili9488_set_backlight>:
* @param[in] 	brightness 	- Brightness value from 0.0 - 1.0
* @return 		status 		- Status of operation
*/
////////////////////////////////////////////////////////////////////////////////
ili9488_status_t ili9488_set_backlight(const float32_t brightness)
{
 800ce3c:	b580      	push	{r7, lr}
 800ce3e:	b084      	sub	sp, #16
 800ce40:	af00      	add	r7, sp, #0
 800ce42:	ed87 0a01 	vstr	s0, [r7, #4]
	ili9488_status_t status = eILI9488_OK;
 800ce46:	2300      	movs	r3, #0
 800ce48:	73fb      	strb	r3, [r7, #15]

	// Check if init
	if ( true == gb_is_init )
 800ce4a:	4b0c      	ldr	r3, [pc, #48]	; (800ce7c <ili9488_set_backlight+0x40>)
 800ce4c:	781b      	ldrb	r3, [r3, #0]
 800ce4e:	2b00      	cmp	r3, #0
 800ce50:	d007      	beq.n	800ce62 <ili9488_set_backlight+0x26>
	{
		ili9488_if_set_led( brightness );
 800ce52:	ed97 0a01 	vldr	s0, [r7, #4]
 800ce56:	f001 f831 	bl	800debc <ili9488_if_set_led>
		gf32_brightness = brightness;
 800ce5a:	4a09      	ldr	r2, [pc, #36]	; (800ce80 <ili9488_set_backlight+0x44>)
 800ce5c:	687b      	ldr	r3, [r7, #4]
 800ce5e:	6013      	str	r3, [r2, #0]
 800ce60:	e007      	b.n	800ce72 <ili9488_set_backlight+0x36>
	}
	else
	{
		status = eILI9488_ERROR;
 800ce62:	2301      	movs	r3, #1
 800ce64:	73fb      	strb	r3, [r7, #15]

		ILI9488_DBG_PRINT( "Module not initialized!" );
 800ce66:	4907      	ldr	r1, [pc, #28]	; (800ce84 <ili9488_set_backlight+0x48>)
 800ce68:	2003      	movs	r0, #3
 800ce6a:	f004 ff67 	bl	8011d3c <com_dbg_print>
		ILI9488_ASSERT( 0 );
 800ce6e:	f008 f8bd 	bl	8014fec <project_config_assert_fail>
	}

	return status;
 800ce72:	7bfb      	ldrb	r3, [r7, #15]
}
 800ce74:	4618      	mov	r0, r3
 800ce76:	3710      	adds	r7, #16
 800ce78:	46bd      	mov	sp, r7
 800ce7a:	bd80      	pop	{r7, pc}
 800ce7c:	20004cbc 	.word	0x20004cbc
 800ce80:	20004cc0 	.word	0x20004cc0
 800ce84:	0801a35c 	.word	0x0801a35c

0800ce88 <ili9488_get_backlight>:
* @param[out] 	p_brightness 	- Brightness value from 0.0 - 1.0
* @return 		status 			- Status of operation
*/
////////////////////////////////////////////////////////////////////////////////
ili9488_status_t ili9488_get_backlight(float32_t * const p_brightness)
{
 800ce88:	b580      	push	{r7, lr}
 800ce8a:	b084      	sub	sp, #16
 800ce8c:	af00      	add	r7, sp, #0
 800ce8e:	6078      	str	r0, [r7, #4]
	ili9488_status_t status = eILI9488_OK;
 800ce90:	2300      	movs	r3, #0
 800ce92:	73fb      	strb	r3, [r7, #15]

	// Check if init
	if ( true == gb_is_init )
 800ce94:	4b0c      	ldr	r3, [pc, #48]	; (800cec8 <ili9488_get_backlight+0x40>)
 800ce96:	781b      	ldrb	r3, [r3, #0]
 800ce98:	2b00      	cmp	r3, #0
 800ce9a:	d007      	beq.n	800ceac <ili9488_get_backlight+0x24>
	{
		if ( NULL != p_brightness )
 800ce9c:	687b      	ldr	r3, [r7, #4]
 800ce9e:	2b00      	cmp	r3, #0
 800cea0:	d00c      	beq.n	800cebc <ili9488_get_backlight+0x34>
		{
			*p_brightness = gf32_brightness;
 800cea2:	4b0a      	ldr	r3, [pc, #40]	; (800cecc <ili9488_get_backlight+0x44>)
 800cea4:	681a      	ldr	r2, [r3, #0]
 800cea6:	687b      	ldr	r3, [r7, #4]
 800cea8:	601a      	str	r2, [r3, #0]
 800ceaa:	e007      	b.n	800cebc <ili9488_get_backlight+0x34>
		}
	}
	else
	{
		status = eILI9488_ERROR;
 800ceac:	2301      	movs	r3, #1
 800ceae:	73fb      	strb	r3, [r7, #15]

		ILI9488_DBG_PRINT( "Module not initialized!" );
 800ceb0:	4907      	ldr	r1, [pc, #28]	; (800ced0 <ili9488_get_backlight+0x48>)
 800ceb2:	2003      	movs	r0, #3
 800ceb4:	f004 ff42 	bl	8011d3c <com_dbg_print>
		ILI9488_ASSERT( 0 );
 800ceb8:	f008 f898 	bl	8014fec <project_config_assert_fail>
	}

	return status;
 800cebc:	7bfb      	ldrb	r3, [r7, #15]
}
 800cebe:	4618      	mov	r0, r3
 800cec0:	3710      	adds	r7, #16
 800cec2:	46bd      	mov	sp, r7
 800cec4:	bd80      	pop	{r7, pc}
 800cec6:	bf00      	nop
 800cec8:	20004cbc 	.word	0x20004cbc
 800cecc:	20004cc0 	.word	0x20004cc0
 800ced0:	0801a35c 	.word	0x0801a35c

0800ced4 <ili9488_driver_init>:
*
* @return 		status - Either Ok or Error
*/
////////////////////////////////////////////////////////////////////////////////
ili9488_status_t ili9488_driver_init(void)
{
 800ced4:	b580      	push	{r7, lr}
 800ced6:	b082      	sub	sp, #8
 800ced8:	af00      	add	r7, sp, #0
	ili9488_status_t status = eILI9488_OK;
 800ceda:	2300      	movs	r3, #0
 800cedc:	71fb      	strb	r3, [r7, #7]

	// Initialize low level interface
	if ( eILI9488_OK != ili9488_if_init())
 800cede:	f000 ffa2 	bl	800de26 <ili9488_if_init>
 800cee2:	4603      	mov	r3, r0
 800cee4:	2b00      	cmp	r3, #0
 800cee6:	d002      	beq.n	800ceee <ili9488_driver_init+0x1a>
	{
		status = eILI9488_ERROR;
 800cee8:	2301      	movs	r3, #1
 800ceea:	71fb      	strb	r3, [r7, #7]
 800ceec:	e068      	b.n	800cfc0 <ili9488_driver_init+0xec>
	}
	else
	{
		// Set control lines
		ili9488_if_set_reset( false );
 800ceee:	2000      	movs	r0, #0
 800cef0:	f000 ffcf 	bl	800de92 <ili9488_if_set_reset>

		// Set up initial backlight brightness
		ili9488_if_set_led( ILI9488_LED_STARTUP_VAL );
 800cef4:	ed9f 0a35 	vldr	s0, [pc, #212]	; 800cfcc <ili9488_driver_init+0xf8>
 800cef8:	f000 ffe0 	bl	800debc <ili9488_if_set_led>

		// Soft Reset
		status |= ili9488_driver_soft_reset();
 800cefc:	f000 f868 	bl	800cfd0 <ili9488_driver_soft_reset>
 800cf00:	4603      	mov	r3, r0
 800cf02:	461a      	mov	r2, r3
 800cf04:	79fb      	ldrb	r3, [r7, #7]
 800cf06:	4313      	orrs	r3, r2
 800cf08:	71fb      	strb	r3, [r7, #7]
		HAL_Delay( 10 );
 800cf0a:	200a      	movs	r0, #10
 800cf0c:	f7f4 fcee 	bl	80018ec <HAL_Delay>

		// Positive / Negative GAMMA
		status |= ili9488_driver_set_pos_gamma();
 800cf10:	f000 f870 	bl	800cff4 <ili9488_driver_set_pos_gamma>
 800cf14:	4603      	mov	r3, r0
 800cf16:	461a      	mov	r2, r3
 800cf18:	79fb      	ldrb	r3, [r7, #7]
 800cf1a:	4313      	orrs	r3, r2
 800cf1c:	71fb      	strb	r3, [r7, #7]
		status |= ili9488_driver_set_neg_gamma();
 800cf1e:	f000 f885 	bl	800d02c <ili9488_driver_set_neg_gamma>
 800cf22:	4603      	mov	r3, r0
 800cf24:	461a      	mov	r2, r3
 800cf26:	79fb      	ldrb	r3, [r7, #7]
 800cf28:	4313      	orrs	r3, r2
 800cf2a:	71fb      	strb	r3, [r7, #7]

		// Power Control
		status |= ili9488_driver_set_power_control();
 800cf2c:	f000 f89a 	bl	800d064 <ili9488_driver_set_power_control>
 800cf30:	4603      	mov	r3, r0
 800cf32:	461a      	mov	r2, r3
 800cf34:	79fb      	ldrb	r3, [r7, #7]
 800cf36:	4313      	orrs	r3, r2
 800cf38:	71fb      	strb	r3, [r7, #7]

		// Interface pixel format
		status |= ili9488_driver_set_pixel_format( eILI9488_PIXEL_FORMAT_18_BIT );
 800cf3a:	2002      	movs	r0, #2
 800cf3c:	f000 f9de 	bl	800d2fc <ili9488_driver_set_pixel_format>
 800cf40:	4603      	mov	r3, r0
 800cf42:	461a      	mov	r2, r3
 800cf44:	79fb      	ldrb	r3, [r7, #7]
 800cf46:	4313      	orrs	r3, r2
 800cf48:	71fb      	strb	r3, [r7, #7]

		// Interface mode control
		status |= ili9488_driver_set_interface_mode();
 800cf4a:	f000 f8b9 	bl	800d0c0 <ili9488_driver_set_interface_mode>
 800cf4e:	4603      	mov	r3, r0
 800cf50:	461a      	mov	r2, r3
 800cf52:	79fb      	ldrb	r3, [r7, #7]
 800cf54:	4313      	orrs	r3, r2
 800cf56:	71fb      	strb	r3, [r7, #7]

		// Frame rate
		status |= ili9488_driver_set_frame_rate();
 800cf58:	f000 f8c6 	bl	800d0e8 <ili9488_driver_set_frame_rate>
 800cf5c:	4603      	mov	r3, r0
 800cf5e:	461a      	mov	r2, r3
 800cf60:	79fb      	ldrb	r3, [r7, #7]
 800cf62:	4313      	orrs	r3, r2
 800cf64:	71fb      	strb	r3, [r7, #7]

		// Display inversion control
		status |= ili9488_driver_set_inversion_control();
 800cf66:	f000 f8e1 	bl	800d12c <ili9488_driver_set_inversion_control>
 800cf6a:	4603      	mov	r3, r0
 800cf6c:	461a      	mov	r2, r3
 800cf6e:	79fb      	ldrb	r3, [r7, #7]
 800cf70:	4313      	orrs	r3, r2
 800cf72:	71fb      	strb	r3, [r7, #7]

		// Display function control RGB/MCU interface control
		status |= ili9488_driver_set_function_control();
 800cf74:	f000 f8f0 	bl	800d158 <ili9488_driver_set_function_control>
 800cf78:	4603      	mov	r3, r0
 800cf7a:	461a      	mov	r2, r3
 800cf7c:	79fb      	ldrb	r3, [r7, #7]
 800cf7e:	4313      	orrs	r3, r2
 800cf80:	71fb      	strb	r3, [r7, #7]

		// Image function
		status |= ili9488_driver_set_image_function();
 800cf82:	f000 f8ff 	bl	800d184 <ili9488_driver_set_image_function>
 800cf86:	4603      	mov	r3, r0
 800cf88:	461a      	mov	r2, r3
 800cf8a:	79fb      	ldrb	r3, [r7, #7]
 800cf8c:	4313      	orrs	r3, r2
 800cf8e:	71fb      	strb	r3, [r7, #7]

		// Exit sleep
		status |= ili9488_driver_set_sleep_on_off( eILI9488_SLEEP_OFF );
 800cf90:	2000      	movs	r0, #0
 800cf92:	f000 f92b 	bl	800d1ec <ili9488_driver_set_sleep_on_off>
 800cf96:	4603      	mov	r3, r0
 800cf98:	461a      	mov	r2, r3
 800cf9a:	79fb      	ldrb	r3, [r7, #7]
 800cf9c:	4313      	orrs	r3, r2
 800cf9e:	71fb      	strb	r3, [r7, #7]

		// Display on
		status |= ili9488_driver_set_display_on_off( eILI9488_DISPLAY_ON );
 800cfa0:	2001      	movs	r0, #1
 800cfa2:	f000 f905 	bl	800d1b0 <ili9488_driver_set_display_on_off>
 800cfa6:	4603      	mov	r3, r0
 800cfa8:	461a      	mov	r2, r3
 800cfaa:	79fb      	ldrb	r3, [r7, #7]
 800cfac:	4313      	orrs	r3, r2
 800cfae:	71fb      	strb	r3, [r7, #7]

		// Memory data access control
		#if ( 0 == ILI9488_DISPLAY_FLIP )
			status |= ili9488_driver_set_orientation( eILI9488_ORIENTATION_LANDSCAPE );
 800cfb0:	2000      	movs	r0, #0
 800cfb2:	f000 f939 	bl	800d228 <ili9488_driver_set_orientation>
 800cfb6:	4603      	mov	r3, r0
 800cfb8:	461a      	mov	r2, r3
 800cfba:	79fb      	ldrb	r3, [r7, #7]
 800cfbc:	4313      	orrs	r3, r2
 800cfbe:	71fb      	strb	r3, [r7, #7]
			status |= ili9488_driver_set_orientation( eILI9488_ORIENTATION_LANDSCAPE_FLIP );
		#endif

	}

	return status;
 800cfc0:	79fb      	ldrb	r3, [r7, #7]
}
 800cfc2:	4618      	mov	r0, r3
 800cfc4:	3708      	adds	r7, #8
 800cfc6:	46bd      	mov	sp, r7
 800cfc8:	bd80      	pop	{r7, pc}
 800cfca:	bf00      	nop
 800cfcc:	00000000 	.word	0x00000000

0800cfd0 <ili9488_driver_soft_reset>:
*
* @return 		status - Either Ok or Error
*/
////////////////////////////////////////////////////////////////////////////////
ili9488_status_t ili9488_driver_soft_reset(void)
{
 800cfd0:	b580      	push	{r7, lr}
 800cfd2:	b082      	sub	sp, #8
 800cfd4:	af00      	add	r7, sp, #0
	ili9488_status_t status = eILI9488_OK;
 800cfd6:	2300      	movs	r3, #0
 800cfd8:	71fb      	strb	r3, [r7, #7]

	status = ili9488_low_if_write_register( eILI9488_SOFTRST_CMD, NULL, 0U );
 800cfda:	2200      	movs	r2, #0
 800cfdc:	2100      	movs	r1, #0
 800cfde:	2001      	movs	r0, #1
 800cfe0:	f000 fe80 	bl	800dce4 <ili9488_low_if_write_register>
 800cfe4:	4603      	mov	r3, r0
 800cfe6:	71fb      	strb	r3, [r7, #7]

	return status;
 800cfe8:	79fb      	ldrb	r3, [r7, #7]
}
 800cfea:	4618      	mov	r0, r3
 800cfec:	3708      	adds	r7, #8
 800cfee:	46bd      	mov	sp, r7
 800cff0:	bd80      	pop	{r7, pc}
	...

0800cff4 <ili9488_driver_set_pos_gamma>:
*
* @return 		status - Either Ok or Error
*/
////////////////////////////////////////////////////////////////////////////////
static ili9488_status_t ili9488_driver_set_pos_gamma(void)
{
 800cff4:	b590      	push	{r4, r7, lr}
 800cff6:	b085      	sub	sp, #20
 800cff8:	af00      	add	r7, sp, #0
	ili9488_status_t status = eILI9488_OK;
 800cffa:	2300      	movs	r3, #0
 800cffc:	73fb      	strb	r3, [r7, #15]
	const uint8_t gamma[15] = "\x00\x03\x09\x08\x16\x0A\x3F\x78\x4C\x09\x0A\x08\x16\x1A\x0F";
 800cffe:	4b0a      	ldr	r3, [pc, #40]	; (800d028 <ili9488_driver_set_pos_gamma+0x34>)
 800d000:	463c      	mov	r4, r7
 800d002:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800d004:	c407      	stmia	r4!, {r0, r1, r2}
 800d006:	8023      	strh	r3, [r4, #0]
 800d008:	3402      	adds	r4, #2
 800d00a:	0c1b      	lsrs	r3, r3, #16
 800d00c:	7023      	strb	r3, [r4, #0]

	status = ili9488_low_if_write_register( eILI9488_SET_POS_GAMMA_CTRL_CMD,	(uint8_t*) &gamma, 15U);
 800d00e:	463b      	mov	r3, r7
 800d010:	220f      	movs	r2, #15
 800d012:	4619      	mov	r1, r3
 800d014:	20e0      	movs	r0, #224	; 0xe0
 800d016:	f000 fe65 	bl	800dce4 <ili9488_low_if_write_register>
 800d01a:	4603      	mov	r3, r0
 800d01c:	73fb      	strb	r3, [r7, #15]

	return status;
 800d01e:	7bfb      	ldrb	r3, [r7, #15]
}
 800d020:	4618      	mov	r0, r3
 800d022:	3714      	adds	r7, #20
 800d024:	46bd      	mov	sp, r7
 800d026:	bd90      	pop	{r4, r7, pc}
 800d028:	0801a394 	.word	0x0801a394

0800d02c <ili9488_driver_set_neg_gamma>:
*
* @return 		status - Either Ok or Error
*/
////////////////////////////////////////////////////////////////////////////////
static ili9488_status_t ili9488_driver_set_neg_gamma(void)
{
 800d02c:	b590      	push	{r4, r7, lr}
 800d02e:	b085      	sub	sp, #20
 800d030:	af00      	add	r7, sp, #0
	ili9488_status_t status = eILI9488_OK;
 800d032:	2300      	movs	r3, #0
 800d034:	73fb      	strb	r3, [r7, #15]
	const uint8_t gamma[15] = "\x00\x16\x19\x03\x0F\x05\x32\x45\x46\x04\x0E\x0D\x35\x37\x0F";
 800d036:	4b0a      	ldr	r3, [pc, #40]	; (800d060 <ili9488_driver_set_neg_gamma+0x34>)
 800d038:	463c      	mov	r4, r7
 800d03a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800d03c:	c407      	stmia	r4!, {r0, r1, r2}
 800d03e:	8023      	strh	r3, [r4, #0]
 800d040:	3402      	adds	r4, #2
 800d042:	0c1b      	lsrs	r3, r3, #16
 800d044:	7023      	strb	r3, [r4, #0]

	status = ili9488_low_if_write_register( eILI9488_SET_NEG_GAMMA_CTRL_CMD, (uint8_t*) &gamma, 15U);
 800d046:	463b      	mov	r3, r7
 800d048:	220f      	movs	r2, #15
 800d04a:	4619      	mov	r1, r3
 800d04c:	20e1      	movs	r0, #225	; 0xe1
 800d04e:	f000 fe49 	bl	800dce4 <ili9488_low_if_write_register>
 800d052:	4603      	mov	r3, r0
 800d054:	73fb      	strb	r3, [r7, #15]

	return status;
 800d056:	7bfb      	ldrb	r3, [r7, #15]
}
 800d058:	4618      	mov	r0, r3
 800d05a:	3714      	adds	r7, #20
 800d05c:	46bd      	mov	sp, r7
 800d05e:	bd90      	pop	{r4, r7, pc}
 800d060:	0801a3a4 	.word	0x0801a3a4

0800d064 <ili9488_driver_set_power_control>:
*
* @return 		status - Either Ok or Error
*/
////////////////////////////////////////////////////////////////////////////////
static ili9488_status_t ili9488_driver_set_power_control(void)
{
 800d064:	b580      	push	{r7, lr}
 800d066:	b082      	sub	sp, #8
 800d068:	af00      	add	r7, sp, #0
	ili9488_status_t status = eILI9488_OK;
 800d06a:	2300      	movs	r3, #0
 800d06c:	71fb      	strb	r3, [r7, #7]

	status |= ili9488_low_if_write_register( eILI9488_SET_POWER_CTRL_1_CMD, (uint8_t*) "\x17\x15", 		2U );
 800d06e:	2202      	movs	r2, #2
 800d070:	4910      	ldr	r1, [pc, #64]	; (800d0b4 <ili9488_driver_set_power_control+0x50>)
 800d072:	20c0      	movs	r0, #192	; 0xc0
 800d074:	f000 fe36 	bl	800dce4 <ili9488_low_if_write_register>
 800d078:	4603      	mov	r3, r0
 800d07a:	461a      	mov	r2, r3
 800d07c:	79fb      	ldrb	r3, [r7, #7]
 800d07e:	4313      	orrs	r3, r2
 800d080:	71fb      	strb	r3, [r7, #7]
	status |= ili9488_low_if_write_register( eILI9488_SET_POWER_CTRL_2_CMD, (uint8_t*) "\x41", 			1U );
 800d082:	2201      	movs	r2, #1
 800d084:	490c      	ldr	r1, [pc, #48]	; (800d0b8 <ili9488_driver_set_power_control+0x54>)
 800d086:	20c1      	movs	r0, #193	; 0xc1
 800d088:	f000 fe2c 	bl	800dce4 <ili9488_low_if_write_register>
 800d08c:	4603      	mov	r3, r0
 800d08e:	461a      	mov	r2, r3
 800d090:	79fb      	ldrb	r3, [r7, #7]
 800d092:	4313      	orrs	r3, r2
 800d094:	71fb      	strb	r3, [r7, #7]
	status |= ili9488_low_if_write_register( eILI9488_SET_POWER_CTRL_3_CMD, (uint8_t*) "\x00\x12\x80", 	3U );
 800d096:	2203      	movs	r2, #3
 800d098:	4908      	ldr	r1, [pc, #32]	; (800d0bc <ili9488_driver_set_power_control+0x58>)
 800d09a:	20c2      	movs	r0, #194	; 0xc2
 800d09c:	f000 fe22 	bl	800dce4 <ili9488_low_if_write_register>
 800d0a0:	4603      	mov	r3, r0
 800d0a2:	461a      	mov	r2, r3
 800d0a4:	79fb      	ldrb	r3, [r7, #7]
 800d0a6:	4313      	orrs	r3, r2
 800d0a8:	71fb      	strb	r3, [r7, #7]

	return status;
 800d0aa:	79fb      	ldrb	r3, [r7, #7]
}
 800d0ac:	4618      	mov	r0, r3
 800d0ae:	3708      	adds	r7, #8
 800d0b0:	46bd      	mov	sp, r7
 800d0b2:	bd80      	pop	{r7, pc}
 800d0b4:	0801a3b4 	.word	0x0801a3b4
 800d0b8:	0801a3b8 	.word	0x0801a3b8
 800d0bc:	0801a3bc 	.word	0x0801a3bc

0800d0c0 <ili9488_driver_set_interface_mode>:
*
* @return 		status - Either Ok or Error
*/
////////////////////////////////////////////////////////////////////////////////
static ili9488_status_t ili9488_driver_set_interface_mode(void)
{
 800d0c0:	b580      	push	{r7, lr}
 800d0c2:	b082      	sub	sp, #8
 800d0c4:	af00      	add	r7, sp, #0
	ili9488_status_t status = eILI9488_OK;
 800d0c6:	2300      	movs	r3, #0
 800d0c8:	71fb      	strb	r3, [r7, #7]

	status = ili9488_low_if_write_register( eILI9488_SET_IF_MODE_CMD, (uint8_t*) "\x00", 1U );
 800d0ca:	2201      	movs	r2, #1
 800d0cc:	4905      	ldr	r1, [pc, #20]	; (800d0e4 <ili9488_driver_set_interface_mode+0x24>)
 800d0ce:	20b0      	movs	r0, #176	; 0xb0
 800d0d0:	f000 fe08 	bl	800dce4 <ili9488_low_if_write_register>
 800d0d4:	4603      	mov	r3, r0
 800d0d6:	71fb      	strb	r3, [r7, #7]

	return status;
 800d0d8:	79fb      	ldrb	r3, [r7, #7]
}
 800d0da:	4618      	mov	r0, r3
 800d0dc:	3708      	adds	r7, #8
 800d0de:	46bd      	mov	sp, r7
 800d0e0:	bd80      	pop	{r7, pc}
 800d0e2:	bf00      	nop
 800d0e4:	0801a3c0 	.word	0x0801a3c0

0800d0e8 <ili9488_driver_set_frame_rate>:
*
* @return 		status - Either Ok or Error
*/
////////////////////////////////////////////////////////////////////////////////
static ili9488_status_t ili9488_driver_set_frame_rate(void)
{
 800d0e8:	b580      	push	{r7, lr}
 800d0ea:	b082      	sub	sp, #8
 800d0ec:	af00      	add	r7, sp, #0
	ili9488_status_t status = eILI9488_OK;
 800d0ee:	2300      	movs	r3, #0
 800d0f0:	71fb      	strb	r3, [r7, #7]

	// 60 Hz
	status |= ili9488_low_if_write_register( eILI9488_SET_FR_NOR_MODE_CMD, (uint8_t*) "\xA0", 1U );
 800d0f2:	2201      	movs	r2, #1
 800d0f4:	490b      	ldr	r1, [pc, #44]	; (800d124 <ili9488_driver_set_frame_rate+0x3c>)
 800d0f6:	20b1      	movs	r0, #177	; 0xb1
 800d0f8:	f000 fdf4 	bl	800dce4 <ili9488_low_if_write_register>
 800d0fc:	4603      	mov	r3, r0
 800d0fe:	461a      	mov	r2, r3
 800d100:	79fb      	ldrb	r3, [r7, #7]
 800d102:	4313      	orrs	r3, r2
 800d104:	71fb      	strb	r3, [r7, #7]

	// 8-bit color mode, osc no div, 16 clock per line
	status |= ili9488_low_if_write_register( eILI9488_SET_FR_8_COLOR_CMD, (uint8_t*) "\x00\x10", 2U );
 800d106:	2202      	movs	r2, #2
 800d108:	4907      	ldr	r1, [pc, #28]	; (800d128 <ili9488_driver_set_frame_rate+0x40>)
 800d10a:	20b2      	movs	r0, #178	; 0xb2
 800d10c:	f000 fdea 	bl	800dce4 <ili9488_low_if_write_register>
 800d110:	4603      	mov	r3, r0
 800d112:	461a      	mov	r2, r3
 800d114:	79fb      	ldrb	r3, [r7, #7]
 800d116:	4313      	orrs	r3, r2
 800d118:	71fb      	strb	r3, [r7, #7]

	return status;
 800d11a:	79fb      	ldrb	r3, [r7, #7]
}
 800d11c:	4618      	mov	r0, r3
 800d11e:	3708      	adds	r7, #8
 800d120:	46bd      	mov	sp, r7
 800d122:	bd80      	pop	{r7, pc}
 800d124:	0801a3c4 	.word	0x0801a3c4
 800d128:	0801a3c8 	.word	0x0801a3c8

0800d12c <ili9488_driver_set_inversion_control>:
*
* @return 		status - Either Ok or Error
*/
////////////////////////////////////////////////////////////////////////////////
static ili9488_status_t ili9488_driver_set_inversion_control(void)
{
 800d12c:	b580      	push	{r7, lr}
 800d12e:	b082      	sub	sp, #8
 800d130:	af00      	add	r7, sp, #0
	ili9488_status_t status = eILI9488_OK;
 800d132:	2300      	movs	r3, #0
 800d134:	71fb      	strb	r3, [r7, #7]

	// 2-dot inversion
	status |= ili9488_low_if_write_register( eILI9488_SET_INV_CTRL_CMD, (uint8_t*) "\x02", 1U );
 800d136:	2201      	movs	r2, #1
 800d138:	4906      	ldr	r1, [pc, #24]	; (800d154 <ili9488_driver_set_inversion_control+0x28>)
 800d13a:	20b4      	movs	r0, #180	; 0xb4
 800d13c:	f000 fdd2 	bl	800dce4 <ili9488_low_if_write_register>
 800d140:	4603      	mov	r3, r0
 800d142:	461a      	mov	r2, r3
 800d144:	79fb      	ldrb	r3, [r7, #7]
 800d146:	4313      	orrs	r3, r2
 800d148:	71fb      	strb	r3, [r7, #7]

	return status;
 800d14a:	79fb      	ldrb	r3, [r7, #7]
}
 800d14c:	4618      	mov	r0, r3
 800d14e:	3708      	adds	r7, #8
 800d150:	46bd      	mov	sp, r7
 800d152:	bd80      	pop	{r7, pc}
 800d154:	0801a3cc 	.word	0x0801a3cc

0800d158 <ili9488_driver_set_function_control>:
*
* @return 		status - Either Ok or Error
*/
////////////////////////////////////////////////////////////////////////////////
static ili9488_status_t ili9488_driver_set_function_control(void)
{
 800d158:	b580      	push	{r7, lr}
 800d15a:	b082      	sub	sp, #8
 800d15c:	af00      	add	r7, sp, #0
	ili9488_status_t status = eILI9488_OK;
 800d15e:	2300      	movs	r3, #0
 800d160:	71fb      	strb	r3, [r7, #7]

	// Normal scan, scan cycle 5 frames
	status |= ili9488_low_if_write_register( eILI9488_SET_FUNC_CTRL_CMD, (uint8_t*) "\x02\0x02", 2U );
 800d162:	2202      	movs	r2, #2
 800d164:	4906      	ldr	r1, [pc, #24]	; (800d180 <ili9488_driver_set_function_control+0x28>)
 800d166:	20b6      	movs	r0, #182	; 0xb6
 800d168:	f000 fdbc 	bl	800dce4 <ili9488_low_if_write_register>
 800d16c:	4603      	mov	r3, r0
 800d16e:	461a      	mov	r2, r3
 800d170:	79fb      	ldrb	r3, [r7, #7]
 800d172:	4313      	orrs	r3, r2
 800d174:	71fb      	strb	r3, [r7, #7]

	return status;
 800d176:	79fb      	ldrb	r3, [r7, #7]
}
 800d178:	4618      	mov	r0, r3
 800d17a:	3708      	adds	r7, #8
 800d17c:	46bd      	mov	sp, r7
 800d17e:	bd80      	pop	{r7, pc}
 800d180:	0801a3d0 	.word	0x0801a3d0

0800d184 <ili9488_driver_set_image_function>:
*
* @return 		status - Either Ok or Error
*/
////////////////////////////////////////////////////////////////////////////////
static ili9488_status_t ili9488_driver_set_image_function(void)
{
 800d184:	b580      	push	{r7, lr}
 800d186:	b082      	sub	sp, #8
 800d188:	af00      	add	r7, sp, #0
	ili9488_status_t status = eILI9488_OK;
 800d18a:	2300      	movs	r3, #0
 800d18c:	71fb      	strb	r3, [r7, #7]

	// Disable 24-bit bus
	status |= ili9488_low_if_write_register( eILI9488_SET_IMG_FUNC_CMD, (uint8_t*) "\x00", 1U );
 800d18e:	2201      	movs	r2, #1
 800d190:	4906      	ldr	r1, [pc, #24]	; (800d1ac <ili9488_driver_set_image_function+0x28>)
 800d192:	20e9      	movs	r0, #233	; 0xe9
 800d194:	f000 fda6 	bl	800dce4 <ili9488_low_if_write_register>
 800d198:	4603      	mov	r3, r0
 800d19a:	461a      	mov	r2, r3
 800d19c:	79fb      	ldrb	r3, [r7, #7]
 800d19e:	4313      	orrs	r3, r2
 800d1a0:	71fb      	strb	r3, [r7, #7]

	return status;
 800d1a2:	79fb      	ldrb	r3, [r7, #7]
}
 800d1a4:	4618      	mov	r0, r3
 800d1a6:	3708      	adds	r7, #8
 800d1a8:	46bd      	mov	sp, r7
 800d1aa:	bd80      	pop	{r7, pc}
 800d1ac:	0801a3c0 	.word	0x0801a3c0

0800d1b0 <ili9488_driver_set_display_on_off>:
* @param[in] 	on_off - Switch state
* @return 		status - Either Ok or Error
*/
////////////////////////////////////////////////////////////////////////////////
ili9488_status_t ili9488_driver_set_display_on_off(const ili9488_display_t on_off)
{
 800d1b0:	b580      	push	{r7, lr}
 800d1b2:	b084      	sub	sp, #16
 800d1b4:	af00      	add	r7, sp, #0
 800d1b6:	4603      	mov	r3, r0
 800d1b8:	71fb      	strb	r3, [r7, #7]
	ili9488_status_t status = eILI9488_OK;
 800d1ba:	2300      	movs	r3, #0
 800d1bc:	73fb      	strb	r3, [r7, #15]

	if ( eILI9488_DISPLAY_OFF == on_off )
 800d1be:	79fb      	ldrb	r3, [r7, #7]
 800d1c0:	2b00      	cmp	r3, #0
 800d1c2:	d107      	bne.n	800d1d4 <ili9488_driver_set_display_on_off+0x24>
	{
		status = ili9488_low_if_write_register( eILI9488_DISPLAY_OFF_CMD, NULL, 0U );
 800d1c4:	2200      	movs	r2, #0
 800d1c6:	2100      	movs	r1, #0
 800d1c8:	2028      	movs	r0, #40	; 0x28
 800d1ca:	f000 fd8b 	bl	800dce4 <ili9488_low_if_write_register>
 800d1ce:	4603      	mov	r3, r0
 800d1d0:	73fb      	strb	r3, [r7, #15]
 800d1d2:	e006      	b.n	800d1e2 <ili9488_driver_set_display_on_off+0x32>
	}
	else
	{
		status = ili9488_low_if_write_register( eILI9488_DISPLAY_ON_CMD, NULL, 0U );
 800d1d4:	2200      	movs	r2, #0
 800d1d6:	2100      	movs	r1, #0
 800d1d8:	2029      	movs	r0, #41	; 0x29
 800d1da:	f000 fd83 	bl	800dce4 <ili9488_low_if_write_register>
 800d1de:	4603      	mov	r3, r0
 800d1e0:	73fb      	strb	r3, [r7, #15]
	}

	return status;
 800d1e2:	7bfb      	ldrb	r3, [r7, #15]
}
 800d1e4:	4618      	mov	r0, r3
 800d1e6:	3710      	adds	r7, #16
 800d1e8:	46bd      	mov	sp, r7
 800d1ea:	bd80      	pop	{r7, pc}

0800d1ec <ili9488_driver_set_sleep_on_off>:
* @param[in] 	on_off - Switch state
* @return 		status - Either Ok or Error
*/
////////////////////////////////////////////////////////////////////////////////
ili9488_status_t ili9488_driver_set_sleep_on_off(const ili9488_sleep_t on_off)
{
 800d1ec:	b580      	push	{r7, lr}
 800d1ee:	b084      	sub	sp, #16
 800d1f0:	af00      	add	r7, sp, #0
 800d1f2:	4603      	mov	r3, r0
 800d1f4:	71fb      	strb	r3, [r7, #7]
	ili9488_status_t status = eILI9488_OK;
 800d1f6:	2300      	movs	r3, #0
 800d1f8:	73fb      	strb	r3, [r7, #15]

	if ( eILI9488_SLEEP_OFF == on_off )
 800d1fa:	79fb      	ldrb	r3, [r7, #7]
 800d1fc:	2b00      	cmp	r3, #0
 800d1fe:	d107      	bne.n	800d210 <ili9488_driver_set_sleep_on_off+0x24>
	{
		status = ili9488_low_if_write_register( eILI9488_SLEEP_OUT_CMD, NULL, 0U );
 800d200:	2200      	movs	r2, #0
 800d202:	2100      	movs	r1, #0
 800d204:	2011      	movs	r0, #17
 800d206:	f000 fd6d 	bl	800dce4 <ili9488_low_if_write_register>
 800d20a:	4603      	mov	r3, r0
 800d20c:	73fb      	strb	r3, [r7, #15]
 800d20e:	e006      	b.n	800d21e <ili9488_driver_set_sleep_on_off+0x32>
	}
	else
	{
		status = ili9488_low_if_write_register( eILI9488_SLEEP_IN_CMD, NULL, 0U );
 800d210:	2200      	movs	r2, #0
 800d212:	2100      	movs	r1, #0
 800d214:	2010      	movs	r0, #16
 800d216:	f000 fd65 	bl	800dce4 <ili9488_low_if_write_register>
 800d21a:	4603      	mov	r3, r0
 800d21c:	73fb      	strb	r3, [r7, #15]
	}

	return status;
 800d21e:	7bfb      	ldrb	r3, [r7, #15]
}
 800d220:	4618      	mov	r0, r3
 800d222:	3710      	adds	r7, #16
 800d224:	46bd      	mov	sp, r7
 800d226:	bd80      	pop	{r7, pc}

0800d228 <ili9488_driver_set_orientation>:
* @param[in] 	orientation - Orientation of display
* @return 		status - Either Ok or Error
*/
////////////////////////////////////////////////////////////////////////////////
ili9488_status_t ili9488_driver_set_orientation(const ili9488_orientation_t orientation)
{
 800d228:	b580      	push	{r7, lr}
 800d22a:	b084      	sub	sp, #16
 800d22c:	af00      	add	r7, sp, #0
 800d22e:	4603      	mov	r3, r0
 800d230:	71fb      	strb	r3, [r7, #7]
	ili9488_status_t status = eILI9488_OK;
 800d232:	2300      	movs	r3, #0
 800d234:	73fb      	strb	r3, [r7, #15]
	uint8_t madctl = 0;
 800d236:	2300      	movs	r3, #0
 800d238:	73bb      	strb	r3, [r7, #14]
	ili9488_orientation_t orientation_read;

	switch( orientation )
 800d23a:	79fb      	ldrb	r3, [r7, #7]
 800d23c:	2b00      	cmp	r3, #0
 800d23e:	d002      	beq.n	800d246 <ili9488_driver_set_orientation+0x1e>
 800d240:	2b01      	cmp	r3, #1
 800d242:	d003      	beq.n	800d24c <ili9488_driver_set_orientation+0x24>
 800d244:	e005      	b.n	800d252 <ili9488_driver_set_orientation+0x2a>
	{
		case eILI9488_ORIENTATION_LANDSCAPE:
			madctl = 0xC8U;
 800d246:	23c8      	movs	r3, #200	; 0xc8
 800d248:	73bb      	strb	r3, [r7, #14]
			break;
 800d24a:	e007      	b.n	800d25c <ili9488_driver_set_orientation+0x34>

		case eILI9488_ORIENTATION_LANDSCAPE_FLIP:
			madctl = 0x08U;
 800d24c:	2308      	movs	r3, #8
 800d24e:	73bb      	strb	r3, [r7, #14]
			break;
 800d250:	e004      	b.n	800d25c <ili9488_driver_set_orientation+0x34>

		default:
			madctl = 0x48U;
 800d252:	2348      	movs	r3, #72	; 0x48
 800d254:	73bb      	strb	r3, [r7, #14]
			ILI9488_ASSERT( 0 );
 800d256:	f007 fec9 	bl	8014fec <project_config_assert_fail>
			break;
 800d25a:	bf00      	nop
	}

	status = ili9488_low_if_write_register( eILI9488_SET_MADCTL_CMD, (uint8_t*) &madctl, 1U );
 800d25c:	f107 030e 	add.w	r3, r7, #14
 800d260:	2201      	movs	r2, #1
 800d262:	4619      	mov	r1, r3
 800d264:	2036      	movs	r0, #54	; 0x36
 800d266:	f000 fd3d 	bl	800dce4 <ili9488_low_if_write_register>
 800d26a:	4603      	mov	r3, r0
 800d26c:	73fb      	strb	r3, [r7, #15]

	// Verify
	if ( eILI9488_OK == status )
 800d26e:	7bfb      	ldrb	r3, [r7, #15]
 800d270:	2b00      	cmp	r3, #0
 800d272:	d113      	bne.n	800d29c <ili9488_driver_set_orientation+0x74>
	{
		status |= ili9488_driver_get_orientation( &orientation_read );
 800d274:	f107 030d 	add.w	r3, r7, #13
 800d278:	4618      	mov	r0, r3
 800d27a:	f000 f817 	bl	800d2ac <ili9488_driver_get_orientation>
 800d27e:	4603      	mov	r3, r0
 800d280:	461a      	mov	r2, r3
 800d282:	7bfb      	ldrb	r3, [r7, #15]
 800d284:	4313      	orrs	r3, r2
 800d286:	73fb      	strb	r3, [r7, #15]

		if ( orientation != orientation_read )
 800d288:	7b7b      	ldrb	r3, [r7, #13]
 800d28a:	79fa      	ldrb	r2, [r7, #7]
 800d28c:	429a      	cmp	r2, r3
 800d28e:	d005      	beq.n	800d29c <ili9488_driver_set_orientation+0x74>
		{
			ILI9488_DBG_PRINT( "Verifying orientation error ..." );
 800d290:	4905      	ldr	r1, [pc, #20]	; (800d2a8 <ili9488_driver_set_orientation+0x80>)
 800d292:	2003      	movs	r0, #3
 800d294:	f004 fd52 	bl	8011d3c <com_dbg_print>
			ILI9488_ASSERT( 0 );
 800d298:	f007 fea8 	bl	8014fec <project_config_assert_fail>
		}
	}

	return status;
 800d29c:	7bfb      	ldrb	r3, [r7, #15]
}
 800d29e:	4618      	mov	r0, r3
 800d2a0:	3710      	adds	r7, #16
 800d2a2:	46bd      	mov	sp, r7
 800d2a4:	bd80      	pop	{r7, pc}
 800d2a6:	bf00      	nop
 800d2a8:	0801a3d8 	.word	0x0801a3d8

0800d2ac <ili9488_driver_get_orientation>:
* @param[in] 	p_orientation 	- Pointer to orientation of display
* @return 		status 			- Either Ok or Error
*/
////////////////////////////////////////////////////////////////////////////////
ili9488_status_t ili9488_driver_get_orientation(ili9488_orientation_t * const p_orientation)
{
 800d2ac:	b580      	push	{r7, lr}
 800d2ae:	b084      	sub	sp, #16
 800d2b0:	af00      	add	r7, sp, #0
 800d2b2:	6078      	str	r0, [r7, #4]
	ili9488_status_t status = eILI9488_OK;
 800d2b4:	2300      	movs	r3, #0
 800d2b6:	73fb      	strb	r3, [r7, #15]
	uint8_t madctl;

	status = ili9488_low_if_read_register( eILI9488_READ_MADCTL_CMD, (uint8_t*) &madctl, 1U );
 800d2b8:	f107 030e 	add.w	r3, r7, #14
 800d2bc:	2201      	movs	r2, #1
 800d2be:	4619      	mov	r1, r3
 800d2c0:	200b      	movs	r0, #11
 800d2c2:	f000 fd43 	bl	800dd4c <ili9488_low_if_read_register>
 800d2c6:	4603      	mov	r3, r0
 800d2c8:	73fb      	strb	r3, [r7, #15]

	switch( madctl )
 800d2ca:	7bbb      	ldrb	r3, [r7, #14]
 800d2cc:	2b08      	cmp	r3, #8
 800d2ce:	d005      	beq.n	800d2dc <ili9488_driver_get_orientation+0x30>
 800d2d0:	2bc8      	cmp	r3, #200	; 0xc8
 800d2d2:	d107      	bne.n	800d2e4 <ili9488_driver_get_orientation+0x38>
	{
		case 0xC8U:
			*p_orientation = eILI9488_ORIENTATION_LANDSCAPE;
 800d2d4:	687b      	ldr	r3, [r7, #4]
 800d2d6:	2200      	movs	r2, #0
 800d2d8:	701a      	strb	r2, [r3, #0]
			break;
 800d2da:	e009      	b.n	800d2f0 <ili9488_driver_get_orientation+0x44>

		case 0x08U:
			*p_orientation = eILI9488_ORIENTATION_LANDSCAPE_FLIP;
 800d2dc:	687b      	ldr	r3, [r7, #4]
 800d2de:	2201      	movs	r2, #1
 800d2e0:	701a      	strb	r2, [r3, #0]
			break;
 800d2e2:	e005      	b.n	800d2f0 <ili9488_driver_get_orientation+0x44>

		default:
			*p_orientation = eILI9488_ORIENTATION_LANDSCAPE;
 800d2e4:	687b      	ldr	r3, [r7, #4]
 800d2e6:	2200      	movs	r2, #0
 800d2e8:	701a      	strb	r2, [r3, #0]
			ILI9488_ASSERT( 0 );
 800d2ea:	f007 fe7f 	bl	8014fec <project_config_assert_fail>
			break;
 800d2ee:	bf00      	nop
	}

	return status;
 800d2f0:	7bfb      	ldrb	r3, [r7, #15]
}
 800d2f2:	4618      	mov	r0, r3
 800d2f4:	3710      	adds	r7, #16
 800d2f6:	46bd      	mov	sp, r7
 800d2f8:	bd80      	pop	{r7, pc}
	...

0800d2fc <ili9488_driver_set_pixel_format>:
* @param[in] 	format - Format of pixel
* @return 		status - Either Ok or Error
*/
////////////////////////////////////////////////////////////////////////////////
ili9488_status_t ili9488_driver_set_pixel_format(const ili9488_pixel_format_t format)
{
 800d2fc:	b580      	push	{r7, lr}
 800d2fe:	b084      	sub	sp, #16
 800d300:	af00      	add	r7, sp, #0
 800d302:	4603      	mov	r3, r0
 800d304:	71fb      	strb	r3, [r7, #7]
	ili9488_status_t status = eILI9488_OK;
 800d306:	2300      	movs	r3, #0
 800d308:	73fb      	strb	r3, [r7, #15]
	uint8_t opt = 0;
 800d30a:	2300      	movs	r3, #0
 800d30c:	73bb      	strb	r3, [r7, #14]
	ili9488_pixel_format_t pf;

	switch( format )
 800d30e:	79fb      	ldrb	r3, [r7, #7]
 800d310:	2b03      	cmp	r3, #3
 800d312:	d817      	bhi.n	800d344 <ili9488_driver_set_pixel_format+0x48>
 800d314:	a201      	add	r2, pc, #4	; (adr r2, 800d31c <ili9488_driver_set_pixel_format+0x20>)
 800d316:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d31a:	bf00      	nop
 800d31c:	0800d32d 	.word	0x0800d32d
 800d320:	0800d333 	.word	0x0800d333
 800d324:	0800d339 	.word	0x0800d339
 800d328:	0800d33f 	.word	0x0800d33f
	{
		case eILI9488_PIXEL_FORMAT_3_BIT:
			opt = 0x01U;
 800d32c:	2301      	movs	r3, #1
 800d32e:	73bb      	strb	r3, [r7, #14]
			break;
 800d330:	e011      	b.n	800d356 <ili9488_driver_set_pixel_format+0x5a>

		case eILI9488_PIXEL_FORMAT_16_BIT:
			opt = 0x05U;
 800d332:	2305      	movs	r3, #5
 800d334:	73bb      	strb	r3, [r7, #14]
			break;
 800d336:	e00e      	b.n	800d356 <ili9488_driver_set_pixel_format+0x5a>

		case eILI9488_PIXEL_FORMAT_18_BIT:
			opt = 0x06U;
 800d338:	2306      	movs	r3, #6
 800d33a:	73bb      	strb	r3, [r7, #14]
			break;
 800d33c:	e00b      	b.n	800d356 <ili9488_driver_set_pixel_format+0x5a>

		case eILI9488_PIXEL_FORMAT_24_BIT:
			opt = 0x07U;
 800d33e:	2307      	movs	r3, #7
 800d340:	73bb      	strb	r3, [r7, #14]
			break;
 800d342:	e008      	b.n	800d356 <ili9488_driver_set_pixel_format+0x5a>

		default:
			opt = 0x01U;
 800d344:	2301      	movs	r3, #1
 800d346:	73bb      	strb	r3, [r7, #14]
			ILI9488_DBG_PRINT( "Pixel Format set invalid...." );
 800d348:	4915      	ldr	r1, [pc, #84]	; (800d3a0 <ili9488_driver_set_pixel_format+0xa4>)
 800d34a:	2003      	movs	r0, #3
 800d34c:	f004 fcf6 	bl	8011d3c <com_dbg_print>
			ILI9488_ASSERT( 0 );
 800d350:	f007 fe4c 	bl	8014fec <project_config_assert_fail>
			break;
 800d354:	bf00      	nop
	}

	status = ili9488_low_if_write_register( eILI9488_SET_PF_CMD, (uint8_t*) &opt, 1U );
 800d356:	f107 030e 	add.w	r3, r7, #14
 800d35a:	2201      	movs	r2, #1
 800d35c:	4619      	mov	r1, r3
 800d35e:	203a      	movs	r0, #58	; 0x3a
 800d360:	f000 fcc0 	bl	800dce4 <ili9488_low_if_write_register>
 800d364:	4603      	mov	r3, r0
 800d366:	73fb      	strb	r3, [r7, #15]

	// Verify
	if ( eILI9488_OK == status )
 800d368:	7bfb      	ldrb	r3, [r7, #15]
 800d36a:	2b00      	cmp	r3, #0
 800d36c:	d113      	bne.n	800d396 <ili9488_driver_set_pixel_format+0x9a>
	{
		status |= ili9488_driver_read_pixel_format( &pf );
 800d36e:	f107 030d 	add.w	r3, r7, #13
 800d372:	4618      	mov	r0, r3
 800d374:	f000 f818 	bl	800d3a8 <ili9488_driver_read_pixel_format>
 800d378:	4603      	mov	r3, r0
 800d37a:	461a      	mov	r2, r3
 800d37c:	7bfb      	ldrb	r3, [r7, #15]
 800d37e:	4313      	orrs	r3, r2
 800d380:	73fb      	strb	r3, [r7, #15]

		if ( format != pf )
 800d382:	7b7b      	ldrb	r3, [r7, #13]
 800d384:	79fa      	ldrb	r2, [r7, #7]
 800d386:	429a      	cmp	r2, r3
 800d388:	d005      	beq.n	800d396 <ili9488_driver_set_pixel_format+0x9a>
		{
			ILI9488_DBG_PRINT( "Verifying pixel format error..." );
 800d38a:	4906      	ldr	r1, [pc, #24]	; (800d3a4 <ili9488_driver_set_pixel_format+0xa8>)
 800d38c:	2003      	movs	r0, #3
 800d38e:	f004 fcd5 	bl	8011d3c <com_dbg_print>
			ILI9488_ASSERT( 0 );
 800d392:	f007 fe2b 	bl	8014fec <project_config_assert_fail>
		}
	}

	return status;
 800d396:	7bfb      	ldrb	r3, [r7, #15]
}
 800d398:	4618      	mov	r0, r3
 800d39a:	3710      	adds	r7, #16
 800d39c:	46bd      	mov	sp, r7
 800d39e:	bd80      	pop	{r7, pc}
 800d3a0:	0801a3f8 	.word	0x0801a3f8
 800d3a4:	0801a418 	.word	0x0801a418

0800d3a8 <ili9488_driver_read_pixel_format>:
* @param[in] 	p_format - Pointer to pixel format
* @return 		status - Either Ok or Error
*/
////////////////////////////////////////////////////////////////////////////////
ili9488_status_t ili9488_driver_read_pixel_format(ili9488_pixel_format_t * const p_format)
{
 800d3a8:	b580      	push	{r7, lr}
 800d3aa:	b084      	sub	sp, #16
 800d3ac:	af00      	add	r7, sp, #0
 800d3ae:	6078      	str	r0, [r7, #4]
	ili9488_status_t status = eILI9488_OK;
 800d3b0:	2300      	movs	r3, #0
 800d3b2:	73fb      	strb	r3, [r7, #15]
	uint8_t rx_buf;

	// Read register
	status = ili9488_low_if_read_register( eILI9488_READ_PF_CMD, (uint8_t*) &rx_buf, 1U );
 800d3b4:	f107 030e 	add.w	r3, r7, #14
 800d3b8:	2201      	movs	r2, #1
 800d3ba:	4619      	mov	r1, r3
 800d3bc:	200c      	movs	r0, #12
 800d3be:	f000 fcc5 	bl	800dd4c <ili9488_low_if_read_register>
 800d3c2:	4603      	mov	r3, r0
 800d3c4:	73fb      	strb	r3, [r7, #15]

	switch( rx_buf )
 800d3c6:	7bbb      	ldrb	r3, [r7, #14]
 800d3c8:	3b01      	subs	r3, #1
 800d3ca:	2b06      	cmp	r3, #6
 800d3cc:	d820      	bhi.n	800d410 <ili9488_driver_read_pixel_format+0x68>
 800d3ce:	a201      	add	r2, pc, #4	; (adr r2, 800d3d4 <ili9488_driver_read_pixel_format+0x2c>)
 800d3d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d3d4:	0800d3f1 	.word	0x0800d3f1
 800d3d8:	0800d411 	.word	0x0800d411
 800d3dc:	0800d411 	.word	0x0800d411
 800d3e0:	0800d411 	.word	0x0800d411
 800d3e4:	0800d3f9 	.word	0x0800d3f9
 800d3e8:	0800d401 	.word	0x0800d401
 800d3ec:	0800d409 	.word	0x0800d409
	{
		case 0x01U:
			*p_format = eILI9488_PIXEL_FORMAT_3_BIT;
 800d3f0:	687b      	ldr	r3, [r7, #4]
 800d3f2:	2200      	movs	r2, #0
 800d3f4:	701a      	strb	r2, [r3, #0]
			break;
 800d3f6:	e015      	b.n	800d424 <ili9488_driver_read_pixel_format+0x7c>

		case 0x05U:
			*p_format = eILI9488_PIXEL_FORMAT_16_BIT;
 800d3f8:	687b      	ldr	r3, [r7, #4]
 800d3fa:	2201      	movs	r2, #1
 800d3fc:	701a      	strb	r2, [r3, #0]
			break;
 800d3fe:	e011      	b.n	800d424 <ili9488_driver_read_pixel_format+0x7c>

		case 0x06U:
			*p_format = eILI9488_PIXEL_FORMAT_18_BIT;
 800d400:	687b      	ldr	r3, [r7, #4]
 800d402:	2202      	movs	r2, #2
 800d404:	701a      	strb	r2, [r3, #0]
			break;
 800d406:	e00d      	b.n	800d424 <ili9488_driver_read_pixel_format+0x7c>

		case 0x07U:
			*p_format = eILI9488_PIXEL_FORMAT_24_BIT;
 800d408:	687b      	ldr	r3, [r7, #4]
 800d40a:	2203      	movs	r2, #3
 800d40c:	701a      	strb	r2, [r3, #0]
			break;
 800d40e:	e009      	b.n	800d424 <ili9488_driver_read_pixel_format+0x7c>

		default:
			*p_format = eILI9488_PIXEL_FORMAT_3_BIT;
 800d410:	687b      	ldr	r3, [r7, #4]
 800d412:	2200      	movs	r2, #0
 800d414:	701a      	strb	r2, [r3, #0]
			ILI9488_DBG_PRINT( "Pixel Format read invalid...." );
 800d416:	4906      	ldr	r1, [pc, #24]	; (800d430 <ili9488_driver_read_pixel_format+0x88>)
 800d418:	2003      	movs	r0, #3
 800d41a:	f004 fc8f 	bl	8011d3c <com_dbg_print>
			ILI9488_ASSERT( 0 );
 800d41e:	f007 fde5 	bl	8014fec <project_config_assert_fail>
			break;
 800d422:	bf00      	nop
	}

	return status;
 800d424:	7bfb      	ldrb	r3, [r7, #15]
}
 800d426:	4618      	mov	r0, r3
 800d428:	3710      	adds	r7, #16
 800d42a:	46bd      	mov	sp, r7
 800d42c:	bd80      	pop	{r7, pc}
 800d42e:	bf00      	nop
 800d430:	0801a438 	.word	0x0801a438

0800d434 <ili9488_driver_set_cursor>:
* @param[in]	page_e - End page
* @return		status - Either Ok or Error
*/
////////////////////////////////////////////////////////////////////////////////
ili9488_status_t ili9488_driver_set_cursor(const uint16_t col_s, const uint16_t col_e, const uint16_t page_s, const uint16_t page_e)
{
 800d434:	b590      	push	{r4, r7, lr}
 800d436:	b085      	sub	sp, #20
 800d438:	af00      	add	r7, sp, #0
 800d43a:	4604      	mov	r4, r0
 800d43c:	4608      	mov	r0, r1
 800d43e:	4611      	mov	r1, r2
 800d440:	461a      	mov	r2, r3
 800d442:	4623      	mov	r3, r4
 800d444:	80fb      	strh	r3, [r7, #6]
 800d446:	4603      	mov	r3, r0
 800d448:	80bb      	strh	r3, [r7, #4]
 800d44a:	460b      	mov	r3, r1
 800d44c:	807b      	strh	r3, [r7, #2]
 800d44e:	4613      	mov	r3, r2
 800d450:	803b      	strh	r3, [r7, #0]
	ili9488_status_t status = eILI9488_OK;
 800d452:	2300      	movs	r3, #0
 800d454:	73fb      	strb	r3, [r7, #15]
	uint8_t baundary[4];

	// Check column/page limitations
	if 	(	( page_s > page_e )
 800d456:	887a      	ldrh	r2, [r7, #2]
 800d458:	883b      	ldrh	r3, [r7, #0]
 800d45a:	429a      	cmp	r2, r3
 800d45c:	d80b      	bhi.n	800d476 <ili9488_driver_set_cursor+0x42>
		|| 	( col_s > col_e )
 800d45e:	88fa      	ldrh	r2, [r7, #6]
 800d460:	88bb      	ldrh	r3, [r7, #4]
 800d462:	429a      	cmp	r2, r3
 800d464:	d807      	bhi.n	800d476 <ili9488_driver_set_cursor+0x42>
		||	( page_e > ILI9488_DISPLAY_SIZE_PAGE )
 800d466:	883b      	ldrh	r3, [r7, #0]
 800d468:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 800d46c:	d803      	bhi.n	800d476 <ili9488_driver_set_cursor+0x42>
		||	( col_e > ILI9488_DISPLAY_SIZE_COLUMN ))
 800d46e:	88bb      	ldrh	r3, [r7, #4]
 800d470:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800d474:	d908      	bls.n	800d488 <ili9488_driver_set_cursor+0x54>
	{
		ILI9488_DBG_PRINT( "Invalid column or page cursor setting..." );
 800d476:	4923      	ldr	r1, [pc, #140]	; (800d504 <ili9488_driver_set_cursor+0xd0>)
 800d478:	2003      	movs	r0, #3
 800d47a:	f004 fc5f 	bl	8011d3c <com_dbg_print>
		ILI9488_ASSERT( 0 );
 800d47e:	f007 fdb5 	bl	8014fec <project_config_assert_fail>
		status = eILI9488_ERROR;
 800d482:	2301      	movs	r3, #1
 800d484:	73fb      	strb	r3, [r7, #15]
 800d486:	e037      	b.n	800d4f8 <ili9488_driver_set_cursor+0xc4>
	}
	else
	{
		// Column boundary
		baundary[0] = (( col_s >> 8U ) & 0xFFU );
 800d488:	88fb      	ldrh	r3, [r7, #6]
 800d48a:	0a1b      	lsrs	r3, r3, #8
 800d48c:	b29b      	uxth	r3, r3
 800d48e:	b2db      	uxtb	r3, r3
 800d490:	723b      	strb	r3, [r7, #8]
		baundary[1] = (( col_s >> 0U ) & 0xFFU );
 800d492:	88fb      	ldrh	r3, [r7, #6]
 800d494:	b2db      	uxtb	r3, r3
 800d496:	727b      	strb	r3, [r7, #9]
		baundary[2] = (( col_e >> 8U ) & 0xFFU );
 800d498:	88bb      	ldrh	r3, [r7, #4]
 800d49a:	0a1b      	lsrs	r3, r3, #8
 800d49c:	b29b      	uxth	r3, r3
 800d49e:	b2db      	uxtb	r3, r3
 800d4a0:	72bb      	strb	r3, [r7, #10]
		baundary[3] = (( col_e >> 0U ) & 0xFFU );
 800d4a2:	88bb      	ldrh	r3, [r7, #4]
 800d4a4:	b2db      	uxtb	r3, r3
 800d4a6:	72fb      	strb	r3, [r7, #11]

		status |= ili9488_low_if_write_register( eILI9488_SET_COL_ADDR_CMD, (uint8_t*) &baundary, 4U );
 800d4a8:	f107 0308 	add.w	r3, r7, #8
 800d4ac:	2204      	movs	r2, #4
 800d4ae:	4619      	mov	r1, r3
 800d4b0:	202a      	movs	r0, #42	; 0x2a
 800d4b2:	f000 fc17 	bl	800dce4 <ili9488_low_if_write_register>
 800d4b6:	4603      	mov	r3, r0
 800d4b8:	461a      	mov	r2, r3
 800d4ba:	7bfb      	ldrb	r3, [r7, #15]
 800d4bc:	4313      	orrs	r3, r2
 800d4be:	73fb      	strb	r3, [r7, #15]

		// Page boundary
		baundary[0] = (( page_s >> 8U ) & 0xFFU );
 800d4c0:	887b      	ldrh	r3, [r7, #2]
 800d4c2:	0a1b      	lsrs	r3, r3, #8
 800d4c4:	b29b      	uxth	r3, r3
 800d4c6:	b2db      	uxtb	r3, r3
 800d4c8:	723b      	strb	r3, [r7, #8]
		baundary[1] = (( page_s >> 0U ) & 0xFFU );
 800d4ca:	887b      	ldrh	r3, [r7, #2]
 800d4cc:	b2db      	uxtb	r3, r3
 800d4ce:	727b      	strb	r3, [r7, #9]
		baundary[2] = (( page_e >> 8U ) & 0xFFU );
 800d4d0:	883b      	ldrh	r3, [r7, #0]
 800d4d2:	0a1b      	lsrs	r3, r3, #8
 800d4d4:	b29b      	uxth	r3, r3
 800d4d6:	b2db      	uxtb	r3, r3
 800d4d8:	72bb      	strb	r3, [r7, #10]
		baundary[3] = (( page_e >> 0U ) & 0xFFU );
 800d4da:	883b      	ldrh	r3, [r7, #0]
 800d4dc:	b2db      	uxtb	r3, r3
 800d4de:	72fb      	strb	r3, [r7, #11]

		status |= ili9488_low_if_write_register( eILI9488_SET_PAGE_ADDR_CMD, (uint8_t*) &baundary, 4U );
 800d4e0:	f107 0308 	add.w	r3, r7, #8
 800d4e4:	2204      	movs	r2, #4
 800d4e6:	4619      	mov	r1, r3
 800d4e8:	202b      	movs	r0, #43	; 0x2b
 800d4ea:	f000 fbfb 	bl	800dce4 <ili9488_low_if_write_register>
 800d4ee:	4603      	mov	r3, r0
 800d4f0:	461a      	mov	r2, r3
 800d4f2:	7bfb      	ldrb	r3, [r7, #15]
 800d4f4:	4313      	orrs	r3, r2
 800d4f6:	73fb      	strb	r3, [r7, #15]
	}

	return status;
 800d4f8:	7bfb      	ldrb	r3, [r7, #15]
}
 800d4fa:	4618      	mov	r0, r3
 800d4fc:	3714      	adds	r7, #20
 800d4fe:	46bd      	mov	sp, r7
 800d500:	bd90      	pop	{r4, r7, pc}
 800d502:	bf00      	nop
 800d504:	0801a458 	.word	0x0801a458

0800d508 <ili9488_driver_convert_color_to_rgb>:
* @param[in] 	color 	- Color to convert
* @return 		rgb		- RGB coded color
*/
////////////////////////////////////////////////////////////////////////////////
static ili9488_rgb_t ili9488_driver_convert_color_to_rgb(const ili9488_color_t color)
{
 800d508:	b580      	push	{r7, lr}
 800d50a:	b084      	sub	sp, #16
 800d50c:	af00      	add	r7, sp, #0
 800d50e:	4603      	mov	r3, r0
 800d510:	71fb      	strb	r3, [r7, #7]
	ili9488_rgb_t rgb;

	switch( color )
 800d512:	79fb      	ldrb	r3, [r7, #7]
 800d514:	2b09      	cmp	r3, #9
 800d516:	d85d      	bhi.n	800d5d4 <ili9488_driver_convert_color_to_rgb+0xcc>
 800d518:	a201      	add	r2, pc, #4	; (adr r2, 800d520 <ili9488_driver_convert_color_to_rgb+0x18>)
 800d51a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d51e:	bf00      	nop
 800d520:	0800d549 	.word	0x0800d549
 800d524:	0800d557 	.word	0x0800d557
 800d528:	0800d565 	.word	0x0800d565
 800d52c:	0800d573 	.word	0x0800d573
 800d530:	0800d581 	.word	0x0800d581
 800d534:	0800d58f 	.word	0x0800d58f
 800d538:	0800d59d 	.word	0x0800d59d
 800d53c:	0800d5ab 	.word	0x0800d5ab
 800d540:	0800d5b9 	.word	0x0800d5b9
 800d544:	0800d5c7 	.word	0x0800d5c7
	{
		case eILI9488_COLOR_BLACK:
			rgb.R = 0x00U;
 800d548:	2300      	movs	r3, #0
 800d54a:	723b      	strb	r3, [r7, #8]
			rgb.G = 0x00U;
 800d54c:	2300      	movs	r3, #0
 800d54e:	727b      	strb	r3, [r7, #9]
			rgb.B = 0x00U;
 800d550:	2300      	movs	r3, #0
 800d552:	72bb      	strb	r3, [r7, #10]
			break;
 800d554:	e04b      	b.n	800d5ee <ili9488_driver_convert_color_to_rgb+0xe6>

		case eILI9488_COLOR_BLUE:
			rgb.R = 0x00U;
 800d556:	2300      	movs	r3, #0
 800d558:	723b      	strb	r3, [r7, #8]
			rgb.G = 0x00U;
 800d55a:	2300      	movs	r3, #0
 800d55c:	727b      	strb	r3, [r7, #9]
			rgb.B = 0xFCU;
 800d55e:	23fc      	movs	r3, #252	; 0xfc
 800d560:	72bb      	strb	r3, [r7, #10]
			break;
 800d562:	e044      	b.n	800d5ee <ili9488_driver_convert_color_to_rgb+0xe6>


		case eILI9488_COLOR_GREEN:
			rgb.R = 0x00U;
 800d564:	2300      	movs	r3, #0
 800d566:	723b      	strb	r3, [r7, #8]
			rgb.G = 0xFCU;
 800d568:	23fc      	movs	r3, #252	; 0xfc
 800d56a:	727b      	strb	r3, [r7, #9]
			rgb.B = 0x00U;
 800d56c:	2300      	movs	r3, #0
 800d56e:	72bb      	strb	r3, [r7, #10]
			break;
 800d570:	e03d      	b.n	800d5ee <ili9488_driver_convert_color_to_rgb+0xe6>

		case eILI9488_COLOR_TURQUOISE:
			rgb.R = 0x00U;
 800d572:	2300      	movs	r3, #0
 800d574:	723b      	strb	r3, [r7, #8]
			rgb.G = 0xFCU;
 800d576:	23fc      	movs	r3, #252	; 0xfc
 800d578:	727b      	strb	r3, [r7, #9]
			rgb.B = 0xFCU;
 800d57a:	23fc      	movs	r3, #252	; 0xfc
 800d57c:	72bb      	strb	r3, [r7, #10]
			break;
 800d57e:	e036      	b.n	800d5ee <ili9488_driver_convert_color_to_rgb+0xe6>

		case eILI9488_COLOR_RED:
			rgb.R = 0xFCU;
 800d580:	23fc      	movs	r3, #252	; 0xfc
 800d582:	723b      	strb	r3, [r7, #8]
			rgb.G = 0x00U;
 800d584:	2300      	movs	r3, #0
 800d586:	727b      	strb	r3, [r7, #9]
			rgb.B = 0x00U;
 800d588:	2300      	movs	r3, #0
 800d58a:	72bb      	strb	r3, [r7, #10]
			break;
 800d58c:	e02f      	b.n	800d5ee <ili9488_driver_convert_color_to_rgb+0xe6>

		case eILI9488_COLOR_PURPLE:
			rgb.R = 0xFCU;
 800d58e:	23fc      	movs	r3, #252	; 0xfc
 800d590:	723b      	strb	r3, [r7, #8]
			rgb.G = 0x00U;
 800d592:	2300      	movs	r3, #0
 800d594:	727b      	strb	r3, [r7, #9]
			rgb.B = 0xFCU;
 800d596:	23fc      	movs	r3, #252	; 0xfc
 800d598:	72bb      	strb	r3, [r7, #10]
			break;
 800d59a:	e028      	b.n	800d5ee <ili9488_driver_convert_color_to_rgb+0xe6>

		case eILI9488_COLOR_YELLOW:
			rgb.R = 0xFCU;
 800d59c:	23fc      	movs	r3, #252	; 0xfc
 800d59e:	723b      	strb	r3, [r7, #8]
			rgb.G = 0xFCU;
 800d5a0:	23fc      	movs	r3, #252	; 0xfc
 800d5a2:	727b      	strb	r3, [r7, #9]
			rgb.B = 0x00U;
 800d5a4:	2300      	movs	r3, #0
 800d5a6:	72bb      	strb	r3, [r7, #10]
			break;
 800d5a8:	e021      	b.n	800d5ee <ili9488_driver_convert_color_to_rgb+0xe6>

		case eILI9488_COLOR_WHITE:
			rgb.R = 0xFCU;
 800d5aa:	23fc      	movs	r3, #252	; 0xfc
 800d5ac:	723b      	strb	r3, [r7, #8]
			rgb.G = 0xFCU;
 800d5ae:	23fc      	movs	r3, #252	; 0xfc
 800d5b0:	727b      	strb	r3, [r7, #9]
			rgb.B = 0xFCU;
 800d5b2:	23fc      	movs	r3, #252	; 0xfc
 800d5b4:	72bb      	strb	r3, [r7, #10]
			break;
 800d5b6:	e01a      	b.n	800d5ee <ili9488_driver_convert_color_to_rgb+0xe6>

		case eILI9488_COLOR_LIGHT_GRAY:
			rgb.R = 0xDCU;
 800d5b8:	23dc      	movs	r3, #220	; 0xdc
 800d5ba:	723b      	strb	r3, [r7, #8]
			rgb.G = 0xDCU;
 800d5bc:	23dc      	movs	r3, #220	; 0xdc
 800d5be:	727b      	strb	r3, [r7, #9]
			rgb.B = 0xDCU;
 800d5c0:	23dc      	movs	r3, #220	; 0xdc
 800d5c2:	72bb      	strb	r3, [r7, #10]
			break;
 800d5c4:	e013      	b.n	800d5ee <ili9488_driver_convert_color_to_rgb+0xe6>

		case eILI9488_COLOR_GRAY:
			rgb.R = 0x80U;
 800d5c6:	2380      	movs	r3, #128	; 0x80
 800d5c8:	723b      	strb	r3, [r7, #8]
			rgb.G = 0x80U;
 800d5ca:	2380      	movs	r3, #128	; 0x80
 800d5cc:	727b      	strb	r3, [r7, #9]
			rgb.B = 0x80U;
 800d5ce:	2380      	movs	r3, #128	; 0x80
 800d5d0:	72bb      	strb	r3, [r7, #10]
			break;
 800d5d2:	e00c      	b.n	800d5ee <ili9488_driver_convert_color_to_rgb+0xe6>

		default:
			rgb.R = 0x00U;
 800d5d4:	2300      	movs	r3, #0
 800d5d6:	723b      	strb	r3, [r7, #8]
			rgb.G = 0x00U;
 800d5d8:	2300      	movs	r3, #0
 800d5da:	727b      	strb	r3, [r7, #9]
			rgb.B = 0x00U;
 800d5dc:	2300      	movs	r3, #0
 800d5de:	72bb      	strb	r3, [r7, #10]

			ILI9488_DBG_PRINT( "Invalid color selection..." );
 800d5e0:	490f      	ldr	r1, [pc, #60]	; (800d620 <ili9488_driver_convert_color_to_rgb+0x118>)
 800d5e2:	2003      	movs	r0, #3
 800d5e4:	f004 fbaa 	bl	8011d3c <com_dbg_print>
			ILI9488_ASSERT( 0 );
 800d5e8:	f007 fd00 	bl	8014fec <project_config_assert_fail>
			break;
 800d5ec:	bf00      	nop
	}

	return rgb;
 800d5ee:	f107 030c 	add.w	r3, r7, #12
 800d5f2:	f107 0208 	add.w	r2, r7, #8
 800d5f6:	6812      	ldr	r2, [r2, #0]
 800d5f8:	4611      	mov	r1, r2
 800d5fa:	8019      	strh	r1, [r3, #0]
 800d5fc:	3302      	adds	r3, #2
 800d5fe:	0c12      	lsrs	r2, r2, #16
 800d600:	701a      	strb	r2, [r3, #0]
 800d602:	2300      	movs	r3, #0
 800d604:	7b3a      	ldrb	r2, [r7, #12]
 800d606:	f362 0307 	bfi	r3, r2, #0, #8
 800d60a:	7b7a      	ldrb	r2, [r7, #13]
 800d60c:	f362 230f 	bfi	r3, r2, #8, #8
 800d610:	7bba      	ldrb	r2, [r7, #14]
 800d612:	f362 4317 	bfi	r3, r2, #16, #8
}
 800d616:	4618      	mov	r0, r3
 800d618:	3710      	adds	r7, #16
 800d61a:	46bd      	mov	sp, r7
 800d61c:	bd80      	pop	{r7, pc}
 800d61e:	bf00      	nop
 800d620:	0801a484 	.word	0x0801a484

0800d624 <ili9488_driver_set_pixel>:
* @param[in] 	color - Color of pixel
* @return[in]	status - Either Ok or Error
*/
////////////////////////////////////////////////////////////////////////////////
ili9488_status_t ili9488_driver_set_pixel(const uint16_t page, const uint16_t col, const ili9488_color_t color)
{
 800d624:	b580      	push	{r7, lr}
 800d626:	b084      	sub	sp, #16
 800d628:	af00      	add	r7, sp, #0
 800d62a:	4603      	mov	r3, r0
 800d62c:	80fb      	strh	r3, [r7, #6]
 800d62e:	460b      	mov	r3, r1
 800d630:	80bb      	strh	r3, [r7, #4]
 800d632:	4613      	mov	r3, r2
 800d634:	70fb      	strb	r3, [r7, #3]
	ili9488_status_t status = eILI9488_OK;
 800d636:	2300      	movs	r3, #0
 800d638:	73fb      	strb	r3, [r7, #15]
	ili9488_rgb_t rgb;

	// Convert color
	rgb = ili9488_driver_convert_color_to_rgb( color );
 800d63a:	78fb      	ldrb	r3, [r7, #3]
 800d63c:	4618      	mov	r0, r3
 800d63e:	f7ff ff63 	bl	800d508 <ili9488_driver_convert_color_to_rgb>
 800d642:	4603      	mov	r3, r0
 800d644:	461a      	mov	r2, r3
 800d646:	733a      	strb	r2, [r7, #12]
 800d648:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800d64c:	737a      	strb	r2, [r7, #13]
 800d64e:	f3c3 4307 	ubfx	r3, r3, #16, #8
 800d652:	73bb      	strb	r3, [r7, #14]

	// Set cursor
	status |= ili9488_driver_set_cursor( col, col, page, page );
 800d654:	88fb      	ldrh	r3, [r7, #6]
 800d656:	88fa      	ldrh	r2, [r7, #6]
 800d658:	88b9      	ldrh	r1, [r7, #4]
 800d65a:	88b8      	ldrh	r0, [r7, #4]
 800d65c:	f7ff feea 	bl	800d434 <ili9488_driver_set_cursor>
 800d660:	4603      	mov	r3, r0
 800d662:	461a      	mov	r2, r3
 800d664:	7bfb      	ldrb	r3, [r7, #15]
 800d666:	4313      	orrs	r3, r2
 800d668:	73fb      	strb	r3, [r7, #15]

	// Write memory
	ili9488_low_if_write_rgb_to_gram( &rgb, 1U );
 800d66a:	f107 030c 	add.w	r3, r7, #12
 800d66e:	2101      	movs	r1, #1
 800d670:	4618      	mov	r0, r3
 800d672:	f000 fb9f 	bl	800ddb4 <ili9488_low_if_write_rgb_to_gram>

	return status;
 800d676:	7bfb      	ldrb	r3, [r7, #15]
}
 800d678:	4618      	mov	r0, r3
 800d67a:	3710      	adds	r7, #16
 800d67c:	46bd      	mov	sp, r7
 800d67e:	bd80      	pop	{r7, pc}

0800d680 <ili9488_driver_fill_rectangle>:
* @param[in]	color - Color of rectangle
* @return		status - Either Ok or Error
*/
////////////////////////////////////////////////////////////////////////////////
ili9488_status_t ili9488_driver_fill_rectangle(const uint16_t page, const uint16_t col, const uint16_t page_size, const uint16_t col_size, const ili9488_color_t color)
{
 800d680:	b590      	push	{r4, r7, lr}
 800d682:	b087      	sub	sp, #28
 800d684:	af00      	add	r7, sp, #0
 800d686:	4604      	mov	r4, r0
 800d688:	4608      	mov	r0, r1
 800d68a:	4611      	mov	r1, r2
 800d68c:	461a      	mov	r2, r3
 800d68e:	4623      	mov	r3, r4
 800d690:	80fb      	strh	r3, [r7, #6]
 800d692:	4603      	mov	r3, r0
 800d694:	80bb      	strh	r3, [r7, #4]
 800d696:	460b      	mov	r3, r1
 800d698:	807b      	strh	r3, [r7, #2]
 800d69a:	4613      	mov	r3, r2
 800d69c:	803b      	strh	r3, [r7, #0]
	ili9488_status_t status = eILI9488_OK;
 800d69e:	2300      	movs	r3, #0
 800d6a0:	75fb      	strb	r3, [r7, #23]
	uint32_t pixel_size;
	ili9488_rgb_t rgb;

	// Check limits
	if 	(	(( col + col_size ) > ILI9488_DISPLAY_SIZE_COLUMN )
 800d6a2:	88ba      	ldrh	r2, [r7, #4]
 800d6a4:	883b      	ldrh	r3, [r7, #0]
 800d6a6:	4413      	add	r3, r2
 800d6a8:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800d6ac:	dc05      	bgt.n	800d6ba <ili9488_driver_fill_rectangle+0x3a>
		||	(( page + page_size ) > ILI9488_DISPLAY_SIZE_PAGE ))
 800d6ae:	88fa      	ldrh	r2, [r7, #6]
 800d6b0:	887b      	ldrh	r3, [r7, #2]
 800d6b2:	4413      	add	r3, r2
 800d6b4:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 800d6b8:	dd08      	ble.n	800d6cc <ili9488_driver_fill_rectangle+0x4c>
	{
		status = eILI9488_ERROR;
 800d6ba:	2301      	movs	r3, #1
 800d6bc:	75fb      	strb	r3, [r7, #23]
		ILI9488_DBG_PRINT( "Filling rectangle invalid spacing..." );
 800d6be:	491f      	ldr	r1, [pc, #124]	; (800d73c <ili9488_driver_fill_rectangle+0xbc>)
 800d6c0:	2003      	movs	r0, #3
 800d6c2:	f004 fb3b 	bl	8011d3c <com_dbg_print>
		ILI9488_ASSERT( 0 );
 800d6c6:	f007 fc91 	bl	8014fec <project_config_assert_fail>
 800d6ca:	e032      	b.n	800d732 <ili9488_driver_fill_rectangle+0xb2>
	}
	else
	{
		// Convert color
		rgb = ili9488_driver_convert_color_to_rgb( color );
 800d6cc:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800d6d0:	4618      	mov	r0, r3
 800d6d2:	f7ff ff19 	bl	800d508 <ili9488_driver_convert_color_to_rgb>
 800d6d6:	4603      	mov	r3, r0
 800d6d8:	461a      	mov	r2, r3
 800d6da:	733a      	strb	r2, [r7, #12]
 800d6dc:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800d6e0:	737a      	strb	r2, [r7, #13]
 800d6e2:	f3c3 4307 	ubfx	r3, r3, #16, #8
 800d6e6:	73bb      	strb	r3, [r7, #14]

		// Calculate size of pixels
		pixel_size = (uint32_t) ( col_size * page_size );
 800d6e8:	883b      	ldrh	r3, [r7, #0]
 800d6ea:	887a      	ldrh	r2, [r7, #2]
 800d6ec:	fb02 f303 	mul.w	r3, r2, r3
 800d6f0:	613b      	str	r3, [r7, #16]

		// Set cursor
		status |= ili9488_driver_set_cursor( col, col + col_size - 1, page, page + page_size - 1);
 800d6f2:	88ba      	ldrh	r2, [r7, #4]
 800d6f4:	883b      	ldrh	r3, [r7, #0]
 800d6f6:	4413      	add	r3, r2
 800d6f8:	b29b      	uxth	r3, r3
 800d6fa:	3b01      	subs	r3, #1
 800d6fc:	b299      	uxth	r1, r3
 800d6fe:	88fa      	ldrh	r2, [r7, #6]
 800d700:	887b      	ldrh	r3, [r7, #2]
 800d702:	4413      	add	r3, r2
 800d704:	b29b      	uxth	r3, r3
 800d706:	3b01      	subs	r3, #1
 800d708:	b29b      	uxth	r3, r3
 800d70a:	88fa      	ldrh	r2, [r7, #6]
 800d70c:	88b8      	ldrh	r0, [r7, #4]
 800d70e:	f7ff fe91 	bl	800d434 <ili9488_driver_set_cursor>
 800d712:	4603      	mov	r3, r0
 800d714:	461a      	mov	r2, r3
 800d716:	7dfb      	ldrb	r3, [r7, #23]
 800d718:	4313      	orrs	r3, r2
 800d71a:	75fb      	strb	r3, [r7, #23]

		// Write to memory
		status |= ili9488_low_if_write_rgb_to_gram( &rgb, pixel_size );
 800d71c:	f107 030c 	add.w	r3, r7, #12
 800d720:	6939      	ldr	r1, [r7, #16]
 800d722:	4618      	mov	r0, r3
 800d724:	f000 fb46 	bl	800ddb4 <ili9488_low_if_write_rgb_to_gram>
 800d728:	4603      	mov	r3, r0
 800d72a:	461a      	mov	r2, r3
 800d72c:	7dfb      	ldrb	r3, [r7, #23]
 800d72e:	4313      	orrs	r3, r2
 800d730:	75fb      	strb	r3, [r7, #23]
	}

	return status;
 800d732:	7dfb      	ldrb	r3, [r7, #23]
}
 800d734:	4618      	mov	r0, r3
 800d736:	371c      	adds	r7, #28
 800d738:	46bd      	mov	sp, r7
 800d73a:	bd90      	pop	{r4, r7, pc}
 800d73c:	0801a4a0 	.word	0x0801a4a0

0800d740 <ili9488_driver_draw_hline>:
* @param[in]	color 	- Color of line
* @return		status - Either Ok or Error
*/
////////////////////////////////////////////////////////////////////////////////
static ili9488_status_t ili9488_driver_draw_hline(const uint16_t page, const uint16_t col, const uint16_t length, const ili9488_color_t color)
{
 800d740:	b590      	push	{r4, r7, lr}
 800d742:	b085      	sub	sp, #20
 800d744:	af00      	add	r7, sp, #0
 800d746:	4604      	mov	r4, r0
 800d748:	4608      	mov	r0, r1
 800d74a:	4611      	mov	r1, r2
 800d74c:	461a      	mov	r2, r3
 800d74e:	4623      	mov	r3, r4
 800d750:	80fb      	strh	r3, [r7, #6]
 800d752:	4603      	mov	r3, r0
 800d754:	80bb      	strh	r3, [r7, #4]
 800d756:	460b      	mov	r3, r1
 800d758:	807b      	strh	r3, [r7, #2]
 800d75a:	4613      	mov	r3, r2
 800d75c:	707b      	strb	r3, [r7, #1]
	ili9488_status_t status = eILI9488_OK;
 800d75e:	2300      	movs	r3, #0
 800d760:	73fb      	strb	r3, [r7, #15]
	uint16_t i;

	for ( i = 0; i < length; i++ )
 800d762:	2300      	movs	r3, #0
 800d764:	81bb      	strh	r3, [r7, #12]
 800d766:	e010      	b.n	800d78a <ili9488_driver_draw_hline+0x4a>
	{
		status |= ili9488_driver_set_pixel( page + i, col, color );
 800d768:	88fa      	ldrh	r2, [r7, #6]
 800d76a:	89bb      	ldrh	r3, [r7, #12]
 800d76c:	4413      	add	r3, r2
 800d76e:	b29b      	uxth	r3, r3
 800d770:	787a      	ldrb	r2, [r7, #1]
 800d772:	88b9      	ldrh	r1, [r7, #4]
 800d774:	4618      	mov	r0, r3
 800d776:	f7ff ff55 	bl	800d624 <ili9488_driver_set_pixel>
 800d77a:	4603      	mov	r3, r0
 800d77c:	461a      	mov	r2, r3
 800d77e:	7bfb      	ldrb	r3, [r7, #15]
 800d780:	4313      	orrs	r3, r2
 800d782:	73fb      	strb	r3, [r7, #15]
	for ( i = 0; i < length; i++ )
 800d784:	89bb      	ldrh	r3, [r7, #12]
 800d786:	3301      	adds	r3, #1
 800d788:	81bb      	strh	r3, [r7, #12]
 800d78a:	89ba      	ldrh	r2, [r7, #12]
 800d78c:	887b      	ldrh	r3, [r7, #2]
 800d78e:	429a      	cmp	r2, r3
 800d790:	d3ea      	bcc.n	800d768 <ili9488_driver_draw_hline+0x28>
	}

	return status;
 800d792:	7bfb      	ldrb	r3, [r7, #15]
}
 800d794:	4618      	mov	r0, r3
 800d796:	3714      	adds	r7, #20
 800d798:	46bd      	mov	sp, r7
 800d79a:	bd90      	pop	{r4, r7, pc}

0800d79c <ili9488_driver_fill_circle>:
* @param[in]	color 	- Color of circle
* @return		status - Either Ok or Error
*/
////////////////////////////////////////////////////////////////////////////////
ili9488_status_t ili9488_driver_fill_circle(const uint16_t page, const uint16_t col, const uint16_t radius, const ili9488_color_t color)
{
 800d79c:	b590      	push	{r4, r7, lr}
 800d79e:	b087      	sub	sp, #28
 800d7a0:	af00      	add	r7, sp, #0
 800d7a2:	4604      	mov	r4, r0
 800d7a4:	4608      	mov	r0, r1
 800d7a6:	4611      	mov	r1, r2
 800d7a8:	461a      	mov	r2, r3
 800d7aa:	4623      	mov	r3, r4
 800d7ac:	80fb      	strh	r3, [r7, #6]
 800d7ae:	4603      	mov	r3, r0
 800d7b0:	80bb      	strh	r3, [r7, #4]
 800d7b2:	460b      	mov	r3, r1
 800d7b4:	807b      	strh	r3, [r7, #2]
 800d7b6:	4613      	mov	r3, r2
 800d7b8:	707b      	strb	r3, [r7, #1]
	ili9488_status_t status = eILI9488_OK;
 800d7ba:	2300      	movs	r3, #0
 800d7bc:	75fb      	strb	r3, [r7, #23]
	int32_t  D;
	uint32_t  CurX;
	uint32_t  CurY;

	// Check limits
	if 	(	(( col + radius ) > ILI9488_DISPLAY_SIZE_COLUMN )
 800d7be:	88ba      	ldrh	r2, [r7, #4]
 800d7c0:	887b      	ldrh	r3, [r7, #2]
 800d7c2:	4413      	add	r3, r2
 800d7c4:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800d7c8:	dc0f      	bgt.n	800d7ea <ili9488_driver_fill_circle+0x4e>
		||	(( page + radius ) > ILI9488_DISPLAY_SIZE_PAGE )
 800d7ca:	88fa      	ldrh	r2, [r7, #6]
 800d7cc:	887b      	ldrh	r3, [r7, #2]
 800d7ce:	4413      	add	r3, r2
 800d7d0:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 800d7d4:	dc09      	bgt.n	800d7ea <ili9488_driver_fill_circle+0x4e>
		||	(( col - radius ) < 0 )
 800d7d6:	88ba      	ldrh	r2, [r7, #4]
 800d7d8:	887b      	ldrh	r3, [r7, #2]
 800d7da:	1ad3      	subs	r3, r2, r3
 800d7dc:	2b00      	cmp	r3, #0
 800d7de:	db04      	blt.n	800d7ea <ili9488_driver_fill_circle+0x4e>
		||	(( page - radius ) < 0 ))
 800d7e0:	88fa      	ldrh	r2, [r7, #6]
 800d7e2:	887b      	ldrh	r3, [r7, #2]
 800d7e4:	1ad3      	subs	r3, r2, r3
 800d7e6:	2b00      	cmp	r3, #0
 800d7e8:	da08      	bge.n	800d7fc <ili9488_driver_fill_circle+0x60>
	{
		status = eILI9488_ERROR;
 800d7ea:	2301      	movs	r3, #1
 800d7ec:	75fb      	strb	r3, [r7, #23]
		ILI9488_DBG_PRINT( "Filling circle invalid spacing..." );
 800d7ee:	49a7      	ldr	r1, [pc, #668]	; (800da8c <ili9488_driver_fill_circle+0x2f0>)
 800d7f0:	2003      	movs	r0, #3
 800d7f2:	f004 faa3 	bl	8011d3c <com_dbg_print>
		ILI9488_ASSERT( 0 );
 800d7f6:	f007 fbf9 	bl	8014fec <project_config_assert_fail>
 800d7fa:	e142      	b.n	800da82 <ili9488_driver_fill_circle+0x2e6>
	}
	else
	{
		D = ( 3U - ( radius << 1U ));
 800d7fc:	887b      	ldrh	r3, [r7, #2]
 800d7fe:	005b      	lsls	r3, r3, #1
 800d800:	f1c3 0303 	rsb	r3, r3, #3
 800d804:	613b      	str	r3, [r7, #16]
		CurX = 0U;
 800d806:	2300      	movs	r3, #0
 800d808:	60fb      	str	r3, [r7, #12]
		CurY = radius;
 800d80a:	887b      	ldrh	r3, [r7, #2]
 800d80c:	60bb      	str	r3, [r7, #8]

		while ( CurX <= CurY )
 800d80e:	e075      	b.n	800d8fc <ili9488_driver_fill_circle+0x160>
		{
			if(CurY > 0)
 800d810:	68bb      	ldr	r3, [r7, #8]
 800d812:	2b00      	cmp	r3, #0
 800d814:	d02b      	beq.n	800d86e <ili9488_driver_fill_circle+0xd2>
			{
				status |= ili9488_driver_draw_hline( page - CurY, col + CurX, 2*CurY, color );
 800d816:	68bb      	ldr	r3, [r7, #8]
 800d818:	b29b      	uxth	r3, r3
 800d81a:	88fa      	ldrh	r2, [r7, #6]
 800d81c:	1ad3      	subs	r3, r2, r3
 800d81e:	b298      	uxth	r0, r3
 800d820:	68fb      	ldr	r3, [r7, #12]
 800d822:	b29a      	uxth	r2, r3
 800d824:	88bb      	ldrh	r3, [r7, #4]
 800d826:	4413      	add	r3, r2
 800d828:	b299      	uxth	r1, r3
 800d82a:	68bb      	ldr	r3, [r7, #8]
 800d82c:	b29b      	uxth	r3, r3
 800d82e:	005b      	lsls	r3, r3, #1
 800d830:	b29a      	uxth	r2, r3
 800d832:	787b      	ldrb	r3, [r7, #1]
 800d834:	f7ff ff84 	bl	800d740 <ili9488_driver_draw_hline>
 800d838:	4603      	mov	r3, r0
 800d83a:	461a      	mov	r2, r3
 800d83c:	7dfb      	ldrb	r3, [r7, #23]
 800d83e:	4313      	orrs	r3, r2
 800d840:	75fb      	strb	r3, [r7, #23]
				status |= ili9488_driver_draw_hline( page - CurY, col - CurX, 2*CurY, color );
 800d842:	68bb      	ldr	r3, [r7, #8]
 800d844:	b29b      	uxth	r3, r3
 800d846:	88fa      	ldrh	r2, [r7, #6]
 800d848:	1ad3      	subs	r3, r2, r3
 800d84a:	b298      	uxth	r0, r3
 800d84c:	68fb      	ldr	r3, [r7, #12]
 800d84e:	b29b      	uxth	r3, r3
 800d850:	88ba      	ldrh	r2, [r7, #4]
 800d852:	1ad3      	subs	r3, r2, r3
 800d854:	b299      	uxth	r1, r3
 800d856:	68bb      	ldr	r3, [r7, #8]
 800d858:	b29b      	uxth	r3, r3
 800d85a:	005b      	lsls	r3, r3, #1
 800d85c:	b29a      	uxth	r2, r3
 800d85e:	787b      	ldrb	r3, [r7, #1]
 800d860:	f7ff ff6e 	bl	800d740 <ili9488_driver_draw_hline>
 800d864:	4603      	mov	r3, r0
 800d866:	461a      	mov	r2, r3
 800d868:	7dfb      	ldrb	r3, [r7, #23]
 800d86a:	4313      	orrs	r3, r2
 800d86c:	75fb      	strb	r3, [r7, #23]
			}

			if(CurX > 0)
 800d86e:	68fb      	ldr	r3, [r7, #12]
 800d870:	2b00      	cmp	r3, #0
 800d872:	d02b      	beq.n	800d8cc <ili9488_driver_fill_circle+0x130>
			{
				status |= ili9488_driver_draw_hline( page - CurX, col - CurY, 2*CurX, color );
 800d874:	68fb      	ldr	r3, [r7, #12]
 800d876:	b29b      	uxth	r3, r3
 800d878:	88fa      	ldrh	r2, [r7, #6]
 800d87a:	1ad3      	subs	r3, r2, r3
 800d87c:	b298      	uxth	r0, r3
 800d87e:	68bb      	ldr	r3, [r7, #8]
 800d880:	b29b      	uxth	r3, r3
 800d882:	88ba      	ldrh	r2, [r7, #4]
 800d884:	1ad3      	subs	r3, r2, r3
 800d886:	b299      	uxth	r1, r3
 800d888:	68fb      	ldr	r3, [r7, #12]
 800d88a:	b29b      	uxth	r3, r3
 800d88c:	005b      	lsls	r3, r3, #1
 800d88e:	b29a      	uxth	r2, r3
 800d890:	787b      	ldrb	r3, [r7, #1]
 800d892:	f7ff ff55 	bl	800d740 <ili9488_driver_draw_hline>
 800d896:	4603      	mov	r3, r0
 800d898:	461a      	mov	r2, r3
 800d89a:	7dfb      	ldrb	r3, [r7, #23]
 800d89c:	4313      	orrs	r3, r2
 800d89e:	75fb      	strb	r3, [r7, #23]
				status |= ili9488_driver_draw_hline( page - CurX, col + CurY, 2*CurX, color );
 800d8a0:	68fb      	ldr	r3, [r7, #12]
 800d8a2:	b29b      	uxth	r3, r3
 800d8a4:	88fa      	ldrh	r2, [r7, #6]
 800d8a6:	1ad3      	subs	r3, r2, r3
 800d8a8:	b298      	uxth	r0, r3
 800d8aa:	68bb      	ldr	r3, [r7, #8]
 800d8ac:	b29a      	uxth	r2, r3
 800d8ae:	88bb      	ldrh	r3, [r7, #4]
 800d8b0:	4413      	add	r3, r2
 800d8b2:	b299      	uxth	r1, r3
 800d8b4:	68fb      	ldr	r3, [r7, #12]
 800d8b6:	b29b      	uxth	r3, r3
 800d8b8:	005b      	lsls	r3, r3, #1
 800d8ba:	b29a      	uxth	r2, r3
 800d8bc:	787b      	ldrb	r3, [r7, #1]
 800d8be:	f7ff ff3f 	bl	800d740 <ili9488_driver_draw_hline>
 800d8c2:	4603      	mov	r3, r0
 800d8c4:	461a      	mov	r2, r3
 800d8c6:	7dfb      	ldrb	r3, [r7, #23]
 800d8c8:	4313      	orrs	r3, r2
 800d8ca:	75fb      	strb	r3, [r7, #23]
			}

			if (D < 0)
 800d8cc:	693b      	ldr	r3, [r7, #16]
 800d8ce:	2b00      	cmp	r3, #0
 800d8d0:	da06      	bge.n	800d8e0 <ili9488_driver_fill_circle+0x144>
			{
				D += (CurX << 2) + 6;
 800d8d2:	68fb      	ldr	r3, [r7, #12]
 800d8d4:	009a      	lsls	r2, r3, #2
 800d8d6:	693b      	ldr	r3, [r7, #16]
 800d8d8:	4413      	add	r3, r2
 800d8da:	3306      	adds	r3, #6
 800d8dc:	613b      	str	r3, [r7, #16]
 800d8de:	e00a      	b.n	800d8f6 <ili9488_driver_fill_circle+0x15a>
			}
			else
			{
				D += ((CurX - CurY) << 2) + 10;
 800d8e0:	68fa      	ldr	r2, [r7, #12]
 800d8e2:	68bb      	ldr	r3, [r7, #8]
 800d8e4:	1ad3      	subs	r3, r2, r3
 800d8e6:	009a      	lsls	r2, r3, #2
 800d8e8:	693b      	ldr	r3, [r7, #16]
 800d8ea:	4413      	add	r3, r2
 800d8ec:	330a      	adds	r3, #10
 800d8ee:	613b      	str	r3, [r7, #16]
				CurY--;
 800d8f0:	68bb      	ldr	r3, [r7, #8]
 800d8f2:	3b01      	subs	r3, #1
 800d8f4:	60bb      	str	r3, [r7, #8]
			}

			CurX++;
 800d8f6:	68fb      	ldr	r3, [r7, #12]
 800d8f8:	3301      	adds	r3, #1
 800d8fa:	60fb      	str	r3, [r7, #12]
		while ( CurX <= CurY )
 800d8fc:	68fa      	ldr	r2, [r7, #12]
 800d8fe:	68bb      	ldr	r3, [r7, #8]
 800d900:	429a      	cmp	r2, r3
 800d902:	d985      	bls.n	800d810 <ili9488_driver_fill_circle+0x74>
		}

		D = 3 - (radius << 1);
 800d904:	887b      	ldrh	r3, [r7, #2]
 800d906:	005b      	lsls	r3, r3, #1
 800d908:	f1c3 0303 	rsb	r3, r3, #3
 800d90c:	613b      	str	r3, [r7, #16]
		CurX = 0;
 800d90e:	2300      	movs	r3, #0
 800d910:	60fb      	str	r3, [r7, #12]
		CurY = radius;
 800d912:	887b      	ldrh	r3, [r7, #2]
 800d914:	60bb      	str	r3, [r7, #8]

		while (CurX <= CurY)
 800d916:	e0af      	b.n	800da78 <ili9488_driver_fill_circle+0x2dc>
		{
			status |= ili9488_driver_set_pixel(( page + CurX ), ( col - CurY ), color );
 800d918:	68fb      	ldr	r3, [r7, #12]
 800d91a:	b29a      	uxth	r2, r3
 800d91c:	88fb      	ldrh	r3, [r7, #6]
 800d91e:	4413      	add	r3, r2
 800d920:	b298      	uxth	r0, r3
 800d922:	68bb      	ldr	r3, [r7, #8]
 800d924:	b29b      	uxth	r3, r3
 800d926:	88ba      	ldrh	r2, [r7, #4]
 800d928:	1ad3      	subs	r3, r2, r3
 800d92a:	b29b      	uxth	r3, r3
 800d92c:	787a      	ldrb	r2, [r7, #1]
 800d92e:	4619      	mov	r1, r3
 800d930:	f7ff fe78 	bl	800d624 <ili9488_driver_set_pixel>
 800d934:	4603      	mov	r3, r0
 800d936:	461a      	mov	r2, r3
 800d938:	7dfb      	ldrb	r3, [r7, #23]
 800d93a:	4313      	orrs	r3, r2
 800d93c:	75fb      	strb	r3, [r7, #23]
			status |= ili9488_driver_set_pixel(( page - CurX ), ( col - CurY ), color );
 800d93e:	68fb      	ldr	r3, [r7, #12]
 800d940:	b29b      	uxth	r3, r3
 800d942:	88fa      	ldrh	r2, [r7, #6]
 800d944:	1ad3      	subs	r3, r2, r3
 800d946:	b298      	uxth	r0, r3
 800d948:	68bb      	ldr	r3, [r7, #8]
 800d94a:	b29b      	uxth	r3, r3
 800d94c:	88ba      	ldrh	r2, [r7, #4]
 800d94e:	1ad3      	subs	r3, r2, r3
 800d950:	b29b      	uxth	r3, r3
 800d952:	787a      	ldrb	r2, [r7, #1]
 800d954:	4619      	mov	r1, r3
 800d956:	f7ff fe65 	bl	800d624 <ili9488_driver_set_pixel>
 800d95a:	4603      	mov	r3, r0
 800d95c:	461a      	mov	r2, r3
 800d95e:	7dfb      	ldrb	r3, [r7, #23]
 800d960:	4313      	orrs	r3, r2
 800d962:	75fb      	strb	r3, [r7, #23]
			status |= ili9488_driver_set_pixel(( page + CurY ), ( col - CurX ), color );
 800d964:	68bb      	ldr	r3, [r7, #8]
 800d966:	b29a      	uxth	r2, r3
 800d968:	88fb      	ldrh	r3, [r7, #6]
 800d96a:	4413      	add	r3, r2
 800d96c:	b298      	uxth	r0, r3
 800d96e:	68fb      	ldr	r3, [r7, #12]
 800d970:	b29b      	uxth	r3, r3
 800d972:	88ba      	ldrh	r2, [r7, #4]
 800d974:	1ad3      	subs	r3, r2, r3
 800d976:	b29b      	uxth	r3, r3
 800d978:	787a      	ldrb	r2, [r7, #1]
 800d97a:	4619      	mov	r1, r3
 800d97c:	f7ff fe52 	bl	800d624 <ili9488_driver_set_pixel>
 800d980:	4603      	mov	r3, r0
 800d982:	461a      	mov	r2, r3
 800d984:	7dfb      	ldrb	r3, [r7, #23]
 800d986:	4313      	orrs	r3, r2
 800d988:	75fb      	strb	r3, [r7, #23]
			status |= ili9488_driver_set_pixel(( page - CurY ), ( col - CurX ), color );
 800d98a:	68bb      	ldr	r3, [r7, #8]
 800d98c:	b29b      	uxth	r3, r3
 800d98e:	88fa      	ldrh	r2, [r7, #6]
 800d990:	1ad3      	subs	r3, r2, r3
 800d992:	b298      	uxth	r0, r3
 800d994:	68fb      	ldr	r3, [r7, #12]
 800d996:	b29b      	uxth	r3, r3
 800d998:	88ba      	ldrh	r2, [r7, #4]
 800d99a:	1ad3      	subs	r3, r2, r3
 800d99c:	b29b      	uxth	r3, r3
 800d99e:	787a      	ldrb	r2, [r7, #1]
 800d9a0:	4619      	mov	r1, r3
 800d9a2:	f7ff fe3f 	bl	800d624 <ili9488_driver_set_pixel>
 800d9a6:	4603      	mov	r3, r0
 800d9a8:	461a      	mov	r2, r3
 800d9aa:	7dfb      	ldrb	r3, [r7, #23]
 800d9ac:	4313      	orrs	r3, r2
 800d9ae:	75fb      	strb	r3, [r7, #23]
			status |= ili9488_driver_set_pixel(( page + CurX ), ( col + CurY ), color );
 800d9b0:	68fb      	ldr	r3, [r7, #12]
 800d9b2:	b29a      	uxth	r2, r3
 800d9b4:	88fb      	ldrh	r3, [r7, #6]
 800d9b6:	4413      	add	r3, r2
 800d9b8:	b298      	uxth	r0, r3
 800d9ba:	68bb      	ldr	r3, [r7, #8]
 800d9bc:	b29a      	uxth	r2, r3
 800d9be:	88bb      	ldrh	r3, [r7, #4]
 800d9c0:	4413      	add	r3, r2
 800d9c2:	b29b      	uxth	r3, r3
 800d9c4:	787a      	ldrb	r2, [r7, #1]
 800d9c6:	4619      	mov	r1, r3
 800d9c8:	f7ff fe2c 	bl	800d624 <ili9488_driver_set_pixel>
 800d9cc:	4603      	mov	r3, r0
 800d9ce:	461a      	mov	r2, r3
 800d9d0:	7dfb      	ldrb	r3, [r7, #23]
 800d9d2:	4313      	orrs	r3, r2
 800d9d4:	75fb      	strb	r3, [r7, #23]
			status |= ili9488_driver_set_pixel(( page - CurX ), ( col + CurY ), color );
 800d9d6:	68fb      	ldr	r3, [r7, #12]
 800d9d8:	b29b      	uxth	r3, r3
 800d9da:	88fa      	ldrh	r2, [r7, #6]
 800d9dc:	1ad3      	subs	r3, r2, r3
 800d9de:	b298      	uxth	r0, r3
 800d9e0:	68bb      	ldr	r3, [r7, #8]
 800d9e2:	b29a      	uxth	r2, r3
 800d9e4:	88bb      	ldrh	r3, [r7, #4]
 800d9e6:	4413      	add	r3, r2
 800d9e8:	b29b      	uxth	r3, r3
 800d9ea:	787a      	ldrb	r2, [r7, #1]
 800d9ec:	4619      	mov	r1, r3
 800d9ee:	f7ff fe19 	bl	800d624 <ili9488_driver_set_pixel>
 800d9f2:	4603      	mov	r3, r0
 800d9f4:	461a      	mov	r2, r3
 800d9f6:	7dfb      	ldrb	r3, [r7, #23]
 800d9f8:	4313      	orrs	r3, r2
 800d9fa:	75fb      	strb	r3, [r7, #23]
			status |= ili9488_driver_set_pixel(( page + CurY ), ( col + CurX ), color );
 800d9fc:	68bb      	ldr	r3, [r7, #8]
 800d9fe:	b29a      	uxth	r2, r3
 800da00:	88fb      	ldrh	r3, [r7, #6]
 800da02:	4413      	add	r3, r2
 800da04:	b298      	uxth	r0, r3
 800da06:	68fb      	ldr	r3, [r7, #12]
 800da08:	b29a      	uxth	r2, r3
 800da0a:	88bb      	ldrh	r3, [r7, #4]
 800da0c:	4413      	add	r3, r2
 800da0e:	b29b      	uxth	r3, r3
 800da10:	787a      	ldrb	r2, [r7, #1]
 800da12:	4619      	mov	r1, r3
 800da14:	f7ff fe06 	bl	800d624 <ili9488_driver_set_pixel>
 800da18:	4603      	mov	r3, r0
 800da1a:	461a      	mov	r2, r3
 800da1c:	7dfb      	ldrb	r3, [r7, #23]
 800da1e:	4313      	orrs	r3, r2
 800da20:	75fb      	strb	r3, [r7, #23]
			status |= ili9488_driver_set_pixel(( page - CurY ), ( col + CurX ), color );
 800da22:	68bb      	ldr	r3, [r7, #8]
 800da24:	b29b      	uxth	r3, r3
 800da26:	88fa      	ldrh	r2, [r7, #6]
 800da28:	1ad3      	subs	r3, r2, r3
 800da2a:	b298      	uxth	r0, r3
 800da2c:	68fb      	ldr	r3, [r7, #12]
 800da2e:	b29a      	uxth	r2, r3
 800da30:	88bb      	ldrh	r3, [r7, #4]
 800da32:	4413      	add	r3, r2
 800da34:	b29b      	uxth	r3, r3
 800da36:	787a      	ldrb	r2, [r7, #1]
 800da38:	4619      	mov	r1, r3
 800da3a:	f7ff fdf3 	bl	800d624 <ili9488_driver_set_pixel>
 800da3e:	4603      	mov	r3, r0
 800da40:	461a      	mov	r2, r3
 800da42:	7dfb      	ldrb	r3, [r7, #23]
 800da44:	4313      	orrs	r3, r2
 800da46:	75fb      	strb	r3, [r7, #23]

			if (D < 0)
 800da48:	693b      	ldr	r3, [r7, #16]
 800da4a:	2b00      	cmp	r3, #0
 800da4c:	da06      	bge.n	800da5c <ili9488_driver_fill_circle+0x2c0>
			{
				D += (CurX << 2) + 6;
 800da4e:	68fb      	ldr	r3, [r7, #12]
 800da50:	009a      	lsls	r2, r3, #2
 800da52:	693b      	ldr	r3, [r7, #16]
 800da54:	4413      	add	r3, r2
 800da56:	3306      	adds	r3, #6
 800da58:	613b      	str	r3, [r7, #16]
 800da5a:	e00a      	b.n	800da72 <ili9488_driver_fill_circle+0x2d6>
			}
			else
			{
				D += ((CurX - CurY) << 2) + 10;
 800da5c:	68fa      	ldr	r2, [r7, #12]
 800da5e:	68bb      	ldr	r3, [r7, #8]
 800da60:	1ad3      	subs	r3, r2, r3
 800da62:	009a      	lsls	r2, r3, #2
 800da64:	693b      	ldr	r3, [r7, #16]
 800da66:	4413      	add	r3, r2
 800da68:	330a      	adds	r3, #10
 800da6a:	613b      	str	r3, [r7, #16]
				CurY--;
 800da6c:	68bb      	ldr	r3, [r7, #8]
 800da6e:	3b01      	subs	r3, #1
 800da70:	60bb      	str	r3, [r7, #8]
			}

			CurX++;
 800da72:	68fb      	ldr	r3, [r7, #12]
 800da74:	3301      	adds	r3, #1
 800da76:	60fb      	str	r3, [r7, #12]
		while (CurX <= CurY)
 800da78:	68fa      	ldr	r2, [r7, #12]
 800da7a:	68bb      	ldr	r3, [r7, #8]
 800da7c:	429a      	cmp	r2, r3
 800da7e:	f67f af4b 	bls.w	800d918 <ili9488_driver_fill_circle+0x17c>
		}
	}

	return status;
 800da82:	7dfb      	ldrb	r3, [r7, #23]
}
 800da84:	4618      	mov	r0, r3
 800da86:	371c      	adds	r7, #28
 800da88:	46bd      	mov	sp, r7
 800da8a:	bd90      	pop	{r4, r7, pc}
 800da8c:	0801a4c8 	.word	0x0801a4c8

0800da90 <ili9488_driver_set_char>:
* @param[in] 	font_opt - Font of choise
* @return		status - Either Ok or Error
*/
////////////////////////////////////////////////////////////////////////////////
ili9488_status_t ili9488_driver_set_char(const uint8_t ch, const uint16_t page, const uint16_t col, const ili9488_color_t fg_color, const ili9488_color_t  bg_color, const ili9488_font_opt_t font_opt)
{
 800da90:	b590      	push	{r4, r7, lr}
 800da92:	b089      	sub	sp, #36	; 0x24
 800da94:	af00      	add	r7, sp, #0
 800da96:	4604      	mov	r4, r0
 800da98:	4608      	mov	r0, r1
 800da9a:	4611      	mov	r1, r2
 800da9c:	461a      	mov	r2, r3
 800da9e:	4623      	mov	r3, r4
 800daa0:	71fb      	strb	r3, [r7, #7]
 800daa2:	4603      	mov	r3, r0
 800daa4:	80bb      	strh	r3, [r7, #4]
 800daa6:	460b      	mov	r3, r1
 800daa8:	807b      	strh	r3, [r7, #2]
 800daaa:	4613      	mov	r3, r2
 800daac:	71bb      	strb	r3, [r7, #6]
	ili9488_status_t status = eILI9488_OK;
 800daae:	2300      	movs	r3, #0
 800dab0:	77fb      	strb	r3, [r7, #31]
	uint8_t line_size_byte;
	uint8_t line_bit_offset;
	uint8_t char_lut_size;

	// Get font data
	p_font = ili9488_font_get( font_opt );
 800dab2:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800dab6:	4618      	mov	r0, r3
 800dab8:	f000 f8d4 	bl	800dc64 <ili9488_font_get>
 800dabc:	6178      	str	r0, [r7, #20]

	// Check pinter
	if ( NULL != p_font )
 800dabe:	697b      	ldr	r3, [r7, #20]
 800dac0:	2b00      	cmp	r3, #0
 800dac2:	f000 8090 	beq.w	800dbe6 <ili9488_driver_set_char+0x156>
	{
		// Calculate various font table info
		line_size_bit = ((( p_font -> width / 8U ) * 8U ) + 8U );
 800dac6:	697b      	ldr	r3, [r7, #20]
 800dac8:	791b      	ldrb	r3, [r3, #4]
 800daca:	08db      	lsrs	r3, r3, #3
 800dacc:	b2db      	uxtb	r3, r3
 800dace:	3301      	adds	r3, #1
 800dad0:	b2db      	uxtb	r3, r3
 800dad2:	00db      	lsls	r3, r3, #3
 800dad4:	74fb      	strb	r3, [r7, #19]
		line_size_byte = ( line_size_bit / 8U );
 800dad6:	7cfb      	ldrb	r3, [r7, #19]
 800dad8:	08db      	lsrs	r3, r3, #3
 800dada:	74bb      	strb	r3, [r7, #18]
		line_bit_offset = ( line_size_bit - ( p_font -> width ));
 800dadc:	697b      	ldr	r3, [r7, #20]
 800dade:	791b      	ldrb	r3, [r3, #4]
 800dae0:	7cfa      	ldrb	r2, [r7, #19]
 800dae2:	1ad3      	subs	r3, r2, r3
 800dae4:	747b      	strb	r3, [r7, #17]
		char_lut_size = ( p_font -> height * line_size_byte );
 800dae6:	697b      	ldr	r3, [r7, #20]
 800dae8:	795b      	ldrb	r3, [r3, #5]
 800daea:	7cba      	ldrb	r2, [r7, #18]
 800daec:	fb12 f303 	smulbb	r3, r2, r3
 800daf0:	743b      	strb	r3, [r7, #16]

		// Calculate table offset
		lut_offset = char_lut_size * ( ch - 32U );
 800daf2:	7c3b      	ldrb	r3, [r7, #16]
 800daf4:	79fa      	ldrb	r2, [r7, #7]
 800daf6:	3a20      	subs	r2, #32
 800daf8:	fb02 f303 	mul.w	r3, r2, r3
 800dafc:	60fb      	str	r3, [r7, #12]

		// Every line
		for ( i = 0; i < p_font -> height; i ++ )
 800dafe:	2300      	movs	r3, #0
 800db00:	77bb      	strb	r3, [r7, #30]
 800db02:	e06a      	b.n	800dbda <ili9488_driver_set_char+0x14a>
		{
			// Assemble line
			line = 0;
 800db04:	2300      	movs	r3, #0
 800db06:	61bb      	str	r3, [r7, #24]
			for ( j = 0; j < line_size_byte; j++ )
 800db08:	2300      	movs	r3, #0
 800db0a:	777b      	strb	r3, [r7, #29]
 800db0c:	e01b      	b.n	800db46 <ili9488_driver_set_char+0xb6>
			{
				line |= ( p_font -> p_font[ lut_offset + ( i * line_size_byte ) + j ] << ( line_size_bit - ( 8U * ( j + 1U ))));
 800db0e:	697b      	ldr	r3, [r7, #20]
 800db10:	681a      	ldr	r2, [r3, #0]
 800db12:	7fbb      	ldrb	r3, [r7, #30]
 800db14:	7cb9      	ldrb	r1, [r7, #18]
 800db16:	fb01 f303 	mul.w	r3, r1, r3
 800db1a:	4619      	mov	r1, r3
 800db1c:	68fb      	ldr	r3, [r7, #12]
 800db1e:	4419      	add	r1, r3
 800db20:	7f7b      	ldrb	r3, [r7, #29]
 800db22:	440b      	add	r3, r1
 800db24:	4413      	add	r3, r2
 800db26:	781b      	ldrb	r3, [r3, #0]
 800db28:	4619      	mov	r1, r3
 800db2a:	7cfa      	ldrb	r2, [r7, #19]
 800db2c:	7f7b      	ldrb	r3, [r7, #29]
 800db2e:	3301      	adds	r3, #1
 800db30:	00db      	lsls	r3, r3, #3
 800db32:	1ad3      	subs	r3, r2, r3
 800db34:	fa01 f303 	lsl.w	r3, r1, r3
 800db38:	461a      	mov	r2, r3
 800db3a:	69bb      	ldr	r3, [r7, #24]
 800db3c:	4313      	orrs	r3, r2
 800db3e:	61bb      	str	r3, [r7, #24]
			for ( j = 0; j < line_size_byte; j++ )
 800db40:	7f7b      	ldrb	r3, [r7, #29]
 800db42:	3301      	adds	r3, #1
 800db44:	777b      	strb	r3, [r7, #29]
 800db46:	7f7a      	ldrb	r2, [r7, #29]
 800db48:	7cbb      	ldrb	r3, [r7, #18]
 800db4a:	429a      	cmp	r2, r3
 800db4c:	d3df      	bcc.n	800db0e <ili9488_driver_set_char+0x7e>
			}

			// Every pixel
			for( j = line_bit_offset; j < line_size_bit; j++ )
 800db4e:	7c7b      	ldrb	r3, [r7, #17]
 800db50:	777b      	strb	r3, [r7, #29]
 800db52:	e03b      	b.n	800dbcc <ili9488_driver_set_char+0x13c>
			{
				// NOTE: Font width is multiply by two for offset, as char start to draw from right to left
				// Pixel set
				if ( line & ( 1 << j ))
 800db54:	7f7b      	ldrb	r3, [r7, #29]
 800db56:	2201      	movs	r2, #1
 800db58:	fa02 f303 	lsl.w	r3, r2, r3
 800db5c:	461a      	mov	r2, r3
 800db5e:	69bb      	ldr	r3, [r7, #24]
 800db60:	4013      	ands	r3, r2
 800db62:	2b00      	cmp	r3, #0
 800db64:	d017      	beq.n	800db96 <ili9488_driver_set_char+0x106>
				{
					ili9488_driver_set_pixel( page + (( 2U * p_font -> width ) - j -1U ), col + i, fg_color );
 800db66:	697b      	ldr	r3, [r7, #20]
 800db68:	791b      	ldrb	r3, [r3, #4]
 800db6a:	b29b      	uxth	r3, r3
 800db6c:	005b      	lsls	r3, r3, #1
 800db6e:	b29a      	uxth	r2, r3
 800db70:	7f7b      	ldrb	r3, [r7, #29]
 800db72:	b29b      	uxth	r3, r3
 800db74:	1ad3      	subs	r3, r2, r3
 800db76:	b29a      	uxth	r2, r3
 800db78:	88bb      	ldrh	r3, [r7, #4]
 800db7a:	4413      	add	r3, r2
 800db7c:	b29b      	uxth	r3, r3
 800db7e:	3b01      	subs	r3, #1
 800db80:	b298      	uxth	r0, r3
 800db82:	7fbb      	ldrb	r3, [r7, #30]
 800db84:	b29a      	uxth	r2, r3
 800db86:	887b      	ldrh	r3, [r7, #2]
 800db88:	4413      	add	r3, r2
 800db8a:	b29b      	uxth	r3, r3
 800db8c:	79ba      	ldrb	r2, [r7, #6]
 800db8e:	4619      	mov	r1, r3
 800db90:	f7ff fd48 	bl	800d624 <ili9488_driver_set_pixel>
 800db94:	e017      	b.n	800dbc6 <ili9488_driver_set_char+0x136>
				}

				// Pixel cleared
				else
				{
					ili9488_driver_set_pixel( page + (( 2U * p_font -> width ) - j - 1U ), col + i, bg_color );
 800db96:	697b      	ldr	r3, [r7, #20]
 800db98:	791b      	ldrb	r3, [r3, #4]
 800db9a:	b29b      	uxth	r3, r3
 800db9c:	005b      	lsls	r3, r3, #1
 800db9e:	b29a      	uxth	r2, r3
 800dba0:	7f7b      	ldrb	r3, [r7, #29]
 800dba2:	b29b      	uxth	r3, r3
 800dba4:	1ad3      	subs	r3, r2, r3
 800dba6:	b29a      	uxth	r2, r3
 800dba8:	88bb      	ldrh	r3, [r7, #4]
 800dbaa:	4413      	add	r3, r2
 800dbac:	b29b      	uxth	r3, r3
 800dbae:	3b01      	subs	r3, #1
 800dbb0:	b298      	uxth	r0, r3
 800dbb2:	7fbb      	ldrb	r3, [r7, #30]
 800dbb4:	b29a      	uxth	r2, r3
 800dbb6:	887b      	ldrh	r3, [r7, #2]
 800dbb8:	4413      	add	r3, r2
 800dbba:	b29b      	uxth	r3, r3
 800dbbc:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 800dbc0:	4619      	mov	r1, r3
 800dbc2:	f7ff fd2f 	bl	800d624 <ili9488_driver_set_pixel>
			for( j = line_bit_offset; j < line_size_bit; j++ )
 800dbc6:	7f7b      	ldrb	r3, [r7, #29]
 800dbc8:	3301      	adds	r3, #1
 800dbca:	777b      	strb	r3, [r7, #29]
 800dbcc:	7f7a      	ldrb	r2, [r7, #29]
 800dbce:	7cfb      	ldrb	r3, [r7, #19]
 800dbd0:	429a      	cmp	r2, r3
 800dbd2:	d3bf      	bcc.n	800db54 <ili9488_driver_set_char+0xc4>
		for ( i = 0; i < p_font -> height; i ++ )
 800dbd4:	7fbb      	ldrb	r3, [r7, #30]
 800dbd6:	3301      	adds	r3, #1
 800dbd8:	77bb      	strb	r3, [r7, #30]
 800dbda:	697b      	ldr	r3, [r7, #20]
 800dbdc:	795b      	ldrb	r3, [r3, #5]
 800dbde:	7fba      	ldrb	r2, [r7, #30]
 800dbe0:	429a      	cmp	r2, r3
 800dbe2:	d38f      	bcc.n	800db04 <ili9488_driver_set_char+0x74>
 800dbe4:	e001      	b.n	800dbea <ili9488_driver_set_char+0x15a>
	}

	// No font
	else
	{
		status = eILI9488_ERROR;
 800dbe6:	2301      	movs	r3, #1
 800dbe8:	77fb      	strb	r3, [r7, #31]
	}

	return status;
 800dbea:	7ffb      	ldrb	r3, [r7, #31]
}
 800dbec:	4618      	mov	r0, r3
 800dbee:	3724      	adds	r7, #36	; 0x24
 800dbf0:	46bd      	mov	sp, r7
 800dbf2:	bd90      	pop	{r4, r7, pc}

0800dbf4 <ili9488_driver_set_string>:
* @param[in] 	font_opt - Font of choise
* @return		status - Either Ok or Error
*/
////////////////////////////////////////////////////////////////////////////////
ili9488_status_t ili9488_driver_set_string(const char *str, const uint16_t page, const uint16_t col, const ili9488_color_t fg_color, const ili9488_color_t  bg_color, const ili9488_font_opt_t font_opt)
{
 800dbf4:	b590      	push	{r4, r7, lr}
 800dbf6:	b089      	sub	sp, #36	; 0x24
 800dbf8:	af02      	add	r7, sp, #8
 800dbfa:	60f8      	str	r0, [r7, #12]
 800dbfc:	4608      	mov	r0, r1
 800dbfe:	4611      	mov	r1, r2
 800dc00:	461a      	mov	r2, r3
 800dc02:	4603      	mov	r3, r0
 800dc04:	817b      	strh	r3, [r7, #10]
 800dc06:	460b      	mov	r3, r1
 800dc08:	813b      	strh	r3, [r7, #8]
 800dc0a:	4613      	mov	r3, r2
 800dc0c:	71fb      	strb	r3, [r7, #7]
	ili9488_status_t status = eILI9488_OK;
 800dc0e:	2300      	movs	r3, #0
 800dc10:	757b      	strb	r3, [r7, #21]
	uint16_t page_walker = page;
 800dc12:	897b      	ldrh	r3, [r7, #10]
 800dc14:	82fb      	strh	r3, [r7, #22]
	uint8_t font_width;

	// Get font width
	font_width = ili9488_font_get_width( font_opt );
 800dc16:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800dc1a:	4618      	mov	r0, r3
 800dc1c:	f000 f842 	bl	800dca4 <ili9488_font_get_width>
 800dc20:	4603      	mov	r3, r0
 800dc22:	753b      	strb	r3, [r7, #20]

	// Print chars
	while( *str )
 800dc24:	e015      	b.n	800dc52 <ili9488_driver_set_string+0x5e>
	{
		ili9488_driver_set_char( *str, page_walker, col, fg_color, bg_color, font_opt );
 800dc26:	68fb      	ldr	r3, [r7, #12]
 800dc28:	7818      	ldrb	r0, [r3, #0]
 800dc2a:	79fc      	ldrb	r4, [r7, #7]
 800dc2c:	893a      	ldrh	r2, [r7, #8]
 800dc2e:	8af9      	ldrh	r1, [r7, #22]
 800dc30:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800dc34:	9301      	str	r3, [sp, #4]
 800dc36:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800dc3a:	9300      	str	r3, [sp, #0]
 800dc3c:	4623      	mov	r3, r4
 800dc3e:	f7ff ff27 	bl	800da90 <ili9488_driver_set_char>
		str++;
 800dc42:	68fb      	ldr	r3, [r7, #12]
 800dc44:	3301      	adds	r3, #1
 800dc46:	60fb      	str	r3, [r7, #12]
		page_walker += font_width;
 800dc48:	7d3b      	ldrb	r3, [r7, #20]
 800dc4a:	b29a      	uxth	r2, r3
 800dc4c:	8afb      	ldrh	r3, [r7, #22]
 800dc4e:	4413      	add	r3, r2
 800dc50:	82fb      	strh	r3, [r7, #22]
	while( *str )
 800dc52:	68fb      	ldr	r3, [r7, #12]
 800dc54:	781b      	ldrb	r3, [r3, #0]
 800dc56:	2b00      	cmp	r3, #0
 800dc58:	d1e5      	bne.n	800dc26 <ili9488_driver_set_string+0x32>
	}

	return status;
 800dc5a:	7d7b      	ldrb	r3, [r7, #21]
}
 800dc5c:	4618      	mov	r0, r3
 800dc5e:	371c      	adds	r7, #28
 800dc60:	46bd      	mov	sp, r7
 800dc62:	bd90      	pop	{r4, r7, pc}

0800dc64 <ili9488_font_get>:
* @param[in] 	font_opt - Choosen font
* @return 		p_font - Pointer to font data
*/
////////////////////////////////////////////////////////////////////////////////
const ili9488_font_t * ili9488_font_get(const ili9488_font_opt_t font_opt)
{
 800dc64:	b580      	push	{r7, lr}
 800dc66:	b084      	sub	sp, #16
 800dc68:	af00      	add	r7, sp, #0
 800dc6a:	4603      	mov	r3, r0
 800dc6c:	71fb      	strb	r3, [r7, #7]
	const ili9488_font_t * p_font;

	if ( font_opt < eILI9488_FONT_NUM_OF )
 800dc6e:	79fb      	ldrb	r3, [r7, #7]
 800dc70:	2b04      	cmp	r3, #4
 800dc72:	d805      	bhi.n	800dc80 <ili9488_font_get+0x1c>
	{
		p_font = &g_fontList[ font_opt ];
 800dc74:	79fb      	ldrb	r3, [r7, #7]
 800dc76:	00db      	lsls	r3, r3, #3
 800dc78:	4a08      	ldr	r2, [pc, #32]	; (800dc9c <ili9488_font_get+0x38>)
 800dc7a:	4413      	add	r3, r2
 800dc7c:	60fb      	str	r3, [r7, #12]
 800dc7e:	e007      	b.n	800dc90 <ili9488_font_get+0x2c>
	}
	else
	{
		p_font = NULL;
 800dc80:	2300      	movs	r3, #0
 800dc82:	60fb      	str	r3, [r7, #12]
		ILI9488_DBG_PRINT( "Invalid font selection..." );
 800dc84:	4906      	ldr	r1, [pc, #24]	; (800dca0 <ili9488_font_get+0x3c>)
 800dc86:	2003      	movs	r0, #3
 800dc88:	f004 f858 	bl	8011d3c <com_dbg_print>
		ILI9488_ASSERT( 0 );
 800dc8c:	f007 f9ae 	bl	8014fec <project_config_assert_fail>
	}

	return p_font;
 800dc90:	68fb      	ldr	r3, [r7, #12]
}
 800dc92:	4618      	mov	r0, r3
 800dc94:	3710      	adds	r7, #16
 800dc96:	46bd      	mov	sp, r7
 800dc98:	bd80      	pop	{r7, pc}
 800dc9a:	bf00      	nop
 800dc9c:	0801ed9c 	.word	0x0801ed9c
 800dca0:	0801a4ec 	.word	0x0801a4ec

0800dca4 <ili9488_font_get_width>:
* @param[in] 	font_opt - Choosen font
* @return 		font_opt - Choosen font
*/
////////////////////////////////////////////////////////////////////////////////
uint8_t	ili9488_font_get_width(const ili9488_font_opt_t font_opt)
{
 800dca4:	b580      	push	{r7, lr}
 800dca6:	b084      	sub	sp, #16
 800dca8:	af00      	add	r7, sp, #0
 800dcaa:	4603      	mov	r3, r0
 800dcac:	71fb      	strb	r3, [r7, #7]
	uint8_t width;

	if ( font_opt < eILI9488_FONT_NUM_OF )
 800dcae:	79fb      	ldrb	r3, [r7, #7]
 800dcb0:	2b04      	cmp	r3, #4
 800dcb2:	d806      	bhi.n	800dcc2 <ili9488_font_get_width+0x1e>
	{
		width = g_fontList[ font_opt ].width;
 800dcb4:	79fb      	ldrb	r3, [r7, #7]
 800dcb6:	4a09      	ldr	r2, [pc, #36]	; (800dcdc <ili9488_font_get_width+0x38>)
 800dcb8:	00db      	lsls	r3, r3, #3
 800dcba:	4413      	add	r3, r2
 800dcbc:	791b      	ldrb	r3, [r3, #4]
 800dcbe:	73fb      	strb	r3, [r7, #15]
 800dcc0:	e007      	b.n	800dcd2 <ili9488_font_get_width+0x2e>
	}
	else
	{
		width = 0;
 800dcc2:	2300      	movs	r3, #0
 800dcc4:	73fb      	strb	r3, [r7, #15]
		ILI9488_DBG_PRINT( "Invalid font selection..." );
 800dcc6:	4906      	ldr	r1, [pc, #24]	; (800dce0 <ili9488_font_get_width+0x3c>)
 800dcc8:	2003      	movs	r0, #3
 800dcca:	f004 f837 	bl	8011d3c <com_dbg_print>
		ILI9488_ASSERT( 0 );
 800dcce:	f007 f98d 	bl	8014fec <project_config_assert_fail>
	}

	return width;
 800dcd2:	7bfb      	ldrb	r3, [r7, #15]
}
 800dcd4:	4618      	mov	r0, r3
 800dcd6:	3710      	adds	r7, #16
 800dcd8:	46bd      	mov	sp, r7
 800dcda:	bd80      	pop	{r7, pc}
 800dcdc:	0801ed9c 	.word	0x0801ed9c
 800dce0:	0801a4ec 	.word	0x0801a4ec

0800dce4 <ili9488_low_if_write_register>:
* @param[in]	size 		- Number of data to transmit
* @return		status 		- Either Ok or Error
*/
////////////////////////////////////////////////////////////////////////////////
ili9488_status_t ili9488_low_if_write_register(const ili9488_cmd_t cmd, const uint8_t * const tx_data, const uint32_t size)
{
 800dce4:	b580      	push	{r7, lr}
 800dce6:	b086      	sub	sp, #24
 800dce8:	af00      	add	r7, sp, #0
 800dcea:	4603      	mov	r3, r0
 800dcec:	60b9      	str	r1, [r7, #8]
 800dcee:	607a      	str	r2, [r7, #4]
 800dcf0:	73fb      	strb	r3, [r7, #15]
	ili9488_status_t 	status 	= eILI9488_OK;
 800dcf2:	2300      	movs	r3, #0
 800dcf4:	75fb      	strb	r3, [r7, #23]
	uint8_t 			command = cmd;
 800dcf6:	7bfb      	ldrb	r3, [r7, #15]
 800dcf8:	75bb      	strb	r3, [r7, #22]

	// Set CS & DC
	ILI9488_LOW_IF_CS_LOW();
 800dcfa:	2000      	movs	r0, #0
 800dcfc:	f000 f89f 	bl	800de3e <ili9488_if_set_cs>
	ILI9488_LOW_IF_DC_COMMAND();
 800dd00:	2000      	movs	r0, #0
 800dd02:	f000 f8b1 	bl	800de68 <ili9488_if_set_dc>

	// Send command
	if ( eILI9488_OK != ili9488_if_spi_transmit( &command, 1U ))
 800dd06:	f107 0316 	add.w	r3, r7, #22
 800dd0a:	2101      	movs	r1, #1
 800dd0c:	4618      	mov	r0, r3
 800dd0e:	f000 f8e3 	bl	800ded8 <ili9488_if_spi_transmit>
 800dd12:	4603      	mov	r3, r0
 800dd14:	2b00      	cmp	r3, #0
 800dd16:	d002      	beq.n	800dd1e <ili9488_low_if_write_register+0x3a>
	{
		status = eILI9488_ERROR;
 800dd18:	2301      	movs	r3, #1
 800dd1a:	75fb      	strb	r3, [r7, #23]
 800dd1c:	e00e      	b.n	800dd3c <ili9488_low_if_write_register+0x58>

	// Command send OK
	else
	{
		// In case of parameters send them as well
		if ( size > 0 )
 800dd1e:	687b      	ldr	r3, [r7, #4]
 800dd20:	2b00      	cmp	r3, #0
 800dd22:	d00b      	beq.n	800dd3c <ili9488_low_if_write_register+0x58>
		{
			// Data transmit
			ILI9488_LOW_IF_DC_DATA();
 800dd24:	2001      	movs	r0, #1
 800dd26:	f000 f89f 	bl	800de68 <ili9488_if_set_dc>

			if ( eILI9488_OK != ili9488_if_spi_transmit((uint8_t*) tx_data, size ))
 800dd2a:	6879      	ldr	r1, [r7, #4]
 800dd2c:	68b8      	ldr	r0, [r7, #8]
 800dd2e:	f000 f8d3 	bl	800ded8 <ili9488_if_spi_transmit>
 800dd32:	4603      	mov	r3, r0
 800dd34:	2b00      	cmp	r3, #0
 800dd36:	d001      	beq.n	800dd3c <ili9488_low_if_write_register+0x58>
			{
				status = eILI9488_ERROR;
 800dd38:	2301      	movs	r3, #1
 800dd3a:	75fb      	strb	r3, [r7, #23]
			}
		}
	}

	// Set CS
	ILI9488_LOW_IF_CS_HIGH();
 800dd3c:	2001      	movs	r0, #1
 800dd3e:	f000 f87e 	bl	800de3e <ili9488_if_set_cs>

	return status;
 800dd42:	7dfb      	ldrb	r3, [r7, #23]
}
 800dd44:	4618      	mov	r0, r3
 800dd46:	3718      	adds	r7, #24
 800dd48:	46bd      	mov	sp, r7
 800dd4a:	bd80      	pop	{r7, pc}

0800dd4c <ili9488_low_if_read_register>:
* @param[in]	size 	- Number of data to read
* @return		status 	- Either Ok or Error
*/
////////////////////////////////////////////////////////////////////////////////
ili9488_status_t ili9488_low_if_read_register(const ili9488_cmd_t cmd, uint8_t * const rx_data, const uint32_t size)
{
 800dd4c:	b580      	push	{r7, lr}
 800dd4e:	b086      	sub	sp, #24
 800dd50:	af00      	add	r7, sp, #0
 800dd52:	4603      	mov	r3, r0
 800dd54:	60b9      	str	r1, [r7, #8]
 800dd56:	607a      	str	r2, [r7, #4]
 800dd58:	73fb      	strb	r3, [r7, #15]
	ili9488_status_t 	status 	= eILI9488_OK;
 800dd5a:	2300      	movs	r3, #0
 800dd5c:	75fb      	strb	r3, [r7, #23]
	uint8_t 			command = cmd;
 800dd5e:	7bfb      	ldrb	r3, [r7, #15]
 800dd60:	75bb      	strb	r3, [r7, #22]

	// Set CS & DC
	ILI9488_LOW_IF_CS_LOW();
 800dd62:	2000      	movs	r0, #0
 800dd64:	f000 f86b 	bl	800de3e <ili9488_if_set_cs>
	ILI9488_LOW_IF_DC_COMMAND();
 800dd68:	2000      	movs	r0, #0
 800dd6a:	f000 f87d 	bl	800de68 <ili9488_if_set_dc>

	// Send command
	if ( eILI9488_OK != ili9488_if_spi_transmit( &command, 1U ))
 800dd6e:	f107 0316 	add.w	r3, r7, #22
 800dd72:	2101      	movs	r1, #1
 800dd74:	4618      	mov	r0, r3
 800dd76:	f000 f8af 	bl	800ded8 <ili9488_if_spi_transmit>
 800dd7a:	4603      	mov	r3, r0
 800dd7c:	2b00      	cmp	r3, #0
 800dd7e:	d002      	beq.n	800dd86 <ili9488_low_if_read_register+0x3a>
	{
		status = eILI9488_ERROR;
 800dd80:	2301      	movs	r3, #1
 800dd82:	75fb      	strb	r3, [r7, #23]
 800dd84:	e00e      	b.n	800dda4 <ili9488_low_if_read_register+0x58>

	// Command send OK
	else
	{
		// In case of parameters send them as well
		if ( size > 0 )
 800dd86:	687b      	ldr	r3, [r7, #4]
 800dd88:	2b00      	cmp	r3, #0
 800dd8a:	d00b      	beq.n	800dda4 <ili9488_low_if_read_register+0x58>
		{
			// Data transmit
			ILI9488_LOW_IF_DC_DATA();
 800dd8c:	2001      	movs	r0, #1
 800dd8e:	f000 f86b 	bl	800de68 <ili9488_if_set_dc>

			if ( eILI9488_OK != ili9488_if_spi_receive( rx_data, size ))
 800dd92:	6879      	ldr	r1, [r7, #4]
 800dd94:	68b8      	ldr	r0, [r7, #8]
 800dd96:	f000 f8b4 	bl	800df02 <ili9488_if_spi_receive>
 800dd9a:	4603      	mov	r3, r0
 800dd9c:	2b00      	cmp	r3, #0
 800dd9e:	d001      	beq.n	800dda4 <ili9488_low_if_read_register+0x58>
			{
				status = eILI9488_ERROR;
 800dda0:	2301      	movs	r3, #1
 800dda2:	75fb      	strb	r3, [r7, #23]
			}
		}
	}

	// Set CS
	ILI9488_LOW_IF_CS_HIGH();
 800dda4:	2001      	movs	r0, #1
 800dda6:	f000 f84a 	bl	800de3e <ili9488_if_set_cs>

	return status;
 800ddaa:	7dfb      	ldrb	r3, [r7, #23]
}
 800ddac:	4618      	mov	r0, r3
 800ddae:	3718      	adds	r7, #24
 800ddb0:	46bd      	mov	sp, r7
 800ddb2:	bd80      	pop	{r7, pc}

0800ddb4 <ili9488_low_if_write_rgb_to_gram>:
* @param[in]	size 	- Number of data to transmit
* @return		status 	- Either Ok or Error
*/
////////////////////////////////////////////////////////////////////////////////
ili9488_status_t ili9488_low_if_write_rgb_to_gram(const ili9488_rgb_t * const p_rgb, const uint32_t size)
{
 800ddb4:	b580      	push	{r7, lr}
 800ddb6:	b086      	sub	sp, #24
 800ddb8:	af00      	add	r7, sp, #0
 800ddba:	6078      	str	r0, [r7, #4]
 800ddbc:	6039      	str	r1, [r7, #0]
			ili9488_status_t 	status 	= eILI9488_OK;
 800ddbe:	2300      	movs	r3, #0
 800ddc0:	75fb      	strb	r3, [r7, #23]
	const 	uint8_t 		 	cmd 	= eILI9488_WRITE_MEM_CMD;
 800ddc2:	232c      	movs	r3, #44	; 0x2c
 800ddc4:	73fb      	strb	r3, [r7, #15]
			uint32_t 			i		= 0UL;
 800ddc6:	2300      	movs	r3, #0
 800ddc8:	613b      	str	r3, [r7, #16]

	// Set CS & DC
	ILI9488_LOW_IF_CS_LOW();
 800ddca:	2000      	movs	r0, #0
 800ddcc:	f000 f837 	bl	800de3e <ili9488_if_set_cs>
	ILI9488_LOW_IF_DC_COMMAND();
 800ddd0:	2000      	movs	r0, #0
 800ddd2:	f000 f849 	bl	800de68 <ili9488_if_set_dc>

	// Send command
	if ( eILI9488_OK != ili9488_if_spi_transmit((uint8_t*) &cmd, 1U ))
 800ddd6:	f107 030f 	add.w	r3, r7, #15
 800ddda:	2101      	movs	r1, #1
 800dddc:	4618      	mov	r0, r3
 800ddde:	f000 f87b 	bl	800ded8 <ili9488_if_spi_transmit>
 800dde2:	4603      	mov	r3, r0
 800dde4:	2b00      	cmp	r3, #0
 800dde6:	d002      	beq.n	800ddee <ili9488_low_if_write_rgb_to_gram+0x3a>
	{
		status = eILI9488_ERROR;
 800dde8:	2301      	movs	r3, #1
 800ddea:	75fb      	strb	r3, [r7, #23]
 800ddec:	e013      	b.n	800de16 <ili9488_low_if_write_rgb_to_gram+0x62>
	}
	else
	{
		// In case of parameters send them as well
		if ( size > 0 )
 800ddee:	683b      	ldr	r3, [r7, #0]
 800ddf0:	2b00      	cmp	r3, #0
 800ddf2:	d010      	beq.n	800de16 <ili9488_low_if_write_rgb_to_gram+0x62>
		{
			// Data transmit
			ILI9488_LOW_IF_DC_DATA();
 800ddf4:	2001      	movs	r0, #1
 800ddf6:	f000 f837 	bl	800de68 <ili9488_if_set_dc>

			for ( i = 0; i < size; i++ )
 800ddfa:	2300      	movs	r3, #0
 800ddfc:	613b      	str	r3, [r7, #16]
 800ddfe:	e006      	b.n	800de0e <ili9488_low_if_write_rgb_to_gram+0x5a>
			{
				ili9488_if_spi_transmit((uint8_t*) p_rgb, 3U );
 800de00:	2103      	movs	r1, #3
 800de02:	6878      	ldr	r0, [r7, #4]
 800de04:	f000 f868 	bl	800ded8 <ili9488_if_spi_transmit>
			for ( i = 0; i < size; i++ )
 800de08:	693b      	ldr	r3, [r7, #16]
 800de0a:	3301      	adds	r3, #1
 800de0c:	613b      	str	r3, [r7, #16]
 800de0e:	693a      	ldr	r2, [r7, #16]
 800de10:	683b      	ldr	r3, [r7, #0]
 800de12:	429a      	cmp	r2, r3
 800de14:	d3f4      	bcc.n	800de00 <ili9488_low_if_write_rgb_to_gram+0x4c>
			}
		}
	}

	// Set CS
	ILI9488_LOW_IF_CS_HIGH();
 800de16:	2001      	movs	r0, #1
 800de18:	f000 f811 	bl	800de3e <ili9488_if_set_cs>

	return status;
 800de1c:	7dfb      	ldrb	r3, [r7, #23]
}
 800de1e:	4618      	mov	r0, r3
 800de20:	3718      	adds	r7, #24
 800de22:	46bd      	mov	sp, r7
 800de24:	bd80      	pop	{r7, pc}

0800de26 <ili9488_if_init>:
*
* @return		status 	- Status of initilization
*/
////////////////////////////////////////////////////////////////////////////////
ili9488_status_t ili9488_if_init(void)
{
 800de26:	b480      	push	{r7}
 800de28:	b083      	sub	sp, #12
 800de2a:	af00      	add	r7, sp, #0
	ili9488_status_t status = eILI9488_OK;
 800de2c:	2300      	movs	r3, #0
 800de2e:	71fb      	strb	r3, [r7, #7]

	// Left empty as periphery is initilize elswhere...

	// USER CODE END...

	return status;
 800de30:	79fb      	ldrb	r3, [r7, #7]
}
 800de32:	4618      	mov	r0, r3
 800de34:	370c      	adds	r7, #12
 800de36:	46bd      	mov	sp, r7
 800de38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de3c:	4770      	bx	lr

0800de3e <ili9488_if_set_cs>:
* @param[in]	state	- Logic state of CS line
* @return		void
*/
////////////////////////////////////////////////////////////////////////////////
void ili9488_if_set_cs(const bool state)
{
 800de3e:	b580      	push	{r7, lr}
 800de40:	b082      	sub	sp, #8
 800de42:	af00      	add	r7, sp, #0
 800de44:	4603      	mov	r3, r0
 800de46:	71fb      	strb	r3, [r7, #7]
	// USER CODE BEGIN...

	if ( true == state )
 800de48:	79fb      	ldrb	r3, [r7, #7]
 800de4a:	2b00      	cmp	r3, #0
 800de4c:	d004      	beq.n	800de58 <ili9488_if_set_cs+0x1a>
	{
		gpio_set( eGPIO_D_CS, eGPIO_HIGH );
 800de4e:	2101      	movs	r1, #1
 800de50:	200c      	movs	r0, #12
 800de52:	f002 fc49 	bl	80106e8 <gpio_set>
	{
		gpio_set( eGPIO_D_CS, eGPIO_LOW );
	}

	// USER CODE END...
}
 800de56:	e003      	b.n	800de60 <ili9488_if_set_cs+0x22>
		gpio_set( eGPIO_D_CS, eGPIO_LOW );
 800de58:	2100      	movs	r1, #0
 800de5a:	200c      	movs	r0, #12
 800de5c:	f002 fc44 	bl	80106e8 <gpio_set>
}
 800de60:	bf00      	nop
 800de62:	3708      	adds	r7, #8
 800de64:	46bd      	mov	sp, r7
 800de66:	bd80      	pop	{r7, pc}

0800de68 <ili9488_if_set_dc>:
* @param[in]	state	- Logic state of DC line
* @return		void
*/
////////////////////////////////////////////////////////////////////////////////
void ili9488_if_set_dc(const bool state)
{
 800de68:	b580      	push	{r7, lr}
 800de6a:	b082      	sub	sp, #8
 800de6c:	af00      	add	r7, sp, #0
 800de6e:	4603      	mov	r3, r0
 800de70:	71fb      	strb	r3, [r7, #7]
	// USER CODE BEGIN...

	if ( true == state )
 800de72:	79fb      	ldrb	r3, [r7, #7]
 800de74:	2b00      	cmp	r3, #0
 800de76:	d004      	beq.n	800de82 <ili9488_if_set_dc+0x1a>
	{
		gpio_set( eGPIO_D_DC_RS, eGPIO_HIGH );
 800de78:	2101      	movs	r1, #1
 800de7a:	200a      	movs	r0, #10
 800de7c:	f002 fc34 	bl	80106e8 <gpio_set>
	{
		gpio_set( eGPIO_D_DC_RS, eGPIO_LOW );
	}

	// USER CODE END...
}
 800de80:	e003      	b.n	800de8a <ili9488_if_set_dc+0x22>
		gpio_set( eGPIO_D_DC_RS, eGPIO_LOW );
 800de82:	2100      	movs	r1, #0
 800de84:	200a      	movs	r0, #10
 800de86:	f002 fc2f 	bl	80106e8 <gpio_set>
}
 800de8a:	bf00      	nop
 800de8c:	3708      	adds	r7, #8
 800de8e:	46bd      	mov	sp, r7
 800de90:	bd80      	pop	{r7, pc}

0800de92 <ili9488_if_set_reset>:
* @param[in]	state	- Logic state of reset line
* @return		void
*/
////////////////////////////////////////////////////////////////////////////////
void ili9488_if_set_reset(const bool state)
{
 800de92:	b580      	push	{r7, lr}
 800de94:	b082      	sub	sp, #8
 800de96:	af00      	add	r7, sp, #0
 800de98:	4603      	mov	r3, r0
 800de9a:	71fb      	strb	r3, [r7, #7]
	// USER CODE BEGIN...

	if ( true == state )
 800de9c:	79fb      	ldrb	r3, [r7, #7]
 800de9e:	2b00      	cmp	r3, #0
 800dea0:	d004      	beq.n	800deac <ili9488_if_set_reset+0x1a>
	{
		gpio_set( eGPIO_D_RST, eGPIO_LOW );
 800dea2:	2100      	movs	r1, #0
 800dea4:	200b      	movs	r0, #11
 800dea6:	f002 fc1f 	bl	80106e8 <gpio_set>
	{
		gpio_set( eGPIO_D_RST, eGPIO_HIGH );
	}

	// USER CODE END...
}
 800deaa:	e003      	b.n	800deb4 <ili9488_if_set_reset+0x22>
		gpio_set( eGPIO_D_RST, eGPIO_HIGH );
 800deac:	2101      	movs	r1, #1
 800deae:	200b      	movs	r0, #11
 800deb0:	f002 fc1a 	bl	80106e8 <gpio_set>
}
 800deb4:	bf00      	nop
 800deb6:	3708      	adds	r7, #8
 800deb8:	46bd      	mov	sp, r7
 800deba:	bd80      	pop	{r7, pc}

0800debc <ili9488_if_set_led>:
* @param[in]	brightness	- Brightness of backlight display LED
* @return		void
*/
////////////////////////////////////////////////////////////////////////////////
void ili9488_if_set_led(const float32_t brigthness)
{
 800debc:	b580      	push	{r7, lr}
 800debe:	b082      	sub	sp, #8
 800dec0:	af00      	add	r7, sp, #0
 800dec2:	ed87 0a01 	vstr	s0, [r7, #4]
	// USER CODE BEGIN...

	timer_set_pwm( eTIMER_TIM1_CH4_D_LED, brigthness );
 800dec6:	ed97 0a01 	vldr	s0, [r7, #4]
 800deca:	2000      	movs	r0, #0
 800decc:	f003 fc60 	bl	8011790 <timer_set_pwm>

	// USER CODE END...
}
 800ded0:	bf00      	nop
 800ded2:	3708      	adds	r7, #8
 800ded4:	46bd      	mov	sp, r7
 800ded6:	bd80      	pop	{r7, pc}

0800ded8 <ili9488_if_spi_transmit>:
* @param[in]	size 	- Number of data to transmit
* @return		status 	- Status of transmittion
*/
////////////////////////////////////////////////////////////////////////////////
ili9488_status_t ili9488_if_spi_transmit(const uint8_t * p_data, const uint32_t size)
{
 800ded8:	b580      	push	{r7, lr}
 800deda:	b084      	sub	sp, #16
 800dedc:	af00      	add	r7, sp, #0
 800dede:	6078      	str	r0, [r7, #4]
 800dee0:	6039      	str	r1, [r7, #0]
	ili9488_status_t status = eILI9488_OK;
 800dee2:	2300      	movs	r3, #0
 800dee4:	73fb      	strb	r3, [r7, #15]

	// USER CODE BEGIN...

	if ( eSPI_OK != spi_display_transmit((uint8_t*) p_data, size ))
 800dee6:	6839      	ldr	r1, [r7, #0]
 800dee8:	6878      	ldr	r0, [r7, #4]
 800deea:	f002 fedd 	bl	8010ca8 <spi_display_transmit>
 800deee:	4603      	mov	r3, r0
 800def0:	2b00      	cmp	r3, #0
 800def2:	d001      	beq.n	800def8 <ili9488_if_spi_transmit+0x20>
	{
		status = eILI9488_ERROR_SPI;
 800def4:	2302      	movs	r3, #2
 800def6:	73fb      	strb	r3, [r7, #15]
	}

	// USER CODE END...

	return status;
 800def8:	7bfb      	ldrb	r3, [r7, #15]
}
 800defa:	4618      	mov	r0, r3
 800defc:	3710      	adds	r7, #16
 800defe:	46bd      	mov	sp, r7
 800df00:	bd80      	pop	{r7, pc}

0800df02 <ili9488_if_spi_receive>:
* @param[in]	size 	- Number of data to receive
* @return		status 	- Status of reception
*/
////////////////////////////////////////////////////////////////////////////////
ili9488_status_t ili9488_if_spi_receive(uint8_t * p_data, const uint32_t size)
{
 800df02:	b580      	push	{r7, lr}
 800df04:	b084      	sub	sp, #16
 800df06:	af00      	add	r7, sp, #0
 800df08:	6078      	str	r0, [r7, #4]
 800df0a:	6039      	str	r1, [r7, #0]
	ili9488_status_t status = eILI9488_OK;
 800df0c:	2300      	movs	r3, #0
 800df0e:	73fb      	strb	r3, [r7, #15]

	// USER CODE BEGIN...

	if ( eSPI_OK != spi_display_receive( p_data, size ))
 800df10:	6839      	ldr	r1, [r7, #0]
 800df12:	6878      	ldr	r0, [r7, #4]
 800df14:	f002 fea2 	bl	8010c5c <spi_display_receive>
 800df18:	4603      	mov	r3, r0
 800df1a:	2b00      	cmp	r3, #0
 800df1c:	d001      	beq.n	800df22 <ili9488_if_spi_receive+0x20>
	{
		status = eILI9488_ERROR_SPI;
 800df1e:	2302      	movs	r3, #2
 800df20:	73fb      	strb	r3, [r7, #15]
	}

	// USER CODE END...

	return status;
 800df22:	7bfb      	ldrb	r3, [r7, #15]
}
 800df24:	4618      	mov	r0, r3
 800df26:	3710      	adds	r7, #16
 800df28:	46bd      	mov	sp, r7
 800df2a:	bd80      	pop	{r7, pc}

0800df2c <stusb4500_init>:
*
* @return 		status 		- Status of operation
*/
////////////////////////////////////////////////////////////////////////////////
stusb4500_status_t stusb4500_init(void)
{
 800df2c:	b580      	push	{r7, lr}
 800df2e:	b08a      	sub	sp, #40	; 0x28
 800df30:	af00      	add	r7, sp, #0
	stusb4500_status_t 	status 		= eSTUSB4500_OK;
 800df32:	2300      	movs	r3, #0
 800df34:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	stusb4500_pdo_t 	read_PDO[3]	= {0};
 800df38:	463b      	mov	r3, r7
 800df3a:	2224      	movs	r2, #36	; 0x24
 800df3c:	2100      	movs	r1, #0
 800df3e:	4618      	mov	r0, r3
 800df40:	f007 f8c0 	bl	80150c4 <memset>
	uint8_t 			i			= 0U;
 800df44:	2300      	movs	r3, #0
 800df46:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	if ( false == gb_is_init )
 800df4a:	4b43      	ldr	r3, [pc, #268]	; (800e058 <stusb4500_init+0x12c>)
 800df4c:	781b      	ldrb	r3, [r3, #0]
 800df4e:	f083 0301 	eor.w	r3, r3, #1
 800df52:	b2db      	uxtb	r3, r3
 800df54:	2b00      	cmp	r3, #0
 800df56:	d078      	beq.n	800e04a <stusb4500_init+0x11e>
	{
		if ( eSTUSB4500_OK != stusb4500_if_init())
 800df58:	f000 fc1e 	bl	800e798 <stusb4500_if_init>
 800df5c:	4603      	mov	r3, r0
 800df5e:	2b00      	cmp	r3, #0
 800df60:	d003      	beq.n	800df6a <stusb4500_init+0x3e>
		{
			status = eSTUSB4500_ERROR;
 800df62:	2301      	movs	r3, #1
 800df64:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800df68:	e01d      	b.n	800dfa6 <stusb4500_init+0x7a>
		}
		else
		{
			gb_is_init = true;
 800df6a:	4b3b      	ldr	r3, [pc, #236]	; (800e058 <stusb4500_init+0x12c>)
 800df6c:	2201      	movs	r2, #1
 800df6e:	701a      	strb	r2, [r3, #0]

			// Ping device
			status |= stusb4500_ping_device();
 800df70:	f000 f960 	bl	800e234 <stusb4500_ping_device>
 800df74:	4603      	mov	r3, r0
 800df76:	461a      	mov	r2, r3
 800df78:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800df7c:	4313      	orrs	r3, r2
 800df7e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			// Clear all interrupts
			status |= stusb4500_clear_interrupts();
 800df82:	f000 f978 	bl	800e276 <stusb4500_clear_interrupts>
 800df86:	4603      	mov	r3, r0
 800df88:	461a      	mov	r2, r3
 800df8a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800df8e:	4313      	orrs	r3, r2
 800df90:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			// Set interrupt mask
			status |= stusb4500_set_interrupt_mask();
 800df94:	f000 f988 	bl	800e2a8 <stusb4500_set_interrupt_mask>
 800df98:	4603      	mov	r3, r0
 800df9a:	461a      	mov	r2, r3
 800df9c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dfa0:	4313      	orrs	r3, r2
 800dfa2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		}

		// Configure PDOs
		status |= stusb4500_write_device_pdo((stusb4500_pdo_t*) &g_PDO );
 800dfa6:	482d      	ldr	r0, [pc, #180]	; (800e05c <stusb4500_init+0x130>)
 800dfa8:	f000 f9f8 	bl	800e39c <stusb4500_write_device_pdo>
 800dfac:	4603      	mov	r3, r0
 800dfae:	461a      	mov	r2, r3
 800dfb0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dfb4:	4313      	orrs	r3, r2
 800dfb6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

		// Validate written PDOs
		status |= stusb4500_read_device_pdo((stusb4500_pdo_t*) &read_PDO );
 800dfba:	463b      	mov	r3, r7
 800dfbc:	4618      	mov	r0, r3
 800dfbe:	f000 f9b9 	bl	800e334 <stusb4500_read_device_pdo>
 800dfc2:	4603      	mov	r3, r0
 800dfc4:	461a      	mov	r2, r3
 800dfc6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dfca:	4313      	orrs	r3, r2
 800dfcc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

		for ( i = 0; i < eSTUSB4500_PDO_NUM_OF; i++ )
 800dfd0:	2300      	movs	r3, #0
 800dfd2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800dfd6:	e021      	b.n	800e01c <stusb4500_init+0xf0>
		{
			if ( 0 != memcmp( &g_PDO[i].voltage, &read_PDO[i].voltage, sizeof( float32_t )))
 800dfd8:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800dfdc:	4613      	mov	r3, r2
 800dfde:	005b      	lsls	r3, r3, #1
 800dfe0:	4413      	add	r3, r2
 800dfe2:	009b      	lsls	r3, r3, #2
 800dfe4:	4a1d      	ldr	r2, [pc, #116]	; (800e05c <stusb4500_init+0x130>)
 800dfe6:	4413      	add	r3, r2
 800dfe8:	1d18      	adds	r0, r3, #4
 800dfea:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800dfee:	4639      	mov	r1, r7
 800dff0:	4613      	mov	r3, r2
 800dff2:	005b      	lsls	r3, r3, #1
 800dff4:	4413      	add	r3, r2
 800dff6:	009b      	lsls	r3, r3, #2
 800dff8:	440b      	add	r3, r1
 800dffa:	3304      	adds	r3, #4
 800dffc:	2204      	movs	r2, #4
 800dffe:	4619      	mov	r1, r3
 800e000:	f007 f844 	bl	801508c <memcmp>
 800e004:	4603      	mov	r3, r0
 800e006:	2b00      	cmp	r3, #0
 800e008:	d003      	beq.n	800e012 <stusb4500_init+0xe6>
			{
				status = eSTUSB4500_ERROR;
 800e00a:	2301      	movs	r3, #1
 800e00c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				break;
 800e010:	e008      	b.n	800e024 <stusb4500_init+0xf8>
		for ( i = 0; i < eSTUSB4500_PDO_NUM_OF; i++ )
 800e012:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e016:	3301      	adds	r3, #1
 800e018:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800e01c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e020:	2b02      	cmp	r3, #2
 800e022:	d9d9      	bls.n	800dfd8 <stusb4500_init+0xac>
			}
		}

		// Issue re-negotiation with the source
		status |= stusb4500_soft_reset();
 800e024:	f000 f964 	bl	800e2f0 <stusb4500_soft_reset>
 800e028:	4603      	mov	r3, r0
 800e02a:	461a      	mov	r2, r3
 800e02c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e030:	4313      	orrs	r3, r2
 800e032:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

		// Check status
		if ( eSTUSB4500_OK != status )
 800e036:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e03a:	2b00      	cmp	r3, #0
 800e03c:	d005      	beq.n	800e04a <stusb4500_init+0x11e>
		{
			STUSB4500_DBG_PRINT( "Module initialization failed!" );
 800e03e:	4908      	ldr	r1, [pc, #32]	; (800e060 <stusb4500_init+0x134>)
 800e040:	2002      	movs	r0, #2
 800e042:	f003 fe7b 	bl	8011d3c <com_dbg_print>
			STUSB4500_ASSERT( 0 );
 800e046:	f006 ffd1 	bl	8014fec <project_config_assert_fail>
		}
	}

	return status;
 800e04a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800e04e:	4618      	mov	r0, r3
 800e050:	3728      	adds	r7, #40	; 0x28
 800e052:	46bd      	mov	sp, r7
 800e054:	bd80      	pop	{r7, pc}
 800e056:	bf00      	nop
 800e058:	20004cd4 	.word	0x20004cd4
 800e05c:	2000004c 	.word	0x2000004c
 800e060:	0801a508 	.word	0x0801a508

0800e064 <stusb4500_hndl>:
*
* @return 		status 		- Status of operation
*/
////////////////////////////////////////////////////////////////////////////////
stusb4500_status_t stusb4500_hndl(void)
{
 800e064:	b580      	push	{r7, lr}
 800e066:	b082      	sub	sp, #8
 800e068:	af00      	add	r7, sp, #0
			stusb4500_status_t status 			= eSTUSB4500_OK;
 800e06a:	2300      	movs	r3, #0
 800e06c:	71fb      	strb	r3, [r7, #7]
	static 	stusb4500_attach_t attached_prev 	= eSTUSB4500_NOT_ATTACHED;

	// Refresh status
	status = stusb4500_refresh_status();
 800e06e:	f000 fab5 	bl	800e5dc <stusb4500_refresh_status>
 800e072:	4603      	mov	r3, r0
 800e074:	71fb      	strb	r3, [r7, #7]

	// Reinitialize after plug in cable
	if ( eSTUSB4500_OK == status )
 800e076:	79fb      	ldrb	r3, [r7, #7]
 800e078:	2b00      	cmp	r3, #0
 800e07a:	d10d      	bne.n	800e098 <stusb4500_hndl+0x34>
	{
		if 	( 	( eSTUSB4500_ATTACHED == g_stusb4500_status.attached )
 800e07c:	4b09      	ldr	r3, [pc, #36]	; (800e0a4 <stusb4500_hndl+0x40>)
 800e07e:	7b1b      	ldrb	r3, [r3, #12]
 800e080:	2b01      	cmp	r3, #1
 800e082:	d105      	bne.n	800e090 <stusb4500_hndl+0x2c>
			&& 	( eSTUSB4500_NOT_ATTACHED == attached_prev ))
 800e084:	4b08      	ldr	r3, [pc, #32]	; (800e0a8 <stusb4500_hndl+0x44>)
 800e086:	781b      	ldrb	r3, [r3, #0]
 800e088:	2b00      	cmp	r3, #0
 800e08a:	d101      	bne.n	800e090 <stusb4500_hndl+0x2c>
		{
			stusb4500_reinit();
 800e08c:	f000 f82e 	bl	800e0ec <stusb4500_reinit>
		}

		// Store previous
		attached_prev = g_stusb4500_status.attached;
 800e090:	4b04      	ldr	r3, [pc, #16]	; (800e0a4 <stusb4500_hndl+0x40>)
 800e092:	7b1a      	ldrb	r2, [r3, #12]
 800e094:	4b04      	ldr	r3, [pc, #16]	; (800e0a8 <stusb4500_hndl+0x44>)
 800e096:	701a      	strb	r2, [r3, #0]
	}

	return status;
 800e098:	79fb      	ldrb	r3, [r7, #7]
}
 800e09a:	4618      	mov	r0, r3
 800e09c:	3708      	adds	r7, #8
 800e09e:	46bd      	mov	sp, r7
 800e0a0:	bd80      	pop	{r7, pc}
 800e0a2:	bf00      	nop
 800e0a4:	20004cc4 	.word	0x20004cc4
 800e0a8:	20004cd5 	.word	0x20004cd5

0800e0ac <stusb4500_get_status>:
*
* @return 		p_status - Pointer to status data
*/
////////////////////////////////////////////////////////////////////////////////
const stusb4500_usb_status_t * stusb4500_get_status(void)
{
 800e0ac:	b580      	push	{r7, lr}
 800e0ae:	b082      	sub	sp, #8
 800e0b0:	af00      	add	r7, sp, #0
	stusb4500_usb_status_t * p_status = NULL;
 800e0b2:	2300      	movs	r3, #0
 800e0b4:	607b      	str	r3, [r7, #4]

	if ( true == gb_is_init )
 800e0b6:	4b0a      	ldr	r3, [pc, #40]	; (800e0e0 <stusb4500_get_status+0x34>)
 800e0b8:	781b      	ldrb	r3, [r3, #0]
 800e0ba:	2b00      	cmp	r3, #0
 800e0bc:	d002      	beq.n	800e0c4 <stusb4500_get_status+0x18>
	{
		p_status = &g_stusb4500_status;
 800e0be:	4b09      	ldr	r3, [pc, #36]	; (800e0e4 <stusb4500_get_status+0x38>)
 800e0c0:	607b      	str	r3, [r7, #4]
 800e0c2:	e007      	b.n	800e0d4 <stusb4500_get_status+0x28>
	}
	else
	{
		p_status = NULL;
 800e0c4:	2300      	movs	r3, #0
 800e0c6:	607b      	str	r3, [r7, #4]

		STUSB4500_DBG_PRINT( "Module not initialized!" );
 800e0c8:	4907      	ldr	r1, [pc, #28]	; (800e0e8 <stusb4500_get_status+0x3c>)
 800e0ca:	2002      	movs	r0, #2
 800e0cc:	f003 fe36 	bl	8011d3c <com_dbg_print>
		STUSB4500_ASSERT( 0 );
 800e0d0:	f006 ff8c 	bl	8014fec <project_config_assert_fail>
	}

	return (const stusb4500_usb_status_t*) p_status;
 800e0d4:	687b      	ldr	r3, [r7, #4]
}
 800e0d6:	4618      	mov	r0, r3
 800e0d8:	3708      	adds	r7, #8
 800e0da:	46bd      	mov	sp, r7
 800e0dc:	bd80      	pop	{r7, pc}
 800e0de:	bf00      	nop
 800e0e0:	20004cd4 	.word	0x20004cd4
 800e0e4:	20004cc4 	.word	0x20004cc4
 800e0e8:	0801a528 	.word	0x0801a528

0800e0ec <stusb4500_reinit>:
*
* @return 		status 		- Status of operation
*/
////////////////////////////////////////////////////////////////////////////////
static stusb4500_status_t stusb4500_reinit(void)
{
 800e0ec:	b580      	push	{r7, lr}
 800e0ee:	b08a      	sub	sp, #40	; 0x28
 800e0f0:	af00      	add	r7, sp, #0
	stusb4500_status_t 	status 		= eSTUSB4500_OK;
 800e0f2:	2300      	movs	r3, #0
 800e0f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	stusb4500_pdo_t 	read_PDO[3]	= {0};
 800e0f8:	463b      	mov	r3, r7
 800e0fa:	2224      	movs	r2, #36	; 0x24
 800e0fc:	2100      	movs	r1, #0
 800e0fe:	4618      	mov	r0, r3
 800e100:	f006 ffe0 	bl	80150c4 <memset>
	uint8_t 			i			= 0U;
 800e104:	2300      	movs	r3, #0
 800e106:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	// Check if init
	if ( true == gb_is_init )
 800e10a:	4b36      	ldr	r3, [pc, #216]	; (800e1e4 <stusb4500_reinit+0xf8>)
 800e10c:	781b      	ldrb	r3, [r3, #0]
 800e10e:	2b00      	cmp	r3, #0
 800e110:	d062      	beq.n	800e1d8 <stusb4500_reinit+0xec>
	{
		// Ping device
		status |= stusb4500_ping_device();
 800e112:	f000 f88f 	bl	800e234 <stusb4500_ping_device>
 800e116:	4603      	mov	r3, r0
 800e118:	461a      	mov	r2, r3
 800e11a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e11e:	4313      	orrs	r3, r2
 800e120:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

		// Clear all interrupts
		status |= stusb4500_clear_interrupts();
 800e124:	f000 f8a7 	bl	800e276 <stusb4500_clear_interrupts>
 800e128:	4603      	mov	r3, r0
 800e12a:	461a      	mov	r2, r3
 800e12c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e130:	4313      	orrs	r3, r2
 800e132:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

		// Set interrupt mask
		status |= stusb4500_set_interrupt_mask();
 800e136:	f000 f8b7 	bl	800e2a8 <stusb4500_set_interrupt_mask>
 800e13a:	4603      	mov	r3, r0
 800e13c:	461a      	mov	r2, r3
 800e13e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e142:	4313      	orrs	r3, r2
 800e144:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

		// Configure PDOs
		status |= stusb4500_write_device_pdo((stusb4500_pdo_t*) &g_PDO );
 800e148:	4827      	ldr	r0, [pc, #156]	; (800e1e8 <stusb4500_reinit+0xfc>)
 800e14a:	f000 f927 	bl	800e39c <stusb4500_write_device_pdo>
 800e14e:	4603      	mov	r3, r0
 800e150:	461a      	mov	r2, r3
 800e152:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e156:	4313      	orrs	r3, r2
 800e158:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

		// Validate written PDOs
		status |= stusb4500_read_device_pdo((stusb4500_pdo_t*) &read_PDO );
 800e15c:	463b      	mov	r3, r7
 800e15e:	4618      	mov	r0, r3
 800e160:	f000 f8e8 	bl	800e334 <stusb4500_read_device_pdo>
 800e164:	4603      	mov	r3, r0
 800e166:	461a      	mov	r2, r3
 800e168:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e16c:	4313      	orrs	r3, r2
 800e16e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

		for ( i = 0; i < eSTUSB4500_PDO_NUM_OF; i++ )
 800e172:	2300      	movs	r3, #0
 800e174:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800e178:	e021      	b.n	800e1be <stusb4500_reinit+0xd2>
		{
			// Check that voltages matches
			if ( 0 != memcmp( &g_PDO[i].voltage, &read_PDO[i].voltage, sizeof( float32_t )))
 800e17a:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800e17e:	4613      	mov	r3, r2
 800e180:	005b      	lsls	r3, r3, #1
 800e182:	4413      	add	r3, r2
 800e184:	009b      	lsls	r3, r3, #2
 800e186:	4a18      	ldr	r2, [pc, #96]	; (800e1e8 <stusb4500_reinit+0xfc>)
 800e188:	4413      	add	r3, r2
 800e18a:	1d18      	adds	r0, r3, #4
 800e18c:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800e190:	4639      	mov	r1, r7
 800e192:	4613      	mov	r3, r2
 800e194:	005b      	lsls	r3, r3, #1
 800e196:	4413      	add	r3, r2
 800e198:	009b      	lsls	r3, r3, #2
 800e19a:	440b      	add	r3, r1
 800e19c:	3304      	adds	r3, #4
 800e19e:	2204      	movs	r2, #4
 800e1a0:	4619      	mov	r1, r3
 800e1a2:	f006 ff73 	bl	801508c <memcmp>
 800e1a6:	4603      	mov	r3, r0
 800e1a8:	2b00      	cmp	r3, #0
 800e1aa:	d003      	beq.n	800e1b4 <stusb4500_reinit+0xc8>
			{
				status = eSTUSB4500_ERROR;
 800e1ac:	2301      	movs	r3, #1
 800e1ae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				break;
 800e1b2:	e008      	b.n	800e1c6 <stusb4500_reinit+0xda>
		for ( i = 0; i < eSTUSB4500_PDO_NUM_OF; i++ )
 800e1b4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e1b8:	3301      	adds	r3, #1
 800e1ba:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800e1be:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e1c2:	2b02      	cmp	r3, #2
 800e1c4:	d9d9      	bls.n	800e17a <stusb4500_reinit+0x8e>
			}
		}

		// Issue re-negotiation with the source
		status |= stusb4500_soft_reset();
 800e1c6:	f000 f893 	bl	800e2f0 <stusb4500_soft_reset>
 800e1ca:	4603      	mov	r3, r0
 800e1cc:	461a      	mov	r2, r3
 800e1ce:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e1d2:	4313      	orrs	r3, r2
 800e1d4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	return status;
 800e1d8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800e1dc:	4618      	mov	r0, r3
 800e1de:	3728      	adds	r7, #40	; 0x28
 800e1e0:	46bd      	mov	sp, r7
 800e1e2:	bd80      	pop	{r7, pc}
 800e1e4:	20004cd4 	.word	0x20004cd4
 800e1e8:	2000004c 	.word	0x2000004c

0800e1ec <stusb4500_read_device_id>:
* @param[in] 	p_id 		- Pointer to read ID
* @return 		status 		- Status of operation
*/
////////////////////////////////////////////////////////////////////////////////
static stusb4500_status_t stusb4500_read_device_id(uint8_t * const p_id)
{
 800e1ec:	b580      	push	{r7, lr}
 800e1ee:	b084      	sub	sp, #16
 800e1f0:	af00      	add	r7, sp, #0
 800e1f2:	6078      	str	r0, [r7, #4]
	stusb4500_status_t status = eSTUSB4500_OK;
 800e1f4:	2300      	movs	r3, #0
 800e1f6:	73fb      	strb	r3, [r7, #15]

	if ( true == gb_is_init )
 800e1f8:	4b0c      	ldr	r3, [pc, #48]	; (800e22c <stusb4500_read_device_id+0x40>)
 800e1fa:	781b      	ldrb	r3, [r3, #0]
 800e1fc:	2b00      	cmp	r3, #0
 800e1fe:	d007      	beq.n	800e210 <stusb4500_read_device_id+0x24>
	{
		status = stusb4500_low_if_read_register( eSTUSB4500_ADDR_DEVICE_ID, p_id, 1UL );
 800e200:	2201      	movs	r2, #1
 800e202:	6879      	ldr	r1, [r7, #4]
 800e204:	202f      	movs	r0, #47	; 0x2f
 800e206:	f000 faae 	bl	800e766 <stusb4500_low_if_read_register>
 800e20a:	4603      	mov	r3, r0
 800e20c:	73fb      	strb	r3, [r7, #15]
 800e20e:	e007      	b.n	800e220 <stusb4500_read_device_id+0x34>
	}
	else
	{
		status = eSTUSB4500_ERROR;
 800e210:	2301      	movs	r3, #1
 800e212:	73fb      	strb	r3, [r7, #15]

		STUSB4500_DBG_PRINT( "Module not initialized!" );
 800e214:	4906      	ldr	r1, [pc, #24]	; (800e230 <stusb4500_read_device_id+0x44>)
 800e216:	2002      	movs	r0, #2
 800e218:	f003 fd90 	bl	8011d3c <com_dbg_print>
		STUSB4500_ASSERT( 0 );
 800e21c:	f006 fee6 	bl	8014fec <project_config_assert_fail>
	}

	return status;
 800e220:	7bfb      	ldrb	r3, [r7, #15]
}
 800e222:	4618      	mov	r0, r3
 800e224:	3710      	adds	r7, #16
 800e226:	46bd      	mov	sp, r7
 800e228:	bd80      	pop	{r7, pc}
 800e22a:	bf00      	nop
 800e22c:	20004cd4 	.word	0x20004cd4
 800e230:	0801a528 	.word	0x0801a528

0800e234 <stusb4500_ping_device>:
*
* @return 		status 		- Status of operation
*/
////////////////////////////////////////////////////////////////////////////////
static stusb4500_status_t stusb4500_ping_device(void)
{
 800e234:	b580      	push	{r7, lr}
 800e236:	b082      	sub	sp, #8
 800e238:	af00      	add	r7, sp, #0
	stusb4500_status_t 	status 	= eSTUSB4500_OK;
 800e23a:	2300      	movs	r3, #0
 800e23c:	71fb      	strb	r3, [r7, #7]
	uint8_t 			dev_id	= 0U;
 800e23e:	2300      	movs	r3, #0
 800e240:	71bb      	strb	r3, [r7, #6]

	if ( eSTUSB4500_OK == stusb4500_read_device_id( &dev_id ))
 800e242:	1dbb      	adds	r3, r7, #6
 800e244:	4618      	mov	r0, r3
 800e246:	f7ff ffd1 	bl	800e1ec <stusb4500_read_device_id>
 800e24a:	4603      	mov	r3, r0
 800e24c:	2b00      	cmp	r3, #0
 800e24e:	d10b      	bne.n	800e268 <stusb4500_ping_device+0x34>
	{
		if 	(	( eSTUSB4500_ID_0 == dev_id )
 800e250:	79bb      	ldrb	r3, [r7, #6]
 800e252:	2b25      	cmp	r3, #37	; 0x25
 800e254:	d002      	beq.n	800e25c <stusb4500_ping_device+0x28>
			||	( eSTUSB4500_ID_1 == dev_id ))
 800e256:	79bb      	ldrb	r3, [r7, #6]
 800e258:	2b21      	cmp	r3, #33	; 0x21
 800e25a:	d102      	bne.n	800e262 <stusb4500_ping_device+0x2e>
		{
			status = eSTUSB4500_OK;
 800e25c:	2300      	movs	r3, #0
 800e25e:	71fb      	strb	r3, [r7, #7]
 800e260:	e004      	b.n	800e26c <stusb4500_ping_device+0x38>
		}
		else
		{
			status = eSTUSB4500_ERROR;
 800e262:	2301      	movs	r3, #1
 800e264:	71fb      	strb	r3, [r7, #7]
 800e266:	e001      	b.n	800e26c <stusb4500_ping_device+0x38>
		}
	}
	else
	{
		status = eSTUSB4500_ERROR;
 800e268:	2301      	movs	r3, #1
 800e26a:	71fb      	strb	r3, [r7, #7]
	}

	return status;
 800e26c:	79fb      	ldrb	r3, [r7, #7]
}
 800e26e:	4618      	mov	r0, r3
 800e270:	3708      	adds	r7, #8
 800e272:	46bd      	mov	sp, r7
 800e274:	bd80      	pop	{r7, pc}

0800e276 <stusb4500_clear_interrupts>:
*
* @return 		status 		- Status of operation
*/
////////////////////////////////////////////////////////////////////////////////
static stusb4500_status_t stusb4500_clear_interrupts(void)
{
 800e276:	b580      	push	{r7, lr}
 800e278:	b084      	sub	sp, #16
 800e27a:	af00      	add	r7, sp, #0
	stusb4500_status_t 	status 		= eSTUSB4500_OK;
 800e27c:	2300      	movs	r3, #0
 800e27e:	73fb      	strb	r3, [r7, #15]
	uint8_t 			dummy[10]	= {0};
 800e280:	2300      	movs	r3, #0
 800e282:	607b      	str	r3, [r7, #4]
 800e284:	f107 0308 	add.w	r3, r7, #8
 800e288:	2200      	movs	r2, #0
 800e28a:	601a      	str	r2, [r3, #0]
 800e28c:	809a      	strh	r2, [r3, #4]

	status = stusb4500_low_if_read_register( eSTUSB4500_ADDR_PORT_STATUS_0, (uint8_t*) &dummy, 10UL );
 800e28e:	1d3b      	adds	r3, r7, #4
 800e290:	220a      	movs	r2, #10
 800e292:	4619      	mov	r1, r3
 800e294:	200d      	movs	r0, #13
 800e296:	f000 fa66 	bl	800e766 <stusb4500_low_if_read_register>
 800e29a:	4603      	mov	r3, r0
 800e29c:	73fb      	strb	r3, [r7, #15]

	return status;
 800e29e:	7bfb      	ldrb	r3, [r7, #15]
}
 800e2a0:	4618      	mov	r0, r3
 800e2a2:	3710      	adds	r7, #16
 800e2a4:	46bd      	mov	sp, r7
 800e2a6:	bd80      	pop	{r7, pc}

0800e2a8 <stusb4500_set_interrupt_mask>:
*
* @return 		status 		- Status of operation
*/
////////////////////////////////////////////////////////////////////////////////
static stusb4500_status_t stusb4500_set_interrupt_mask(void)
{
 800e2a8:	b580      	push	{r7, lr}
 800e2aa:	b082      	sub	sp, #8
 800e2ac:	af00      	add	r7, sp, #0
	stusb4500_status_t 				status 			= eSTUSB4500_OK;
 800e2ae:	2300      	movs	r3, #0
 800e2b0:	71fb      	strb	r3, [r7, #7]
	stusb4500_ALERT_STATUS_1_MASK_t alert_msk_reg 	= { .U = 0U };
 800e2b2:	2300      	movs	r3, #0
 800e2b4:	713b      	strb	r3, [r7, #4]

	// Unmask alarms
	alert_msk_reg.B.CC_FAULT_STATUS_AL_MASK = 1;
 800e2b6:	793b      	ldrb	r3, [r7, #4]
 800e2b8:	f043 0310 	orr.w	r3, r3, #16
 800e2bc:	713b      	strb	r3, [r7, #4]
	alert_msk_reg.B.PORT_STATUS_AL_MASK = 1;
 800e2be:	793b      	ldrb	r3, [r7, #4]
 800e2c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e2c4:	713b      	strb	r3, [r7, #4]
	alert_msk_reg.B.PRT_STATUS_AL_MASK = 1;
 800e2c6:	793b      	ldrb	r3, [r7, #4]
 800e2c8:	f043 0302 	orr.w	r3, r3, #2
 800e2cc:	713b      	strb	r3, [r7, #4]
	alert_msk_reg.B.TYPEC_MONITORING_STATUS_MASK = 1;
 800e2ce:	793b      	ldrb	r3, [r7, #4]
 800e2d0:	f043 0320 	orr.w	r3, r3, #32
 800e2d4:	713b      	strb	r3, [r7, #4]

	// Write
	status = stusb4500_low_if_write_register( eSTUSB4500_ADDR_ALERT_STATUS_1_MASK, &alert_msk_reg.U, 1UL );
 800e2d6:	1d3b      	adds	r3, r7, #4
 800e2d8:	2201      	movs	r2, #1
 800e2da:	4619      	mov	r1, r3
 800e2dc:	200c      	movs	r0, #12
 800e2de:	f000 fa29 	bl	800e734 <stusb4500_low_if_write_register>
 800e2e2:	4603      	mov	r3, r0
 800e2e4:	71fb      	strb	r3, [r7, #7]

	return status;
 800e2e6:	79fb      	ldrb	r3, [r7, #7]
}
 800e2e8:	4618      	mov	r0, r3
 800e2ea:	3708      	adds	r7, #8
 800e2ec:	46bd      	mov	sp, r7
 800e2ee:	bd80      	pop	{r7, pc}

0800e2f0 <stusb4500_soft_reset>:
*
* @return 		status 		- Status of operation
*/
////////////////////////////////////////////////////////////////////////////////
stusb4500_status_t stusb4500_soft_reset(void)
{
 800e2f0:	b580      	push	{r7, lr}
 800e2f2:	b082      	sub	sp, #8
 800e2f4:	af00      	add	r7, sp, #0
	stusb4500_status_t status = eSTUSB4500_OK;
 800e2f6:	2300      	movs	r3, #0
 800e2f8:	71fb      	strb	r3, [r7, #7]

	status |= stusb4500_low_if_write_register( eSTUSB4500_ADDR_TX_HEADER_LOW, (const uint8_t*) "\x0D", 1UL );
 800e2fa:	2201      	movs	r2, #1
 800e2fc:	490b      	ldr	r1, [pc, #44]	; (800e32c <stusb4500_soft_reset+0x3c>)
 800e2fe:	2051      	movs	r0, #81	; 0x51
 800e300:	f000 fa18 	bl	800e734 <stusb4500_low_if_write_register>
 800e304:	4603      	mov	r3, r0
 800e306:	461a      	mov	r2, r3
 800e308:	79fb      	ldrb	r3, [r7, #7]
 800e30a:	4313      	orrs	r3, r2
 800e30c:	71fb      	strb	r3, [r7, #7]
	status |= stusb4500_low_if_write_register( eSTUSB4500_ADDR_PD_COMMAND_CTRL, (const uint8_t*) "\x26", 1UL );
 800e30e:	2201      	movs	r2, #1
 800e310:	4907      	ldr	r1, [pc, #28]	; (800e330 <stusb4500_soft_reset+0x40>)
 800e312:	201a      	movs	r0, #26
 800e314:	f000 fa0e 	bl	800e734 <stusb4500_low_if_write_register>
 800e318:	4603      	mov	r3, r0
 800e31a:	461a      	mov	r2, r3
 800e31c:	79fb      	ldrb	r3, [r7, #7]
 800e31e:	4313      	orrs	r3, r2
 800e320:	71fb      	strb	r3, [r7, #7]

	return status;
 800e322:	79fb      	ldrb	r3, [r7, #7]
}
 800e324:	4618      	mov	r0, r3
 800e326:	3708      	adds	r7, #8
 800e328:	46bd      	mov	sp, r7
 800e32a:	bd80      	pop	{r7, pc}
 800e32c:	0801a540 	.word	0x0801a540
 800e330:	0801a544 	.word	0x0801a544

0800e334 <stusb4500_read_device_pdo>:
* @param[in] 	p_pdo		- Pointer to PDO data structure
* @return 		status 		- Status of operation
*/
////////////////////////////////////////////////////////////////////////////////
static stusb4500_status_t stusb4500_read_device_pdo(stusb4500_pdo_t * p_pdo)
{
 800e334:	b580      	push	{r7, lr}
 800e336:	b084      	sub	sp, #16
 800e338:	af00      	add	r7, sp, #0
 800e33a:	6078      	str	r0, [r7, #4]
	stusb4500_status_t 	status 	= eSTUSB4500_OK;
 800e33c:	2300      	movs	r3, #0
 800e33e:	73fb      	strb	r3, [r7, #15]
	stusb4500_pdo_raw_t pdo_raw	= { .U = 0UL };
 800e340:	2300      	movs	r3, #0
 800e342:	60bb      	str	r3, [r7, #8]
	uint8_t 			i		= 0U;
 800e344:	2300      	movs	r3, #0
 800e346:	73bb      	strb	r3, [r7, #14]

	for ( i = 0; i < eSTUSB4500_PDO_NUM_OF; i++ )
 800e348:	2300      	movs	r3, #0
 800e34a:	73bb      	strb	r3, [r7, #14]
 800e34c:	e01e      	b.n	800e38c <stusb4500_read_device_pdo+0x58>
	{
		// Read raw PDO
		status |= stusb4500_low_if_read_register(( eSTUSB4500_ADDR_DPM_SNK_PDO1_0 + ( 4U * i )), (uint8_t*) &pdo_raw.U, 4UL );
 800e34e:	7bbb      	ldrb	r3, [r7, #14]
 800e350:	009b      	lsls	r3, r3, #2
 800e352:	b2db      	uxtb	r3, r3
 800e354:	3b7b      	subs	r3, #123	; 0x7b
 800e356:	b2db      	uxtb	r3, r3
 800e358:	f107 0108 	add.w	r1, r7, #8
 800e35c:	2204      	movs	r2, #4
 800e35e:	4618      	mov	r0, r3
 800e360:	f000 fa01 	bl	800e766 <stusb4500_low_if_read_register>
 800e364:	4603      	mov	r3, r0
 800e366:	461a      	mov	r2, r3
 800e368:	7bfb      	ldrb	r3, [r7, #15]
 800e36a:	4313      	orrs	r3, r2
 800e36c:	73fb      	strb	r3, [r7, #15]

		// Parse PDO
		if ( eSTUSB4500_OK == status )
 800e36e:	7bfb      	ldrb	r3, [r7, #15]
 800e370:	2b00      	cmp	r3, #0
 800e372:	d105      	bne.n	800e380 <stusb4500_read_device_pdo+0x4c>
		{
			stusb4500_parse_raw_pdo_frame( p_pdo, &pdo_raw );
 800e374:	f107 0308 	add.w	r3, r7, #8
 800e378:	4619      	mov	r1, r3
 800e37a:	6878      	ldr	r0, [r7, #4]
 800e37c:	f000 f8c4 	bl	800e508 <stusb4500_parse_raw_pdo_frame>
		}

		// Next PDO
		p_pdo++;
 800e380:	687b      	ldr	r3, [r7, #4]
 800e382:	330c      	adds	r3, #12
 800e384:	607b      	str	r3, [r7, #4]
	for ( i = 0; i < eSTUSB4500_PDO_NUM_OF; i++ )
 800e386:	7bbb      	ldrb	r3, [r7, #14]
 800e388:	3301      	adds	r3, #1
 800e38a:	73bb      	strb	r3, [r7, #14]
 800e38c:	7bbb      	ldrb	r3, [r7, #14]
 800e38e:	2b02      	cmp	r3, #2
 800e390:	d9dd      	bls.n	800e34e <stusb4500_read_device_pdo+0x1a>
	}

	return status;
 800e392:	7bfb      	ldrb	r3, [r7, #15]
}
 800e394:	4618      	mov	r0, r3
 800e396:	3710      	adds	r7, #16
 800e398:	46bd      	mov	sp, r7
 800e39a:	bd80      	pop	{r7, pc}

0800e39c <stusb4500_write_device_pdo>:
* @param[in] 	p_pdo 	- Pointer to PDO data structure
* @return 		status	- Status of operation
*/
////////////////////////////////////////////////////////////////////////////////
static stusb4500_status_t stusb4500_write_device_pdo(const stusb4500_pdo_t * p_pdo)
{
 800e39c:	b580      	push	{r7, lr}
 800e39e:	b084      	sub	sp, #16
 800e3a0:	af00      	add	r7, sp, #0
 800e3a2:	6078      	str	r0, [r7, #4]
	stusb4500_status_t 	status 	= eSTUSB4500_OK;
 800e3a4:	2300      	movs	r3, #0
 800e3a6:	73fb      	strb	r3, [r7, #15]
	stusb4500_pdo_raw_t pdo_raw	= { .U = 0UL };
 800e3a8:	2300      	movs	r3, #0
 800e3aa:	60bb      	str	r3, [r7, #8]
	uint8_t				i		= 0U;
 800e3ac:	2300      	movs	r3, #0
 800e3ae:	73bb      	strb	r3, [r7, #14]

	for ( i = 0; i < eSTUSB4500_PDO_NUM_OF; i++ )
 800e3b0:	2300      	movs	r3, #0
 800e3b2:	73bb      	strb	r3, [r7, #14]
 800e3b4:	e01b      	b.n	800e3ee <stusb4500_write_device_pdo+0x52>
	{
		// Assemble pdo
		stusb4500_assemble_raw_pdo_frame( &pdo_raw, p_pdo );
 800e3b6:	f107 0308 	add.w	r3, r7, #8
 800e3ba:	6879      	ldr	r1, [r7, #4]
 800e3bc:	4618      	mov	r0, r3
 800e3be:	f000 f82b 	bl	800e418 <stusb4500_assemble_raw_pdo_frame>

		// Write PDO
		status |= stusb4500_low_if_write_register(( eSTUSB4500_ADDR_DPM_SNK_PDO1_0 + ( 4U * i )), (uint8_t*) &pdo_raw.U, 4UL );
 800e3c2:	7bbb      	ldrb	r3, [r7, #14]
 800e3c4:	009b      	lsls	r3, r3, #2
 800e3c6:	b2db      	uxtb	r3, r3
 800e3c8:	3b7b      	subs	r3, #123	; 0x7b
 800e3ca:	b2db      	uxtb	r3, r3
 800e3cc:	f107 0108 	add.w	r1, r7, #8
 800e3d0:	2204      	movs	r2, #4
 800e3d2:	4618      	mov	r0, r3
 800e3d4:	f000 f9ae 	bl	800e734 <stusb4500_low_if_write_register>
 800e3d8:	4603      	mov	r3, r0
 800e3da:	461a      	mov	r2, r3
 800e3dc:	7bfb      	ldrb	r3, [r7, #15]
 800e3de:	4313      	orrs	r3, r2
 800e3e0:	73fb      	strb	r3, [r7, #15]

		// Next PDO
		p_pdo++;
 800e3e2:	687b      	ldr	r3, [r7, #4]
 800e3e4:	330c      	adds	r3, #12
 800e3e6:	607b      	str	r3, [r7, #4]
	for ( i = 0; i < eSTUSB4500_PDO_NUM_OF; i++ )
 800e3e8:	7bbb      	ldrb	r3, [r7, #14]
 800e3ea:	3301      	adds	r3, #1
 800e3ec:	73bb      	strb	r3, [r7, #14]
 800e3ee:	7bbb      	ldrb	r3, [r7, #14]
 800e3f0:	2b02      	cmp	r3, #2
 800e3f2:	d9e0      	bls.n	800e3b6 <stusb4500_write_device_pdo+0x1a>
		// Set only PDO1
		status |= stusb4500_low_if_write_register( eSTUSB4500_ADDR_DPM_PDO_NUM, (const uint8_t*) "\x01", 1UL );
	#else

		// Check for all three PDO match
		status |= stusb4500_low_if_write_register( eSTUSB4500_ADDR_DPM_PDO_NUM, (const uint8_t*) "\x03", 1UL );
 800e3f4:	2201      	movs	r2, #1
 800e3f6:	4907      	ldr	r1, [pc, #28]	; (800e414 <stusb4500_write_device_pdo+0x78>)
 800e3f8:	2070      	movs	r0, #112	; 0x70
 800e3fa:	f000 f99b 	bl	800e734 <stusb4500_low_if_write_register>
 800e3fe:	4603      	mov	r3, r0
 800e400:	461a      	mov	r2, r3
 800e402:	7bfb      	ldrb	r3, [r7, #15]
 800e404:	4313      	orrs	r3, r2
 800e406:	73fb      	strb	r3, [r7, #15]
	#endif

	return status;
 800e408:	7bfb      	ldrb	r3, [r7, #15]
}
 800e40a:	4618      	mov	r0, r3
 800e40c:	3710      	adds	r7, #16
 800e40e:	46bd      	mov	sp, r7
 800e410:	bd80      	pop	{r7, pc}
 800e412:	bf00      	nop
 800e414:	0801a548 	.word	0x0801a548

0800e418 <stusb4500_assemble_raw_pdo_frame>:
* @param[in]	p_pdo 		- Pointer to PDO data
* @return 		status 		- Status of operation
*/
////////////////////////////////////////////////////////////////////////////////
static void stusb4500_assemble_raw_pdo_frame(stusb4500_pdo_raw_t * const p_pdo_raw, const stusb4500_pdo_t * const p_pdo)
{
 800e418:	b480      	push	{r7}
 800e41a:	b083      	sub	sp, #12
 800e41c:	af00      	add	r7, sp, #0
 800e41e:	6078      	str	r0, [r7, #4]
 800e420:	6039      	str	r1, [r7, #0]
	p_pdo_raw -> U = 0;
 800e422:	687b      	ldr	r3, [r7, #4]
 800e424:	2200      	movs	r2, #0
 800e426:	601a      	str	r2, [r3, #0]

	p_pdo_raw -> B.current 				= ( STUSB4500_CONVERT_CURRENT_TO_RAW * p_pdo -> current );
 800e428:	683b      	ldr	r3, [r7, #0]
 800e42a:	edd3 7a00 	vldr	s15, [r3]
 800e42e:	ed9f 7a35 	vldr	s14, [pc, #212]	; 800e504 <stusb4500_assemble_raw_pdo_frame+0xec>
 800e432:	ee67 7a87 	vmul.f32	s15, s15, s14
 800e436:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e43a:	ee17 3a90 	vmov	r3, s15
 800e43e:	b299      	uxth	r1, r3
 800e440:	687a      	ldr	r2, [r7, #4]
 800e442:	8813      	ldrh	r3, [r2, #0]
 800e444:	f361 0309 	bfi	r3, r1, #0, #10
 800e448:	8013      	strh	r3, [r2, #0]
	p_pdo_raw -> B.voltage 				= ( STUSB4500_CONVERT_VOLTAGE_TO_RAW * p_pdo -> voltage );
 800e44a:	683b      	ldr	r3, [r7, #0]
 800e44c:	edd3 7a01 	vldr	s15, [r3, #4]
 800e450:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 800e454:	ee67 7a87 	vmul.f32	s15, s15, s14
 800e458:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e45c:	ee17 3a90 	vmov	r3, s15
 800e460:	b299      	uxth	r1, r3
 800e462:	687a      	ldr	r2, [r7, #4]
 800e464:	6813      	ldr	r3, [r2, #0]
 800e466:	f361 2393 	bfi	r3, r1, #10, #10
 800e46a:	6013      	str	r3, [r2, #0]

	p_pdo_raw -> B.USB_com_en 			= p_pdo -> flags.USB_com_enable;
 800e46c:	683b      	ldr	r3, [r7, #0]
 800e46e:	7a5b      	ldrb	r3, [r3, #9]
 800e470:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800e474:	b2d9      	uxtb	r1, r3
 800e476:	687a      	ldr	r2, [r7, #4]
 800e478:	78d3      	ldrb	r3, [r2, #3]
 800e47a:	f361 0382 	bfi	r3, r1, #2, #1
 800e47e:	70d3      	strb	r3, [r2, #3]
	p_pdo_raw -> B.dual_role_data		= p_pdo -> flags.dual_role_data;
 800e480:	683b      	ldr	r3, [r7, #0]
 800e482:	7a5b      	ldrb	r3, [r3, #9]
 800e484:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800e488:	b2d9      	uxtb	r1, r3
 800e48a:	687a      	ldr	r2, [r7, #4]
 800e48c:	78d3      	ldrb	r3, [r2, #3]
 800e48e:	f361 0341 	bfi	r3, r1, #1, #1
 800e492:	70d3      	strb	r3, [r2, #3]
	p_pdo_raw -> B.dual_role_pwr		= p_pdo -> flags.dual_role_power;
 800e494:	683b      	ldr	r3, [r7, #0]
 800e496:	7a5b      	ldrb	r3, [r3, #9]
 800e498:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800e49c:	b2d9      	uxtb	r1, r3
 800e49e:	687a      	ldr	r2, [r7, #4]
 800e4a0:	78d3      	ldrb	r3, [r2, #3]
 800e4a2:	f361 1345 	bfi	r3, r1, #5, #1
 800e4a6:	70d3      	strb	r3, [r2, #3]
	p_pdo_raw -> B.unconstrained_pwr 	= p_pdo -> flags.unconstrained_power;
 800e4a8:	683b      	ldr	r3, [r7, #0]
 800e4aa:	7a5b      	ldrb	r3, [r3, #9]
 800e4ac:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800e4b0:	b2d9      	uxtb	r1, r3
 800e4b2:	687a      	ldr	r2, [r7, #4]
 800e4b4:	78d3      	ldrb	r3, [r2, #3]
 800e4b6:	f361 03c3 	bfi	r3, r1, #3, #1
 800e4ba:	70d3      	strb	r3, [r2, #3]
	p_pdo_raw -> B.high_capability		= p_pdo -> flags.high_capability;
 800e4bc:	683b      	ldr	r3, [r7, #0]
 800e4be:	7a5b      	ldrb	r3, [r3, #9]
 800e4c0:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800e4c4:	b2d9      	uxtb	r1, r3
 800e4c6:	687a      	ldr	r2, [r7, #4]
 800e4c8:	78d3      	ldrb	r3, [r2, #3]
 800e4ca:	f361 1304 	bfi	r3, r1, #4, #1
 800e4ce:	70d3      	strb	r3, [r2, #3]

	p_pdo_raw -> B.fast_role			= p_pdo -> fast_role_swap;
 800e4d0:	683b      	ldr	r3, [r7, #0]
 800e4d2:	7a1b      	ldrb	r3, [r3, #8]
 800e4d4:	f003 0303 	and.w	r3, r3, #3
 800e4d8:	b2d9      	uxtb	r1, r3
 800e4da:	687a      	ldr	r2, [r7, #4]
 800e4dc:	8853      	ldrh	r3, [r2, #2]
 800e4de:	f361 13c8 	bfi	r3, r1, #7, #2
 800e4e2:	8053      	strh	r3, [r2, #2]
	p_pdo_raw -> B.type					= p_pdo -> type;
 800e4e4:	683b      	ldr	r3, [r7, #0]
 800e4e6:	7a9b      	ldrb	r3, [r3, #10]
 800e4e8:	f003 0303 	and.w	r3, r3, #3
 800e4ec:	b2d9      	uxtb	r1, r3
 800e4ee:	687a      	ldr	r2, [r7, #4]
 800e4f0:	78d3      	ldrb	r3, [r2, #3]
 800e4f2:	f361 1387 	bfi	r3, r1, #6, #2
 800e4f6:	70d3      	strb	r3, [r2, #3]

}
 800e4f8:	bf00      	nop
 800e4fa:	370c      	adds	r7, #12
 800e4fc:	46bd      	mov	sp, r7
 800e4fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e502:	4770      	bx	lr
 800e504:	42c80000 	.word	0x42c80000

0800e508 <stusb4500_parse_raw_pdo_frame>:
* @param[in]	p_pdo_raw	- Pointer to raw PDO data
* @return 		status		- Status of operation
*/
////////////////////////////////////////////////////////////////////////////////
static void stusb4500_parse_raw_pdo_frame(stusb4500_pdo_t * const p_pdo, const stusb4500_pdo_raw_t * const p_pdo_raw)
{
 800e508:	b480      	push	{r7}
 800e50a:	b083      	sub	sp, #12
 800e50c:	af00      	add	r7, sp, #0
 800e50e:	6078      	str	r0, [r7, #4]
 800e510:	6039      	str	r1, [r7, #0]
	p_pdo -> current 					= ( STUSB4500_CONVERT_CURRENT_TO_A  * p_pdo_raw -> B.current );
 800e512:	683b      	ldr	r3, [r7, #0]
 800e514:	881b      	ldrh	r3, [r3, #0]
 800e516:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800e51a:	b29b      	uxth	r3, r3
 800e51c:	ee07 3a90 	vmov	s15, r3
 800e520:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e524:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 800e5d4 <stusb4500_parse_raw_pdo_frame+0xcc>
 800e528:	ee67 7a87 	vmul.f32	s15, s15, s14
 800e52c:	687b      	ldr	r3, [r7, #4]
 800e52e:	edc3 7a00 	vstr	s15, [r3]
	p_pdo -> voltage 					= ( STUSB4500_CONVERT_VOLTAGE_TO_V * p_pdo_raw -> B.voltage );
 800e532:	683b      	ldr	r3, [r7, #0]
 800e534:	681b      	ldr	r3, [r3, #0]
 800e536:	f3c3 2389 	ubfx	r3, r3, #10, #10
 800e53a:	b29b      	uxth	r3, r3
 800e53c:	ee07 3a90 	vmov	s15, r3
 800e540:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e544:	ed9f 7a24 	vldr	s14, [pc, #144]	; 800e5d8 <stusb4500_parse_raw_pdo_frame+0xd0>
 800e548:	ee67 7a87 	vmul.f32	s15, s15, s14
 800e54c:	687b      	ldr	r3, [r7, #4]
 800e54e:	edc3 7a01 	vstr	s15, [r3, #4]

	p_pdo -> flags.USB_com_enable		= p_pdo_raw -> B.USB_com_en;
 800e552:	683b      	ldr	r3, [r7, #0]
 800e554:	78db      	ldrb	r3, [r3, #3]
 800e556:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800e55a:	b2d9      	uxtb	r1, r3
 800e55c:	687a      	ldr	r2, [r7, #4]
 800e55e:	7a53      	ldrb	r3, [r2, #9]
 800e560:	f361 0341 	bfi	r3, r1, #1, #1
 800e564:	7253      	strb	r3, [r2, #9]
	p_pdo -> flags.dual_role_data		= p_pdo_raw -> B.dual_role_data;
 800e566:	683b      	ldr	r3, [r7, #0]
 800e568:	78db      	ldrb	r3, [r3, #3]
 800e56a:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800e56e:	b2d9      	uxtb	r1, r3
 800e570:	687a      	ldr	r2, [r7, #4]
 800e572:	7a53      	ldrb	r3, [r2, #9]
 800e574:	f361 0300 	bfi	r3, r1, #0, #1
 800e578:	7253      	strb	r3, [r2, #9]
	p_pdo -> flags.dual_role_power		= p_pdo_raw -> B.dual_role_pwr;
 800e57a:	683b      	ldr	r3, [r7, #0]
 800e57c:	78db      	ldrb	r3, [r3, #3]
 800e57e:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800e582:	b2d9      	uxtb	r1, r3
 800e584:	687a      	ldr	r2, [r7, #4]
 800e586:	7a53      	ldrb	r3, [r2, #9]
 800e588:	f361 1304 	bfi	r3, r1, #4, #1
 800e58c:	7253      	strb	r3, [r2, #9]
	p_pdo -> flags.unconstrained_power	= p_pdo_raw -> B.unconstrained_pwr;
 800e58e:	683b      	ldr	r3, [r7, #0]
 800e590:	78db      	ldrb	r3, [r3, #3]
 800e592:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800e596:	b2d9      	uxtb	r1, r3
 800e598:	687a      	ldr	r2, [r7, #4]
 800e59a:	7a53      	ldrb	r3, [r2, #9]
 800e59c:	f361 0382 	bfi	r3, r1, #2, #1
 800e5a0:	7253      	strb	r3, [r2, #9]
	p_pdo -> flags.high_capability		= p_pdo_raw -> B.high_capability;
 800e5a2:	683b      	ldr	r3, [r7, #0]
 800e5a4:	78db      	ldrb	r3, [r3, #3]
 800e5a6:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800e5aa:	b2d9      	uxtb	r1, r3
 800e5ac:	687a      	ldr	r2, [r7, #4]
 800e5ae:	7a53      	ldrb	r3, [r2, #9]
 800e5b0:	f361 03c3 	bfi	r3, r1, #3, #1
 800e5b4:	7253      	strb	r3, [r2, #9]

	p_pdo -> fast_role_swap 			= p_pdo_raw -> B.fast_role;
 800e5b6:	683b      	ldr	r3, [r7, #0]
 800e5b8:	885b      	ldrh	r3, [r3, #2]
 800e5ba:	f3c3 13c1 	ubfx	r3, r3, #7, #2
 800e5be:	b2db      	uxtb	r3, r3
 800e5c0:	461a      	mov	r2, r3
 800e5c2:	687b      	ldr	r3, [r7, #4]
 800e5c4:	721a      	strb	r2, [r3, #8]
}
 800e5c6:	bf00      	nop
 800e5c8:	370c      	adds	r7, #12
 800e5ca:	46bd      	mov	sp, r7
 800e5cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5d0:	4770      	bx	lr
 800e5d2:	bf00      	nop
 800e5d4:	3c23d70a 	.word	0x3c23d70a
 800e5d8:	3d4ccccd 	.word	0x3d4ccccd

0800e5dc <stusb4500_refresh_status>:
*
* @return	status 		- Status of operation
*/
////////////////////////////////////////////////////////////////////////////////
static stusb4500_status_t stusb4500_refresh_status(void)
{
 800e5dc:	b580      	push	{r7, lr}
 800e5de:	b084      	sub	sp, #16
 800e5e0:	af00      	add	r7, sp, #0
	stusb4500_status_t 			status 			= eSTUSB4500_OK;
 800e5e2:	2300      	movs	r3, #0
 800e5e4:	73fb      	strb	r3, [r7, #15]
	stusb4500_PORT_STATUS_1_t 	port_status1	= { .U = 0U };
 800e5e6:	2300      	movs	r3, #0
 800e5e8:	733b      	strb	r3, [r7, #12]
	stusb4500_CC_STATUS_t 		cc_status		= { .U = 0U };
 800e5ea:	2300      	movs	r3, #0
 800e5ec:	723b      	strb	r3, [r7, #8]
	stusb4500_rdo_raw_t 		rdo_raw			= { .U = 0UL };
 800e5ee:	2300      	movs	r3, #0
 800e5f0:	607b      	str	r3, [r7, #4]

	// Check if init
	if ( true == gb_is_init )
 800e5f2:	4b1e      	ldr	r3, [pc, #120]	; (800e66c <stusb4500_refresh_status+0x90>)
 800e5f4:	781b      	ldrb	r3, [r3, #0]
 800e5f6:	2b00      	cmp	r3, #0
 800e5f8:	d02b      	beq.n	800e652 <stusb4500_refresh_status+0x76>
	{
		// Read USB-C connection status
		status |= stusb4500_low_if_read_register( eSTUSB4500_ADDR_PORT_STATUS_1, &port_status1.U, 1UL );
 800e5fa:	f107 030c 	add.w	r3, r7, #12
 800e5fe:	2201      	movs	r2, #1
 800e600:	4619      	mov	r1, r3
 800e602:	200e      	movs	r0, #14
 800e604:	f000 f8af 	bl	800e766 <stusb4500_low_if_read_register>
 800e608:	4603      	mov	r3, r0
 800e60a:	461a      	mov	r2, r3
 800e60c:	7bfb      	ldrb	r3, [r7, #15]
 800e60e:	4313      	orrs	r3, r2
 800e610:	73fb      	strb	r3, [r7, #15]
		status |= stusb4500_low_if_read_register( eSTUSB4500_ADDR_CC_STATUS, &cc_status.U, 1UL );
 800e612:	f107 0308 	add.w	r3, r7, #8
 800e616:	2201      	movs	r2, #1
 800e618:	4619      	mov	r1, r3
 800e61a:	2011      	movs	r0, #17
 800e61c:	f000 f8a3 	bl	800e766 <stusb4500_low_if_read_register>
 800e620:	4603      	mov	r3, r0
 800e622:	461a      	mov	r2, r3
 800e624:	7bfb      	ldrb	r3, [r7, #15]
 800e626:	4313      	orrs	r3, r2
 800e628:	73fb      	strb	r3, [r7, #15]

		// Read USB PD status
		status |= stusb4500_low_if_read_register( eSTUSB4500_ADDR_RDO_REG_STATUS_0, (uint8_t*) &rdo_raw.U, 4UL );
 800e62a:	1d3b      	adds	r3, r7, #4
 800e62c:	2204      	movs	r2, #4
 800e62e:	4619      	mov	r1, r3
 800e630:	2091      	movs	r0, #145	; 0x91
 800e632:	f000 f898 	bl	800e766 <stusb4500_low_if_read_register>
 800e636:	4603      	mov	r3, r0
 800e638:	461a      	mov	r2, r3
 800e63a:	7bfb      	ldrb	r3, [r7, #15]
 800e63c:	4313      	orrs	r3, r2
 800e63e:	73fb      	strb	r3, [r7, #15]

		// Parse read status
		stusb4500_parse_raw_rdo_frame( &g_stusb4500_status, &rdo_raw, &port_status1, &cc_status );
 800e640:	f107 0308 	add.w	r3, r7, #8
 800e644:	f107 020c 	add.w	r2, r7, #12
 800e648:	1d39      	adds	r1, r7, #4
 800e64a:	4809      	ldr	r0, [pc, #36]	; (800e670 <stusb4500_refresh_status+0x94>)
 800e64c:	f000 f814 	bl	800e678 <stusb4500_parse_raw_rdo_frame>
 800e650:	e007      	b.n	800e662 <stusb4500_refresh_status+0x86>
	}
	else
	{
		status = eSTUSB4500_ERROR;
 800e652:	2301      	movs	r3, #1
 800e654:	73fb      	strb	r3, [r7, #15]

		STUSB4500_DBG_PRINT( "Module not initialized!" );
 800e656:	4907      	ldr	r1, [pc, #28]	; (800e674 <stusb4500_refresh_status+0x98>)
 800e658:	2002      	movs	r0, #2
 800e65a:	f003 fb6f 	bl	8011d3c <com_dbg_print>
		STUSB4500_ASSERT( 0 );
 800e65e:	f006 fcc5 	bl	8014fec <project_config_assert_fail>
	}

	return status;
 800e662:	7bfb      	ldrb	r3, [r7, #15]
}
 800e664:	4618      	mov	r0, r3
 800e666:	3710      	adds	r7, #16
 800e668:	46bd      	mov	sp, r7
 800e66a:	bd80      	pop	{r7, pc}
 800e66c:	20004cd4 	.word	0x20004cd4
 800e670:	20004cc4 	.word	0x20004cc4
 800e674:	0801a528 	.word	0x0801a528

0800e678 <stusb4500_parse_raw_rdo_frame>:
* @param[in]	p_cc_stat		- Pointer to CC register
* @return		status 			- Status of operation
*/
////////////////////////////////////////////////////////////////////////////////
static void stusb4500_parse_raw_rdo_frame(stusb4500_usb_status_t * const p_usb_status, const stusb4500_rdo_raw_t * const p_rdo_raw, const stusb4500_PORT_STATUS_1_t * const p_port_stat, const stusb4500_CC_STATUS_t * const p_cc_stat)
{
 800e678:	b480      	push	{r7}
 800e67a:	b085      	sub	sp, #20
 800e67c:	af00      	add	r7, sp, #0
 800e67e:	60f8      	str	r0, [r7, #12]
 800e680:	60b9      	str	r1, [r7, #8]
 800e682:	607a      	str	r2, [r7, #4]
 800e684:	603b      	str	r3, [r7, #0]
	// Current capabilities
	p_usb_status -> RDO.current.maximum 	= ( STUSB4500_CONVERT_CURRENT_TO_A * p_rdo_raw -> B.current_max );
 800e686:	68bb      	ldr	r3, [r7, #8]
 800e688:	881b      	ldrh	r3, [r3, #0]
 800e68a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800e68e:	b29b      	uxth	r3, r3
 800e690:	ee07 3a90 	vmov	s15, r3
 800e694:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e698:	ed9f 7a25 	vldr	s14, [pc, #148]	; 800e730 <stusb4500_parse_raw_rdo_frame+0xb8>
 800e69c:	ee67 7a87 	vmul.f32	s15, s15, s14
 800e6a0:	68fb      	ldr	r3, [r7, #12]
 800e6a2:	edc3 7a00 	vstr	s15, [r3]
	p_usb_status -> RDO.current.operating 	= ( STUSB4500_CONVERT_CURRENT_TO_A * p_rdo_raw -> B.current_operating );
 800e6a6:	68bb      	ldr	r3, [r7, #8]
 800e6a8:	681b      	ldr	r3, [r3, #0]
 800e6aa:	f3c3 2389 	ubfx	r3, r3, #10, #10
 800e6ae:	b29b      	uxth	r3, r3
 800e6b0:	ee07 3a90 	vmov	s15, r3
 800e6b4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e6b8:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 800e730 <stusb4500_parse_raw_rdo_frame+0xb8>
 800e6bc:	ee67 7a87 	vmul.f32	s15, s15, s14
 800e6c0:	68fb      	ldr	r3, [r7, #12]
 800e6c2:	edc3 7a01 	vstr	s15, [r3, #4]

	// Object position
	if ( p_rdo_raw -> B.object_position > 0 )
 800e6c6:	68bb      	ldr	r3, [r7, #8]
 800e6c8:	78db      	ldrb	r3, [r3, #3]
 800e6ca:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800e6ce:	b2db      	uxtb	r3, r3
 800e6d0:	2b00      	cmp	r3, #0
 800e6d2:	d00b      	beq.n	800e6ec <stusb4500_parse_raw_rdo_frame+0x74>
	{
		p_usb_status -> RDO.mode = eSTUSB4500_RDO_MODE_USB_PD;
 800e6d4:	68fb      	ldr	r3, [r7, #12]
 800e6d6:	2201      	movs	r2, #1
 800e6d8:	721a      	strb	r2, [r3, #8]
		p_usb_status -> RDO.src_pdo = p_rdo_raw -> B.object_position;
 800e6da:	68bb      	ldr	r3, [r7, #8]
 800e6dc:	78db      	ldrb	r3, [r3, #3]
 800e6de:	f3c3 1302 	ubfx	r3, r3, #4, #3
 800e6e2:	b2db      	uxtb	r3, r3
 800e6e4:	461a      	mov	r2, r3
 800e6e6:	68fb      	ldr	r3, [r7, #12]
 800e6e8:	725a      	strb	r2, [r3, #9]
 800e6ea:	e002      	b.n	800e6f2 <stusb4500_parse_raw_rdo_frame+0x7a>
	}
	else
	{
		p_usb_status -> RDO.mode = eSTUSB4500_RDO_MODE_USB_C;
 800e6ec:	68fb      	ldr	r3, [r7, #12]
 800e6ee:	2200      	movs	r2, #0
 800e6f0:	721a      	strb	r2, [r3, #8]
	}

	// Attached
	p_usb_status -> attached = p_port_stat -> B.ATTACH ;
 800e6f2:	687b      	ldr	r3, [r7, #4]
 800e6f4:	781b      	ldrb	r3, [r3, #0]
 800e6f6:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800e6fa:	b2db      	uxtb	r3, r3
 800e6fc:	461a      	mov	r2, r3
 800e6fe:	68fb      	ldr	r3, [r7, #12]
 800e700:	731a      	strb	r2, [r3, #12]

	// CC state
	p_usb_status -> CC1 = p_cc_stat -> B.CC1_STATE;
 800e702:	683b      	ldr	r3, [r7, #0]
 800e704:	781b      	ldrb	r3, [r3, #0]
 800e706:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800e70a:	b2db      	uxtb	r3, r3
 800e70c:	461a      	mov	r2, r3
 800e70e:	68fb      	ldr	r3, [r7, #12]
 800e710:	735a      	strb	r2, [r3, #13]
	p_usb_status -> CC2 = p_cc_stat -> B.CC2_STATE;
 800e712:	683b      	ldr	r3, [r7, #0]
 800e714:	781b      	ldrb	r3, [r3, #0]
 800e716:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800e71a:	b2db      	uxtb	r3, r3
 800e71c:	461a      	mov	r2, r3
 800e71e:	68fb      	ldr	r3, [r7, #12]
 800e720:	739a      	strb	r2, [r3, #14]
}
 800e722:	bf00      	nop
 800e724:	3714      	adds	r7, #20
 800e726:	46bd      	mov	sp, r7
 800e728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e72c:	4770      	bx	lr
 800e72e:	bf00      	nop
 800e730:	3c23d70a 	.word	0x3c23d70a

0800e734 <stusb4500_low_if_write_register>:
* @param[in] 	size		- Size of transmit data
* @return 		status 		- Status of operation
*/
////////////////////////////////////////////////////////////////////////////////
stusb4500_status_t stusb4500_low_if_write_register(const stusb4500_addr_t addr, const uint8_t * p_tx_data, const uint32_t size)
{
 800e734:	b580      	push	{r7, lr}
 800e736:	b086      	sub	sp, #24
 800e738:	af00      	add	r7, sp, #0
 800e73a:	4603      	mov	r3, r0
 800e73c:	60b9      	str	r1, [r7, #8]
 800e73e:	607a      	str	r2, [r7, #4]
 800e740:	73fb      	strb	r3, [r7, #15]
	stusb4500_status_t status = eSTUSB4500_OK;
 800e742:	2300      	movs	r3, #0
 800e744:	75fb      	strb	r3, [r7, #23]

	if ( eSTUSB4500_OK != stusb4500_if_write_register( addr,(uint8_t*) p_tx_data, size ))
 800e746:	7bfb      	ldrb	r3, [r7, #15]
 800e748:	687a      	ldr	r2, [r7, #4]
 800e74a:	68b9      	ldr	r1, [r7, #8]
 800e74c:	4618      	mov	r0, r3
 800e74e:	f000 f82f 	bl	800e7b0 <stusb4500_if_write_register>
 800e752:	4603      	mov	r3, r0
 800e754:	2b00      	cmp	r3, #0
 800e756:	d001      	beq.n	800e75c <stusb4500_low_if_write_register+0x28>
	{
		status = eSTUSB4500_ERROR;
 800e758:	2301      	movs	r3, #1
 800e75a:	75fb      	strb	r3, [r7, #23]
	}

	return status;
 800e75c:	7dfb      	ldrb	r3, [r7, #23]
}
 800e75e:	4618      	mov	r0, r3
 800e760:	3718      	adds	r7, #24
 800e762:	46bd      	mov	sp, r7
 800e764:	bd80      	pop	{r7, pc}

0800e766 <stusb4500_low_if_read_register>:
* @param[in] 	size		- Size of received data
* @return 		status 		- Status of operation
*/
////////////////////////////////////////////////////////////////////////////////
stusb4500_status_t stusb4500_low_if_read_register(const stusb4500_addr_t addr, uint8_t * p_rx_data, const uint32_t size)
{
 800e766:	b580      	push	{r7, lr}
 800e768:	b086      	sub	sp, #24
 800e76a:	af00      	add	r7, sp, #0
 800e76c:	4603      	mov	r3, r0
 800e76e:	60b9      	str	r1, [r7, #8]
 800e770:	607a      	str	r2, [r7, #4]
 800e772:	73fb      	strb	r3, [r7, #15]
	stusb4500_status_t status = eSTUSB4500_OK;
 800e774:	2300      	movs	r3, #0
 800e776:	75fb      	strb	r3, [r7, #23]

	if ( eSTUSB4500_OK != stusb4500_if_read_register( addr, p_rx_data, size ))
 800e778:	7bfb      	ldrb	r3, [r7, #15]
 800e77a:	687a      	ldr	r2, [r7, #4]
 800e77c:	68b9      	ldr	r1, [r7, #8]
 800e77e:	4618      	mov	r0, r3
 800e780:	f000 f82f 	bl	800e7e2 <stusb4500_if_read_register>
 800e784:	4603      	mov	r3, r0
 800e786:	2b00      	cmp	r3, #0
 800e788:	d001      	beq.n	800e78e <stusb4500_low_if_read_register+0x28>
	{
		status = eSTUSB4500_ERROR;
 800e78a:	2301      	movs	r3, #1
 800e78c:	75fb      	strb	r3, [r7, #23]
	}

	return status;
 800e78e:	7dfb      	ldrb	r3, [r7, #23]
}
 800e790:	4618      	mov	r0, r3
 800e792:	3718      	adds	r7, #24
 800e794:	46bd      	mov	sp, r7
 800e796:	bd80      	pop	{r7, pc}

0800e798 <stusb4500_if_init>:
*
* @return 		status - Status of initialization
*/
////////////////////////////////////////////////////////////////////////////////
stusb4500_status_t stusb4500_if_init(void)
{
 800e798:	b480      	push	{r7}
 800e79a:	b083      	sub	sp, #12
 800e79c:	af00      	add	r7, sp, #0
	stusb4500_status_t status = eSTUSB4500_OK;
 800e79e:	2300      	movs	r3, #0
 800e7a0:	71fb      	strb	r3, [r7, #7]

	// Left empty as periphery is initilize elswhere...

	// USER CODE END...

	return status;
 800e7a2:	79fb      	ldrb	r3, [r7, #7]
}
 800e7a4:	4618      	mov	r0, r3
 800e7a6:	370c      	adds	r7, #12
 800e7a8:	46bd      	mov	sp, r7
 800e7aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7ae:	4770      	bx	lr

0800e7b0 <stusb4500_if_write_register>:
* @param[in] 	size		- Size of transmit data
* @return 		status 		- Status of operation
*/
////////////////////////////////////////////////////////////////////////////////
stusb4500_status_t stusb4500_if_write_register(const uint8_t addr, const uint8_t * p_tx_data, const uint32_t size)
{
 800e7b0:	b580      	push	{r7, lr}
 800e7b2:	b086      	sub	sp, #24
 800e7b4:	af00      	add	r7, sp, #0
 800e7b6:	4603      	mov	r3, r0
 800e7b8:	60b9      	str	r1, [r7, #8]
 800e7ba:	607a      	str	r2, [r7, #4]
 800e7bc:	73fb      	strb	r3, [r7, #15]
	stusb4500_status_t status = eSTUSB4500_OK;
 800e7be:	2300      	movs	r3, #0
 800e7c0:	75fb      	strb	r3, [r7, #23]

	// USER CODE BEGIN...

	if ( eI2C_OK != i2c_usbc_write( STUSB4500_DEV_ADDR, addr, (uint8_t*)p_tx_data, size ))
 800e7c2:	7bf9      	ldrb	r1, [r7, #15]
 800e7c4:	687b      	ldr	r3, [r7, #4]
 800e7c6:	68ba      	ldr	r2, [r7, #8]
 800e7c8:	2028      	movs	r0, #40	; 0x28
 800e7ca:	f002 f8b3 	bl	8010934 <i2c_usbc_write>
 800e7ce:	4603      	mov	r3, r0
 800e7d0:	2b00      	cmp	r3, #0
 800e7d2:	d001      	beq.n	800e7d8 <stusb4500_if_write_register+0x28>
	{
		status = eSTUSB4500_ERROR;
 800e7d4:	2301      	movs	r3, #1
 800e7d6:	75fb      	strb	r3, [r7, #23]
	}

	// USER CODE END...

	return status;
 800e7d8:	7dfb      	ldrb	r3, [r7, #23]
}
 800e7da:	4618      	mov	r0, r3
 800e7dc:	3718      	adds	r7, #24
 800e7de:	46bd      	mov	sp, r7
 800e7e0:	bd80      	pop	{r7, pc}

0800e7e2 <stusb4500_if_read_register>:
* @param[in] 	size		- Size of received data
* @return 		status 		- Status of operation
*/
////////////////////////////////////////////////////////////////////////////////
stusb4500_status_t stusb4500_if_read_register(const uint8_t addr, uint8_t * p_rx_data, const uint32_t size)
{
 800e7e2:	b580      	push	{r7, lr}
 800e7e4:	b086      	sub	sp, #24
 800e7e6:	af00      	add	r7, sp, #0
 800e7e8:	4603      	mov	r3, r0
 800e7ea:	60b9      	str	r1, [r7, #8]
 800e7ec:	607a      	str	r2, [r7, #4]
 800e7ee:	73fb      	strb	r3, [r7, #15]
	stusb4500_status_t status = eSTUSB4500_OK;
 800e7f0:	2300      	movs	r3, #0
 800e7f2:	75fb      	strb	r3, [r7, #23]

	// USER CODE BEGIN...

	if ( eI2C_OK != i2c_usbc_read( STUSB4500_DEV_ADDR, addr, p_rx_data, size ))
 800e7f4:	7bf9      	ldrb	r1, [r7, #15]
 800e7f6:	687b      	ldr	r3, [r7, #4]
 800e7f8:	68ba      	ldr	r2, [r7, #8]
 800e7fa:	2028      	movs	r0, #40	; 0x28
 800e7fc:	f002 f872 	bl	80108e4 <i2c_usbc_read>
 800e800:	4603      	mov	r3, r0
 800e802:	2b00      	cmp	r3, #0
 800e804:	d001      	beq.n	800e80a <stusb4500_if_read_register+0x28>
	{
		status = eSTUSB4500_ERROR;
 800e806:	2301      	movs	r3, #1
 800e808:	75fb      	strb	r3, [r7, #23]
	}

	// USER CODE END...

	return status;
 800e80a:	7dfb      	ldrb	r3, [r7, #23]
}
 800e80c:	4618      	mov	r0, r3
 800e80e:	3718      	adds	r7, #24
 800e810:	46bd      	mov	sp, r7
 800e812:	bd80      	pop	{r7, pc}

0800e814 <xpt2046_init>:
*
* @return 	status - Status of operation
*/
////////////////////////////////////////////////////////////////////////////////
xpt2046_status_t xpt2046_init(void)
{
 800e814:	b580      	push	{r7, lr}
 800e816:	b082      	sub	sp, #8
 800e818:	af00      	add	r7, sp, #0
	xpt2046_status_t status = eXPT2046_OK;
 800e81a:	2300      	movs	r3, #0
 800e81c:	71fb      	strb	r3, [r7, #7]

	XPT2046_ASSERT( false == gb_is_init );
 800e81e:	4b11      	ldr	r3, [pc, #68]	; (800e864 <xpt2046_init+0x50>)
 800e820:	781b      	ldrb	r3, [r3, #0]
 800e822:	2b00      	cmp	r3, #0
 800e824:	d001      	beq.n	800e82a <xpt2046_init+0x16>
 800e826:	f006 fbe1 	bl	8014fec <project_config_assert_fail>

	// Initialize low level drivers
	status = xpt2046_if_init();
 800e82a:	f001 f891 	bl	800f950 <xpt2046_if_init>
 800e82e:	4603      	mov	r3, r0
 800e830:	71fb      	strb	r3, [r7, #7]

	// Initialize FSM
	g_cal_fsm.state.cur = eXPT2046_FSM_NORMAL;
 800e832:	4b0d      	ldr	r3, [pc, #52]	; (800e868 <xpt2046_init+0x54>)
 800e834:	2200      	movs	r2, #0
 800e836:	721a      	strb	r2, [r3, #8]
	g_cal_fsm.state.next = eXPT2046_FSM_NORMAL;
 800e838:	4b0b      	ldr	r3, [pc, #44]	; (800e868 <xpt2046_init+0x54>)
 800e83a:	2200      	movs	r2, #0
 800e83c:	725a      	strb	r2, [r3, #9]
	g_cal_fsm.time.duration = 0;
 800e83e:	4b0a      	ldr	r3, [pc, #40]	; (800e868 <xpt2046_init+0x54>)
 800e840:	2200      	movs	r2, #0
 800e842:	601a      	str	r2, [r3, #0]
	g_cal_fsm.time.first_entry = false;
 800e844:	4b08      	ldr	r3, [pc, #32]	; (800e868 <xpt2046_init+0x54>)
 800e846:	2200      	movs	r2, #0
 800e848:	711a      	strb	r2, [r3, #4]

	// Init done
	gb_is_init = true;
 800e84a:	4b06      	ldr	r3, [pc, #24]	; (800e864 <xpt2046_init+0x50>)
 800e84c:	2201      	movs	r2, #1
 800e84e:	701a      	strb	r2, [r3, #0]

	XPT2046_ASSERT( status == eXPT2046_OK );
 800e850:	79fb      	ldrb	r3, [r7, #7]
 800e852:	2b00      	cmp	r3, #0
 800e854:	d001      	beq.n	800e85a <xpt2046_init+0x46>
 800e856:	f006 fbc9 	bl	8014fec <project_config_assert_fail>

	return status;
 800e85a:	79fb      	ldrb	r3, [r7, #7]
}
 800e85c:	4618      	mov	r0, r3
 800e85e:	3708      	adds	r7, #8
 800e860:	46bd      	mov	sp, r7
 800e862:	bd80      	pop	{r7, pc}
 800e864:	20004cec 	.word	0x20004cec
 800e868:	20004ce0 	.word	0x20004ce0

0800e86c <xpt2046_get_touch>:
* @param[out]	p_pressed 	- Pointer to pressed flag
* @return		status 		- Status of initialization
*/
////////////////////////////////////////////////////////////////////////////////
xpt2046_status_t xpt2046_get_touch(uint16_t * const p_page, uint16_t * const p_col, uint16_t * const p_force, bool * const p_pressed)
{
 800e86c:	b580      	push	{r7, lr}
 800e86e:	b086      	sub	sp, #24
 800e870:	af00      	add	r7, sp, #0
 800e872:	60f8      	str	r0, [r7, #12]
 800e874:	60b9      	str	r1, [r7, #8]
 800e876:	607a      	str	r2, [r7, #4]
 800e878:	603b      	str	r3, [r7, #0]
	xpt2046_status_t status = eXPT2046_OK;
 800e87a:	2300      	movs	r3, #0
 800e87c:	75fb      	strb	r3, [r7, #23]

	XPT2046_ASSERT( true == gb_is_init );
 800e87e:	4b15      	ldr	r3, [pc, #84]	; (800e8d4 <xpt2046_get_touch+0x68>)
 800e880:	781b      	ldrb	r3, [r3, #0]
 800e882:	f083 0301 	eor.w	r3, r3, #1
 800e886:	b2db      	uxtb	r3, r3
 800e888:	2b00      	cmp	r3, #0
 800e88a:	d001      	beq.n	800e890 <xpt2046_get_touch+0x24>
 800e88c:	f006 fbae 	bl	8014fec <project_config_assert_fail>

	if ( NULL != p_page )
 800e890:	68fb      	ldr	r3, [r7, #12]
 800e892:	2b00      	cmp	r3, #0
 800e894:	d003      	beq.n	800e89e <xpt2046_get_touch+0x32>
	{
		*p_page 	= g_touch.page;
 800e896:	4b10      	ldr	r3, [pc, #64]	; (800e8d8 <xpt2046_get_touch+0x6c>)
 800e898:	881a      	ldrh	r2, [r3, #0]
 800e89a:	68fb      	ldr	r3, [r7, #12]
 800e89c:	801a      	strh	r2, [r3, #0]
	}

	if ( NULL != p_col )
 800e89e:	68bb      	ldr	r3, [r7, #8]
 800e8a0:	2b00      	cmp	r3, #0
 800e8a2:	d003      	beq.n	800e8ac <xpt2046_get_touch+0x40>
	{
		*p_col 		= g_touch.col;
 800e8a4:	4b0c      	ldr	r3, [pc, #48]	; (800e8d8 <xpt2046_get_touch+0x6c>)
 800e8a6:	885a      	ldrh	r2, [r3, #2]
 800e8a8:	68bb      	ldr	r3, [r7, #8]
 800e8aa:	801a      	strh	r2, [r3, #0]
	}

	if ( NULL != p_force )
 800e8ac:	687b      	ldr	r3, [r7, #4]
 800e8ae:	2b00      	cmp	r3, #0
 800e8b0:	d003      	beq.n	800e8ba <xpt2046_get_touch+0x4e>
	{
		*p_force 	= g_touch.force;
 800e8b2:	4b09      	ldr	r3, [pc, #36]	; (800e8d8 <xpt2046_get_touch+0x6c>)
 800e8b4:	889a      	ldrh	r2, [r3, #4]
 800e8b6:	687b      	ldr	r3, [r7, #4]
 800e8b8:	801a      	strh	r2, [r3, #0]
	}

	if ( NULL != p_pressed )
 800e8ba:	683b      	ldr	r3, [r7, #0]
 800e8bc:	2b00      	cmp	r3, #0
 800e8be:	d003      	beq.n	800e8c8 <xpt2046_get_touch+0x5c>
	{
		*p_pressed 	= g_touch.pressed;
 800e8c0:	4b05      	ldr	r3, [pc, #20]	; (800e8d8 <xpt2046_get_touch+0x6c>)
 800e8c2:	799a      	ldrb	r2, [r3, #6]
 800e8c4:	683b      	ldr	r3, [r7, #0]
 800e8c6:	701a      	strb	r2, [r3, #0]
	}

	return status;
 800e8c8:	7dfb      	ldrb	r3, [r7, #23]
}
 800e8ca:	4618      	mov	r0, r3
 800e8cc:	3718      	adds	r7, #24
 800e8ce:	46bd      	mov	sp, r7
 800e8d0:	bd80      	pop	{r7, pc}
 800e8d2:	bf00      	nop
 800e8d4:	20004cec 	.word	0x20004cec
 800e8d8:	20004cd8 	.word	0x20004cd8

0800e8dc <xpt2046_hndl>:
*
* @return 		void
*/
////////////////////////////////////////////////////////////////////////////////
void xpt2046_hndl(void)
{
 800e8dc:	b580      	push	{r7, lr}
 800e8de:	b082      	sub	sp, #8
 800e8e0:	af00      	add	r7, sp, #0
	uint16_t X;
	uint16_t Y;
	uint16_t force;
	bool is_pressed;

	XPT2046_ASSERT( true == gb_is_init );
 800e8e2:	4b19      	ldr	r3, [pc, #100]	; (800e948 <xpt2046_hndl+0x6c>)
 800e8e4:	781b      	ldrb	r3, [r3, #0]
 800e8e6:	f083 0301 	eor.w	r3, r3, #1
 800e8ea:	b2db      	uxtb	r3, r3
 800e8ec:	2b00      	cmp	r3, #0
 800e8ee:	d001      	beq.n	800e8f4 <xpt2046_hndl+0x18>
 800e8f0:	f006 fb7c 	bl	8014fec <project_config_assert_fail>

	// Get data
	xpt2046_read_data_from_controler( &X, &Y, &force, &is_pressed );
 800e8f4:	1c7b      	adds	r3, r7, #1
 800e8f6:	1cba      	adds	r2, r7, #2
 800e8f8:	1d39      	adds	r1, r7, #4
 800e8fa:	1db8      	adds	r0, r7, #6
 800e8fc:	f000 f82c 	bl	800e958 <xpt2046_read_data_from_controler>

	// Apply filter
	#if ( 1 == XPT2046_FILTER_EN )
		xpt2046_filter_data( &X, &Y, &force, &is_pressed );
 800e900:	1c7b      	adds	r3, r7, #1
 800e902:	1cba      	adds	r2, r7, #2
 800e904:	1d39      	adds	r1, r7, #4
 800e906:	1db8      	adds	r0, r7, #6
 800e908:	f000 f8ba 	bl	800ea80 <xpt2046_filter_data>
	#endif

	// Apply calibration
	if ( g_cal_data.done )
 800e90c:	4b0f      	ldr	r3, [pc, #60]	; (800e94c <xpt2046_hndl+0x70>)
 800e90e:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 800e912:	2b00      	cmp	r3, #0
 800e914:	d005      	beq.n	800e922 <xpt2046_hndl+0x46>
	{
		xpt2046_calibrate_data( &X, &Y, (const int32_t*)&g_cal_data.factors );
 800e916:	1d39      	adds	r1, r7, #4
 800e918:	1dbb      	adds	r3, r7, #6
 800e91a:	4a0d      	ldr	r2, [pc, #52]	; (800e950 <xpt2046_hndl+0x74>)
 800e91c:	4618      	mov	r0, r3
 800e91e:	f000 fe7f 	bl	800f620 <xpt2046_calibrate_data>
	}

	// Store
	g_touch.page = X;
 800e922:	88fa      	ldrh	r2, [r7, #6]
 800e924:	4b0b      	ldr	r3, [pc, #44]	; (800e954 <xpt2046_hndl+0x78>)
 800e926:	801a      	strh	r2, [r3, #0]
	g_touch.col = Y;
 800e928:	88ba      	ldrh	r2, [r7, #4]
 800e92a:	4b0a      	ldr	r3, [pc, #40]	; (800e954 <xpt2046_hndl+0x78>)
 800e92c:	805a      	strh	r2, [r3, #2]
	g_touch.force = force;
 800e92e:	887a      	ldrh	r2, [r7, #2]
 800e930:	4b08      	ldr	r3, [pc, #32]	; (800e954 <xpt2046_hndl+0x78>)
 800e932:	809a      	strh	r2, [r3, #4]
	g_touch.pressed = is_pressed;
 800e934:	787a      	ldrb	r2, [r7, #1]
 800e936:	4b07      	ldr	r3, [pc, #28]	; (800e954 <xpt2046_hndl+0x78>)
 800e938:	719a      	strb	r2, [r3, #6]

	// Calibration handler
	xpt2046_cal_hndl();
 800e93a:	f000 f98d 	bl	800ec58 <xpt2046_cal_hndl>
}
 800e93e:	bf00      	nop
 800e940:	3708      	adds	r7, #8
 800e942:	46bd      	mov	sp, r7
 800e944:	bd80      	pop	{r7, pc}
 800e946:	bf00      	nop
 800e948:	20004cec 	.word	0x20004cec
 800e94c:	20000070 	.word	0x20000070
 800e950:	200000d0 	.word	0x200000d0
 800e954:	20004cd8 	.word	0x20004cd8

0800e958 <xpt2046_read_data_from_controler>:
* @param[out]	p_is_pressed	- Pointer to pressed state
* @return 		status			- Status of operation
*/
////////////////////////////////////////////////////////////////////////////////
static void xpt2046_read_data_from_controler(uint16_t * const p_X, uint16_t * const p_Y, uint16_t * const p_force, bool * const p_is_pressed)
{
 800e958:	b580      	push	{r7, lr}
 800e95a:	b086      	sub	sp, #24
 800e95c:	af00      	add	r7, sp, #0
 800e95e:	60f8      	str	r0, [r7, #12]
 800e960:	60b9      	str	r1, [r7, #8]
 800e962:	607a      	str	r2, [r7, #4]
 800e964:	603b      	str	r3, [r7, #0]
	xpt2046_status_t status = eXPT2046_OK;
 800e966:	2300      	movs	r3, #0
 800e968:	75fb      	strb	r3, [r7, #23]
	static uint16_t X_prev;
	static uint16_t Y_prev;
	static uint16_t force_prev;

	// Is pressed
	if ( eXPT2046_INT_ON == xpt2046_low_if_get_int() )
 800e96a:	f000 ffdf 	bl	800f92c <xpt2046_low_if_get_int>
 800e96e:	4603      	mov	r3, r0
 800e970:	2b00      	cmp	r3, #0
 800e972:	d167      	bne.n	800ea44 <xpt2046_read_data_from_controler+0xec>
	{
		*p_is_pressed = true;
 800e974:	683b      	ldr	r3, [r7, #0]
 800e976:	2201      	movs	r2, #1
 800e978:	701a      	strb	r2, [r3, #0]

		// Get X & Y position
		status |= xpt2046_low_if_exchange( eXPT2046_ADDR_X_POS, eXPT2046_PD_DEVICE_FULLY_ON, eXPT2046_START_ON, p_X );
 800e97a:	68fb      	ldr	r3, [r7, #12]
 800e97c:	2201      	movs	r2, #1
 800e97e:	2103      	movs	r1, #3
 800e980:	2005      	movs	r0, #5
 800e982:	f000 ff7f 	bl	800f884 <xpt2046_low_if_exchange>
 800e986:	4603      	mov	r3, r0
 800e988:	461a      	mov	r2, r3
 800e98a:	7dfb      	ldrb	r3, [r7, #23]
 800e98c:	4313      	orrs	r3, r2
 800e98e:	75fb      	strb	r3, [r7, #23]
		status |= xpt2046_low_if_exchange( eXPT2046_ADDR_Y_POS, eXPT2046_PD_DEVICE_FULLY_ON, eXPT2046_START_ON, p_Y );
 800e990:	68bb      	ldr	r3, [r7, #8]
 800e992:	2201      	movs	r2, #1
 800e994:	2103      	movs	r1, #3
 800e996:	2001      	movs	r0, #1
 800e998:	f000 ff74 	bl	800f884 <xpt2046_low_if_exchange>
 800e99c:	4603      	mov	r3, r0
 800e99e:	461a      	mov	r2, r3
 800e9a0:	7dfb      	ldrb	r3, [r7, #23]
 800e9a2:	4313      	orrs	r3, r2
 800e9a4:	75fb      	strb	r3, [r7, #23]

		// Get pressure data
		status |= xpt2046_low_if_exchange( eXPT2046_ADDR_Z1_POS, eXPT2046_PD_DEVICE_FULLY_ON, eXPT2046_START_ON, &Z1 );
 800e9a6:	f107 0314 	add.w	r3, r7, #20
 800e9aa:	2201      	movs	r2, #1
 800e9ac:	2103      	movs	r1, #3
 800e9ae:	2003      	movs	r0, #3
 800e9b0:	f000 ff68 	bl	800f884 <xpt2046_low_if_exchange>
 800e9b4:	4603      	mov	r3, r0
 800e9b6:	461a      	mov	r2, r3
 800e9b8:	7dfb      	ldrb	r3, [r7, #23]
 800e9ba:	4313      	orrs	r3, r2
 800e9bc:	75fb      	strb	r3, [r7, #23]
		status |= xpt2046_low_if_exchange( eXPT2046_ADDR_YN, eXPT2046_PD_VREF_ON, eXPT2046_START_ON, &Z2 );
 800e9be:	f107 0312 	add.w	r3, r7, #18
 800e9c2:	2201      	movs	r2, #1
 800e9c4:	2102      	movs	r1, #2
 800e9c6:	2004      	movs	r0, #4
 800e9c8:	f000 ff5c 	bl	800f884 <xpt2046_low_if_exchange>
 800e9cc:	4603      	mov	r3, r0
 800e9ce:	461a      	mov	r2, r3
 800e9d0:	7dfb      	ldrb	r3, [r7, #23]
 800e9d2:	4313      	orrs	r3, r2
 800e9d4:	75fb      	strb	r3, [r7, #23]

		if ( eXPT2046_OK == status )
 800e9d6:	7dfb      	ldrb	r3, [r7, #23]
 800e9d8:	2b00      	cmp	r3, #0
 800e9da:	d142      	bne.n	800ea62 <xpt2046_read_data_from_controler+0x10a>
		{
			// Calculate force
			*p_force = (uint16_t) ((((float) *p_X / 4096.0f ) * (((float) Z2  / (float) Z1 ) - 1.0f )) * 4095.0f );
 800e9dc:	68fb      	ldr	r3, [r7, #12]
 800e9de:	881b      	ldrh	r3, [r3, #0]
 800e9e0:	ee07 3a90 	vmov	s15, r3
 800e9e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e9e8:	eddf 6a20 	vldr	s13, [pc, #128]	; 800ea6c <xpt2046_read_data_from_controler+0x114>
 800e9ec:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800e9f0:	8a7b      	ldrh	r3, [r7, #18]
 800e9f2:	ee07 3a90 	vmov	s15, r3
 800e9f6:	eeb8 6a67 	vcvt.f32.u32	s12, s15
 800e9fa:	8abb      	ldrh	r3, [r7, #20]
 800e9fc:	ee07 3a90 	vmov	s15, r3
 800ea00:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ea04:	eec6 7a26 	vdiv.f32	s15, s12, s13
 800ea08:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ea0c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800ea10:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ea14:	ed9f 7a16 	vldr	s14, [pc, #88]	; 800ea70 <xpt2046_read_data_from_controler+0x118>
 800ea18:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ea1c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ea20:	ee17 3a90 	vmov	r3, s15
 800ea24:	b29a      	uxth	r2, r3
 800ea26:	687b      	ldr	r3, [r7, #4]
 800ea28:	801a      	strh	r2, [r3, #0]

			X_prev = *p_X;
 800ea2a:	68fb      	ldr	r3, [r7, #12]
 800ea2c:	881a      	ldrh	r2, [r3, #0]
 800ea2e:	4b11      	ldr	r3, [pc, #68]	; (800ea74 <xpt2046_read_data_from_controler+0x11c>)
 800ea30:	801a      	strh	r2, [r3, #0]
			Y_prev = *p_Y;
 800ea32:	68bb      	ldr	r3, [r7, #8]
 800ea34:	881a      	ldrh	r2, [r3, #0]
 800ea36:	4b10      	ldr	r3, [pc, #64]	; (800ea78 <xpt2046_read_data_from_controler+0x120>)
 800ea38:	801a      	strh	r2, [r3, #0]
			force_prev = *p_force;
 800ea3a:	687b      	ldr	r3, [r7, #4]
 800ea3c:	881a      	ldrh	r2, [r3, #0]
 800ea3e:	4b0f      	ldr	r3, [pc, #60]	; (800ea7c <xpt2046_read_data_from_controler+0x124>)
 800ea40:	801a      	strh	r2, [r3, #0]
		// Return old value
		*p_X = X_prev;
		*p_Y = Y_prev;
		*p_force = force_prev;
	}
}
 800ea42:	e00e      	b.n	800ea62 <xpt2046_read_data_from_controler+0x10a>
		*p_is_pressed = false;
 800ea44:	683b      	ldr	r3, [r7, #0]
 800ea46:	2200      	movs	r2, #0
 800ea48:	701a      	strb	r2, [r3, #0]
		*p_X = X_prev;
 800ea4a:	4b0a      	ldr	r3, [pc, #40]	; (800ea74 <xpt2046_read_data_from_controler+0x11c>)
 800ea4c:	881a      	ldrh	r2, [r3, #0]
 800ea4e:	68fb      	ldr	r3, [r7, #12]
 800ea50:	801a      	strh	r2, [r3, #0]
		*p_Y = Y_prev;
 800ea52:	4b09      	ldr	r3, [pc, #36]	; (800ea78 <xpt2046_read_data_from_controler+0x120>)
 800ea54:	881a      	ldrh	r2, [r3, #0]
 800ea56:	68bb      	ldr	r3, [r7, #8]
 800ea58:	801a      	strh	r2, [r3, #0]
		*p_force = force_prev;
 800ea5a:	4b08      	ldr	r3, [pc, #32]	; (800ea7c <xpt2046_read_data_from_controler+0x124>)
 800ea5c:	881a      	ldrh	r2, [r3, #0]
 800ea5e:	687b      	ldr	r3, [r7, #4]
 800ea60:	801a      	strh	r2, [r3, #0]
}
 800ea62:	bf00      	nop
 800ea64:	3718      	adds	r7, #24
 800ea66:	46bd      	mov	sp, r7
 800ea68:	bd80      	pop	{r7, pc}
 800ea6a:	bf00      	nop
 800ea6c:	45800000 	.word	0x45800000
 800ea70:	457ff000 	.word	0x457ff000
 800ea74:	20004cee 	.word	0x20004cee
 800ea78:	20004cf0 	.word	0x20004cf0
 800ea7c:	20004cf2 	.word	0x20004cf2

0800ea80 <xpt2046_filter_data>:
* @param[out]	p_touch	- Pointer to touch detected state
* @return 		status	- Status of operation
*/
////////////////////////////////////////////////////////////////////////////////
static void xpt2046_filter_data(uint16_t * const p_X, uint16_t * const p_Y, uint16_t * const p_force, bool * const p_touch)
{
 800ea80:	b480      	push	{r7}
 800ea82:	b087      	sub	sp, #28
 800ea84:	af00      	add	r7, sp, #0
 800ea86:	60f8      	str	r0, [r7, #12]
 800ea88:	60b9      	str	r1, [r7, #8]
 800ea8a:	607a      	str	r2, [r7, #4]
 800ea8c:	603b      	str	r3, [r7, #0]
	static xpt2046_filter_t filter;
	static uint8_t samp_cnt = 0;
	static bool touch_prev;
	const uint16_t samp_N = XPT2046_FILTER_WIN_SAMP;
 800ea8e:	2308      	movs	r3, #8
 800ea90:	827b      	strh	r3, [r7, #18]
	uint32_t i;

	// New touch detected -> clear old samples
	if 	(	( true == *p_touch )
 800ea92:	683b      	ldr	r3, [r7, #0]
 800ea94:	781b      	ldrb	r3, [r3, #0]
 800ea96:	2b00      	cmp	r3, #0
 800ea98:	d026      	beq.n	800eae8 <xpt2046_filter_data+0x68>
		&& 	( false == touch_prev ))
 800ea9a:	4b54      	ldr	r3, [pc, #336]	; (800ebec <xpt2046_filter_data+0x16c>)
 800ea9c:	781b      	ldrb	r3, [r3, #0]
 800ea9e:	f083 0301 	eor.w	r3, r3, #1
 800eaa2:	b2db      	uxtb	r3, r3
 800eaa4:	2b00      	cmp	r3, #0
 800eaa6:	d01f      	beq.n	800eae8 <xpt2046_filter_data+0x68>
	{
		for ( i = 0; i < samp_N; i++ )
 800eaa8:	2300      	movs	r3, #0
 800eaaa:	617b      	str	r3, [r7, #20]
 800eaac:	e018      	b.n	800eae0 <xpt2046_filter_data+0x60>
		{
			filter.x.samp_buf[i] = *p_X;
 800eaae:	68fb      	ldr	r3, [r7, #12]
 800eab0:	8819      	ldrh	r1, [r3, #0]
 800eab2:	4a4f      	ldr	r2, [pc, #316]	; (800ebf0 <xpt2046_filter_data+0x170>)
 800eab4:	697b      	ldr	r3, [r7, #20]
 800eab6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			filter.y.samp_buf[i] = *p_Y;
 800eaba:	68bb      	ldr	r3, [r7, #8]
 800eabc:	8819      	ldrh	r1, [r3, #0]
 800eabe:	4a4c      	ldr	r2, [pc, #304]	; (800ebf0 <xpt2046_filter_data+0x170>)
 800eac0:	697b      	ldr	r3, [r7, #20]
 800eac2:	3308      	adds	r3, #8
 800eac4:	005b      	lsls	r3, r3, #1
 800eac6:	4413      	add	r3, r2
 800eac8:	460a      	mov	r2, r1
 800eaca:	809a      	strh	r2, [r3, #4]
			filter.force.samp_buf[i] = *p_force;
 800eacc:	687b      	ldr	r3, [r7, #4]
 800eace:	8819      	ldrh	r1, [r3, #0]
 800ead0:	4a47      	ldr	r2, [pc, #284]	; (800ebf0 <xpt2046_filter_data+0x170>)
 800ead2:	697b      	ldr	r3, [r7, #20]
 800ead4:	3314      	adds	r3, #20
 800ead6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for ( i = 0; i < samp_N; i++ )
 800eada:	697b      	ldr	r3, [r7, #20]
 800eadc:	3301      	adds	r3, #1
 800eade:	617b      	str	r3, [r7, #20]
 800eae0:	8a7b      	ldrh	r3, [r7, #18]
 800eae2:	697a      	ldr	r2, [r7, #20]
 800eae4:	429a      	cmp	r2, r3
 800eae6:	d3e2      	bcc.n	800eaae <xpt2046_filter_data+0x2e>
		}
	}

	// Store touch
	touch_prev = *p_touch;
 800eae8:	683b      	ldr	r3, [r7, #0]
 800eaea:	781a      	ldrb	r2, [r3, #0]
 800eaec:	4b3f      	ldr	r3, [pc, #252]	; (800ebec <xpt2046_filter_data+0x16c>)
 800eaee:	701a      	strb	r2, [r3, #0]

	// Fill buffer
	filter.x.samp_buf[ samp_cnt ] = *p_X;
 800eaf0:	4b40      	ldr	r3, [pc, #256]	; (800ebf4 <xpt2046_filter_data+0x174>)
 800eaf2:	781b      	ldrb	r3, [r3, #0]
 800eaf4:	461a      	mov	r2, r3
 800eaf6:	68fb      	ldr	r3, [r7, #12]
 800eaf8:	8819      	ldrh	r1, [r3, #0]
 800eafa:	4b3d      	ldr	r3, [pc, #244]	; (800ebf0 <xpt2046_filter_data+0x170>)
 800eafc:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	filter.y.samp_buf[ samp_cnt ] = *p_Y;
 800eb00:	4b3c      	ldr	r3, [pc, #240]	; (800ebf4 <xpt2046_filter_data+0x174>)
 800eb02:	781b      	ldrb	r3, [r3, #0]
 800eb04:	4618      	mov	r0, r3
 800eb06:	68bb      	ldr	r3, [r7, #8]
 800eb08:	8819      	ldrh	r1, [r3, #0]
 800eb0a:	4a39      	ldr	r2, [pc, #228]	; (800ebf0 <xpt2046_filter_data+0x170>)
 800eb0c:	f100 0308 	add.w	r3, r0, #8
 800eb10:	005b      	lsls	r3, r3, #1
 800eb12:	4413      	add	r3, r2
 800eb14:	460a      	mov	r2, r1
 800eb16:	809a      	strh	r2, [r3, #4]
	filter.force.samp_buf[ samp_cnt ] = *p_force;
 800eb18:	4b36      	ldr	r3, [pc, #216]	; (800ebf4 <xpt2046_filter_data+0x174>)
 800eb1a:	781b      	ldrb	r3, [r3, #0]
 800eb1c:	4618      	mov	r0, r3
 800eb1e:	687b      	ldr	r3, [r7, #4]
 800eb20:	8819      	ldrh	r1, [r3, #0]
 800eb22:	4a33      	ldr	r2, [pc, #204]	; (800ebf0 <xpt2046_filter_data+0x170>)
 800eb24:	f100 0314 	add.w	r3, r0, #20
 800eb28:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

	// Increment sample counter
	if ( samp_cnt >= samp_N )
 800eb2c:	4b31      	ldr	r3, [pc, #196]	; (800ebf4 <xpt2046_filter_data+0x174>)
 800eb2e:	781b      	ldrb	r3, [r3, #0]
 800eb30:	b29b      	uxth	r3, r3
 800eb32:	8a7a      	ldrh	r2, [r7, #18]
 800eb34:	429a      	cmp	r2, r3
 800eb36:	d803      	bhi.n	800eb40 <xpt2046_filter_data+0xc0>
	{
		samp_cnt = 0;
 800eb38:	4b2e      	ldr	r3, [pc, #184]	; (800ebf4 <xpt2046_filter_data+0x174>)
 800eb3a:	2200      	movs	r2, #0
 800eb3c:	701a      	strb	r2, [r3, #0]
 800eb3e:	e005      	b.n	800eb4c <xpt2046_filter_data+0xcc>
	}
	else
	{
		samp_cnt++;
 800eb40:	4b2c      	ldr	r3, [pc, #176]	; (800ebf4 <xpt2046_filter_data+0x174>)
 800eb42:	781b      	ldrb	r3, [r3, #0]
 800eb44:	3301      	adds	r3, #1
 800eb46:	b2da      	uxtb	r2, r3
 800eb48:	4b2a      	ldr	r3, [pc, #168]	; (800ebf4 <xpt2046_filter_data+0x174>)
 800eb4a:	701a      	strb	r2, [r3, #0]
	}

	filter.x.sum = 0;
 800eb4c:	4b28      	ldr	r3, [pc, #160]	; (800ebf0 <xpt2046_filter_data+0x170>)
 800eb4e:	2200      	movs	r2, #0
 800eb50:	611a      	str	r2, [r3, #16]
	filter.y.sum = 0;
 800eb52:	4b27      	ldr	r3, [pc, #156]	; (800ebf0 <xpt2046_filter_data+0x170>)
 800eb54:	2200      	movs	r2, #0
 800eb56:	625a      	str	r2, [r3, #36]	; 0x24
	filter.force.sum = 0;
 800eb58:	4b25      	ldr	r3, [pc, #148]	; (800ebf0 <xpt2046_filter_data+0x170>)
 800eb5a:	2200      	movs	r2, #0
 800eb5c:	639a      	str	r2, [r3, #56]	; 0x38

	// Sum
	for ( i = 0; i < samp_N; i++ )
 800eb5e:	2300      	movs	r3, #0
 800eb60:	617b      	str	r3, [r7, #20]
 800eb62:	e020      	b.n	800eba6 <xpt2046_filter_data+0x126>
	{
		filter.x.sum += filter.x.samp_buf[i];
 800eb64:	4b22      	ldr	r3, [pc, #136]	; (800ebf0 <xpt2046_filter_data+0x170>)
 800eb66:	691b      	ldr	r3, [r3, #16]
 800eb68:	4921      	ldr	r1, [pc, #132]	; (800ebf0 <xpt2046_filter_data+0x170>)
 800eb6a:	697a      	ldr	r2, [r7, #20]
 800eb6c:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 800eb70:	4413      	add	r3, r2
 800eb72:	4a1f      	ldr	r2, [pc, #124]	; (800ebf0 <xpt2046_filter_data+0x170>)
 800eb74:	6113      	str	r3, [r2, #16]
		filter.y.sum += filter.y.samp_buf[i];
 800eb76:	4b1e      	ldr	r3, [pc, #120]	; (800ebf0 <xpt2046_filter_data+0x170>)
 800eb78:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800eb7a:	491d      	ldr	r1, [pc, #116]	; (800ebf0 <xpt2046_filter_data+0x170>)
 800eb7c:	697b      	ldr	r3, [r7, #20]
 800eb7e:	3308      	adds	r3, #8
 800eb80:	005b      	lsls	r3, r3, #1
 800eb82:	440b      	add	r3, r1
 800eb84:	889b      	ldrh	r3, [r3, #4]
 800eb86:	4413      	add	r3, r2
 800eb88:	4a19      	ldr	r2, [pc, #100]	; (800ebf0 <xpt2046_filter_data+0x170>)
 800eb8a:	6253      	str	r3, [r2, #36]	; 0x24
		filter.force.sum += filter.force.samp_buf[i];
 800eb8c:	4b18      	ldr	r3, [pc, #96]	; (800ebf0 <xpt2046_filter_data+0x170>)
 800eb8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eb90:	4917      	ldr	r1, [pc, #92]	; (800ebf0 <xpt2046_filter_data+0x170>)
 800eb92:	697a      	ldr	r2, [r7, #20]
 800eb94:	3214      	adds	r2, #20
 800eb96:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 800eb9a:	4413      	add	r3, r2
 800eb9c:	4a14      	ldr	r2, [pc, #80]	; (800ebf0 <xpt2046_filter_data+0x170>)
 800eb9e:	6393      	str	r3, [r2, #56]	; 0x38
	for ( i = 0; i < samp_N; i++ )
 800eba0:	697b      	ldr	r3, [r7, #20]
 800eba2:	3301      	adds	r3, #1
 800eba4:	617b      	str	r3, [r7, #20]
 800eba6:	8a7b      	ldrh	r3, [r7, #18]
 800eba8:	697a      	ldr	r2, [r7, #20]
 800ebaa:	429a      	cmp	r2, r3
 800ebac:	d3da      	bcc.n	800eb64 <xpt2046_filter_data+0xe4>
	}

	// Average
	*p_X = (uint16_t) (filter.x.sum / samp_N );
 800ebae:	4b10      	ldr	r3, [pc, #64]	; (800ebf0 <xpt2046_filter_data+0x170>)
 800ebb0:	691a      	ldr	r2, [r3, #16]
 800ebb2:	8a7b      	ldrh	r3, [r7, #18]
 800ebb4:	fbb2 f3f3 	udiv	r3, r2, r3
 800ebb8:	b29a      	uxth	r2, r3
 800ebba:	68fb      	ldr	r3, [r7, #12]
 800ebbc:	801a      	strh	r2, [r3, #0]
	*p_Y = (uint16_t) (filter.y.sum / samp_N );
 800ebbe:	4b0c      	ldr	r3, [pc, #48]	; (800ebf0 <xpt2046_filter_data+0x170>)
 800ebc0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ebc2:	8a7b      	ldrh	r3, [r7, #18]
 800ebc4:	fbb2 f3f3 	udiv	r3, r2, r3
 800ebc8:	b29a      	uxth	r2, r3
 800ebca:	68bb      	ldr	r3, [r7, #8]
 800ebcc:	801a      	strh	r2, [r3, #0]
	*p_force = (uint16_t) (filter.force.sum / samp_N );
 800ebce:	4b08      	ldr	r3, [pc, #32]	; (800ebf0 <xpt2046_filter_data+0x170>)
 800ebd0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ebd2:	8a7b      	ldrh	r3, [r7, #18]
 800ebd4:	fbb2 f3f3 	udiv	r3, r2, r3
 800ebd8:	b29a      	uxth	r2, r3
 800ebda:	687b      	ldr	r3, [r7, #4]
 800ebdc:	801a      	strh	r2, [r3, #0]
}
 800ebde:	bf00      	nop
 800ebe0:	371c      	adds	r7, #28
 800ebe2:	46bd      	mov	sp, r7
 800ebe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebe8:	4770      	bx	lr
 800ebea:	bf00      	nop
 800ebec:	20004cf4 	.word	0x20004cf4
 800ebf0:	20004cf8 	.word	0x20004cf8
 800ebf4:	20004d34 	.word	0x20004d34

0800ebf8 <xpt2046_start_calibration>:
*
* @return 	status - Status of operation
*/
////////////////////////////////////////////////////////////////////////////////
xpt2046_status_t xpt2046_start_calibration(void)
{
 800ebf8:	b580      	push	{r7, lr}
 800ebfa:	b082      	sub	sp, #8
 800ebfc:	af00      	add	r7, sp, #0
	xpt2046_status_t status = eXPT2046_OK;
 800ebfe:	2300      	movs	r3, #0
 800ec00:	71fb      	strb	r3, [r7, #7]

	if ( true == gb_is_init )
 800ec02:	4b12      	ldr	r3, [pc, #72]	; (800ec4c <xpt2046_start_calibration+0x54>)
 800ec04:	781b      	ldrb	r3, [r3, #0]
 800ec06:	2b00      	cmp	r3, #0
 800ec08:	d013      	beq.n	800ec32 <xpt2046_start_calibration+0x3a>
	{
		if ( false == g_cal_data.busy )
 800ec0a:	4b11      	ldr	r3, [pc, #68]	; (800ec50 <xpt2046_start_calibration+0x58>)
 800ec0c:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 800ec10:	f083 0301 	eor.w	r3, r3, #1
 800ec14:	b2db      	uxtb	r3, r3
 800ec16:	2b00      	cmp	r3, #0
 800ec18:	d008      	beq.n	800ec2c <xpt2046_start_calibration+0x34>
		{
			g_cal_data.start = true;
 800ec1a:	4b0d      	ldr	r3, [pc, #52]	; (800ec50 <xpt2046_start_calibration+0x58>)
 800ec1c:	2201      	movs	r2, #1
 800ec1e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
			g_cal_data.done = false;
 800ec22:	4b0b      	ldr	r3, [pc, #44]	; (800ec50 <xpt2046_start_calibration+0x58>)
 800ec24:	2200      	movs	r2, #0
 800ec26:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
 800ec2a:	e00a      	b.n	800ec42 <xpt2046_start_calibration+0x4a>
		}
		else
		{
			status = eXPT2046_CAL_IN_PROGRESS;
 800ec2c:	2302      	movs	r3, #2
 800ec2e:	71fb      	strb	r3, [r7, #7]
 800ec30:	e007      	b.n	800ec42 <xpt2046_start_calibration+0x4a>
		}
	}
	else
	{
		status = eXPT2046_ERROR;
 800ec32:	2301      	movs	r3, #1
 800ec34:	71fb      	strb	r3, [r7, #7]

		XPT2046_DBG_PRINT( "Module not initialized!" );
 800ec36:	4907      	ldr	r1, [pc, #28]	; (800ec54 <xpt2046_start_calibration+0x5c>)
 800ec38:	2003      	movs	r0, #3
 800ec3a:	f003 f87f 	bl	8011d3c <com_dbg_print>
		XPT2046_ASSERT( 0 );
 800ec3e:	f006 f9d5 	bl	8014fec <project_config_assert_fail>
	}

	return status;
 800ec42:	79fb      	ldrb	r3, [r7, #7]
}
 800ec44:	4618      	mov	r0, r3
 800ec46:	3708      	adds	r7, #8
 800ec48:	46bd      	mov	sp, r7
 800ec4a:	bd80      	pop	{r7, pc}
 800ec4c:	20004cec 	.word	0x20004cec
 800ec50:	20000070 	.word	0x20000070
 800ec54:	0801a54c 	.word	0x0801a54c

0800ec58 <xpt2046_cal_hndl>:
*
* @return 		void
*/
////////////////////////////////////////////////////////////////////////////////
static void xpt2046_cal_hndl(void)
{
 800ec58:	b580      	push	{r7, lr}
 800ec5a:	af00      	add	r7, sp, #0
	xpt2046_fms_manager();
 800ec5c:	f000 f830 	bl	800ecc0 <xpt2046_fms_manager>

	switch( g_cal_fsm.state.cur )
 800ec60:	4b15      	ldr	r3, [pc, #84]	; (800ecb8 <xpt2046_cal_hndl+0x60>)
 800ec62:	7a1b      	ldrb	r3, [r3, #8]
 800ec64:	2b04      	cmp	r3, #4
 800ec66:	d81c      	bhi.n	800eca2 <xpt2046_cal_hndl+0x4a>
 800ec68:	a201      	add	r2, pc, #4	; (adr r2, 800ec70 <xpt2046_cal_hndl+0x18>)
 800ec6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ec6e:	bf00      	nop
 800ec70:	0800ec85 	.word	0x0800ec85
 800ec74:	0800ec8b 	.word	0x0800ec8b
 800ec78:	0800ec91 	.word	0x0800ec91
 800ec7c:	0800ec97 	.word	0x0800ec97
 800ec80:	0800ec9d 	.word	0x0800ec9d
	{
		case eXPT2046_FSM_NORMAL:
			xpt2046_fsm_normal();
 800ec84:	f000 f852 	bl	800ed2c <xpt2046_fsm_normal>
			break;
 800ec88:	e014      	b.n	800ecb4 <xpt2046_cal_hndl+0x5c>

		case eXPT2046_FSM_P1_ACQ:
			xpt2046_fsm_p1_acq();
 800ec8a:	f000 f86b 	bl	800ed64 <xpt2046_fsm_p1_acq>
			break;
 800ec8e:	e011      	b.n	800ecb4 <xpt2046_cal_hndl+0x5c>

		case eXPT2046_FSM_P2_ACQ:
			xpt2046_fsm_p2_acq();
 800ec90:	f000 f8b8 	bl	800ee04 <xpt2046_fsm_p2_acq>
			break;
 800ec94:	e00e      	b.n	800ecb4 <xpt2046_cal_hndl+0x5c>

		case eXPT2046_FSM_P3_ACQ:
			xpt2046_fsm_p3_acq();
 800ec96:	f000 f8f9 	bl	800ee8c <xpt2046_fsm_p3_acq>
			break;
 800ec9a:	e00b      	b.n	800ecb4 <xpt2046_cal_hndl+0x5c>

		case eXPT2046_FSM_CALC_FACTORS:
			xpt2046_fsm_calc_factors();
 800ec9c:	f000 f940 	bl	800ef20 <xpt2046_fsm_calc_factors>
			break;
 800eca0:	e008      	b.n	800ecb4 <xpt2046_cal_hndl+0x5c>

		default:
			xpt2046_fsm_normal();
 800eca2:	f000 f843 	bl	800ed2c <xpt2046_fsm_normal>

			XPT2046_DBG_PRINT( "Invalid FSM state..." );
 800eca6:	4905      	ldr	r1, [pc, #20]	; (800ecbc <xpt2046_cal_hndl+0x64>)
 800eca8:	2003      	movs	r0, #3
 800ecaa:	f003 f847 	bl	8011d3c <com_dbg_print>
			XPT2046_ASSERT( 0 );
 800ecae:	f006 f99d 	bl	8014fec <project_config_assert_fail>
			break;
 800ecb2:	bf00      	nop
	}
}
 800ecb4:	bf00      	nop
 800ecb6:	bd80      	pop	{r7, pc}
 800ecb8:	20004ce0 	.word	0x20004ce0
 800ecbc:	0801a564 	.word	0x0801a564

0800ecc0 <xpt2046_fms_manager>:
*
* @return 		void
*/
////////////////////////////////////////////////////////////////////////////////
static void xpt2046_fms_manager(void)
{
 800ecc0:	b580      	push	{r7, lr}
 800ecc2:	af00      	add	r7, sp, #0
	static uint32_t tick = 0;

	//if ( state_prev != g_cal_fsm.state.cur )
	if ( g_cal_fsm.state.cur != g_cal_fsm.state.next )
 800ecc4:	4b16      	ldr	r3, [pc, #88]	; (800ed20 <xpt2046_fms_manager+0x60>)
 800ecc6:	7a1a      	ldrb	r2, [r3, #8]
 800ecc8:	4b15      	ldr	r3, [pc, #84]	; (800ed20 <xpt2046_fms_manager+0x60>)
 800ecca:	7a5b      	ldrb	r3, [r3, #9]
 800eccc:	429a      	cmp	r2, r3
 800ecce:	d00a      	beq.n	800ece6 <xpt2046_fms_manager+0x26>
	{
		g_cal_fsm.state.cur = g_cal_fsm.state.next;
 800ecd0:	4b13      	ldr	r3, [pc, #76]	; (800ed20 <xpt2046_fms_manager+0x60>)
 800ecd2:	7a5a      	ldrb	r2, [r3, #9]
 800ecd4:	4b12      	ldr	r3, [pc, #72]	; (800ed20 <xpt2046_fms_manager+0x60>)
 800ecd6:	721a      	strb	r2, [r3, #8]
		g_cal_fsm.time.duration = 0;
 800ecd8:	4b11      	ldr	r3, [pc, #68]	; (800ed20 <xpt2046_fms_manager+0x60>)
 800ecda:	2200      	movs	r2, #0
 800ecdc:	601a      	str	r2, [r3, #0]
		g_cal_fsm.time.first_entry = true;
 800ecde:	4b10      	ldr	r3, [pc, #64]	; (800ed20 <xpt2046_fms_manager+0x60>)
 800ece0:	2201      	movs	r2, #1
 800ece2:	711a      	strb	r2, [r3, #4]
 800ece4:	e015      	b.n	800ed12 <xpt2046_fms_manager+0x52>
	}
	else
	{
		g_cal_fsm.time.duration += (uint32_t) ( HAL_GetTick() - tick );
 800ece6:	f7f2 fdf5 	bl	80018d4 <HAL_GetTick>
 800ecea:	4602      	mov	r2, r0
 800ecec:	4b0d      	ldr	r3, [pc, #52]	; (800ed24 <xpt2046_fms_manager+0x64>)
 800ecee:	681b      	ldr	r3, [r3, #0]
 800ecf0:	1ad2      	subs	r2, r2, r3
 800ecf2:	4b0b      	ldr	r3, [pc, #44]	; (800ed20 <xpt2046_fms_manager+0x60>)
 800ecf4:	681b      	ldr	r3, [r3, #0]
 800ecf6:	4413      	add	r3, r2
 800ecf8:	4a09      	ldr	r2, [pc, #36]	; (800ed20 <xpt2046_fms_manager+0x60>)
 800ecfa:	6013      	str	r3, [r2, #0]
		g_cal_fsm.time.duration = XPT2046_LIMIT_FMS_DURATION( g_cal_fsm.time.duration );
 800ecfc:	4b08      	ldr	r3, [pc, #32]	; (800ed20 <xpt2046_fms_manager+0x60>)
 800ecfe:	681b      	ldr	r3, [r3, #0]
 800ed00:	4a09      	ldr	r2, [pc, #36]	; (800ed28 <xpt2046_fms_manager+0x68>)
 800ed02:	4293      	cmp	r3, r2
 800ed04:	bf28      	it	cs
 800ed06:	4613      	movcs	r3, r2
 800ed08:	4a05      	ldr	r2, [pc, #20]	; (800ed20 <xpt2046_fms_manager+0x60>)
 800ed0a:	6013      	str	r3, [r2, #0]
		g_cal_fsm.time.first_entry = false;
 800ed0c:	4b04      	ldr	r3, [pc, #16]	; (800ed20 <xpt2046_fms_manager+0x60>)
 800ed0e:	2200      	movs	r2, #0
 800ed10:	711a      	strb	r2, [r3, #4]
	}

	tick = HAL_GetTick();
 800ed12:	f7f2 fddf 	bl	80018d4 <HAL_GetTick>
 800ed16:	4603      	mov	r3, r0
 800ed18:	4a02      	ldr	r2, [pc, #8]	; (800ed24 <xpt2046_fms_manager+0x64>)
 800ed1a:	6013      	str	r3, [r2, #0]
}
 800ed1c:	bf00      	nop
 800ed1e:	bd80      	pop	{r7, pc}
 800ed20:	20004ce0 	.word	0x20004ce0
 800ed24:	20004d38 	.word	0x20004d38
 800ed28:	000f4240 	.word	0x000f4240

0800ed2c <xpt2046_fsm_normal>:
*
* @return 		void
*/
////////////////////////////////////////////////////////////////////////////////
static void xpt2046_fsm_normal(void)
{
 800ed2c:	b480      	push	{r7}
 800ed2e:	af00      	add	r7, sp, #0
	if ( true == g_cal_data.start )
 800ed30:	4b0a      	ldr	r3, [pc, #40]	; (800ed5c <xpt2046_fsm_normal+0x30>)
 800ed32:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800ed36:	2b00      	cmp	r3, #0
 800ed38:	d00a      	beq.n	800ed50 <xpt2046_fsm_normal+0x24>
	{
		g_cal_data.start = false;
 800ed3a:	4b08      	ldr	r3, [pc, #32]	; (800ed5c <xpt2046_fsm_normal+0x30>)
 800ed3c:	2200      	movs	r2, #0
 800ed3e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
		g_cal_data.busy = true;
 800ed42:	4b06      	ldr	r3, [pc, #24]	; (800ed5c <xpt2046_fsm_normal+0x30>)
 800ed44:	2201      	movs	r2, #1
 800ed46:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

		g_cal_fsm.state.next = eXPT2046_FSM_P1_ACQ;
 800ed4a:	4b05      	ldr	r3, [pc, #20]	; (800ed60 <xpt2046_fsm_normal+0x34>)
 800ed4c:	2201      	movs	r2, #1
 800ed4e:	725a      	strb	r2, [r3, #9]
	}
}
 800ed50:	bf00      	nop
 800ed52:	46bd      	mov	sp, r7
 800ed54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed58:	4770      	bx	lr
 800ed5a:	bf00      	nop
 800ed5c:	20000070 	.word	0x20000070
 800ed60:	20004ce0 	.word	0x20004ce0

0800ed64 <xpt2046_fsm_p1_acq>:
*
* @return 		void
*/
////////////////////////////////////////////////////////////////////////////////
static void xpt2046_fsm_p1_acq(void)
{
 800ed64:	b580      	push	{r7, lr}
 800ed66:	af00      	add	r7, sp, #0
	static bool point_touched = false;

	if ( true == g_cal_fsm.time.first_entry )
 800ed68:	4b21      	ldr	r3, [pc, #132]	; (800edf0 <xpt2046_fsm_p1_acq+0x8c>)
 800ed6a:	791b      	ldrb	r3, [r3, #4]
 800ed6c:	2b00      	cmp	r3, #0
 800ed6e:	d010      	beq.n	800ed92 <xpt2046_fsm_p1_acq+0x2e>
	{
		// Calibration info
		ili9488_set_string_pen( eILI9488_COLOR_BLACK, eILI9488_COLOR_YELLOW, eILI9488_FONT_20 );
 800ed70:	2203      	movs	r2, #3
 800ed72:	2106      	movs	r1, #6
 800ed74:	2000      	movs	r0, #0
 800ed76:	f7fd ff71 	bl	800cc5c <ili9488_set_string_pen>
		ili9488_set_string( "Calibration in progress...", 10, 100 );
 800ed7a:	2264      	movs	r2, #100	; 0x64
 800ed7c:	210a      	movs	r1, #10
 800ed7e:	481d      	ldr	r0, [pc, #116]	; (800edf4 <xpt2046_fsm_p1_acq+0x90>)
 800ed80:	f7fd ff98 	bl	800ccb4 <ili9488_set_string>

		// Set up P1
		xpt2046_set_cal_point( eXPT2046_CAL_P1 );
 800ed84:	2000      	movs	r0, #0
 800ed86:	f000 f8f3 	bl	800ef70 <xpt2046_set_cal_point>

		point_touched = false;
 800ed8a:	4b1b      	ldr	r3, [pc, #108]	; (800edf8 <xpt2046_fsm_p1_acq+0x94>)
 800ed8c:	2200      	movs	r2, #0
 800ed8e:	701a      	strb	r2, [r3, #0]
				// Clear P1
				xpt2046_clear_cal_point( eXPT2046_CAL_P1 );
			}
		}
	}
}
 800ed90:	e02b      	b.n	800edea <xpt2046_fsm_p1_acq+0x86>
		if ( false == point_touched )
 800ed92:	4b19      	ldr	r3, [pc, #100]	; (800edf8 <xpt2046_fsm_p1_acq+0x94>)
 800ed94:	781b      	ldrb	r3, [r3, #0]
 800ed96:	f083 0301 	eor.w	r3, r3, #1
 800ed9a:	b2db      	uxtb	r3, r3
 800ed9c:	2b00      	cmp	r3, #0
 800ed9e:	d007      	beq.n	800edb0 <xpt2046_fsm_p1_acq+0x4c>
			if ( true == g_touch.pressed )
 800eda0:	4b16      	ldr	r3, [pc, #88]	; (800edfc <xpt2046_fsm_p1_acq+0x98>)
 800eda2:	799b      	ldrb	r3, [r3, #6]
 800eda4:	2b00      	cmp	r3, #0
 800eda6:	d020      	beq.n	800edea <xpt2046_fsm_p1_acq+0x86>
				point_touched = true;
 800eda8:	4b13      	ldr	r3, [pc, #76]	; (800edf8 <xpt2046_fsm_p1_acq+0x94>)
 800edaa:	2201      	movs	r2, #1
 800edac:	701a      	strb	r2, [r3, #0]
}
 800edae:	e01c      	b.n	800edea <xpt2046_fsm_p1_acq+0x86>
			g_cal_data.Tp[0].x = g_touch.page;
 800edb0:	4b12      	ldr	r3, [pc, #72]	; (800edfc <xpt2046_fsm_p1_acq+0x98>)
 800edb2:	881b      	ldrh	r3, [r3, #0]
 800edb4:	b29a      	uxth	r2, r3
 800edb6:	f04f 0300 	mov.w	r3, #0
 800edba:	4911      	ldr	r1, [pc, #68]	; (800ee00 <xpt2046_fsm_p1_acq+0x9c>)
 800edbc:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
			g_cal_data.Tp[0].y = g_touch.col;
 800edc0:	4b0e      	ldr	r3, [pc, #56]	; (800edfc <xpt2046_fsm_p1_acq+0x98>)
 800edc2:	885b      	ldrh	r3, [r3, #2]
 800edc4:	b29a      	uxth	r2, r3
 800edc6:	f04f 0300 	mov.w	r3, #0
 800edca:	490d      	ldr	r1, [pc, #52]	; (800ee00 <xpt2046_fsm_p1_acq+0x9c>)
 800edcc:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
			if ( false == g_touch.pressed )
 800edd0:	4b0a      	ldr	r3, [pc, #40]	; (800edfc <xpt2046_fsm_p1_acq+0x98>)
 800edd2:	799b      	ldrb	r3, [r3, #6]
 800edd4:	f083 0301 	eor.w	r3, r3, #1
 800edd8:	b2db      	uxtb	r3, r3
 800edda:	2b00      	cmp	r3, #0
 800eddc:	d005      	beq.n	800edea <xpt2046_fsm_p1_acq+0x86>
				g_cal_fsm.state.next = eXPT2046_FSM_P2_ACQ;
 800edde:	4b04      	ldr	r3, [pc, #16]	; (800edf0 <xpt2046_fsm_p1_acq+0x8c>)
 800ede0:	2202      	movs	r2, #2
 800ede2:	725a      	strb	r2, [r3, #9]
				xpt2046_clear_cal_point( eXPT2046_CAL_P1 );
 800ede4:	2000      	movs	r0, #0
 800ede6:	f000 f8ed 	bl	800efc4 <xpt2046_clear_cal_point>
}
 800edea:	bf00      	nop
 800edec:	bd80      	pop	{r7, pc}
 800edee:	bf00      	nop
 800edf0:	20004ce0 	.word	0x20004ce0
 800edf4:	0801a57c 	.word	0x0801a57c
 800edf8:	20004d3c 	.word	0x20004d3c
 800edfc:	20004cd8 	.word	0x20004cd8
 800ee00:	20000070 	.word	0x20000070

0800ee04 <xpt2046_fsm_p2_acq>:
*
* @return 		void
*/
////////////////////////////////////////////////////////////////////////////////
static void xpt2046_fsm_p2_acq(void)
{
 800ee04:	b580      	push	{r7, lr}
 800ee06:	af00      	add	r7, sp, #0
	static bool point_touched = false;

	if ( true == g_cal_fsm.time.first_entry )
 800ee08:	4b1c      	ldr	r3, [pc, #112]	; (800ee7c <xpt2046_fsm_p2_acq+0x78>)
 800ee0a:	791b      	ldrb	r3, [r3, #4]
 800ee0c:	2b00      	cmp	r3, #0
 800ee0e:	d006      	beq.n	800ee1e <xpt2046_fsm_p2_acq+0x1a>
	{
		// Set up P2
		xpt2046_set_cal_point( eXPT2046_CAL_P2 );
 800ee10:	2001      	movs	r0, #1
 800ee12:	f000 f8ad 	bl	800ef70 <xpt2046_set_cal_point>

		point_touched = false;
 800ee16:	4b1a      	ldr	r3, [pc, #104]	; (800ee80 <xpt2046_fsm_p2_acq+0x7c>)
 800ee18:	2200      	movs	r2, #0
 800ee1a:	701a      	strb	r2, [r3, #0]
				// Clear point
				xpt2046_clear_cal_point( eXPT2046_CAL_P2 );
			}
		}
	}
}
 800ee1c:	e02b      	b.n	800ee76 <xpt2046_fsm_p2_acq+0x72>
		if ( false == point_touched )
 800ee1e:	4b18      	ldr	r3, [pc, #96]	; (800ee80 <xpt2046_fsm_p2_acq+0x7c>)
 800ee20:	781b      	ldrb	r3, [r3, #0]
 800ee22:	f083 0301 	eor.w	r3, r3, #1
 800ee26:	b2db      	uxtb	r3, r3
 800ee28:	2b00      	cmp	r3, #0
 800ee2a:	d007      	beq.n	800ee3c <xpt2046_fsm_p2_acq+0x38>
			if ( true == g_touch.pressed )
 800ee2c:	4b15      	ldr	r3, [pc, #84]	; (800ee84 <xpt2046_fsm_p2_acq+0x80>)
 800ee2e:	799b      	ldrb	r3, [r3, #6]
 800ee30:	2b00      	cmp	r3, #0
 800ee32:	d020      	beq.n	800ee76 <xpt2046_fsm_p2_acq+0x72>
				point_touched = true;
 800ee34:	4b12      	ldr	r3, [pc, #72]	; (800ee80 <xpt2046_fsm_p2_acq+0x7c>)
 800ee36:	2201      	movs	r2, #1
 800ee38:	701a      	strb	r2, [r3, #0]
}
 800ee3a:	e01c      	b.n	800ee76 <xpt2046_fsm_p2_acq+0x72>
			g_cal_data.Tp[1].x = g_touch.page;
 800ee3c:	4b11      	ldr	r3, [pc, #68]	; (800ee84 <xpt2046_fsm_p2_acq+0x80>)
 800ee3e:	881b      	ldrh	r3, [r3, #0]
 800ee40:	b29a      	uxth	r2, r3
 800ee42:	f04f 0300 	mov.w	r3, #0
 800ee46:	4910      	ldr	r1, [pc, #64]	; (800ee88 <xpt2046_fsm_p2_acq+0x84>)
 800ee48:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
			g_cal_data.Tp[1].y = g_touch.col;
 800ee4c:	4b0d      	ldr	r3, [pc, #52]	; (800ee84 <xpt2046_fsm_p2_acq+0x80>)
 800ee4e:	885b      	ldrh	r3, [r3, #2]
 800ee50:	b29a      	uxth	r2, r3
 800ee52:	f04f 0300 	mov.w	r3, #0
 800ee56:	490c      	ldr	r1, [pc, #48]	; (800ee88 <xpt2046_fsm_p2_acq+0x84>)
 800ee58:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
			if ( false == g_touch.pressed )
 800ee5c:	4b09      	ldr	r3, [pc, #36]	; (800ee84 <xpt2046_fsm_p2_acq+0x80>)
 800ee5e:	799b      	ldrb	r3, [r3, #6]
 800ee60:	f083 0301 	eor.w	r3, r3, #1
 800ee64:	b2db      	uxtb	r3, r3
 800ee66:	2b00      	cmp	r3, #0
 800ee68:	d005      	beq.n	800ee76 <xpt2046_fsm_p2_acq+0x72>
				g_cal_fsm.state.next = eXPT2046_FSM_P3_ACQ;
 800ee6a:	4b04      	ldr	r3, [pc, #16]	; (800ee7c <xpt2046_fsm_p2_acq+0x78>)
 800ee6c:	2203      	movs	r2, #3
 800ee6e:	725a      	strb	r2, [r3, #9]
				xpt2046_clear_cal_point( eXPT2046_CAL_P2 );
 800ee70:	2001      	movs	r0, #1
 800ee72:	f000 f8a7 	bl	800efc4 <xpt2046_clear_cal_point>
}
 800ee76:	bf00      	nop
 800ee78:	bd80      	pop	{r7, pc}
 800ee7a:	bf00      	nop
 800ee7c:	20004ce0 	.word	0x20004ce0
 800ee80:	20004d3d 	.word	0x20004d3d
 800ee84:	20004cd8 	.word	0x20004cd8
 800ee88:	20000070 	.word	0x20000070

0800ee8c <xpt2046_fsm_p3_acq>:
*
* @return 		void
*/
////////////////////////////////////////////////////////////////////////////////
static void xpt2046_fsm_p3_acq(void)
{
 800ee8c:	b580      	push	{r7, lr}
 800ee8e:	af00      	add	r7, sp, #0
	static bool point_touched = false;

	if ( true == g_cal_fsm.time.first_entry )
 800ee90:	4b1e      	ldr	r3, [pc, #120]	; (800ef0c <xpt2046_fsm_p3_acq+0x80>)
 800ee92:	791b      	ldrb	r3, [r3, #4]
 800ee94:	2b00      	cmp	r3, #0
 800ee96:	d006      	beq.n	800eea6 <xpt2046_fsm_p3_acq+0x1a>
	{
		// Set up P3
		xpt2046_set_cal_point( eXPT2046_CAL_P3 );
 800ee98:	2002      	movs	r0, #2
 800ee9a:	f000 f869 	bl	800ef70 <xpt2046_set_cal_point>

		point_touched = false;
 800ee9e:	4b1c      	ldr	r3, [pc, #112]	; (800ef10 <xpt2046_fsm_p3_acq+0x84>)
 800eea0:	2200      	movs	r2, #0
 800eea2:	701a      	strb	r2, [r3, #0]
				// User info
				ili9488_set_string( "Calibration finished ...   ", 10, 100 );
			}
		}
	}
}
 800eea4:	e030      	b.n	800ef08 <xpt2046_fsm_p3_acq+0x7c>
		if ( false == point_touched )
 800eea6:	4b1a      	ldr	r3, [pc, #104]	; (800ef10 <xpt2046_fsm_p3_acq+0x84>)
 800eea8:	781b      	ldrb	r3, [r3, #0]
 800eeaa:	f083 0301 	eor.w	r3, r3, #1
 800eeae:	b2db      	uxtb	r3, r3
 800eeb0:	2b00      	cmp	r3, #0
 800eeb2:	d007      	beq.n	800eec4 <xpt2046_fsm_p3_acq+0x38>
			if ( true == g_touch.pressed )
 800eeb4:	4b17      	ldr	r3, [pc, #92]	; (800ef14 <xpt2046_fsm_p3_acq+0x88>)
 800eeb6:	799b      	ldrb	r3, [r3, #6]
 800eeb8:	2b00      	cmp	r3, #0
 800eeba:	d025      	beq.n	800ef08 <xpt2046_fsm_p3_acq+0x7c>
				point_touched = true;
 800eebc:	4b14      	ldr	r3, [pc, #80]	; (800ef10 <xpt2046_fsm_p3_acq+0x84>)
 800eebe:	2201      	movs	r2, #1
 800eec0:	701a      	strb	r2, [r3, #0]
}
 800eec2:	e021      	b.n	800ef08 <xpt2046_fsm_p3_acq+0x7c>
			g_cal_data.Tp[2].x = g_touch.page;
 800eec4:	4b13      	ldr	r3, [pc, #76]	; (800ef14 <xpt2046_fsm_p3_acq+0x88>)
 800eec6:	881b      	ldrh	r3, [r3, #0]
 800eec8:	b29a      	uxth	r2, r3
 800eeca:	f04f 0300 	mov.w	r3, #0
 800eece:	4912      	ldr	r1, [pc, #72]	; (800ef18 <xpt2046_fsm_p3_acq+0x8c>)
 800eed0:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
			g_cal_data.Tp[2].y = g_touch.col;
 800eed4:	4b0f      	ldr	r3, [pc, #60]	; (800ef14 <xpt2046_fsm_p3_acq+0x88>)
 800eed6:	885b      	ldrh	r3, [r3, #2]
 800eed8:	b29a      	uxth	r2, r3
 800eeda:	f04f 0300 	mov.w	r3, #0
 800eede:	490e      	ldr	r1, [pc, #56]	; (800ef18 <xpt2046_fsm_p3_acq+0x8c>)
 800eee0:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
			if ( false == g_touch.pressed )
 800eee4:	4b0b      	ldr	r3, [pc, #44]	; (800ef14 <xpt2046_fsm_p3_acq+0x88>)
 800eee6:	799b      	ldrb	r3, [r3, #6]
 800eee8:	f083 0301 	eor.w	r3, r3, #1
 800eeec:	b2db      	uxtb	r3, r3
 800eeee:	2b00      	cmp	r3, #0
 800eef0:	d00a      	beq.n	800ef08 <xpt2046_fsm_p3_acq+0x7c>
				g_cal_fsm.state.next = eXPT2046_FSM_CALC_FACTORS;
 800eef2:	4b06      	ldr	r3, [pc, #24]	; (800ef0c <xpt2046_fsm_p3_acq+0x80>)
 800eef4:	2204      	movs	r2, #4
 800eef6:	725a      	strb	r2, [r3, #9]
				xpt2046_clear_cal_point( eXPT2046_CAL_P3 );
 800eef8:	2002      	movs	r0, #2
 800eefa:	f000 f863 	bl	800efc4 <xpt2046_clear_cal_point>
				ili9488_set_string( "Calibration finished ...   ", 10, 100 );
 800eefe:	2264      	movs	r2, #100	; 0x64
 800ef00:	210a      	movs	r1, #10
 800ef02:	4806      	ldr	r0, [pc, #24]	; (800ef1c <xpt2046_fsm_p3_acq+0x90>)
 800ef04:	f7fd fed6 	bl	800ccb4 <ili9488_set_string>
}
 800ef08:	bf00      	nop
 800ef0a:	bd80      	pop	{r7, pc}
 800ef0c:	20004ce0 	.word	0x20004ce0
 800ef10:	20004d3e 	.word	0x20004d3e
 800ef14:	20004cd8 	.word	0x20004cd8
 800ef18:	20000070 	.word	0x20000070
 800ef1c:	0801a598 	.word	0x0801a598

0800ef20 <xpt2046_fsm_calc_factors>:
*
* @return 		void
*/
////////////////////////////////////////////////////////////////////////////////
static void xpt2046_fsm_calc_factors(void)
{
 800ef20:	b5b0      	push	{r4, r5, r7, lr}
 800ef22:	b088      	sub	sp, #32
 800ef24:	af00      	add	r7, sp, #0
	int32_t cal_factors[7];

	// Calculate calibration data
	xpt2046_calculate_factors( (int32_t*) &cal_factors, (const xpt2046_point_t*) &g_cal_data.Dp, (const xpt2046_point_t*) &g_cal_data.Tp );
 800ef26:	1d3b      	adds	r3, r7, #4
 800ef28:	4a0e      	ldr	r2, [pc, #56]	; (800ef64 <xpt2046_fsm_calc_factors+0x44>)
 800ef2a:	490f      	ldr	r1, [pc, #60]	; (800ef68 <xpt2046_fsm_calc_factors+0x48>)
 800ef2c:	4618      	mov	r0, r3
 800ef2e:	f000 f873 	bl	800f018 <xpt2046_calculate_factors>

	// Store
	memcpy( g_cal_data.factors, cal_factors, sizeof( cal_factors ));
 800ef32:	4b0d      	ldr	r3, [pc, #52]	; (800ef68 <xpt2046_fsm_calc_factors+0x48>)
 800ef34:	f103 0460 	add.w	r4, r3, #96	; 0x60
 800ef38:	1d3d      	adds	r5, r7, #4
 800ef3a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ef3c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ef3e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800ef42:	e884 0007 	stmia.w	r4, {r0, r1, r2}

	// Go to normal
	g_cal_fsm.state.next = eXPT2046_FSM_NORMAL;
 800ef46:	4b09      	ldr	r3, [pc, #36]	; (800ef6c <xpt2046_fsm_calc_factors+0x4c>)
 800ef48:	2200      	movs	r2, #0
 800ef4a:	725a      	strb	r2, [r3, #9]

	// Manage flags
	g_cal_data.busy = false;
 800ef4c:	4b06      	ldr	r3, [pc, #24]	; (800ef68 <xpt2046_fsm_calc_factors+0x48>)
 800ef4e:	2200      	movs	r2, #0
 800ef50:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
	g_cal_data.done = true;
 800ef54:	4b04      	ldr	r3, [pc, #16]	; (800ef68 <xpt2046_fsm_calc_factors+0x48>)
 800ef56:	2201      	movs	r2, #1
 800ef58:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
}
 800ef5c:	bf00      	nop
 800ef5e:	3720      	adds	r7, #32
 800ef60:	46bd      	mov	sp, r7
 800ef62:	bdb0      	pop	{r4, r5, r7, pc}
 800ef64:	200000a0 	.word	0x200000a0
 800ef68:	20000070 	.word	0x20000070
 800ef6c:	20004ce0 	.word	0x20004ce0

0800ef70 <xpt2046_set_cal_point>:
* @param[in]	px	- Calibration point number
* @return 		void
*/
////////////////////////////////////////////////////////////////////////////////
static void xpt2046_set_cal_point(const xpt2046_points_t px)
{
 800ef70:	b580      	push	{r7, lr}
 800ef72:	b082      	sub	sp, #8
 800ef74:	af00      	add	r7, sp, #0
 800ef76:	4603      	mov	r3, r0
 800ef78:	71fb      	strb	r3, [r7, #7]
	if ( px < eXPT2046_CAL_P_NUM_OF )
 800ef7a:	79fb      	ldrb	r3, [r7, #7]
 800ef7c:	2b02      	cmp	r3, #2
 800ef7e:	d818      	bhi.n	800efb2 <xpt2046_set_cal_point+0x42>
	{
		g_cal_circ_attr.position.start_page = g_cal_data.Dp[ px ].x;
 800ef80:	79fb      	ldrb	r3, [r7, #7]
 800ef82:	4a0e      	ldr	r2, [pc, #56]	; (800efbc <xpt2046_set_cal_point+0x4c>)
 800ef84:	011b      	lsls	r3, r3, #4
 800ef86:	4413      	add	r3, r2
 800ef88:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef8c:	b292      	uxth	r2, r2
 800ef8e:	4b0c      	ldr	r3, [pc, #48]	; (800efc0 <xpt2046_set_cal_point+0x50>)
 800ef90:	801a      	strh	r2, [r3, #0]
		g_cal_circ_attr.position.start_col 	= g_cal_data.Dp[ px ].y;
 800ef92:	79fb      	ldrb	r3, [r7, #7]
 800ef94:	4a09      	ldr	r2, [pc, #36]	; (800efbc <xpt2046_set_cal_point+0x4c>)
 800ef96:	011b      	lsls	r3, r3, #4
 800ef98:	4413      	add	r3, r2
 800ef9a:	3308      	adds	r3, #8
 800ef9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800efa0:	b292      	uxth	r2, r2
 800efa2:	4b07      	ldr	r3, [pc, #28]	; (800efc0 <xpt2046_set_cal_point+0x50>)
 800efa4:	805a      	strh	r2, [r3, #2]
		g_cal_circ_attr.fill.color			= XPT2046_POINT_COLOR_FG;
 800efa6:	4b06      	ldr	r3, [pc, #24]	; (800efc0 <xpt2046_set_cal_point+0x50>)
 800efa8:	2206      	movs	r2, #6
 800efaa:	71da      	strb	r2, [r3, #7]
		ili9488_draw_circle( &g_cal_circ_attr );
 800efac:	4804      	ldr	r0, [pc, #16]	; (800efc0 <xpt2046_set_cal_point+0x50>)
 800efae:	f7fd feb5 	bl	800cd1c <ili9488_draw_circle>
	}
}
 800efb2:	bf00      	nop
 800efb4:	3708      	adds	r7, #8
 800efb6:	46bd      	mov	sp, r7
 800efb8:	bd80      	pop	{r7, pc}
 800efba:	bf00      	nop
 800efbc:	20000070 	.word	0x20000070
 800efc0:	200000f0 	.word	0x200000f0

0800efc4 <xpt2046_clear_cal_point>:
* @param[in]	px	- Calibration point number
* @return 		void
*/
////////////////////////////////////////////////////////////////////////////////
static void xpt2046_clear_cal_point(const xpt2046_points_t px)
{
 800efc4:	b580      	push	{r7, lr}
 800efc6:	b082      	sub	sp, #8
 800efc8:	af00      	add	r7, sp, #0
 800efca:	4603      	mov	r3, r0
 800efcc:	71fb      	strb	r3, [r7, #7]
	if ( px < eXPT2046_CAL_P_NUM_OF )
 800efce:	79fb      	ldrb	r3, [r7, #7]
 800efd0:	2b02      	cmp	r3, #2
 800efd2:	d818      	bhi.n	800f006 <xpt2046_clear_cal_point+0x42>
	{
		//ili9488_fill_rectangle( g_cal_data.Dp[ px ].x, g_cal_data.Dp[ px ].y, XPT2046_POINT_SIZE, XPT2046_POINT_SIZE, XPT2046_POINT_COLOR_BG );

		g_cal_circ_attr.position.start_page = g_cal_data.Dp[ px ].x;
 800efd4:	79fb      	ldrb	r3, [r7, #7]
 800efd6:	4a0e      	ldr	r2, [pc, #56]	; (800f010 <xpt2046_clear_cal_point+0x4c>)
 800efd8:	011b      	lsls	r3, r3, #4
 800efda:	4413      	add	r3, r2
 800efdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800efe0:	b292      	uxth	r2, r2
 800efe2:	4b0c      	ldr	r3, [pc, #48]	; (800f014 <xpt2046_clear_cal_point+0x50>)
 800efe4:	801a      	strh	r2, [r3, #0]
		g_cal_circ_attr.position.start_col 	= g_cal_data.Dp[ px ].y;
 800efe6:	79fb      	ldrb	r3, [r7, #7]
 800efe8:	4a09      	ldr	r2, [pc, #36]	; (800f010 <xpt2046_clear_cal_point+0x4c>)
 800efea:	011b      	lsls	r3, r3, #4
 800efec:	4413      	add	r3, r2
 800efee:	3308      	adds	r3, #8
 800eff0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eff4:	b292      	uxth	r2, r2
 800eff6:	4b07      	ldr	r3, [pc, #28]	; (800f014 <xpt2046_clear_cal_point+0x50>)
 800eff8:	805a      	strh	r2, [r3, #2]
		g_cal_circ_attr.fill.color			= XPT2046_POINT_COLOR_BG;
 800effa:	4b06      	ldr	r3, [pc, #24]	; (800f014 <xpt2046_clear_cal_point+0x50>)
 800effc:	2200      	movs	r2, #0
 800effe:	71da      	strb	r2, [r3, #7]
		ili9488_draw_circle( &g_cal_circ_attr );
 800f000:	4804      	ldr	r0, [pc, #16]	; (800f014 <xpt2046_clear_cal_point+0x50>)
 800f002:	f7fd fe8b 	bl	800cd1c <ili9488_draw_circle>
	}
}
 800f006:	bf00      	nop
 800f008:	3708      	adds	r7, #8
 800f00a:	46bd      	mov	sp, r7
 800f00c:	bd80      	pop	{r7, pc}
 800f00e:	bf00      	nop
 800f010:	20000070 	.word	0x20000070
 800f014:	200000f0 	.word	0x200000f0

0800f018 <xpt2046_calculate_factors>:
* @param[in]	p_Tp	 	- Pointer to touch points
* @return 		void
*/
////////////////////////////////////////////////////////////////////////////////
static void xpt2046_calculate_factors(int32_t * p_factors, const xpt2046_point_t * const p_Dp, const xpt2046_point_t * const p_Tp)
{
 800f018:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f01c:	b0b3      	sub	sp, #204	; 0xcc
 800f01e:	af00      	add	r7, sp, #0
 800f020:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4
 800f024:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
 800f028:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
	// Calculate C vectors
	p_factors[0] = 	(	(int32_t) (( p_Tp[0].x - p_Tp[2].x ) * ( p_Tp[1].y - p_Tp[2].y ))
 800f02c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800f030:	e9d3 0100 	ldrd	r0, r1, [r3]
 800f034:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800f038:	3320      	adds	r3, #32
 800f03a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f03e:	1a84      	subs	r4, r0, r2
 800f040:	eb61 0503 	sbc.w	r5, r1, r3
 800f044:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800f048:	3310      	adds	r3, #16
 800f04a:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800f04e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800f052:	3320      	adds	r3, #32
 800f054:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800f058:	ebb0 0802 	subs.w	r8, r0, r2
 800f05c:	eb61 0903 	sbc.w	r9, r1, r3
 800f060:	4643      	mov	r3, r8
 800f062:	fb03 f304 	mul.w	r3, r3, r4
 800f066:	461d      	mov	r5, r3
					- 	(int32_t) (( p_Tp[1].x - p_Tp[2].x ) * ( p_Tp[0].y - p_Tp[2].y )));
 800f068:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800f06c:	3310      	adds	r3, #16
 800f06e:	e9d3 0100 	ldrd	r0, r1, [r3]
 800f072:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800f076:	3320      	adds	r3, #32
 800f078:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f07c:	ebb0 0a02 	subs.w	sl, r0, r2
 800f080:	eb61 0b03 	sbc.w	fp, r1, r3
 800f084:	4654      	mov	r4, sl
 800f086:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800f08a:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800f08e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800f092:	3320      	adds	r3, #32
 800f094:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800f098:	1a86      	subs	r6, r0, r2
 800f09a:	f8c7 60b0 	str.w	r6, [r7, #176]	; 0xb0
 800f09e:	eb61 0303 	sbc.w	r3, r1, r3
 800f0a2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800f0a6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800f0aa:	fb03 f304 	mul.w	r3, r3, r4
 800f0ae:	1aea      	subs	r2, r5, r3
	p_factors[0] = 	(	(int32_t) (( p_Tp[0].x - p_Tp[2].x ) * ( p_Tp[1].y - p_Tp[2].y ))
 800f0b0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800f0b4:	601a      	str	r2, [r3, #0]

	p_factors[1] = 	(	(int32_t) (( p_Dp[0].x - p_Dp[2].x ) * ( p_Tp[1].y - p_Tp[2].y ))
 800f0b6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800f0ba:	e9d3 0100 	ldrd	r0, r1, [r3]
 800f0be:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800f0c2:	3320      	adds	r3, #32
 800f0c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f0c8:	1a84      	subs	r4, r0, r2
 800f0ca:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 800f0ce:	eb61 0303 	sbc.w	r3, r1, r3
 800f0d2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800f0d6:	f8d7 40a8 	ldr.w	r4, [r7, #168]	; 0xa8
 800f0da:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800f0de:	3310      	adds	r3, #16
 800f0e0:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800f0e4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800f0e8:	3320      	adds	r3, #32
 800f0ea:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800f0ee:	1a85      	subs	r5, r0, r2
 800f0f0:	f8c7 50a0 	str.w	r5, [r7, #160]	; 0xa0
 800f0f4:	eb61 0303 	sbc.w	r3, r1, r3
 800f0f8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800f0fc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800f100:	fb03 f304 	mul.w	r3, r3, r4
 800f104:	461d      	mov	r5, r3
					- 	(int32_t) (( p_Dp[1].x - p_Dp[2].x ) * ( p_Tp[0].y - p_Tp[2].y )));
 800f106:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800f10a:	3310      	adds	r3, #16
 800f10c:	e9d3 0100 	ldrd	r0, r1, [r3]
 800f110:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800f114:	3320      	adds	r3, #32
 800f116:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f11a:	1a84      	subs	r4, r0, r2
 800f11c:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
 800f120:	eb61 0303 	sbc.w	r3, r1, r3
 800f124:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800f128:	f8d7 4098 	ldr.w	r4, [r7, #152]	; 0x98
 800f12c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800f130:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800f134:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800f138:	3320      	adds	r3, #32
 800f13a:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800f13e:	1a86      	subs	r6, r0, r2
 800f140:	f8c7 6090 	str.w	r6, [r7, #144]	; 0x90
 800f144:	eb61 0303 	sbc.w	r3, r1, r3
 800f148:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800f14c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800f150:	fb03 f304 	mul.w	r3, r3, r4
 800f154:	4619      	mov	r1, r3
	p_factors[1] = 	(	(int32_t) (( p_Dp[0].x - p_Dp[2].x ) * ( p_Tp[1].y - p_Tp[2].y ))
 800f156:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800f15a:	1d1a      	adds	r2, r3, #4
					- 	(int32_t) (( p_Dp[1].x - p_Dp[2].x ) * ( p_Tp[0].y - p_Tp[2].y )));
 800f15c:	1a6b      	subs	r3, r5, r1
	p_factors[1] = 	(	(int32_t) (( p_Dp[0].x - p_Dp[2].x ) * ( p_Tp[1].y - p_Tp[2].y ))
 800f15e:	6013      	str	r3, [r2, #0]

	p_factors[2] = 	(	(int32_t) (( p_Tp[0].x - p_Tp[2].x ) * ( p_Dp[1].x - p_Dp[2].x ))
 800f160:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800f164:	e9d3 0100 	ldrd	r0, r1, [r3]
 800f168:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800f16c:	3320      	adds	r3, #32
 800f16e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f172:	1a84      	subs	r4, r0, r2
 800f174:	f8c7 4088 	str.w	r4, [r7, #136]	; 0x88
 800f178:	eb61 0303 	sbc.w	r3, r1, r3
 800f17c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800f180:	f8d7 4088 	ldr.w	r4, [r7, #136]	; 0x88
 800f184:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800f188:	3310      	adds	r3, #16
 800f18a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800f18e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800f192:	3320      	adds	r3, #32
 800f194:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f198:	1a85      	subs	r5, r0, r2
 800f19a:	f8c7 5080 	str.w	r5, [r7, #128]	; 0x80
 800f19e:	eb61 0303 	sbc.w	r3, r1, r3
 800f1a2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800f1a6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800f1aa:	fb03 f304 	mul.w	r3, r3, r4
 800f1ae:	461d      	mov	r5, r3
					- 	(int32_t) (( p_Dp[0].x - p_Dp[2].x ) * ( p_Tp[1].x - p_Tp[2].x )));
 800f1b0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800f1b4:	e9d3 0100 	ldrd	r0, r1, [r3]
 800f1b8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800f1bc:	3320      	adds	r3, #32
 800f1be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f1c2:	1a84      	subs	r4, r0, r2
 800f1c4:	67bc      	str	r4, [r7, #120]	; 0x78
 800f1c6:	eb61 0303 	sbc.w	r3, r1, r3
 800f1ca:	67fb      	str	r3, [r7, #124]	; 0x7c
 800f1cc:	6fbc      	ldr	r4, [r7, #120]	; 0x78
 800f1ce:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800f1d2:	3310      	adds	r3, #16
 800f1d4:	e9d3 0100 	ldrd	r0, r1, [r3]
 800f1d8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800f1dc:	3320      	adds	r3, #32
 800f1de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f1e2:	1a86      	subs	r6, r0, r2
 800f1e4:	673e      	str	r6, [r7, #112]	; 0x70
 800f1e6:	eb61 0303 	sbc.w	r3, r1, r3
 800f1ea:	677b      	str	r3, [r7, #116]	; 0x74
 800f1ec:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800f1ee:	fb03 f304 	mul.w	r3, r3, r4
 800f1f2:	4619      	mov	r1, r3
	p_factors[2] = 	(	(int32_t) (( p_Tp[0].x - p_Tp[2].x ) * ( p_Dp[1].x - p_Dp[2].x ))
 800f1f4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800f1f8:	f103 0208 	add.w	r2, r3, #8
					- 	(int32_t) (( p_Dp[0].x - p_Dp[2].x ) * ( p_Tp[1].x - p_Tp[2].x )));
 800f1fc:	1a6b      	subs	r3, r5, r1
	p_factors[2] = 	(	(int32_t) (( p_Tp[0].x - p_Tp[2].x ) * ( p_Dp[1].x - p_Dp[2].x ))
 800f1fe:	6013      	str	r3, [r2, #0]

	p_factors[3] = 	(	(int32_t) ( p_Tp[0].y * (((int32_t) p_Tp[2].x * p_Dp[1].x ) - ((int32_t) p_Tp[1].x * p_Dp[2].x )))
 800f200:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800f204:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800f208:	4616      	mov	r6, r2
 800f20a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800f20e:	3320      	adds	r3, #32
 800f210:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f214:	4613      	mov	r3, r2
 800f216:	4618      	mov	r0, r3
 800f218:	ea4f 71e0 	mov.w	r1, r0, asr #31
 800f21c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800f220:	3310      	adds	r3, #16
 800f222:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f226:	fb02 f501 	mul.w	r5, r2, r1
 800f22a:	fb00 f403 	mul.w	r4, r0, r3
 800f22e:	442c      	add	r4, r5
 800f230:	fba0 8902 	umull	r8, r9, r0, r2
 800f234:	eb04 0309 	add.w	r3, r4, r9
 800f238:	4699      	mov	r9, r3
 800f23a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800f23e:	3310      	adds	r3, #16
 800f240:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f244:	4613      	mov	r3, r2
 800f246:	4618      	mov	r0, r3
 800f248:	ea4f 71e0 	mov.w	r1, r0, asr #31
 800f24c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800f250:	3320      	adds	r3, #32
 800f252:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f256:	fb02 f501 	mul.w	r5, r2, r1
 800f25a:	fb00 f403 	mul.w	r4, r0, r3
 800f25e:	442c      	add	r4, r5
 800f260:	fba0 2302 	umull	r2, r3, r0, r2
 800f264:	18e1      	adds	r1, r4, r3
 800f266:	460b      	mov	r3, r1
 800f268:	ebb8 0102 	subs.w	r1, r8, r2
 800f26c:	66b9      	str	r1, [r7, #104]	; 0x68
 800f26e:	eb69 0303 	sbc.w	r3, r9, r3
 800f272:	66fb      	str	r3, [r7, #108]	; 0x6c
 800f274:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800f276:	fb03 f306 	mul.w	r3, r3, r6
 800f27a:	469c      	mov	ip, r3
					+	(int32_t) ( p_Tp[1].y * (((int32_t) p_Tp[0].x * p_Dp[2].x ) - ((int32_t) p_Tp[2].x * p_Dp[0].x )))
 800f27c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800f280:	3310      	adds	r3, #16
 800f282:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800f286:	4616      	mov	r6, r2
 800f288:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800f28c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f290:	4613      	mov	r3, r2
 800f292:	4618      	mov	r0, r3
 800f294:	ea4f 71e0 	mov.w	r1, r0, asr #31
 800f298:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800f29c:	3320      	adds	r3, #32
 800f29e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f2a2:	fb02 f501 	mul.w	r5, r2, r1
 800f2a6:	fb00 f403 	mul.w	r4, r0, r3
 800f2aa:	442c      	add	r4, r5
 800f2ac:	fba0 8902 	umull	r8, r9, r0, r2
 800f2b0:	eb04 0309 	add.w	r3, r4, r9
 800f2b4:	4699      	mov	r9, r3
 800f2b6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800f2ba:	3320      	adds	r3, #32
 800f2bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f2c0:	4613      	mov	r3, r2
 800f2c2:	4618      	mov	r0, r3
 800f2c4:	ea4f 71e0 	mov.w	r1, r0, asr #31
 800f2c8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800f2cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f2d0:	fb02 f501 	mul.w	r5, r2, r1
 800f2d4:	fb00 f403 	mul.w	r4, r0, r3
 800f2d8:	442c      	add	r4, r5
 800f2da:	fba0 2302 	umull	r2, r3, r0, r2
 800f2de:	18e1      	adds	r1, r4, r3
 800f2e0:	460b      	mov	r3, r1
 800f2e2:	ebb8 0102 	subs.w	r1, r8, r2
 800f2e6:	6639      	str	r1, [r7, #96]	; 0x60
 800f2e8:	eb69 0303 	sbc.w	r3, r9, r3
 800f2ec:	667b      	str	r3, [r7, #100]	; 0x64
 800f2ee:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f2f0:	fb03 f306 	mul.w	r3, r3, r6
 800f2f4:	eb0c 0603 	add.w	r6, ip, r3
					+	(int32_t) ( p_Tp[2].y * (((int32_t) p_Tp[1].x * p_Dp[0].x ) - ((int32_t) p_Tp[0].x * p_Dp[1].x ))));
 800f2f8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800f2fc:	3320      	adds	r3, #32
 800f2fe:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800f302:	4694      	mov	ip, r2
 800f304:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800f308:	3310      	adds	r3, #16
 800f30a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f30e:	4613      	mov	r3, r2
 800f310:	4618      	mov	r0, r3
 800f312:	ea4f 71e0 	mov.w	r1, r0, asr #31
 800f316:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800f31a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f31e:	fb02 f501 	mul.w	r5, r2, r1
 800f322:	fb00 f403 	mul.w	r4, r0, r3
 800f326:	442c      	add	r4, r5
 800f328:	fba0 8902 	umull	r8, r9, r0, r2
 800f32c:	eb04 0309 	add.w	r3, r4, r9
 800f330:	4699      	mov	r9, r3
 800f332:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800f336:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f33a:	4613      	mov	r3, r2
 800f33c:	4618      	mov	r0, r3
 800f33e:	ea4f 71e0 	mov.w	r1, r0, asr #31
 800f342:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800f346:	3310      	adds	r3, #16
 800f348:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f34c:	fb02 f501 	mul.w	r5, r2, r1
 800f350:	fb00 f403 	mul.w	r4, r0, r3
 800f354:	442c      	add	r4, r5
 800f356:	fba0 2302 	umull	r2, r3, r0, r2
 800f35a:	18e1      	adds	r1, r4, r3
 800f35c:	460b      	mov	r3, r1
 800f35e:	ebb8 0102 	subs.w	r1, r8, r2
 800f362:	65b9      	str	r1, [r7, #88]	; 0x58
 800f364:	eb69 0303 	sbc.w	r3, r9, r3
 800f368:	65fb      	str	r3, [r7, #92]	; 0x5c
 800f36a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f36c:	fb03 f30c 	mul.w	r3, r3, ip
 800f370:	4619      	mov	r1, r3
	p_factors[3] = 	(	(int32_t) ( p_Tp[0].y * (((int32_t) p_Tp[2].x * p_Dp[1].x ) - ((int32_t) p_Tp[1].x * p_Dp[2].x )))
 800f372:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800f376:	f103 020c 	add.w	r2, r3, #12
					+	(int32_t) ( p_Tp[2].y * (((int32_t) p_Tp[1].x * p_Dp[0].x ) - ((int32_t) p_Tp[0].x * p_Dp[1].x ))));
 800f37a:	1873      	adds	r3, r6, r1
	p_factors[3] = 	(	(int32_t) ( p_Tp[0].y * (((int32_t) p_Tp[2].x * p_Dp[1].x ) - ((int32_t) p_Tp[1].x * p_Dp[2].x )))
 800f37c:	6013      	str	r3, [r2, #0]

	p_factors[4] = 	(	(int32_t) (( p_Dp[0].y - p_Dp[2].y ) * ( p_Tp[1].y - p_Tp[2].y ))
 800f37e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800f382:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800f386:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800f38a:	3320      	adds	r3, #32
 800f38c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800f390:	1a84      	subs	r4, r0, r2
 800f392:	653c      	str	r4, [r7, #80]	; 0x50
 800f394:	eb61 0303 	sbc.w	r3, r1, r3
 800f398:	657b      	str	r3, [r7, #84]	; 0x54
 800f39a:	6d3c      	ldr	r4, [r7, #80]	; 0x50
 800f39c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800f3a0:	3310      	adds	r3, #16
 800f3a2:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800f3a6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800f3aa:	3320      	adds	r3, #32
 800f3ac:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800f3b0:	1a85      	subs	r5, r0, r2
 800f3b2:	64bd      	str	r5, [r7, #72]	; 0x48
 800f3b4:	eb61 0303 	sbc.w	r3, r1, r3
 800f3b8:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f3ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f3bc:	fb03 f304 	mul.w	r3, r3, r4
 800f3c0:	461d      	mov	r5, r3
					- 	(int32_t) (( p_Dp[1].y - p_Dp[2].y ) * ( p_Tp[0].y - p_Tp[2].y )));
 800f3c2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800f3c6:	3310      	adds	r3, #16
 800f3c8:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800f3cc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800f3d0:	3320      	adds	r3, #32
 800f3d2:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800f3d6:	1a84      	subs	r4, r0, r2
 800f3d8:	643c      	str	r4, [r7, #64]	; 0x40
 800f3da:	eb61 0303 	sbc.w	r3, r1, r3
 800f3de:	647b      	str	r3, [r7, #68]	; 0x44
 800f3e0:	6c3c      	ldr	r4, [r7, #64]	; 0x40
 800f3e2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800f3e6:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800f3ea:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800f3ee:	3320      	adds	r3, #32
 800f3f0:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800f3f4:	1a86      	subs	r6, r0, r2
 800f3f6:	63be      	str	r6, [r7, #56]	; 0x38
 800f3f8:	eb61 0303 	sbc.w	r3, r1, r3
 800f3fc:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f3fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f400:	fb03 f304 	mul.w	r3, r3, r4
 800f404:	4619      	mov	r1, r3
	p_factors[4] = 	(	(int32_t) (( p_Dp[0].y - p_Dp[2].y ) * ( p_Tp[1].y - p_Tp[2].y ))
 800f406:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800f40a:	f103 0210 	add.w	r2, r3, #16
					- 	(int32_t) (( p_Dp[1].y - p_Dp[2].y ) * ( p_Tp[0].y - p_Tp[2].y )));
 800f40e:	1a6b      	subs	r3, r5, r1
	p_factors[4] = 	(	(int32_t) (( p_Dp[0].y - p_Dp[2].y ) * ( p_Tp[1].y - p_Tp[2].y ))
 800f410:	6013      	str	r3, [r2, #0]

	p_factors[5] = 	(	(int32_t) (( p_Tp[0].x - p_Tp[2].x ) * ( p_Dp[1].y - p_Dp[2].y ))
 800f412:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800f416:	e9d3 0100 	ldrd	r0, r1, [r3]
 800f41a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800f41e:	3320      	adds	r3, #32
 800f420:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f424:	1a84      	subs	r4, r0, r2
 800f426:	633c      	str	r4, [r7, #48]	; 0x30
 800f428:	eb61 0303 	sbc.w	r3, r1, r3
 800f42c:	637b      	str	r3, [r7, #52]	; 0x34
 800f42e:	6b3c      	ldr	r4, [r7, #48]	; 0x30
 800f430:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800f434:	3310      	adds	r3, #16
 800f436:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800f43a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800f43e:	3320      	adds	r3, #32
 800f440:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800f444:	1a85      	subs	r5, r0, r2
 800f446:	62bd      	str	r5, [r7, #40]	; 0x28
 800f448:	eb61 0303 	sbc.w	r3, r1, r3
 800f44c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f44e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f450:	fb03 f304 	mul.w	r3, r3, r4
 800f454:	461d      	mov	r5, r3
					- 	(int32_t) (( p_Dp[0].y - p_Dp[2].y ) * ( p_Tp[1].x - p_Tp[2].x )));
 800f456:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800f45a:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800f45e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800f462:	3320      	adds	r3, #32
 800f464:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800f468:	1a84      	subs	r4, r0, r2
 800f46a:	623c      	str	r4, [r7, #32]
 800f46c:	eb61 0303 	sbc.w	r3, r1, r3
 800f470:	627b      	str	r3, [r7, #36]	; 0x24
 800f472:	6a3c      	ldr	r4, [r7, #32]
 800f474:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800f478:	3310      	adds	r3, #16
 800f47a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800f47e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800f482:	3320      	adds	r3, #32
 800f484:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f488:	1a86      	subs	r6, r0, r2
 800f48a:	61be      	str	r6, [r7, #24]
 800f48c:	eb61 0303 	sbc.w	r3, r1, r3
 800f490:	61fb      	str	r3, [r7, #28]
 800f492:	69bb      	ldr	r3, [r7, #24]
 800f494:	fb03 f304 	mul.w	r3, r3, r4
 800f498:	461a      	mov	r2, r3
	p_factors[5] = 	(	(int32_t) (( p_Tp[0].x - p_Tp[2].x ) * ( p_Dp[1].y - p_Dp[2].y ))
 800f49a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800f49e:	3314      	adds	r3, #20
					- 	(int32_t) (( p_Dp[0].y - p_Dp[2].y ) * ( p_Tp[1].x - p_Tp[2].x )));
 800f4a0:	1aaa      	subs	r2, r5, r2
	p_factors[5] = 	(	(int32_t) (( p_Tp[0].x - p_Tp[2].x ) * ( p_Dp[1].y - p_Dp[2].y ))
 800f4a2:	601a      	str	r2, [r3, #0]


	p_factors[6] = 	(	(int32_t) ( p_Tp[0].y * (((int32_t) p_Tp[2].x * p_Dp[1].y ) - ((int32_t) p_Tp[1].x * p_Dp[2].y )))
 800f4a4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800f4a8:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800f4ac:	4696      	mov	lr, r2
 800f4ae:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800f4b2:	3320      	adds	r3, #32
 800f4b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f4b8:	4613      	mov	r3, r2
 800f4ba:	4618      	mov	r0, r3
 800f4bc:	ea4f 71e0 	mov.w	r1, r0, asr #31
 800f4c0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800f4c4:	3310      	adds	r3, #16
 800f4c6:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800f4ca:	fb02 f501 	mul.w	r5, r2, r1
 800f4ce:	fb00 f403 	mul.w	r4, r0, r3
 800f4d2:	442c      	add	r4, r5
 800f4d4:	fba0 0102 	umull	r0, r1, r0, r2
 800f4d8:	1863      	adds	r3, r4, r1
 800f4da:	4619      	mov	r1, r3
 800f4dc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800f4e0:	3310      	adds	r3, #16
 800f4e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f4e6:	4613      	mov	r3, r2
 800f4e8:	461c      	mov	r4, r3
 800f4ea:	ea4f 75e4 	mov.w	r5, r4, asr #31
 800f4ee:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800f4f2:	3320      	adds	r3, #32
 800f4f4:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800f4f8:	fb02 fc05 	mul.w	ip, r2, r5
 800f4fc:	fb04 f603 	mul.w	r6, r4, r3
 800f500:	4466      	add	r6, ip
 800f502:	fba4 2302 	umull	r2, r3, r4, r2
 800f506:	18f4      	adds	r4, r6, r3
 800f508:	4623      	mov	r3, r4
 800f50a:	1a84      	subs	r4, r0, r2
 800f50c:	613c      	str	r4, [r7, #16]
 800f50e:	eb61 0303 	sbc.w	r3, r1, r3
 800f512:	617b      	str	r3, [r7, #20]
 800f514:	693b      	ldr	r3, [r7, #16]
 800f516:	fb03 f30e 	mul.w	r3, r3, lr
 800f51a:	469e      	mov	lr, r3
					+	(int32_t) ( p_Tp[1].y * (((int32_t) p_Tp[0].x * p_Dp[2].y ) - ((int32_t) p_Tp[2].x * p_Dp[0].y )))
 800f51c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800f520:	3310      	adds	r3, #16
 800f522:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800f526:	4690      	mov	r8, r2
 800f528:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800f52c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f530:	4613      	mov	r3, r2
 800f532:	4618      	mov	r0, r3
 800f534:	ea4f 71e0 	mov.w	r1, r0, asr #31
 800f538:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800f53c:	3320      	adds	r3, #32
 800f53e:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800f542:	fb02 f501 	mul.w	r5, r2, r1
 800f546:	fb00 f403 	mul.w	r4, r0, r3
 800f54a:	442c      	add	r4, r5
 800f54c:	fba0 0102 	umull	r0, r1, r0, r2
 800f550:	1863      	adds	r3, r4, r1
 800f552:	4619      	mov	r1, r3
 800f554:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800f558:	3320      	adds	r3, #32
 800f55a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f55e:	4613      	mov	r3, r2
 800f560:	461c      	mov	r4, r3
 800f562:	ea4f 75e4 	mov.w	r5, r4, asr #31
 800f566:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800f56a:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800f56e:	fb02 fc05 	mul.w	ip, r2, r5
 800f572:	fb04 f603 	mul.w	r6, r4, r3
 800f576:	4466      	add	r6, ip
 800f578:	fba4 2302 	umull	r2, r3, r4, r2
 800f57c:	18f4      	adds	r4, r6, r3
 800f57e:	4623      	mov	r3, r4
 800f580:	1a84      	subs	r4, r0, r2
 800f582:	60bc      	str	r4, [r7, #8]
 800f584:	eb61 0303 	sbc.w	r3, r1, r3
 800f588:	60fb      	str	r3, [r7, #12]
 800f58a:	68bb      	ldr	r3, [r7, #8]
 800f58c:	fb03 f308 	mul.w	r3, r3, r8
 800f590:	eb0e 0603 	add.w	r6, lr, r3
					+	(int32_t) ( p_Tp[2].y * (((int32_t) p_Tp[1].x * p_Dp[0].y ) - ((int32_t) p_Tp[0].x * p_Dp[1].y ))));
 800f594:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800f598:	3320      	adds	r3, #32
 800f59a:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800f59e:	4690      	mov	r8, r2
 800f5a0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800f5a4:	3310      	adds	r3, #16
 800f5a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f5aa:	4613      	mov	r3, r2
 800f5ac:	4618      	mov	r0, r3
 800f5ae:	ea4f 71e0 	mov.w	r1, r0, asr #31
 800f5b2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800f5b6:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800f5ba:	fb02 f501 	mul.w	r5, r2, r1
 800f5be:	fb00 f403 	mul.w	r4, r0, r3
 800f5c2:	442c      	add	r4, r5
 800f5c4:	fba0 0102 	umull	r0, r1, r0, r2
 800f5c8:	1863      	adds	r3, r4, r1
 800f5ca:	4619      	mov	r1, r3
 800f5cc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800f5d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f5d4:	4613      	mov	r3, r2
 800f5d6:	461c      	mov	r4, r3
 800f5d8:	ea4f 75e4 	mov.w	r5, r4, asr #31
 800f5dc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800f5e0:	3310      	adds	r3, #16
 800f5e2:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800f5e6:	fb02 fe05 	mul.w	lr, r2, r5
 800f5ea:	fb04 fc03 	mul.w	ip, r4, r3
 800f5ee:	44f4      	add	ip, lr
 800f5f0:	fba4 2302 	umull	r2, r3, r4, r2
 800f5f4:	eb0c 0403 	add.w	r4, ip, r3
 800f5f8:	4623      	mov	r3, r4
 800f5fa:	1a84      	subs	r4, r0, r2
 800f5fc:	603c      	str	r4, [r7, #0]
 800f5fe:	eb61 0303 	sbc.w	r3, r1, r3
 800f602:	607b      	str	r3, [r7, #4]
 800f604:	683b      	ldr	r3, [r7, #0]
 800f606:	fb03 f308 	mul.w	r3, r3, r8
 800f60a:	461a      	mov	r2, r3
	p_factors[6] = 	(	(int32_t) ( p_Tp[0].y * (((int32_t) p_Tp[2].x * p_Dp[1].y ) - ((int32_t) p_Tp[1].x * p_Dp[2].y )))
 800f60c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800f610:	3318      	adds	r3, #24
					+	(int32_t) ( p_Tp[2].y * (((int32_t) p_Tp[1].x * p_Dp[0].y ) - ((int32_t) p_Tp[0].x * p_Dp[1].y ))));
 800f612:	4432      	add	r2, r6
	p_factors[6] = 	(	(int32_t) ( p_Tp[0].y * (((int32_t) p_Tp[2].x * p_Dp[1].y ) - ((int32_t) p_Tp[1].x * p_Dp[2].y )))
 800f614:	601a      	str	r2, [r3, #0]
}
 800f616:	bf00      	nop
 800f618:	37cc      	adds	r7, #204	; 0xcc
 800f61a:	46bd      	mov	sp, r7
 800f61c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800f620 <xpt2046_calibrate_data>:
* @param[in] 	p_factors	- Pointer to cal factors
* @return 		void
*/
////////////////////////////////////////////////////////////////////////////////
static void xpt2046_calibrate_data(uint16_t * const p_X, uint16_t * const p_Y, const int32_t * const p_factors)
{
 800f620:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f624:	b091      	sub	sp, #68	; 0x44
 800f626:	af00      	add	r7, sp, #0
 800f628:	61f8      	str	r0, [r7, #28]
 800f62a:	61b9      	str	r1, [r7, #24]
 800f62c:	617a      	str	r2, [r7, #20]
	xpt2046_point_t Dp;
	xpt2046_point_t Tp;

	// Touch coordinate
	Tp.x = (int64_t) *p_X;
 800f62e:	69fb      	ldr	r3, [r7, #28]
 800f630:	881b      	ldrh	r3, [r3, #0]
 800f632:	b29a      	uxth	r2, r3
 800f634:	f04f 0300 	mov.w	r3, #0
 800f638:	e9c7 2308 	strd	r2, r3, [r7, #32]
	Tp.y = (int64_t) *p_Y;
 800f63c:	69bb      	ldr	r3, [r7, #24]
 800f63e:	881b      	ldrh	r3, [r3, #0]
 800f640:	b29a      	uxth	r2, r3
 800f642:	f04f 0300 	mov.w	r3, #0
 800f646:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

	// Apply factors
	Dp.x = ((( p_factors[1] * Tp.x ) + ( p_factors[2] * Tp.y ) + p_factors[3] ) / p_factors[0] );
 800f64a:	697b      	ldr	r3, [r7, #20]
 800f64c:	3304      	adds	r3, #4
 800f64e:	681b      	ldr	r3, [r3, #0]
 800f650:	4618      	mov	r0, r3
 800f652:	ea4f 71e0 	mov.w	r1, r0, asr #31
 800f656:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800f65a:	fb02 f501 	mul.w	r5, r2, r1
 800f65e:	fb00 f403 	mul.w	r4, r0, r3
 800f662:	192e      	adds	r6, r5, r4
 800f664:	fba0 4502 	umull	r4, r5, r0, r2
 800f668:	1973      	adds	r3, r6, r5
 800f66a:	461d      	mov	r5, r3
 800f66c:	697b      	ldr	r3, [r7, #20]
 800f66e:	3308      	adds	r3, #8
 800f670:	681b      	ldr	r3, [r3, #0]
 800f672:	461a      	mov	r2, r3
 800f674:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800f678:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800f67c:	fb00 fc03 	mul.w	ip, r0, r3
 800f680:	fb02 f601 	mul.w	r6, r2, r1
 800f684:	4466      	add	r6, ip
 800f686:	fba2 2300 	umull	r2, r3, r2, r0
 800f68a:	18f1      	adds	r1, r6, r3
 800f68c:	460b      	mov	r3, r1
 800f68e:	eb14 0a02 	adds.w	sl, r4, r2
 800f692:	eb45 0b03 	adc.w	fp, r5, r3
 800f696:	697b      	ldr	r3, [r7, #20]
 800f698:	330c      	adds	r3, #12
 800f69a:	681b      	ldr	r3, [r3, #0]
 800f69c:	461a      	mov	r2, r3
 800f69e:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800f6a2:	eb1a 0102 	adds.w	r1, sl, r2
 800f6a6:	60b9      	str	r1, [r7, #8]
 800f6a8:	eb4b 0303 	adc.w	r3, fp, r3
 800f6ac:	60fb      	str	r3, [r7, #12]
 800f6ae:	697b      	ldr	r3, [r7, #20]
 800f6b0:	681b      	ldr	r3, [r3, #0]
 800f6b2:	461a      	mov	r2, r3
 800f6b4:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800f6b8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800f6bc:	f7f1 fb14 	bl	8000ce8 <__aeabi_ldivmod>
 800f6c0:	4602      	mov	r2, r0
 800f6c2:	460b      	mov	r3, r1
 800f6c4:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
	Dp.y = ((( p_factors[4] * Tp.x ) + ( p_factors[5] * Tp.y ) + p_factors[6] ) / p_factors[0] );
 800f6c8:	697b      	ldr	r3, [r7, #20]
 800f6ca:	3310      	adds	r3, #16
 800f6cc:	681b      	ldr	r3, [r3, #0]
 800f6ce:	4618      	mov	r0, r3
 800f6d0:	ea4f 71e0 	mov.w	r1, r0, asr #31
 800f6d4:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800f6d8:	fb02 f501 	mul.w	r5, r2, r1
 800f6dc:	fb00 f403 	mul.w	r4, r0, r3
 800f6e0:	442c      	add	r4, r5
 800f6e2:	fba0 0102 	umull	r0, r1, r0, r2
 800f6e6:	1863      	adds	r3, r4, r1
 800f6e8:	4619      	mov	r1, r3
 800f6ea:	697b      	ldr	r3, [r7, #20]
 800f6ec:	3314      	adds	r3, #20
 800f6ee:	681b      	ldr	r3, [r3, #0]
 800f6f0:	461c      	mov	r4, r3
 800f6f2:	ea4f 75e4 	mov.w	r5, r4, asr #31
 800f6f6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800f6fa:	fb02 fc05 	mul.w	ip, r2, r5
 800f6fe:	fb04 f603 	mul.w	r6, r4, r3
 800f702:	4466      	add	r6, ip
 800f704:	fba4 2302 	umull	r2, r3, r4, r2
 800f708:	18f4      	adds	r4, r6, r3
 800f70a:	4623      	mov	r3, r4
 800f70c:	eb10 0802 	adds.w	r8, r0, r2
 800f710:	eb41 0903 	adc.w	r9, r1, r3
 800f714:	697b      	ldr	r3, [r7, #20]
 800f716:	3318      	adds	r3, #24
 800f718:	681b      	ldr	r3, [r3, #0]
 800f71a:	461a      	mov	r2, r3
 800f71c:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800f720:	eb18 0102 	adds.w	r1, r8, r2
 800f724:	6039      	str	r1, [r7, #0]
 800f726:	eb49 0303 	adc.w	r3, r9, r3
 800f72a:	607b      	str	r3, [r7, #4]
 800f72c:	697b      	ldr	r3, [r7, #20]
 800f72e:	681b      	ldr	r3, [r3, #0]
 800f730:	461a      	mov	r2, r3
 800f732:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800f736:	e9d7 0100 	ldrd	r0, r1, [r7]
 800f73a:	f7f1 fad5 	bl	8000ce8 <__aeabi_ldivmod>
 800f73e:	4602      	mov	r2, r0
 800f740:	460b      	mov	r3, r1
 800f742:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38

	// Limit
	Dp.x = xpt2046_limit_cal_X_data( Dp.x );
 800f746:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800f74a:	4613      	mov	r3, r2
 800f74c:	4618      	mov	r0, r3
 800f74e:	f000 f821 	bl	800f794 <xpt2046_limit_cal_X_data>
 800f752:	4603      	mov	r3, r0
 800f754:	461a      	mov	r2, r3
 800f756:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800f75a:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
	Dp.y = xpt2046_limit_cal_Y_data( Dp.y );
 800f75e:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800f762:	4613      	mov	r3, r2
 800f764:	4618      	mov	r0, r3
 800f766:	f000 f830 	bl	800f7ca <xpt2046_limit_cal_Y_data>
 800f76a:	4603      	mov	r3, r0
 800f76c:	461a      	mov	r2, r3
 800f76e:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800f772:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38

	// Return calibrated values
	*p_X = (uint16_t) Dp.x;
 800f776:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800f77a:	b292      	uxth	r2, r2
 800f77c:	69fb      	ldr	r3, [r7, #28]
 800f77e:	801a      	strh	r2, [r3, #0]
	*p_Y = (uint16_t) Dp.y;
 800f780:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800f784:	b292      	uxth	r2, r2
 800f786:	69bb      	ldr	r3, [r7, #24]
 800f788:	801a      	strh	r2, [r3, #0]
}
 800f78a:	bf00      	nop
 800f78c:	3744      	adds	r7, #68	; 0x44
 800f78e:	46bd      	mov	sp, r7
 800f790:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800f794 <xpt2046_limit_cal_X_data>:
* @param[in] 	unlimited_data 	- Calibrated unlimited data
* @return 		lim_data		- Limited data due to limitation of display
*/
////////////////////////////////////////////////////////////////////////////////
static int32_t xpt2046_limit_cal_X_data(const int32_t unlimited_data)
{
 800f794:	b480      	push	{r7}
 800f796:	b085      	sub	sp, #20
 800f798:	af00      	add	r7, sp, #0
 800f79a:	6078      	str	r0, [r7, #4]
	int32_t lim_data;

	if ( unlimited_data < 0 )
 800f79c:	687b      	ldr	r3, [r7, #4]
 800f79e:	2b00      	cmp	r3, #0
 800f7a0:	da02      	bge.n	800f7a8 <xpt2046_limit_cal_X_data+0x14>
	{
		lim_data = 0;
 800f7a2:	2300      	movs	r3, #0
 800f7a4:	60fb      	str	r3, [r7, #12]
 800f7a6:	e009      	b.n	800f7bc <xpt2046_limit_cal_X_data+0x28>
	}
	else if ( unlimited_data > XPT2046_DISPLAY_MAX_X )
 800f7a8:	687b      	ldr	r3, [r7, #4]
 800f7aa:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 800f7ae:	dd03      	ble.n	800f7b8 <xpt2046_limit_cal_X_data+0x24>
	{
		lim_data = XPT2046_DISPLAY_MAX_X;
 800f7b0:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 800f7b4:	60fb      	str	r3, [r7, #12]
 800f7b6:	e001      	b.n	800f7bc <xpt2046_limit_cal_X_data+0x28>
	}
	else
	{
		lim_data = unlimited_data;
 800f7b8:	687b      	ldr	r3, [r7, #4]
 800f7ba:	60fb      	str	r3, [r7, #12]
	}

	return lim_data;
 800f7bc:	68fb      	ldr	r3, [r7, #12]
}
 800f7be:	4618      	mov	r0, r3
 800f7c0:	3714      	adds	r7, #20
 800f7c2:	46bd      	mov	sp, r7
 800f7c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7c8:	4770      	bx	lr

0800f7ca <xpt2046_limit_cal_Y_data>:
* @param[in] 	unlimited_data 	- Calibrated unlimited data
* @return 		lim_data		- Limited data due to limitation of display
*/
////////////////////////////////////////////////////////////////////////////////
static int32_t xpt2046_limit_cal_Y_data(const int32_t unlimited_data)
{
 800f7ca:	b480      	push	{r7}
 800f7cc:	b085      	sub	sp, #20
 800f7ce:	af00      	add	r7, sp, #0
 800f7d0:	6078      	str	r0, [r7, #4]
	int32_t lim_data;

	if ( unlimited_data < 0 )
 800f7d2:	687b      	ldr	r3, [r7, #4]
 800f7d4:	2b00      	cmp	r3, #0
 800f7d6:	da02      	bge.n	800f7de <xpt2046_limit_cal_Y_data+0x14>
	{
		lim_data = 0;
 800f7d8:	2300      	movs	r3, #0
 800f7da:	60fb      	str	r3, [r7, #12]
 800f7dc:	e009      	b.n	800f7f2 <xpt2046_limit_cal_Y_data+0x28>
	}
	else if ( unlimited_data > XPT2046_DISPLAY_MAX_Y )
 800f7de:	687b      	ldr	r3, [r7, #4]
 800f7e0:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800f7e4:	dd03      	ble.n	800f7ee <xpt2046_limit_cal_Y_data+0x24>
	{
		lim_data = XPT2046_DISPLAY_MAX_Y;
 800f7e6:	f44f 73a0 	mov.w	r3, #320	; 0x140
 800f7ea:	60fb      	str	r3, [r7, #12]
 800f7ec:	e001      	b.n	800f7f2 <xpt2046_limit_cal_Y_data+0x28>
	}
	else
	{
		lim_data = unlimited_data;
 800f7ee:	687b      	ldr	r3, [r7, #4]
 800f7f0:	60fb      	str	r3, [r7, #12]
	}

	return lim_data;
 800f7f2:	68fb      	ldr	r3, [r7, #12]
}
 800f7f4:	4618      	mov	r0, r3
 800f7f6:	3714      	adds	r7, #20
 800f7f8:	46bd      	mov	sp, r7
 800f7fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7fe:	4770      	bx	lr

0800f800 <xpt2046_is_calibrated>:
*
* @return 	calibration done
*/
////////////////////////////////////////////////////////////////////////////////
bool xpt2046_is_calibrated(void)
{
 800f800:	b480      	push	{r7}
 800f802:	af00      	add	r7, sp, #0
	return g_cal_data.done;
 800f804:	4b03      	ldr	r3, [pc, #12]	; (800f814 <xpt2046_is_calibrated+0x14>)
 800f806:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
}
 800f80a:	4618      	mov	r0, r3
 800f80c:	46bd      	mov	sp, r7
 800f80e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f812:	4770      	bx	lr
 800f814:	20000070 	.word	0x20000070

0800f818 <xpt2046_set_cal_factors>:
* @param[in] 	p_factors	- Pointer to factors
* @return 		status 		- Status of operation
*/
////////////////////////////////////////////////////////////////////////////////
xpt2046_status_t xpt2046_set_cal_factors(const int32_t * const p_factors)
{
 800f818:	b580      	push	{r7, lr}
 800f81a:	b084      	sub	sp, #16
 800f81c:	af00      	add	r7, sp, #0
 800f81e:	6078      	str	r0, [r7, #4]
	xpt2046_status_t status = eXPT2046_OK;
 800f820:	2300      	movs	r3, #0
 800f822:	73fb      	strb	r3, [r7, #15]

	if ( NULL != p_factors )
 800f824:	687b      	ldr	r3, [r7, #4]
 800f826:	2b00      	cmp	r3, #0
 800f828:	d009      	beq.n	800f83e <xpt2046_set_cal_factors+0x26>
	{
		// Calibration already done some time in past
		g_cal_data.done = true;
 800f82a:	4b08      	ldr	r3, [pc, #32]	; (800f84c <xpt2046_set_cal_factors+0x34>)
 800f82c:	2201      	movs	r2, #1
 800f82e:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e

		// Copy factors
		memcpy( &g_cal_data.factors, p_factors, sizeof( g_cal_data.factors ));
 800f832:	221c      	movs	r2, #28
 800f834:	6879      	ldr	r1, [r7, #4]
 800f836:	4806      	ldr	r0, [pc, #24]	; (800f850 <xpt2046_set_cal_factors+0x38>)
 800f838:	f005 fc36 	bl	80150a8 <memcpy>
 800f83c:	e001      	b.n	800f842 <xpt2046_set_cal_factors+0x2a>
	}
	else
	{
		status = eXPT2046_ERROR;
 800f83e:	2301      	movs	r3, #1
 800f840:	73fb      	strb	r3, [r7, #15]
	}

	return status;
 800f842:	7bfb      	ldrb	r3, [r7, #15]
}
 800f844:	4618      	mov	r0, r3
 800f846:	3710      	adds	r7, #16
 800f848:	46bd      	mov	sp, r7
 800f84a:	bd80      	pop	{r7, pc}
 800f84c:	20000070 	.word	0x20000070
 800f850:	200000d0 	.word	0x200000d0

0800f854 <xpt2046_get_cal_factors>:
* @param[out] 	p_factors	- Pointer to factors
* @return 		status 		- Status of operation
*/
////////////////////////////////////////////////////////////////////////////////
xpt2046_status_t xpt2046_get_cal_factors(const int32_t * p_factors)
{
 800f854:	b580      	push	{r7, lr}
 800f856:	b084      	sub	sp, #16
 800f858:	af00      	add	r7, sp, #0
 800f85a:	6078      	str	r0, [r7, #4]
	xpt2046_status_t status = eXPT2046_OK;
 800f85c:	2300      	movs	r3, #0
 800f85e:	73fb      	strb	r3, [r7, #15]

	if ( NULL != p_factors )
 800f860:	687b      	ldr	r3, [r7, #4]
 800f862:	2b00      	cmp	r3, #0
 800f864:	d005      	beq.n	800f872 <xpt2046_get_cal_factors+0x1e>
	{
		// Copy factors
		memcpy( (void*) p_factors, (void*) &g_cal_data.factors, sizeof( g_cal_data.factors ));
 800f866:	221c      	movs	r2, #28
 800f868:	4905      	ldr	r1, [pc, #20]	; (800f880 <xpt2046_get_cal_factors+0x2c>)
 800f86a:	6878      	ldr	r0, [r7, #4]
 800f86c:	f005 fc1c 	bl	80150a8 <memcpy>
 800f870:	e001      	b.n	800f876 <xpt2046_get_cal_factors+0x22>
	}
	else
	{
		status = eXPT2046_ERROR;
 800f872:	2301      	movs	r3, #1
 800f874:	73fb      	strb	r3, [r7, #15]
	}

	return status;
 800f876:	7bfb      	ldrb	r3, [r7, #15]
}
 800f878:	4618      	mov	r0, r3
 800f87a:	3710      	adds	r7, #16
 800f87c:	46bd      	mov	sp, r7
 800f87e:	bd80      	pop	{r7, pc}
 800f880:	200000d0 	.word	0x200000d0

0800f884 <xpt2046_low_if_exchange>:
* @param[in]	p_adc_result 	- Pointer to measurement result
* @return 		status 			- Status of operation
*/
////////////////////////////////////////////////////////////////////////////////
xpt2046_status_t xpt2046_low_if_exchange(const xpt2046_addr_t addr, const xpt2046_pd_t pd_mode, const xpt2046_start_t start, uint16_t * const p_adc_result)
{
 800f884:	b580      	push	{r7, lr}
 800f886:	b088      	sub	sp, #32
 800f888:	af00      	add	r7, sp, #0
 800f88a:	603b      	str	r3, [r7, #0]
 800f88c:	4603      	mov	r3, r0
 800f88e:	71fb      	strb	r3, [r7, #7]
 800f890:	460b      	mov	r3, r1
 800f892:	71bb      	strb	r3, [r7, #6]
 800f894:	4613      	mov	r3, r2
 800f896:	717b      	strb	r3, [r7, #5]
	xpt2046_status_t status = eXPT2046_OK;
 800f898:	2300      	movs	r3, #0
 800f89a:	77fb      	strb	r3, [r7, #31]
	uint8_t rx_data[3];
	uint8_t tx_data[3];
	uint16_t rx_data_w;

	// Assemble frame
	control.U = 0;
 800f89c:	2300      	movs	r3, #0
 800f89e:	773b      	strb	r3, [r7, #28]
	control.bits.source 	= start;
 800f8a0:	797b      	ldrb	r3, [r7, #5]
 800f8a2:	f003 0301 	and.w	r3, r3, #1
 800f8a6:	b2da      	uxtb	r2, r3
 800f8a8:	7f3b      	ldrb	r3, [r7, #28]
 800f8aa:	f362 13c7 	bfi	r3, r2, #7, #1
 800f8ae:	773b      	strb	r3, [r7, #28]
	control.bits.addr 		= addr;
 800f8b0:	79fb      	ldrb	r3, [r7, #7]
 800f8b2:	f003 0307 	and.w	r3, r3, #7
 800f8b6:	b2da      	uxtb	r2, r3
 800f8b8:	7f3b      	ldrb	r3, [r7, #28]
 800f8ba:	f362 1306 	bfi	r3, r2, #4, #3
 800f8be:	773b      	strb	r3, [r7, #28]
	control.bits.mode 		= XPT2046_ADC_RESOLUTION;
 800f8c0:	7f3b      	ldrb	r3, [r7, #28]
 800f8c2:	f36f 03c3 	bfc	r3, #3, #1
 800f8c6:	773b      	strb	r3, [r7, #28]
	control.bits.ser_dfr 	= XPT2046_REF_MODE;
 800f8c8:	7f3b      	ldrb	r3, [r7, #28]
 800f8ca:	f36f 0382 	bfc	r3, #2, #1
 800f8ce:	773b      	strb	r3, [r7, #28]
	control.bits.pd			= pd_mode;
 800f8d0:	79bb      	ldrb	r3, [r7, #6]
 800f8d2:	f003 0303 	and.w	r3, r3, #3
 800f8d6:	b2da      	uxtb	r2, r3
 800f8d8:	7f3b      	ldrb	r3, [r7, #28]
 800f8da:	f362 0301 	bfi	r3, r2, #0, #2
 800f8de:	773b      	strb	r3, [r7, #28]

	// Copy assemble frame
	tx_data[0] = control.U;
 800f8e0:	7f3b      	ldrb	r3, [r7, #28]
 800f8e2:	743b      	strb	r3, [r7, #16]

	// Interface with the device
	status = xpt2046_if_spi_transmit_receive((uint8_t*) &tx_data, (uint8_t*) &rx_data, 3U, ( eSPI_CS_LOW_ON_ENTRY | eSPI_CS_HIGH_ON_EXIT ));
 800f8e4:	f107 0114 	add.w	r1, r7, #20
 800f8e8:	f107 0010 	add.w	r0, r7, #16
 800f8ec:	2303      	movs	r3, #3
 800f8ee:	2203      	movs	r2, #3
 800f8f0:	f000 f83a 	bl	800f968 <xpt2046_if_spi_transmit_receive>
 800f8f4:	4603      	mov	r3, r0
 800f8f6:	77fb      	strb	r3, [r7, #31]

	if ( eXPT2046_OK == status )
 800f8f8:	7ffb      	ldrb	r3, [r7, #31]
 800f8fa:	2b00      	cmp	r3, #0
 800f8fc:	d111      	bne.n	800f922 <xpt2046_low_if_exchange+0x9e>
	{
		// NOTE: Big endian
		rx_data_w = ( rx_data[1] << 8 ) | ( rx_data[2] );
 800f8fe:	7d7b      	ldrb	r3, [r7, #21]
 800f900:	021b      	lsls	r3, r3, #8
 800f902:	b21a      	sxth	r2, r3
 800f904:	7dbb      	ldrb	r3, [r7, #22]
 800f906:	b21b      	sxth	r3, r3
 800f908:	4313      	orrs	r3, r2
 800f90a:	b21b      	sxth	r3, r3
 800f90c:	b29b      	uxth	r3, r3
 800f90e:	81fb      	strh	r3, [r7, #14]
 800f910:	89fb      	ldrh	r3, [r7, #14]

		// Parse received frame
		memcpy( &result.U, &rx_data_w, 2U );
 800f912:	833b      	strh	r3, [r7, #24]

		// Set result
		*p_adc_result = result.bits.adc_result;
 800f914:	8b3b      	ldrh	r3, [r7, #24]
 800f916:	f3c3 03cb 	ubfx	r3, r3, #3, #12
 800f91a:	b29b      	uxth	r3, r3
 800f91c:	461a      	mov	r2, r3
 800f91e:	683b      	ldr	r3, [r7, #0]
 800f920:	801a      	strh	r2, [r3, #0]
	}

	return status;
 800f922:	7ffb      	ldrb	r3, [r7, #31]
}
 800f924:	4618      	mov	r0, r3
 800f926:	3720      	adds	r7, #32
 800f928:	46bd      	mov	sp, r7
 800f92a:	bd80      	pop	{r7, pc}

0800f92c <xpt2046_low_if_get_int>:
*
* @return 		touch_int - Status of touch interrupt
*/
////////////////////////////////////////////////////////////////////////////////
xpt2046_int_t xpt2046_low_if_get_int(void)
{
 800f92c:	b580      	push	{r7, lr}
 800f92e:	b082      	sub	sp, #8
 800f930:	af00      	add	r7, sp, #0
	xpt2046_int_t touch_int;

	if ( true == xpt2046_if_get_int())
 800f932:	f000 f834 	bl	800f99e <xpt2046_if_get_int>
 800f936:	4603      	mov	r3, r0
 800f938:	2b00      	cmp	r3, #0
 800f93a:	d002      	beq.n	800f942 <xpt2046_low_if_get_int+0x16>
	{
		touch_int = eXPT2046_INT_ON;
 800f93c:	2300      	movs	r3, #0
 800f93e:	71fb      	strb	r3, [r7, #7]
 800f940:	e001      	b.n	800f946 <xpt2046_low_if_get_int+0x1a>
	}
	else
	{
		touch_int = eXPT2046_INT_OFF;
 800f942:	2301      	movs	r3, #1
 800f944:	71fb      	strb	r3, [r7, #7]
	}

	return touch_int;
 800f946:	79fb      	ldrb	r3, [r7, #7]
}
 800f948:	4618      	mov	r0, r3
 800f94a:	3708      	adds	r7, #8
 800f94c:	46bd      	mov	sp, r7
 800f94e:	bd80      	pop	{r7, pc}

0800f950 <xpt2046_if_init>:
*
* @return 		status - Status of initialization
*/
////////////////////////////////////////////////////////////////////////////////
xpt2046_status_t xpt2046_if_init(void)
{
 800f950:	b480      	push	{r7}
 800f952:	b083      	sub	sp, #12
 800f954:	af00      	add	r7, sp, #0
	xpt2046_status_t status = eXPT2046_OK;
 800f956:	2300      	movs	r3, #0
 800f958:	71fb      	strb	r3, [r7, #7]

	// Left empty as periphery is initialize elsewhere...

	// USER CODE END...

	return status;
 800f95a:	79fb      	ldrb	r3, [r7, #7]
}
 800f95c:	4618      	mov	r0, r3
 800f95e:	370c      	adds	r7, #12
 800f960:	46bd      	mov	sp, r7
 800f962:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f966:	4770      	bx	lr

0800f968 <xpt2046_if_spi_transmit_receive>:
* @param[in]	cs_action	- Action of CS line
* @return 		status 		- Status of operation
*/
////////////////////////////////////////////////////////////////////////////////
xpt2046_status_t xpt2046_if_spi_transmit_receive(const uint8_t * p_tx, uint8_t * const p_rx, const uint32_t size, const spi_cs_action_t cs_action)
{
 800f968:	b580      	push	{r7, lr}
 800f96a:	b088      	sub	sp, #32
 800f96c:	af02      	add	r7, sp, #8
 800f96e:	60f8      	str	r0, [r7, #12]
 800f970:	60b9      	str	r1, [r7, #8]
 800f972:	607a      	str	r2, [r7, #4]
 800f974:	70fb      	strb	r3, [r7, #3]
	xpt2046_status_t status = eXPT2046_OK;
 800f976:	2300      	movs	r3, #0
 800f978:	75fb      	strb	r3, [r7, #23]

	// USER CODE BEGIN...

	if ( eSPI_OK != spi_2_transmit_receive( eSPI2_CH_TOUCH, (uint8_t*) p_tx, (uint8_t*) p_rx, size, ( eSPI_CS_LOW_ON_ENTRY | eSPI_CS_HIGH_ON_EXIT )))
 800f97a:	2303      	movs	r3, #3
 800f97c:	9300      	str	r3, [sp, #0]
 800f97e:	687b      	ldr	r3, [r7, #4]
 800f980:	68ba      	ldr	r2, [r7, #8]
 800f982:	68f9      	ldr	r1, [r7, #12]
 800f984:	2001      	movs	r0, #1
 800f986:	f001 fb69 	bl	801105c <spi_2_transmit_receive>
 800f98a:	4603      	mov	r3, r0
 800f98c:	2b00      	cmp	r3, #0
 800f98e:	d001      	beq.n	800f994 <xpt2046_if_spi_transmit_receive+0x2c>
	{
		status = eXPT2046_ERROR;
 800f990:	2301      	movs	r3, #1
 800f992:	75fb      	strb	r3, [r7, #23]
	}

	// USER CODE END...

	return status;
 800f994:	7dfb      	ldrb	r3, [r7, #23]
}
 800f996:	4618      	mov	r0, r3
 800f998:	3718      	adds	r7, #24
 800f99a:	46bd      	mov	sp, r7
 800f99c:	bd80      	pop	{r7, pc}

0800f99e <xpt2046_if_get_int>:
*
* @return 	int_state - True if touch detected
*/
////////////////////////////////////////////////////////////////////////////////
bool xpt2046_if_get_int(void)
{
 800f99e:	b580      	push	{r7, lr}
 800f9a0:	b082      	sub	sp, #8
 800f9a2:	af00      	add	r7, sp, #0
	bool touch_int = false;
 800f9a4:	2300      	movs	r3, #0
 800f9a6:	71fb      	strb	r3, [r7, #7]

	// USER CODE BEGIN...

	// NOTE: HW inverter used!
	if ( eGPIO_HIGH == gpio_get( eGPIO_T_IRQ ))
 800f9a8:	2009      	movs	r0, #9
 800f9aa:	f000 fe61 	bl	8010670 <gpio_get>
 800f9ae:	4603      	mov	r3, r0
 800f9b0:	2b01      	cmp	r3, #1
 800f9b2:	d101      	bne.n	800f9b8 <xpt2046_if_get_int+0x1a>
	{
		touch_int = true;
 800f9b4:	2301      	movs	r3, #1
 800f9b6:	71fb      	strb	r3, [r7, #7]
	}

	// USER CODE END...

	return touch_int;
 800f9b8:	79fb      	ldrb	r3, [r7, #7]
}
 800f9ba:	4618      	mov	r0, r3
 800f9bc:	3708      	adds	r7, #8
 800f9be:	46bd      	mov	sp, r7
 800f9c0:	bd80      	pop	{r7, pc}
	...

0800f9c4 <button_hndl>:
*
* @return   void
*/
////////////////////////////////////////////////////////////////////////////////
void button_hndl(void)
{
 800f9c4:	b580      	push	{r7, lr}
 800f9c6:	b082      	sub	sp, #8
 800f9c8:	af00      	add	r7, sp, #0
    static button_state_t   btn_state_prev  = eBUTTON_OFF;
    button_state_t          btn_state       = eBUTTON_OFF;
 800f9ca:	2301      	movs	r3, #1
 800f9cc:	71fb      	strb	r3, [r7, #7]

    // Get current button state
    btn_state = button_get_state();
 800f9ce:	f000 f819 	bl	800fa04 <button_get_state>
 800f9d2:	4603      	mov	r3, r0
 800f9d4:	71fb      	strb	r3, [r7, #7]

    // Button state changed
    if ( btn_state != btn_state_prev )
 800f9d6:	4b0a      	ldr	r3, [pc, #40]	; (800fa00 <button_hndl+0x3c>)
 800f9d8:	781b      	ldrb	r3, [r3, #0]
 800f9da:	79fa      	ldrb	r2, [r7, #7]
 800f9dc:	429a      	cmp	r2, r3
 800f9de:	d007      	beq.n	800f9f0 <button_hndl+0x2c>
    {
        // Button pressed
        if ( eBUTTON_ON == btn_state )
 800f9e0:	79fb      	ldrb	r3, [r7, #7]
 800f9e2:	2b00      	cmp	r3, #0
 800f9e4:	d102      	bne.n	800f9ec <button_hndl+0x28>
        {
            button_pressed_callback();
 800f9e6:	f7fb fb19 	bl	800b01c <button_pressed_callback>
 800f9ea:	e001      	b.n	800f9f0 <button_hndl+0x2c>
        }

        // Button release
        else
        {
            button_release_callback();
 800f9ec:	f7fb fb5c 	bl	800b0a8 <button_release_callback>
        }
    }

    // Store state
    btn_state_prev = btn_state;
 800f9f0:	4a03      	ldr	r2, [pc, #12]	; (800fa00 <button_hndl+0x3c>)
 800f9f2:	79fb      	ldrb	r3, [r7, #7]
 800f9f4:	7013      	strb	r3, [r2, #0]
}
 800f9f6:	bf00      	nop
 800f9f8:	3708      	adds	r7, #8
 800f9fa:	46bd      	mov	sp, r7
 800f9fc:	bd80      	pop	{r7, pc}
 800f9fe:	bf00      	nop
 800fa00:	200000fc 	.word	0x200000fc

0800fa04 <button_get_state>:
*
* @return   btn_state   - Either OFF or ON
*/
////////////////////////////////////////////////////////////////////////////////
button_state_t button_get_state(void)
{
 800fa04:	b580      	push	{r7, lr}
 800fa06:	b082      	sub	sp, #8
 800fa08:	af00      	add	r7, sp, #0
    button_state_t  btn_state   = eBUTTON_OFF;
 800fa0a:	2301      	movs	r3, #1
 800fa0c:	71fb      	strb	r3, [r7, #7]
    gpio_state_t    gpio_state  = eGPIO_UKNOWN;
 800fa0e:	2302      	movs	r3, #2
 800fa10:	71bb      	strb	r3, [r7, #6]

    // Get GPIO state
    gpio_state = gpio_get( eGPIO_USER_BTN );
 800fa12:	200d      	movs	r0, #13
 800fa14:	f000 fe2c 	bl	8010670 <gpio_get>
 800fa18:	4603      	mov	r3, r0
 800fa1a:	71bb      	strb	r3, [r7, #6]

    if ( eGPIO_HIGH == gpio_state )
 800fa1c:	79bb      	ldrb	r3, [r7, #6]
 800fa1e:	2b01      	cmp	r3, #1
 800fa20:	d102      	bne.n	800fa28 <button_get_state+0x24>
    {
        btn_state = eBUTTON_ON;
 800fa22:	2300      	movs	r3, #0
 800fa24:	71fb      	strb	r3, [r7, #7]
 800fa26:	e001      	b.n	800fa2c <button_get_state+0x28>
    }
    else
    {
        btn_state = eBUTTON_OFF;
 800fa28:	2301      	movs	r3, #1
 800fa2a:	71fb      	strb	r3, [r7, #7]
    }

    return btn_state;
 800fa2c:	79fb      	ldrb	r3, [r7, #7]
}
 800fa2e:	4618      	mov	r0, r3
 800fa30:	3708      	adds	r7, #8
 800fa32:	46bd      	mov	sp, r7
 800fa34:	bd80      	pop	{r7, pc}

0800fa36 <led_init>:
*
* @return   void
*/
////////////////////////////////////////////////////////////////////////////////
void led_init(void)
{
 800fa36:	b580      	push	{r7, lr}
 800fa38:	af00      	add	r7, sp, #0
    // Turn both LEDs off
    led_set( eLED_RED, eLED_OFF );
 800fa3a:	2100      	movs	r1, #0
 800fa3c:	2000      	movs	r0, #0
 800fa3e:	f000 f869 	bl	800fb14 <led_set>
    led_set( eLED_GREEN, eLED_OFF );
 800fa42:	2100      	movs	r1, #0
 800fa44:	2001      	movs	r0, #1
 800fa46:	f000 f865 	bl	800fb14 <led_set>
}
 800fa4a:	bf00      	nop
 800fa4c:	bd80      	pop	{r7, pc}
	...

0800fa50 <led_hndl>:
*
* @return   void
*/
////////////////////////////////////////////////////////////////////////////////
void led_hndl(void)
{
 800fa50:	b580      	push	{r7, lr}
 800fa52:	b082      	sub	sp, #8
 800fa54:	af00      	add	r7, sp, #0
	// Loop through all LEDs
	for ( uint8_t i = 0; i < eLED_NUM_OF; i++ )
 800fa56:	2300      	movs	r3, #0
 800fa58:	71fb      	strb	r3, [r7, #7]
 800fa5a:	e051      	b.n	800fb00 <led_hndl+0xb0>
	{
		switch( g_led[i].mode )
 800fa5c:	79fa      	ldrb	r2, [r7, #7]
 800fa5e:	492c      	ldr	r1, [pc, #176]	; (800fb10 <led_hndl+0xc0>)
 800fa60:	4613      	mov	r3, r2
 800fa62:	005b      	lsls	r3, r3, #1
 800fa64:	4413      	add	r3, r2
 800fa66:	00db      	lsls	r3, r3, #3
 800fa68:	440b      	add	r3, r1
 800fa6a:	3315      	adds	r3, #21
 800fa6c:	781b      	ldrb	r3, [r3, #0]
 800fa6e:	2b05      	cmp	r3, #5
 800fa70:	d824      	bhi.n	800fabc <led_hndl+0x6c>
 800fa72:	a201      	add	r2, pc, #4	; (adr r2, 800fa78 <led_hndl+0x28>)
 800fa74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fa78:	0800fac3 	.word	0x0800fac3
 800fa7c:	0800fa91 	.word	0x0800fa91
 800fa80:	0800fa9d 	.word	0x0800fa9d
 800fa84:	0800fabd 	.word	0x0800fabd
 800fa88:	0800faa9 	.word	0x0800faa9
 800fa8c:	0800fab3 	.word	0x0800fab3
			case eLED_MODE_NORMAL:
				// No action...
				break;

			case eLED_MODE_FADE_IN:
				led_fade_in_hndl( i, eLED_MODE_NORMAL );
 800fa90:	79fb      	ldrb	r3, [r7, #7]
 800fa92:	2100      	movs	r1, #0
 800fa94:	4618      	mov	r0, r3
 800fa96:	f000 f8e3 	bl	800fc60 <led_fade_in_hndl>
				break;
 800fa9a:	e013      	b.n	800fac4 <led_hndl+0x74>

			case eLED_MODE_FADE_OUT:
				led_fade_out_hndl( i, eLED_MODE_NORMAL );
 800fa9c:	79fb      	ldrb	r3, [r7, #7]
 800fa9e:	2100      	movs	r1, #0
 800faa0:	4618      	mov	r0, r3
 800faa2:	f000 f995 	bl	800fdd0 <led_fade_out_hndl>
				break;
 800faa6:	e00d      	b.n	800fac4 <led_hndl+0x74>

			case eLED_MODE_BLINK:
				led_blink_hndl( i );
 800faa8:	79fb      	ldrb	r3, [r7, #7]
 800faaa:	4618      	mov	r0, r3
 800faac:	f000 fa46 	bl	800ff3c <led_blink_hndl>
				break;
 800fab0:	e008      	b.n	800fac4 <led_hndl+0x74>

			case eLED_MODE_FADE_BLINK:
				led_fade_blink_hndl( i );
 800fab2:	79fb      	ldrb	r3, [r7, #7]
 800fab4:	4618      	mov	r0, r3
 800fab6:	f000 fa6d 	bl	800ff94 <led_fade_blink_hndl>
				break;
 800faba:	e003      	b.n	800fac4 <led_hndl+0x74>

			default:
				PROJECT_CONFIG_ASSERT( 0 );
 800fabc:	f005 fa96 	bl	8014fec <project_config_assert_fail>
				break;
 800fac0:	e000      	b.n	800fac4 <led_hndl+0x74>
				break;
 800fac2:	bf00      	nop
		}

		// Setup timer
		timer_set_pwm( g_led[i].tim_ch, g_led[i].duty );
 800fac4:	79fa      	ldrb	r2, [r7, #7]
 800fac6:	4912      	ldr	r1, [pc, #72]	; (800fb10 <led_hndl+0xc0>)
 800fac8:	4613      	mov	r3, r2
 800faca:	005b      	lsls	r3, r3, #1
 800facc:	4413      	add	r3, r2
 800face:	00db      	lsls	r3, r3, #3
 800fad0:	440b      	add	r3, r1
 800fad2:	3314      	adds	r3, #20
 800fad4:	7819      	ldrb	r1, [r3, #0]
 800fad6:	79fa      	ldrb	r2, [r7, #7]
 800fad8:	480d      	ldr	r0, [pc, #52]	; (800fb10 <led_hndl+0xc0>)
 800fada:	4613      	mov	r3, r2
 800fadc:	005b      	lsls	r3, r3, #1
 800fade:	4413      	add	r3, r2
 800fae0:	00db      	lsls	r3, r3, #3
 800fae2:	4403      	add	r3, r0
 800fae4:	edd3 7a00 	vldr	s15, [r3]
 800fae8:	eeb0 0a67 	vmov.f32	s0, s15
 800faec:	4608      	mov	r0, r1
 800faee:	f001 fe4f 	bl	8011790 <timer_set_pwm>

		// Manage period time
		led_hndl_period_time( i );
 800faf2:	79fb      	ldrb	r3, [r7, #7]
 800faf4:	4618      	mov	r0, r3
 800faf6:	f000 fa6f 	bl	800ffd8 <led_hndl_period_time>
	for ( uint8_t i = 0; i < eLED_NUM_OF; i++ )
 800fafa:	79fb      	ldrb	r3, [r7, #7]
 800fafc:	3301      	adds	r3, #1
 800fafe:	71fb      	strb	r3, [r7, #7]
 800fb00:	79fb      	ldrb	r3, [r7, #7]
 800fb02:	2b01      	cmp	r3, #1
 800fb04:	d9aa      	bls.n	800fa5c <led_hndl+0xc>
	}
}
 800fb06:	bf00      	nop
 800fb08:	bf00      	nop
 800fb0a:	3708      	adds	r7, #8
 800fb0c:	46bd      	mov	sp, r7
 800fb0e:	bd80      	pop	{r7, pc}
 800fb10:	20000100 	.word	0x20000100

0800fb14 <led_set>:
*
* @return   void
*/
////////////////////////////////////////////////////////////////////////////////
void led_set(const led_num_t num, const led_state_t state)
{
 800fb14:	b480      	push	{r7}
 800fb16:	b083      	sub	sp, #12
 800fb18:	af00      	add	r7, sp, #0
 800fb1a:	4603      	mov	r3, r0
 800fb1c:	460a      	mov	r2, r1
 800fb1e:	71fb      	strb	r3, [r7, #7]
 800fb20:	4613      	mov	r3, r2
 800fb22:	71bb      	strb	r3, [r7, #6]
	if ( num < eLED_NUM_OF )
 800fb24:	79fb      	ldrb	r3, [r7, #7]
 800fb26:	2b01      	cmp	r3, #1
 800fb28:	d821      	bhi.n	800fb6e <led_set+0x5a>
	{
		g_led[num].mode = eLED_MODE_NORMAL;
 800fb2a:	79fa      	ldrb	r2, [r7, #7]
 800fb2c:	4913      	ldr	r1, [pc, #76]	; (800fb7c <led_set+0x68>)
 800fb2e:	4613      	mov	r3, r2
 800fb30:	005b      	lsls	r3, r3, #1
 800fb32:	4413      	add	r3, r2
 800fb34:	00db      	lsls	r3, r3, #3
 800fb36:	440b      	add	r3, r1
 800fb38:	3315      	adds	r3, #21
 800fb3a:	2200      	movs	r2, #0
 800fb3c:	701a      	strb	r2, [r3, #0]

		if ( eLED_ON == state )
 800fb3e:	79bb      	ldrb	r3, [r7, #6]
 800fb40:	2b01      	cmp	r3, #1
 800fb42:	d10a      	bne.n	800fb5a <led_set+0x46>
		{
			g_led[num].duty = 1.0f;
 800fb44:	79fa      	ldrb	r2, [r7, #7]
 800fb46:	490d      	ldr	r1, [pc, #52]	; (800fb7c <led_set+0x68>)
 800fb48:	4613      	mov	r3, r2
 800fb4a:	005b      	lsls	r3, r3, #1
 800fb4c:	4413      	add	r3, r2
 800fb4e:	00db      	lsls	r3, r3, #3
 800fb50:	440b      	add	r3, r1
 800fb52:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800fb56:	601a      	str	r2, [r3, #0]
		else
		{
			g_led[num].duty = 0.0f;
		}
	}
}
 800fb58:	e009      	b.n	800fb6e <led_set+0x5a>
			g_led[num].duty = 0.0f;
 800fb5a:	79fa      	ldrb	r2, [r7, #7]
 800fb5c:	4907      	ldr	r1, [pc, #28]	; (800fb7c <led_set+0x68>)
 800fb5e:	4613      	mov	r3, r2
 800fb60:	005b      	lsls	r3, r3, #1
 800fb62:	4413      	add	r3, r2
 800fb64:	00db      	lsls	r3, r3, #3
 800fb66:	440b      	add	r3, r1
 800fb68:	f04f 0200 	mov.w	r2, #0
 800fb6c:	601a      	str	r2, [r3, #0]
}
 800fb6e:	bf00      	nop
 800fb70:	370c      	adds	r7, #12
 800fb72:	46bd      	mov	sp, r7
 800fb74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb78:	4770      	bx	lr
 800fb7a:	bf00      	nop
 800fb7c:	20000100 	.word	0x20000100

0800fb80 <led_blink_smooth>:
* @param[in]	period	- Period of blink
* @return   	void
*/
////////////////////////////////////////////////////////////////////////////////
void led_blink_smooth(const led_num_t num, const float32_t on_time, const float32_t period, const led_blink_t blink)
{
 800fb80:	b480      	push	{r7}
 800fb82:	b085      	sub	sp, #20
 800fb84:	af00      	add	r7, sp, #0
 800fb86:	4603      	mov	r3, r0
 800fb88:	ed87 0a02 	vstr	s0, [r7, #8]
 800fb8c:	edc7 0a01 	vstr	s1, [r7, #4]
 800fb90:	460a      	mov	r2, r1
 800fb92:	73fb      	strb	r3, [r7, #15]
 800fb94:	4613      	mov	r3, r2
 800fb96:	73bb      	strb	r3, [r7, #14]
	if 	(	( num < eLED_NUM_OF )
 800fb98:	7bfb      	ldrb	r3, [r7, #15]
 800fb9a:	2b01      	cmp	r3, #1
 800fb9c:	d855      	bhi.n	800fc4a <led_blink_smooth+0xca>
		&&	( on_time < period )
 800fb9e:	ed97 7a02 	vldr	s14, [r7, #8]
 800fba2:	edd7 7a01 	vldr	s15, [r7, #4]
 800fba6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800fbaa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fbae:	d400      	bmi.n	800fbb2 <led_blink_smooth+0x32>
		else
		{
			g_led[num].blink_cnt = (uint8_t) blink;
		}
	}
}
 800fbb0:	e04b      	b.n	800fc4a <led_blink_smooth+0xca>
		&&	( eLED_MODE_NORMAL == g_led[num].mode ))
 800fbb2:	7bfa      	ldrb	r2, [r7, #15]
 800fbb4:	4928      	ldr	r1, [pc, #160]	; (800fc58 <led_blink_smooth+0xd8>)
 800fbb6:	4613      	mov	r3, r2
 800fbb8:	005b      	lsls	r3, r3, #1
 800fbba:	4413      	add	r3, r2
 800fbbc:	00db      	lsls	r3, r3, #3
 800fbbe:	440b      	add	r3, r1
 800fbc0:	3315      	adds	r3, #21
 800fbc2:	781b      	ldrb	r3, [r3, #0]
 800fbc4:	2b00      	cmp	r3, #0
 800fbc6:	d140      	bne.n	800fc4a <led_blink_smooth+0xca>
		g_led[num].mode 	= eLED_MODE_FADE_BLINK;
 800fbc8:	7bfa      	ldrb	r2, [r7, #15]
 800fbca:	4923      	ldr	r1, [pc, #140]	; (800fc58 <led_blink_smooth+0xd8>)
 800fbcc:	4613      	mov	r3, r2
 800fbce:	005b      	lsls	r3, r3, #1
 800fbd0:	4413      	add	r3, r2
 800fbd2:	00db      	lsls	r3, r3, #3
 800fbd4:	440b      	add	r3, r1
 800fbd6:	3315      	adds	r3, #21
 800fbd8:	2205      	movs	r2, #5
 800fbda:	701a      	strb	r2, [r3, #0]
		g_led[num].on_time 	= on_time;
 800fbdc:	7bfa      	ldrb	r2, [r7, #15]
 800fbde:	491e      	ldr	r1, [pc, #120]	; (800fc58 <led_blink_smooth+0xd8>)
 800fbe0:	4613      	mov	r3, r2
 800fbe2:	005b      	lsls	r3, r3, #1
 800fbe4:	4413      	add	r3, r2
 800fbe6:	00db      	lsls	r3, r3, #3
 800fbe8:	440b      	add	r3, r1
 800fbea:	3310      	adds	r3, #16
 800fbec:	68ba      	ldr	r2, [r7, #8]
 800fbee:	601a      	str	r2, [r3, #0]
		g_led[num].period 	= period;
 800fbf0:	7bfa      	ldrb	r2, [r7, #15]
 800fbf2:	4919      	ldr	r1, [pc, #100]	; (800fc58 <led_blink_smooth+0xd8>)
 800fbf4:	4613      	mov	r3, r2
 800fbf6:	005b      	lsls	r3, r3, #1
 800fbf8:	4413      	add	r3, r2
 800fbfa:	00db      	lsls	r3, r3, #3
 800fbfc:	440b      	add	r3, r1
 800fbfe:	3308      	adds	r3, #8
 800fc00:	687a      	ldr	r2, [r7, #4]
 800fc02:	601a      	str	r2, [r3, #0]
		g_led[num].per_time = 0.0f;
 800fc04:	7bfa      	ldrb	r2, [r7, #15]
 800fc06:	4914      	ldr	r1, [pc, #80]	; (800fc58 <led_blink_smooth+0xd8>)
 800fc08:	4613      	mov	r3, r2
 800fc0a:	005b      	lsls	r3, r3, #1
 800fc0c:	4413      	add	r3, r2
 800fc0e:	00db      	lsls	r3, r3, #3
 800fc10:	440b      	add	r3, r1
 800fc12:	330c      	adds	r3, #12
 800fc14:	f04f 0200 	mov.w	r2, #0
 800fc18:	601a      	str	r2, [r3, #0]
		if ( eLED_BLINK_CONTINUOUS == blink )
 800fc1a:	7bbb      	ldrb	r3, [r7, #14]
 800fc1c:	2b05      	cmp	r3, #5
 800fc1e:	d10a      	bne.n	800fc36 <led_blink_smooth+0xb6>
			g_led[num].blink_cnt = LED_BLINK_CNT_CONT_VAL;
 800fc20:	7bfa      	ldrb	r2, [r7, #15]
 800fc22:	490d      	ldr	r1, [pc, #52]	; (800fc58 <led_blink_smooth+0xd8>)
 800fc24:	4613      	mov	r3, r2
 800fc26:	005b      	lsls	r3, r3, #1
 800fc28:	4413      	add	r3, r2
 800fc2a:	00db      	lsls	r3, r3, #3
 800fc2c:	440b      	add	r3, r1
 800fc2e:	3316      	adds	r3, #22
 800fc30:	22ff      	movs	r2, #255	; 0xff
 800fc32:	701a      	strb	r2, [r3, #0]
}
 800fc34:	e009      	b.n	800fc4a <led_blink_smooth+0xca>
			g_led[num].blink_cnt = (uint8_t) blink;
 800fc36:	7bfa      	ldrb	r2, [r7, #15]
 800fc38:	4907      	ldr	r1, [pc, #28]	; (800fc58 <led_blink_smooth+0xd8>)
 800fc3a:	4613      	mov	r3, r2
 800fc3c:	005b      	lsls	r3, r3, #1
 800fc3e:	4413      	add	r3, r2
 800fc40:	00db      	lsls	r3, r3, #3
 800fc42:	440b      	add	r3, r1
 800fc44:	3316      	adds	r3, #22
 800fc46:	7bba      	ldrb	r2, [r7, #14]
 800fc48:	701a      	strb	r2, [r3, #0]
}
 800fc4a:	bf00      	nop
 800fc4c:	3714      	adds	r7, #20
 800fc4e:	46bd      	mov	sp, r7
 800fc50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc54:	4770      	bx	lr
 800fc56:	bf00      	nop
 800fc58:	20000100 	.word	0x20000100
 800fc5c:	00000000 	.word	0x00000000

0800fc60 <led_fade_in_hndl>:
* @param[in]	exit_mode	- Mode to transition on exit
* @return   	void
*/
////////////////////////////////////////////////////////////////////////////////
static void led_fade_in_hndl(const led_num_t num, const led_mode_t exit_mode)
{
 800fc60:	b590      	push	{r4, r7, lr}
 800fc62:	b083      	sub	sp, #12
 800fc64:	af00      	add	r7, sp, #0
 800fc66:	4603      	mov	r3, r0
 800fc68:	460a      	mov	r2, r1
 800fc6a:	71fb      	strb	r3, [r7, #7]
 800fc6c:	4613      	mov	r3, r2
 800fc6e:	71bb      	strb	r3, [r7, #6]
	// Decrease duty by the square function
	g_led[num].duty += LED_FADE_IN_COEF_T_TO_DUTY * g_led[num].fade_time * (float32_t) LED_HNDL_PERIOD_S;
 800fc70:	79fa      	ldrb	r2, [r7, #7]
 800fc72:	4951      	ldr	r1, [pc, #324]	; (800fdb8 <led_fade_in_hndl+0x158>)
 800fc74:	4613      	mov	r3, r2
 800fc76:	005b      	lsls	r3, r3, #1
 800fc78:	4413      	add	r3, r2
 800fc7a:	00db      	lsls	r3, r3, #3
 800fc7c:	440b      	add	r3, r1
 800fc7e:	ed93 7a00 	vldr	s14, [r3]
 800fc82:	79fa      	ldrb	r2, [r7, #7]
 800fc84:	494c      	ldr	r1, [pc, #304]	; (800fdb8 <led_fade_in_hndl+0x158>)
 800fc86:	4613      	mov	r3, r2
 800fc88:	005b      	lsls	r3, r3, #1
 800fc8a:	4413      	add	r3, r2
 800fc8c:	00db      	lsls	r3, r3, #3
 800fc8e:	440b      	add	r3, r1
 800fc90:	3304      	adds	r3, #4
 800fc92:	edd3 7a00 	vldr	s15, [r3]
 800fc96:	eddf 6a49 	vldr	s13, [pc, #292]	; 800fdbc <led_fade_in_hndl+0x15c>
 800fc9a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800fc9e:	eddf 6a48 	vldr	s13, [pc, #288]	; 800fdc0 <led_fade_in_hndl+0x160>
 800fca2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800fca6:	79fa      	ldrb	r2, [r7, #7]
 800fca8:	ee77 7a27 	vadd.f32	s15, s14, s15
 800fcac:	4942      	ldr	r1, [pc, #264]	; (800fdb8 <led_fade_in_hndl+0x158>)
 800fcae:	4613      	mov	r3, r2
 800fcb0:	005b      	lsls	r3, r3, #1
 800fcb2:	4413      	add	r3, r2
 800fcb4:	00db      	lsls	r3, r3, #3
 800fcb6:	440b      	add	r3, r1
 800fcb8:	edc3 7a00 	vstr	s15, [r3]

	// Is LED fully ON?
	if ( g_led[num].duty < 1.0f )
 800fcbc:	79fa      	ldrb	r2, [r7, #7]
 800fcbe:	493e      	ldr	r1, [pc, #248]	; (800fdb8 <led_fade_in_hndl+0x158>)
 800fcc0:	4613      	mov	r3, r2
 800fcc2:	005b      	lsls	r3, r3, #1
 800fcc4:	4413      	add	r3, r2
 800fcc6:	00db      	lsls	r3, r3, #3
 800fcc8:	440b      	add	r3, r1
 800fcca:	edd3 7a00 	vldr	s15, [r3]
 800fcce:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800fcd2:	eef4 7ac7 	vcmpe.f32	s15, s14
 800fcd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fcda:	d546      	bpl.n	800fd6a <led_fade_in_hndl+0x10a>
	{
		// Increment time
		g_led[num].fade_time += LED_HNDL_PERIOD_S;
 800fcdc:	79fa      	ldrb	r2, [r7, #7]
 800fcde:	4936      	ldr	r1, [pc, #216]	; (800fdb8 <led_fade_in_hndl+0x158>)
 800fce0:	4613      	mov	r3, r2
 800fce2:	005b      	lsls	r3, r3, #1
 800fce4:	4413      	add	r3, r2
 800fce6:	00db      	lsls	r3, r3, #3
 800fce8:	440b      	add	r3, r1
 800fcea:	3304      	adds	r3, #4
 800fcec:	681b      	ldr	r3, [r3, #0]
 800fcee:	4618      	mov	r0, r3
 800fcf0:	f7f0 fc5a 	bl	80005a8 <__aeabi_f2d>
 800fcf4:	a32e      	add	r3, pc, #184	; (adr r3, 800fdb0 <led_fade_in_hndl+0x150>)
 800fcf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fcfa:	f7f0 faf7 	bl	80002ec <__adddf3>
 800fcfe:	4602      	mov	r2, r0
 800fd00:	460b      	mov	r3, r1
 800fd02:	79fc      	ldrb	r4, [r7, #7]
 800fd04:	4610      	mov	r0, r2
 800fd06:	4619      	mov	r1, r3
 800fd08:	f7f0 ff9e 	bl	8000c48 <__aeabi_d2f>
 800fd0c:	4602      	mov	r2, r0
 800fd0e:	492a      	ldr	r1, [pc, #168]	; (800fdb8 <led_fade_in_hndl+0x158>)
 800fd10:	4623      	mov	r3, r4
 800fd12:	005b      	lsls	r3, r3, #1
 800fd14:	4423      	add	r3, r4
 800fd16:	00db      	lsls	r3, r3, #3
 800fd18:	440b      	add	r3, r1
 800fd1a:	3304      	adds	r3, #4
 800fd1c:	601a      	str	r2, [r3, #0]
		g_led[num].fade_time = LED_TIME_LIM( g_led[num].fade_time );
 800fd1e:	79fa      	ldrb	r2, [r7, #7]
 800fd20:	4925      	ldr	r1, [pc, #148]	; (800fdb8 <led_fade_in_hndl+0x158>)
 800fd22:	4613      	mov	r3, r2
 800fd24:	005b      	lsls	r3, r3, #1
 800fd26:	4413      	add	r3, r2
 800fd28:	00db      	lsls	r3, r3, #3
 800fd2a:	440b      	add	r3, r1
 800fd2c:	3304      	adds	r3, #4
 800fd2e:	edd3 7a00 	vldr	s15, [r3]
 800fd32:	ed9f 7a24 	vldr	s14, [pc, #144]	; 800fdc4 <led_fade_in_hndl+0x164>
 800fd36:	eef4 7ac7 	vcmpe.f32	s15, s14
 800fd3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fd3e:	dd01      	ble.n	800fd44 <led_fade_in_hndl+0xe4>
 800fd40:	4a21      	ldr	r2, [pc, #132]	; (800fdc8 <led_fade_in_hndl+0x168>)
 800fd42:	e008      	b.n	800fd56 <led_fade_in_hndl+0xf6>
 800fd44:	79fa      	ldrb	r2, [r7, #7]
 800fd46:	491c      	ldr	r1, [pc, #112]	; (800fdb8 <led_fade_in_hndl+0x158>)
 800fd48:	4613      	mov	r3, r2
 800fd4a:	005b      	lsls	r3, r3, #1
 800fd4c:	4413      	add	r3, r2
 800fd4e:	00db      	lsls	r3, r3, #3
 800fd50:	440b      	add	r3, r1
 800fd52:	3304      	adds	r3, #4
 800fd54:	681a      	ldr	r2, [r3, #0]
 800fd56:	79f9      	ldrb	r1, [r7, #7]
 800fd58:	4817      	ldr	r0, [pc, #92]	; (800fdb8 <led_fade_in_hndl+0x158>)
 800fd5a:	460b      	mov	r3, r1
 800fd5c:	005b      	lsls	r3, r3, #1
 800fd5e:	440b      	add	r3, r1
 800fd60:	00db      	lsls	r3, r3, #3
 800fd62:	4403      	add	r3, r0
 800fd64:	3304      	adds	r3, #4
 800fd66:	601a      	str	r2, [r3, #0]
		g_led[num].fade_time = 0.0f;

		// Goto NORMAL mode
		g_led[num].mode = exit_mode;
	}
}
 800fd68:	e01e      	b.n	800fda8 <led_fade_in_hndl+0x148>
		g_led[num].duty = 1.0f;
 800fd6a:	79fa      	ldrb	r2, [r7, #7]
 800fd6c:	4912      	ldr	r1, [pc, #72]	; (800fdb8 <led_fade_in_hndl+0x158>)
 800fd6e:	4613      	mov	r3, r2
 800fd70:	005b      	lsls	r3, r3, #1
 800fd72:	4413      	add	r3, r2
 800fd74:	00db      	lsls	r3, r3, #3
 800fd76:	440b      	add	r3, r1
 800fd78:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800fd7c:	601a      	str	r2, [r3, #0]
		g_led[num].fade_time = 0.0f;
 800fd7e:	79fa      	ldrb	r2, [r7, #7]
 800fd80:	490d      	ldr	r1, [pc, #52]	; (800fdb8 <led_fade_in_hndl+0x158>)
 800fd82:	4613      	mov	r3, r2
 800fd84:	005b      	lsls	r3, r3, #1
 800fd86:	4413      	add	r3, r2
 800fd88:	00db      	lsls	r3, r3, #3
 800fd8a:	440b      	add	r3, r1
 800fd8c:	3304      	adds	r3, #4
 800fd8e:	f04f 0200 	mov.w	r2, #0
 800fd92:	601a      	str	r2, [r3, #0]
		g_led[num].mode = exit_mode;
 800fd94:	79fa      	ldrb	r2, [r7, #7]
 800fd96:	4908      	ldr	r1, [pc, #32]	; (800fdb8 <led_fade_in_hndl+0x158>)
 800fd98:	4613      	mov	r3, r2
 800fd9a:	005b      	lsls	r3, r3, #1
 800fd9c:	4413      	add	r3, r2
 800fd9e:	00db      	lsls	r3, r3, #3
 800fda0:	440b      	add	r3, r1
 800fda2:	3315      	adds	r3, #21
 800fda4:	79ba      	ldrb	r2, [r7, #6]
 800fda6:	701a      	strb	r2, [r3, #0]
}
 800fda8:	bf00      	nop
 800fdaa:	370c      	adds	r7, #12
 800fdac:	46bd      	mov	sp, r7
 800fdae:	bd90      	pop	{r4, r7, pc}
 800fdb0:	47ae147b 	.word	0x47ae147b
 800fdb4:	3f847ae1 	.word	0x3f847ae1
 800fdb8:	20000100 	.word	0x20000100
 800fdbc:	43480000 	.word	0x43480000
 800fdc0:	3c23d70a 	.word	0x3c23d70a
 800fdc4:	42c80000 	.word	0x42c80000
 800fdc8:	42c80000 	.word	0x42c80000
 800fdcc:	00000000 	.word	0x00000000

0800fdd0 <led_fade_out_hndl>:
* @param[in]	exit_mode	- Mode to transition on exit
* @return   	void
*/
////////////////////////////////////////////////////////////////////////////////
static void led_fade_out_hndl(const led_num_t num, const led_mode_t exit_mode)
{
 800fdd0:	b590      	push	{r4, r7, lr}
 800fdd2:	b083      	sub	sp, #12
 800fdd4:	af00      	add	r7, sp, #0
 800fdd6:	4603      	mov	r3, r0
 800fdd8:	460a      	mov	r2, r1
 800fdda:	71fb      	strb	r3, [r7, #7]
 800fddc:	4613      	mov	r3, r2
 800fdde:	71bb      	strb	r3, [r7, #6]
	// Increase duty by the square function
	g_led[num].duty -= LED_FADE_OUT_COEF_T_TO_DUTY * g_led[num].fade_time * (float32_t) LED_HNDL_PERIOD_S;
 800fde0:	79fa      	ldrb	r2, [r7, #7]
 800fde2:	4951      	ldr	r1, [pc, #324]	; (800ff28 <led_fade_out_hndl+0x158>)
 800fde4:	4613      	mov	r3, r2
 800fde6:	005b      	lsls	r3, r3, #1
 800fde8:	4413      	add	r3, r2
 800fdea:	00db      	lsls	r3, r3, #3
 800fdec:	440b      	add	r3, r1
 800fdee:	ed93 7a00 	vldr	s14, [r3]
 800fdf2:	79fa      	ldrb	r2, [r7, #7]
 800fdf4:	494c      	ldr	r1, [pc, #304]	; (800ff28 <led_fade_out_hndl+0x158>)
 800fdf6:	4613      	mov	r3, r2
 800fdf8:	005b      	lsls	r3, r3, #1
 800fdfa:	4413      	add	r3, r2
 800fdfc:	00db      	lsls	r3, r3, #3
 800fdfe:	440b      	add	r3, r1
 800fe00:	3304      	adds	r3, #4
 800fe02:	edd3 7a00 	vldr	s15, [r3]
 800fe06:	eddf 6a49 	vldr	s13, [pc, #292]	; 800ff2c <led_fade_out_hndl+0x15c>
 800fe0a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800fe0e:	eddf 6a48 	vldr	s13, [pc, #288]	; 800ff30 <led_fade_out_hndl+0x160>
 800fe12:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800fe16:	79fa      	ldrb	r2, [r7, #7]
 800fe18:	ee77 7a67 	vsub.f32	s15, s14, s15
 800fe1c:	4942      	ldr	r1, [pc, #264]	; (800ff28 <led_fade_out_hndl+0x158>)
 800fe1e:	4613      	mov	r3, r2
 800fe20:	005b      	lsls	r3, r3, #1
 800fe22:	4413      	add	r3, r2
 800fe24:	00db      	lsls	r3, r3, #3
 800fe26:	440b      	add	r3, r1
 800fe28:	edc3 7a00 	vstr	s15, [r3]

	// Is LED fully OFF?
	if ( g_led[num].duty > 0.0f )
 800fe2c:	79fa      	ldrb	r2, [r7, #7]
 800fe2e:	493e      	ldr	r1, [pc, #248]	; (800ff28 <led_fade_out_hndl+0x158>)
 800fe30:	4613      	mov	r3, r2
 800fe32:	005b      	lsls	r3, r3, #1
 800fe34:	4413      	add	r3, r2
 800fe36:	00db      	lsls	r3, r3, #3
 800fe38:	440b      	add	r3, r1
 800fe3a:	edd3 7a00 	vldr	s15, [r3]
 800fe3e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800fe42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fe46:	dd46      	ble.n	800fed6 <led_fade_out_hndl+0x106>
	{
		// Increment time
		g_led[num].fade_time += LED_HNDL_PERIOD_S;
 800fe48:	79fa      	ldrb	r2, [r7, #7]
 800fe4a:	4937      	ldr	r1, [pc, #220]	; (800ff28 <led_fade_out_hndl+0x158>)
 800fe4c:	4613      	mov	r3, r2
 800fe4e:	005b      	lsls	r3, r3, #1
 800fe50:	4413      	add	r3, r2
 800fe52:	00db      	lsls	r3, r3, #3
 800fe54:	440b      	add	r3, r1
 800fe56:	3304      	adds	r3, #4
 800fe58:	681b      	ldr	r3, [r3, #0]
 800fe5a:	4618      	mov	r0, r3
 800fe5c:	f7f0 fba4 	bl	80005a8 <__aeabi_f2d>
 800fe60:	a32f      	add	r3, pc, #188	; (adr r3, 800ff20 <led_fade_out_hndl+0x150>)
 800fe62:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe66:	f7f0 fa41 	bl	80002ec <__adddf3>
 800fe6a:	4602      	mov	r2, r0
 800fe6c:	460b      	mov	r3, r1
 800fe6e:	79fc      	ldrb	r4, [r7, #7]
 800fe70:	4610      	mov	r0, r2
 800fe72:	4619      	mov	r1, r3
 800fe74:	f7f0 fee8 	bl	8000c48 <__aeabi_d2f>
 800fe78:	4602      	mov	r2, r0
 800fe7a:	492b      	ldr	r1, [pc, #172]	; (800ff28 <led_fade_out_hndl+0x158>)
 800fe7c:	4623      	mov	r3, r4
 800fe7e:	005b      	lsls	r3, r3, #1
 800fe80:	4423      	add	r3, r4
 800fe82:	00db      	lsls	r3, r3, #3
 800fe84:	440b      	add	r3, r1
 800fe86:	3304      	adds	r3, #4
 800fe88:	601a      	str	r2, [r3, #0]
		g_led[num].fade_time = LED_TIME_LIM( g_led[num].fade_time );
 800fe8a:	79fa      	ldrb	r2, [r7, #7]
 800fe8c:	4926      	ldr	r1, [pc, #152]	; (800ff28 <led_fade_out_hndl+0x158>)
 800fe8e:	4613      	mov	r3, r2
 800fe90:	005b      	lsls	r3, r3, #1
 800fe92:	4413      	add	r3, r2
 800fe94:	00db      	lsls	r3, r3, #3
 800fe96:	440b      	add	r3, r1
 800fe98:	3304      	adds	r3, #4
 800fe9a:	edd3 7a00 	vldr	s15, [r3]
 800fe9e:	ed9f 7a25 	vldr	s14, [pc, #148]	; 800ff34 <led_fade_out_hndl+0x164>
 800fea2:	eef4 7ac7 	vcmpe.f32	s15, s14
 800fea6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800feaa:	dd01      	ble.n	800feb0 <led_fade_out_hndl+0xe0>
 800feac:	4a22      	ldr	r2, [pc, #136]	; (800ff38 <led_fade_out_hndl+0x168>)
 800feae:	e008      	b.n	800fec2 <led_fade_out_hndl+0xf2>
 800feb0:	79fa      	ldrb	r2, [r7, #7]
 800feb2:	491d      	ldr	r1, [pc, #116]	; (800ff28 <led_fade_out_hndl+0x158>)
 800feb4:	4613      	mov	r3, r2
 800feb6:	005b      	lsls	r3, r3, #1
 800feb8:	4413      	add	r3, r2
 800feba:	00db      	lsls	r3, r3, #3
 800febc:	440b      	add	r3, r1
 800febe:	3304      	adds	r3, #4
 800fec0:	681a      	ldr	r2, [r3, #0]
 800fec2:	79f9      	ldrb	r1, [r7, #7]
 800fec4:	4818      	ldr	r0, [pc, #96]	; (800ff28 <led_fade_out_hndl+0x158>)
 800fec6:	460b      	mov	r3, r1
 800fec8:	005b      	lsls	r3, r3, #1
 800feca:	440b      	add	r3, r1
 800fecc:	00db      	lsls	r3, r3, #3
 800fece:	4403      	add	r3, r0
 800fed0:	3304      	adds	r3, #4
 800fed2:	601a      	str	r2, [r3, #0]
		g_led[num].fade_time = 0.0f;

		// Goto NORMAL mode
		g_led[num].mode = exit_mode;
	}
}
 800fed4:	e01e      	b.n	800ff14 <led_fade_out_hndl+0x144>
		g_led[num].duty = 0.0f;
 800fed6:	79fa      	ldrb	r2, [r7, #7]
 800fed8:	4913      	ldr	r1, [pc, #76]	; (800ff28 <led_fade_out_hndl+0x158>)
 800feda:	4613      	mov	r3, r2
 800fedc:	005b      	lsls	r3, r3, #1
 800fede:	4413      	add	r3, r2
 800fee0:	00db      	lsls	r3, r3, #3
 800fee2:	440b      	add	r3, r1
 800fee4:	f04f 0200 	mov.w	r2, #0
 800fee8:	601a      	str	r2, [r3, #0]
		g_led[num].fade_time = 0.0f;
 800feea:	79fa      	ldrb	r2, [r7, #7]
 800feec:	490e      	ldr	r1, [pc, #56]	; (800ff28 <led_fade_out_hndl+0x158>)
 800feee:	4613      	mov	r3, r2
 800fef0:	005b      	lsls	r3, r3, #1
 800fef2:	4413      	add	r3, r2
 800fef4:	00db      	lsls	r3, r3, #3
 800fef6:	440b      	add	r3, r1
 800fef8:	3304      	adds	r3, #4
 800fefa:	f04f 0200 	mov.w	r2, #0
 800fefe:	601a      	str	r2, [r3, #0]
		g_led[num].mode = exit_mode;
 800ff00:	79fa      	ldrb	r2, [r7, #7]
 800ff02:	4909      	ldr	r1, [pc, #36]	; (800ff28 <led_fade_out_hndl+0x158>)
 800ff04:	4613      	mov	r3, r2
 800ff06:	005b      	lsls	r3, r3, #1
 800ff08:	4413      	add	r3, r2
 800ff0a:	00db      	lsls	r3, r3, #3
 800ff0c:	440b      	add	r3, r1
 800ff0e:	3315      	adds	r3, #21
 800ff10:	79ba      	ldrb	r2, [r7, #6]
 800ff12:	701a      	strb	r2, [r3, #0]
}
 800ff14:	bf00      	nop
 800ff16:	370c      	adds	r7, #12
 800ff18:	46bd      	mov	sp, r7
 800ff1a:	bd90      	pop	{r4, r7, pc}
 800ff1c:	f3af 8000 	nop.w
 800ff20:	47ae147b 	.word	0x47ae147b
 800ff24:	3f847ae1 	.word	0x3f847ae1
 800ff28:	20000100 	.word	0x20000100
 800ff2c:	42b1c71c 	.word	0x42b1c71c
 800ff30:	3c23d70a 	.word	0x3c23d70a
 800ff34:	42c80000 	.word	0x42c80000
 800ff38:	42c80000 	.word	0x42c80000

0800ff3c <led_blink_hndl>:
* @param[in]	num			- LED number
* @return   	void
*/
////////////////////////////////////////////////////////////////////////////////
static void led_blink_hndl(const led_num_t num)
{
 800ff3c:	b580      	push	{r7, lr}
 800ff3e:	b082      	sub	sp, #8
 800ff40:	af00      	add	r7, sp, #0
 800ff42:	4603      	mov	r3, r0
 800ff44:	71fb      	strb	r3, [r7, #7]
	if ( true == led_is_on_time( num ))
 800ff46:	79fb      	ldrb	r3, [r7, #7]
 800ff48:	4618      	mov	r0, r3
 800ff4a:	f000 f89b 	bl	8010084 <led_is_on_time>
 800ff4e:	4603      	mov	r3, r0
 800ff50:	2b00      	cmp	r3, #0
 800ff52:	d00a      	beq.n	800ff6a <led_blink_hndl+0x2e>
	{
		g_led[num].duty = 1.0f;
 800ff54:	79fa      	ldrb	r2, [r7, #7]
 800ff56:	490e      	ldr	r1, [pc, #56]	; (800ff90 <led_blink_hndl+0x54>)
 800ff58:	4613      	mov	r3, r2
 800ff5a:	005b      	lsls	r3, r3, #1
 800ff5c:	4413      	add	r3, r2
 800ff5e:	00db      	lsls	r3, r3, #3
 800ff60:	440b      	add	r3, r1
 800ff62:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800ff66:	601a      	str	r2, [r3, #0]
 800ff68:	e009      	b.n	800ff7e <led_blink_hndl+0x42>
	}
	else
	{
		g_led[num].duty = 0.0f;
 800ff6a:	79fa      	ldrb	r2, [r7, #7]
 800ff6c:	4908      	ldr	r1, [pc, #32]	; (800ff90 <led_blink_hndl+0x54>)
 800ff6e:	4613      	mov	r3, r2
 800ff70:	005b      	lsls	r3, r3, #1
 800ff72:	4413      	add	r3, r2
 800ff74:	00db      	lsls	r3, r3, #3
 800ff76:	440b      	add	r3, r1
 800ff78:	f04f 0200 	mov.w	r2, #0
 800ff7c:	601a      	str	r2, [r3, #0]
	}

	// Manage blink counter
	led_blink_cnt_hndl( num );
 800ff7e:	79fb      	ldrb	r3, [r7, #7]
 800ff80:	4618      	mov	r0, r3
 800ff82:	f000 f8d7 	bl	8010134 <led_blink_cnt_hndl>
}
 800ff86:	bf00      	nop
 800ff88:	3708      	adds	r7, #8
 800ff8a:	46bd      	mov	sp, r7
 800ff8c:	bd80      	pop	{r7, pc}
 800ff8e:	bf00      	nop
 800ff90:	20000100 	.word	0x20000100

0800ff94 <led_fade_blink_hndl>:
* @param[in]	num			- LED number
* @return   	void
*/
////////////////////////////////////////////////////////////////////////////////
static void led_fade_blink_hndl(const led_num_t num)
{
 800ff94:	b580      	push	{r7, lr}
 800ff96:	b082      	sub	sp, #8
 800ff98:	af00      	add	r7, sp, #0
 800ff9a:	4603      	mov	r3, r0
 800ff9c:	71fb      	strb	r3, [r7, #7]
	if ( true == led_is_on_time( num ))
 800ff9e:	79fb      	ldrb	r3, [r7, #7]
 800ffa0:	4618      	mov	r0, r3
 800ffa2:	f000 f86f 	bl	8010084 <led_is_on_time>
 800ffa6:	4603      	mov	r3, r0
 800ffa8:	2b00      	cmp	r3, #0
 800ffaa:	d005      	beq.n	800ffb8 <led_fade_blink_hndl+0x24>
	{
		led_fade_in_hndl( num , eLED_MODE_FADE_BLINK);
 800ffac:	79fb      	ldrb	r3, [r7, #7]
 800ffae:	2105      	movs	r1, #5
 800ffb0:	4618      	mov	r0, r3
 800ffb2:	f7ff fe55 	bl	800fc60 <led_fade_in_hndl>
 800ffb6:	e004      	b.n	800ffc2 <led_fade_blink_hndl+0x2e>
	}
	else
	{
		led_fade_out_hndl( num, eLED_MODE_FADE_BLINK );
 800ffb8:	79fb      	ldrb	r3, [r7, #7]
 800ffba:	2105      	movs	r1, #5
 800ffbc:	4618      	mov	r0, r3
 800ffbe:	f7ff ff07 	bl	800fdd0 <led_fade_out_hndl>
	}

	// Manage blink counter
	led_blink_cnt_hndl( num );
 800ffc2:	79fb      	ldrb	r3, [r7, #7]
 800ffc4:	4618      	mov	r0, r3
 800ffc6:	f000 f8b5 	bl	8010134 <led_blink_cnt_hndl>
}
 800ffca:	bf00      	nop
 800ffcc:	3708      	adds	r7, #8
 800ffce:	46bd      	mov	sp, r7
 800ffd0:	bd80      	pop	{r7, pc}
 800ffd2:	0000      	movs	r0, r0
 800ffd4:	0000      	movs	r0, r0
	...

0800ffd8 <led_hndl_period_time>:
* @param[in]	num			- LED number
* @return   	void
*/
////////////////////////////////////////////////////////////////////////////////
static void led_hndl_period_time(const led_num_t num)
{
 800ffd8:	b590      	push	{r4, r7, lr}
 800ffda:	b083      	sub	sp, #12
 800ffdc:	af00      	add	r7, sp, #0
 800ffde:	4603      	mov	r3, r0
 800ffe0:	71fb      	strb	r3, [r7, #7]
	if ( g_led[num].per_time >= g_led[num].period )
 800ffe2:	79fa      	ldrb	r2, [r7, #7]
 800ffe4:	4926      	ldr	r1, [pc, #152]	; (8010080 <led_hndl_period_time+0xa8>)
 800ffe6:	4613      	mov	r3, r2
 800ffe8:	005b      	lsls	r3, r3, #1
 800ffea:	4413      	add	r3, r2
 800ffec:	00db      	lsls	r3, r3, #3
 800ffee:	440b      	add	r3, r1
 800fff0:	330c      	adds	r3, #12
 800fff2:	ed93 7a00 	vldr	s14, [r3]
 800fff6:	79fa      	ldrb	r2, [r7, #7]
 800fff8:	4921      	ldr	r1, [pc, #132]	; (8010080 <led_hndl_period_time+0xa8>)
 800fffa:	4613      	mov	r3, r2
 800fffc:	005b      	lsls	r3, r3, #1
 800fffe:	4413      	add	r3, r2
 8010000:	00db      	lsls	r3, r3, #3
 8010002:	440b      	add	r3, r1
 8010004:	3308      	adds	r3, #8
 8010006:	edd3 7a00 	vldr	s15, [r3]
 801000a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801000e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010012:	db0b      	blt.n	801002c <led_hndl_period_time+0x54>
	{
		g_led[num].per_time = 0.0f;
 8010014:	79fa      	ldrb	r2, [r7, #7]
 8010016:	491a      	ldr	r1, [pc, #104]	; (8010080 <led_hndl_period_time+0xa8>)
 8010018:	4613      	mov	r3, r2
 801001a:	005b      	lsls	r3, r3, #1
 801001c:	4413      	add	r3, r2
 801001e:	00db      	lsls	r3, r3, #3
 8010020:	440b      	add	r3, r1
 8010022:	330c      	adds	r3, #12
 8010024:	f04f 0200 	mov.w	r2, #0
 8010028:	601a      	str	r2, [r3, #0]
	}
	else
	{
		g_led[num].per_time += LED_HNDL_PERIOD_S;
	}
}
 801002a:	e020      	b.n	801006e <led_hndl_period_time+0x96>
		g_led[num].per_time += LED_HNDL_PERIOD_S;
 801002c:	79fa      	ldrb	r2, [r7, #7]
 801002e:	4914      	ldr	r1, [pc, #80]	; (8010080 <led_hndl_period_time+0xa8>)
 8010030:	4613      	mov	r3, r2
 8010032:	005b      	lsls	r3, r3, #1
 8010034:	4413      	add	r3, r2
 8010036:	00db      	lsls	r3, r3, #3
 8010038:	440b      	add	r3, r1
 801003a:	330c      	adds	r3, #12
 801003c:	681b      	ldr	r3, [r3, #0]
 801003e:	4618      	mov	r0, r3
 8010040:	f7f0 fab2 	bl	80005a8 <__aeabi_f2d>
 8010044:	a30c      	add	r3, pc, #48	; (adr r3, 8010078 <led_hndl_period_time+0xa0>)
 8010046:	e9d3 2300 	ldrd	r2, r3, [r3]
 801004a:	f7f0 f94f 	bl	80002ec <__adddf3>
 801004e:	4602      	mov	r2, r0
 8010050:	460b      	mov	r3, r1
 8010052:	79fc      	ldrb	r4, [r7, #7]
 8010054:	4610      	mov	r0, r2
 8010056:	4619      	mov	r1, r3
 8010058:	f7f0 fdf6 	bl	8000c48 <__aeabi_d2f>
 801005c:	4602      	mov	r2, r0
 801005e:	4908      	ldr	r1, [pc, #32]	; (8010080 <led_hndl_period_time+0xa8>)
 8010060:	4623      	mov	r3, r4
 8010062:	005b      	lsls	r3, r3, #1
 8010064:	4423      	add	r3, r4
 8010066:	00db      	lsls	r3, r3, #3
 8010068:	440b      	add	r3, r1
 801006a:	330c      	adds	r3, #12
 801006c:	601a      	str	r2, [r3, #0]
}
 801006e:	bf00      	nop
 8010070:	370c      	adds	r7, #12
 8010072:	46bd      	mov	sp, r7
 8010074:	bd90      	pop	{r4, r7, pc}
 8010076:	bf00      	nop
 8010078:	47ae147b 	.word	0x47ae147b
 801007c:	3f847ae1 	.word	0x3f847ae1
 8010080:	20000100 	.word	0x20000100

08010084 <led_is_on_time>:
* @param[in]	num			- LED number
* @return   	void
*/
////////////////////////////////////////////////////////////////////////////////
static bool led_is_on_time(const led_num_t num)
{
 8010084:	b480      	push	{r7}
 8010086:	b085      	sub	sp, #20
 8010088:	af00      	add	r7, sp, #0
 801008a:	4603      	mov	r3, r0
 801008c:	71fb      	strb	r3, [r7, #7]
	bool is_on_time = false;
 801008e:	2300      	movs	r3, #0
 8010090:	73fb      	strb	r3, [r7, #15]

	if ( g_led[num].per_time < g_led[num].on_time )
 8010092:	79fa      	ldrb	r2, [r7, #7]
 8010094:	4910      	ldr	r1, [pc, #64]	; (80100d8 <led_is_on_time+0x54>)
 8010096:	4613      	mov	r3, r2
 8010098:	005b      	lsls	r3, r3, #1
 801009a:	4413      	add	r3, r2
 801009c:	00db      	lsls	r3, r3, #3
 801009e:	440b      	add	r3, r1
 80100a0:	330c      	adds	r3, #12
 80100a2:	ed93 7a00 	vldr	s14, [r3]
 80100a6:	79fa      	ldrb	r2, [r7, #7]
 80100a8:	490b      	ldr	r1, [pc, #44]	; (80100d8 <led_is_on_time+0x54>)
 80100aa:	4613      	mov	r3, r2
 80100ac:	005b      	lsls	r3, r3, #1
 80100ae:	4413      	add	r3, r2
 80100b0:	00db      	lsls	r3, r3, #3
 80100b2:	440b      	add	r3, r1
 80100b4:	3310      	adds	r3, #16
 80100b6:	edd3 7a00 	vldr	s15, [r3]
 80100ba:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80100be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80100c2:	d501      	bpl.n	80100c8 <led_is_on_time+0x44>
	{
		is_on_time = true;
 80100c4:	2301      	movs	r3, #1
 80100c6:	73fb      	strb	r3, [r7, #15]
	}

	return is_on_time;
 80100c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80100ca:	4618      	mov	r0, r3
 80100cc:	3714      	adds	r7, #20
 80100ce:	46bd      	mov	sp, r7
 80100d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100d4:	4770      	bx	lr
 80100d6:	bf00      	nop
 80100d8:	20000100 	.word	0x20000100

080100dc <led_is_period_time>:
* @param[in]	num			- LED number
* @return   	is_period	- Period update event
*/
////////////////////////////////////////////////////////////////////////////////
static bool led_is_period_time(const led_num_t num)
{
 80100dc:	b480      	push	{r7}
 80100de:	b085      	sub	sp, #20
 80100e0:	af00      	add	r7, sp, #0
 80100e2:	4603      	mov	r3, r0
 80100e4:	71fb      	strb	r3, [r7, #7]
	bool is_period = false;
 80100e6:	2300      	movs	r3, #0
 80100e8:	73fb      	strb	r3, [r7, #15]

	if ( g_led[num].per_time >= g_led[num].period )
 80100ea:	79fa      	ldrb	r2, [r7, #7]
 80100ec:	4910      	ldr	r1, [pc, #64]	; (8010130 <led_is_period_time+0x54>)
 80100ee:	4613      	mov	r3, r2
 80100f0:	005b      	lsls	r3, r3, #1
 80100f2:	4413      	add	r3, r2
 80100f4:	00db      	lsls	r3, r3, #3
 80100f6:	440b      	add	r3, r1
 80100f8:	330c      	adds	r3, #12
 80100fa:	ed93 7a00 	vldr	s14, [r3]
 80100fe:	79fa      	ldrb	r2, [r7, #7]
 8010100:	490b      	ldr	r1, [pc, #44]	; (8010130 <led_is_period_time+0x54>)
 8010102:	4613      	mov	r3, r2
 8010104:	005b      	lsls	r3, r3, #1
 8010106:	4413      	add	r3, r2
 8010108:	00db      	lsls	r3, r3, #3
 801010a:	440b      	add	r3, r1
 801010c:	3308      	adds	r3, #8
 801010e:	edd3 7a00 	vldr	s15, [r3]
 8010112:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8010116:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801011a:	db01      	blt.n	8010120 <led_is_period_time+0x44>
	{
		is_period = true;
 801011c:	2301      	movs	r3, #1
 801011e:	73fb      	strb	r3, [r7, #15]
	}

	return is_period;
 8010120:	7bfb      	ldrb	r3, [r7, #15]
}
 8010122:	4618      	mov	r0, r3
 8010124:	3714      	adds	r7, #20
 8010126:	46bd      	mov	sp, r7
 8010128:	f85d 7b04 	ldr.w	r7, [sp], #4
 801012c:	4770      	bx	lr
 801012e:	bf00      	nop
 8010130:	20000100 	.word	0x20000100

08010134 <led_blink_cnt_hndl>:
* @param[in]	num			- LED number
* @return   	void
*/
////////////////////////////////////////////////////////////////////////////////
static void led_blink_cnt_hndl(const led_num_t num)
{
 8010134:	b580      	push	{r7, lr}
 8010136:	b082      	sub	sp, #8
 8010138:	af00      	add	r7, sp, #0
 801013a:	4603      	mov	r3, r0
 801013c:	71fb      	strb	r3, [r7, #7]
	// On blink period
	if ( true == led_is_period_time( num ))
 801013e:	79fb      	ldrb	r3, [r7, #7]
 8010140:	4618      	mov	r0, r3
 8010142:	f7ff ffcb 	bl	80100dc <led_is_period_time>
 8010146:	4603      	mov	r3, r0
 8010148:	2b00      	cmp	r3, #0
 801014a:	d034      	beq.n	80101b6 <led_blink_cnt_hndl+0x82>
	{
		// Not continuous blinking
		if ( LED_BLINK_CNT_CONT_VAL != g_led[num].blink_cnt )
 801014c:	79fa      	ldrb	r2, [r7, #7]
 801014e:	491c      	ldr	r1, [pc, #112]	; (80101c0 <led_blink_cnt_hndl+0x8c>)
 8010150:	4613      	mov	r3, r2
 8010152:	005b      	lsls	r3, r3, #1
 8010154:	4413      	add	r3, r2
 8010156:	00db      	lsls	r3, r3, #3
 8010158:	440b      	add	r3, r1
 801015a:	3316      	adds	r3, #22
 801015c:	781b      	ldrb	r3, [r3, #0]
 801015e:	2bff      	cmp	r3, #255	; 0xff
 8010160:	d029      	beq.n	80101b6 <led_blink_cnt_hndl+0x82>
		{
			// Blink count expire
			if ( 0 == g_led[num].blink_cnt )
 8010162:	79fa      	ldrb	r2, [r7, #7]
 8010164:	4916      	ldr	r1, [pc, #88]	; (80101c0 <led_blink_cnt_hndl+0x8c>)
 8010166:	4613      	mov	r3, r2
 8010168:	005b      	lsls	r3, r3, #1
 801016a:	4413      	add	r3, r2
 801016c:	00db      	lsls	r3, r3, #3
 801016e:	440b      	add	r3, r1
 8010170:	3316      	adds	r3, #22
 8010172:	781b      	ldrb	r3, [r3, #0]
 8010174:	2b00      	cmp	r3, #0
 8010176:	d10a      	bne.n	801018e <led_blink_cnt_hndl+0x5a>
			{
				g_led[num].mode = eLED_MODE_NORMAL;
 8010178:	79fa      	ldrb	r2, [r7, #7]
 801017a:	4911      	ldr	r1, [pc, #68]	; (80101c0 <led_blink_cnt_hndl+0x8c>)
 801017c:	4613      	mov	r3, r2
 801017e:	005b      	lsls	r3, r3, #1
 8010180:	4413      	add	r3, r2
 8010182:	00db      	lsls	r3, r3, #3
 8010184:	440b      	add	r3, r1
 8010186:	3315      	adds	r3, #21
 8010188:	2200      	movs	r2, #0
 801018a:	701a      	strb	r2, [r3, #0]
			{
				g_led[num].blink_cnt--;
			}
		}
	}
}
 801018c:	e013      	b.n	80101b6 <led_blink_cnt_hndl+0x82>
				g_led[num].blink_cnt--;
 801018e:	79fa      	ldrb	r2, [r7, #7]
 8010190:	490b      	ldr	r1, [pc, #44]	; (80101c0 <led_blink_cnt_hndl+0x8c>)
 8010192:	4613      	mov	r3, r2
 8010194:	005b      	lsls	r3, r3, #1
 8010196:	4413      	add	r3, r2
 8010198:	00db      	lsls	r3, r3, #3
 801019a:	440b      	add	r3, r1
 801019c:	3316      	adds	r3, #22
 801019e:	781b      	ldrb	r3, [r3, #0]
 80101a0:	3b01      	subs	r3, #1
 80101a2:	b2d8      	uxtb	r0, r3
 80101a4:	4906      	ldr	r1, [pc, #24]	; (80101c0 <led_blink_cnt_hndl+0x8c>)
 80101a6:	4613      	mov	r3, r2
 80101a8:	005b      	lsls	r3, r3, #1
 80101aa:	4413      	add	r3, r2
 80101ac:	00db      	lsls	r3, r3, #3
 80101ae:	440b      	add	r3, r1
 80101b0:	3316      	adds	r3, #22
 80101b2:	4602      	mov	r2, r0
 80101b4:	701a      	strb	r2, [r3, #0]
}
 80101b6:	bf00      	nop
 80101b8:	3708      	adds	r7, #8
 80101ba:	46bd      	mov	sp, r7
 80101bc:	bd80      	pop	{r7, pc}
 80101be:	bf00      	nop
 80101c0:	20000100 	.word	0x20000100

080101c4 <adc_init>:
* @param[in] 	none
* @return 		status 		- Status of operation
*/
////////////////////////////////////////////////////////////////////////////////
adc_status_t adc_init(void)
{
 80101c4:	b590      	push	{r4, r7, lr}
 80101c6:	b085      	sub	sp, #20
 80101c8:	af00      	add	r7, sp, #0
	adc_status_t status = eADC_OK;
 80101ca:	2300      	movs	r3, #0
 80101cc:	73fb      	strb	r3, [r7, #15]
	uint32_t	i		= 0UL;
 80101ce:	2300      	movs	r3, #0
 80101d0:	60bb      	str	r3, [r7, #8]

	if ( false == gb_is_init )
 80101d2:	4b6a      	ldr	r3, [pc, #424]	; (801037c <adc_init+0x1b8>)
 80101d4:	781b      	ldrb	r3, [r3, #0]
 80101d6:	f083 0301 	eor.w	r3, r3, #1
 80101da:	b2db      	uxtb	r3, r3
 80101dc:	2b00      	cmp	r3, #0
 80101de:	f000 80c6 	beq.w	801036e <adc_init+0x1aa>
	{
	    __HAL_RCC_ADC1_CLK_ENABLE();
 80101e2:	4b67      	ldr	r3, [pc, #412]	; (8010380 <adc_init+0x1bc>)
 80101e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80101e6:	4a66      	ldr	r2, [pc, #408]	; (8010380 <adc_init+0x1bc>)
 80101e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80101ec:	6453      	str	r3, [r2, #68]	; 0x44
 80101ee:	4b64      	ldr	r3, [pc, #400]	; (8010380 <adc_init+0x1bc>)
 80101f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80101f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80101f6:	607b      	str	r3, [r7, #4]
 80101f8:	687b      	ldr	r3, [r7, #4]
	    __DMA2_CLK_ENABLE();
 80101fa:	4b61      	ldr	r3, [pc, #388]	; (8010380 <adc_init+0x1bc>)
 80101fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80101fe:	4a60      	ldr	r2, [pc, #384]	; (8010380 <adc_init+0x1bc>)
 8010200:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8010204:	6313      	str	r3, [r2, #48]	; 0x30
 8010206:	4b5e      	ldr	r3, [pc, #376]	; (8010380 <adc_init+0x1bc>)
 8010208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801020a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801020e:	603b      	str	r3, [r7, #0]
 8010210:	683b      	ldr	r3, [r7, #0]

		for ( i = 0; i < eADC_NUM_OF; i++ )
 8010212:	2300      	movs	r3, #0
 8010214:	60bb      	str	r3, [r7, #8]
 8010216:	e0a5      	b.n	8010364 <adc_init+0x1a0>
		{
			// Init gpio
			adc_init_gpio( g_adc_cfg_table[i].p_port, g_adc_cfg_table[i].pin );
 8010218:	495a      	ldr	r1, [pc, #360]	; (8010384 <adc_init+0x1c0>)
 801021a:	68ba      	ldr	r2, [r7, #8]
 801021c:	4613      	mov	r3, r2
 801021e:	005b      	lsls	r3, r3, #1
 8010220:	4413      	add	r3, r2
 8010222:	00db      	lsls	r3, r3, #3
 8010224:	440b      	add	r3, r1
 8010226:	6818      	ldr	r0, [r3, #0]
 8010228:	4956      	ldr	r1, [pc, #344]	; (8010384 <adc_init+0x1c0>)
 801022a:	68ba      	ldr	r2, [r7, #8]
 801022c:	4613      	mov	r3, r2
 801022e:	005b      	lsls	r3, r3, #1
 8010230:	4413      	add	r3, r2
 8010232:	00db      	lsls	r3, r3, #3
 8010234:	440b      	add	r3, r1
 8010236:	3304      	adds	r3, #4
 8010238:	681b      	ldr	r3, [r3, #0]
 801023a:	4619      	mov	r1, r3
 801023c:	f000 f8b0 	bl	80103a0 <adc_init_gpio>

			// Init channels
			if ( eADC_OK != adc_init_channels( &g_adc1_handler, g_adc_cfg_table[i].analog_ch, g_adc_cfg_table[i].samp_seq, g_adc_cfg_table[i].samp_time ))
 8010240:	4950      	ldr	r1, [pc, #320]	; (8010384 <adc_init+0x1c0>)
 8010242:	68ba      	ldr	r2, [r7, #8]
 8010244:	4613      	mov	r3, r2
 8010246:	005b      	lsls	r3, r3, #1
 8010248:	4413      	add	r3, r2
 801024a:	00db      	lsls	r3, r3, #3
 801024c:	440b      	add	r3, r1
 801024e:	3308      	adds	r3, #8
 8010250:	6819      	ldr	r1, [r3, #0]
 8010252:	484c      	ldr	r0, [pc, #304]	; (8010384 <adc_init+0x1c0>)
 8010254:	68ba      	ldr	r2, [r7, #8]
 8010256:	4613      	mov	r3, r2
 8010258:	005b      	lsls	r3, r3, #1
 801025a:	4413      	add	r3, r2
 801025c:	00db      	lsls	r3, r3, #3
 801025e:	4403      	add	r3, r0
 8010260:	330c      	adds	r3, #12
 8010262:	6818      	ldr	r0, [r3, #0]
 8010264:	4c47      	ldr	r4, [pc, #284]	; (8010384 <adc_init+0x1c0>)
 8010266:	68ba      	ldr	r2, [r7, #8]
 8010268:	4613      	mov	r3, r2
 801026a:	005b      	lsls	r3, r3, #1
 801026c:	4413      	add	r3, r2
 801026e:	00db      	lsls	r3, r3, #3
 8010270:	4423      	add	r3, r4
 8010272:	3310      	adds	r3, #16
 8010274:	681b      	ldr	r3, [r3, #0]
 8010276:	4602      	mov	r2, r0
 8010278:	4843      	ldr	r0, [pc, #268]	; (8010388 <adc_init+0x1c4>)
 801027a:	f000 f8b4 	bl	80103e6 <adc_init_channels>
 801027e:	4603      	mov	r3, r0
 8010280:	2b00      	cmp	r3, #0
 8010282:	d002      	beq.n	801028a <adc_init+0xc6>
			{
				status = eADC_ERROR;
 8010284:	2301      	movs	r3, #1
 8010286:	73fb      	strb	r3, [r7, #15]
				break;
 8010288:	e073      	b.n	8010372 <adc_init+0x1ae>
			}

			// Init DMA
			g_adc1_dma_handler.Instance 				= DMA2_Stream0;
 801028a:	4b40      	ldr	r3, [pc, #256]	; (801038c <adc_init+0x1c8>)
 801028c:	4a40      	ldr	r2, [pc, #256]	; (8010390 <adc_init+0x1cc>)
 801028e:	601a      	str	r2, [r3, #0]
			g_adc1_dma_handler.Init.Channel 			= DMA_CHANNEL_0;
 8010290:	4b3e      	ldr	r3, [pc, #248]	; (801038c <adc_init+0x1c8>)
 8010292:	2200      	movs	r2, #0
 8010294:	605a      	str	r2, [r3, #4]
			g_adc1_dma_handler.Init.Direction 			= DMA_PERIPH_TO_MEMORY;
 8010296:	4b3d      	ldr	r3, [pc, #244]	; (801038c <adc_init+0x1c8>)
 8010298:	2200      	movs	r2, #0
 801029a:	609a      	str	r2, [r3, #8]
			g_adc1_dma_handler.Init.PeriphInc 			= DMA_PINC_DISABLE;
 801029c:	4b3b      	ldr	r3, [pc, #236]	; (801038c <adc_init+0x1c8>)
 801029e:	2200      	movs	r2, #0
 80102a0:	60da      	str	r2, [r3, #12]
			g_adc1_dma_handler.Init.MemInc 				= DMA_MINC_ENABLE;
 80102a2:	4b3a      	ldr	r3, [pc, #232]	; (801038c <adc_init+0x1c8>)
 80102a4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80102a8:	611a      	str	r2, [r3, #16]
			g_adc1_dma_handler.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80102aa:	4b38      	ldr	r3, [pc, #224]	; (801038c <adc_init+0x1c8>)
 80102ac:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80102b0:	615a      	str	r2, [r3, #20]
			g_adc1_dma_handler.Init.MemDataAlignment 	= DMA_MDATAALIGN_HALFWORD;
 80102b2:	4b36      	ldr	r3, [pc, #216]	; (801038c <adc_init+0x1c8>)
 80102b4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80102b8:	619a      	str	r2, [r3, #24]
			g_adc1_dma_handler.Init.Mode 				= DMA_CIRCULAR;
 80102ba:	4b34      	ldr	r3, [pc, #208]	; (801038c <adc_init+0x1c8>)
 80102bc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80102c0:	61da      	str	r2, [r3, #28]
			g_adc1_dma_handler.Init.Priority 			= DMA_PRIORITY_LOW;
 80102c2:	4b32      	ldr	r3, [pc, #200]	; (801038c <adc_init+0x1c8>)
 80102c4:	2200      	movs	r2, #0
 80102c6:	621a      	str	r2, [r3, #32]
		    g_adc1_dma_handler.Init.FIFOMode 			= DMA_FIFOMODE_DISABLE;
 80102c8:	4b30      	ldr	r3, [pc, #192]	; (801038c <adc_init+0x1c8>)
 80102ca:	2200      	movs	r2, #0
 80102cc:	625a      	str	r2, [r3, #36]	; 0x24


		    if ( HAL_OK == HAL_DMA_Init( &g_adc1_dma_handler ))
 80102ce:	482f      	ldr	r0, [pc, #188]	; (801038c <adc_init+0x1c8>)
 80102d0:	f7f2 f852 	bl	8002378 <HAL_DMA_Init>
 80102d4:	4603      	mov	r3, r0
 80102d6:	2b00      	cmp	r3, #0
 80102d8:	d106      	bne.n	80102e8 <adc_init+0x124>
		    {
		    	__HAL_LINKDMA( &g_adc1_handler, DMA_Handle, g_adc1_dma_handler );
 80102da:	4b2b      	ldr	r3, [pc, #172]	; (8010388 <adc_init+0x1c4>)
 80102dc:	4a2b      	ldr	r2, [pc, #172]	; (801038c <adc_init+0x1c8>)
 80102de:	639a      	str	r2, [r3, #56]	; 0x38
 80102e0:	4b2a      	ldr	r3, [pc, #168]	; (801038c <adc_init+0x1c8>)
 80102e2:	4a29      	ldr	r2, [pc, #164]	; (8010388 <adc_init+0x1c4>)
 80102e4:	639a      	str	r2, [r3, #56]	; 0x38
 80102e6:	e001      	b.n	80102ec <adc_init+0x128>
		    }
		    else
		    {
		    	status = eADC_ERROR;
 80102e8:	2301      	movs	r3, #1
 80102ea:	73fb      	strb	r3, [r7, #15]
		    }

			// Init ADC
		    g_adc1_handler.Instance 					= ADC1;
 80102ec:	4b26      	ldr	r3, [pc, #152]	; (8010388 <adc_init+0x1c4>)
 80102ee:	4a29      	ldr	r2, [pc, #164]	; (8010394 <adc_init+0x1d0>)
 80102f0:	601a      	str	r2, [r3, #0]
		    g_adc1_handler.Init.ClockPrescaler 			= ADC_CLOCK_SYNC_PCLK_DIV2;
 80102f2:	4b25      	ldr	r3, [pc, #148]	; (8010388 <adc_init+0x1c4>)
 80102f4:	2200      	movs	r2, #0
 80102f6:	605a      	str	r2, [r3, #4]
		    g_adc1_handler.Init.Resolution 				= ADC_RESOLUTION_12B;
 80102f8:	4b23      	ldr	r3, [pc, #140]	; (8010388 <adc_init+0x1c4>)
 80102fa:	2200      	movs	r2, #0
 80102fc:	609a      	str	r2, [r3, #8]
		    g_adc1_handler.Init.ScanConvMode 			= ENABLE;
 80102fe:	4b22      	ldr	r3, [pc, #136]	; (8010388 <adc_init+0x1c4>)
 8010300:	2201      	movs	r2, #1
 8010302:	611a      	str	r2, [r3, #16]
		    g_adc1_handler.Init.ContinuousConvMode 		= ENABLE;
 8010304:	4b20      	ldr	r3, [pc, #128]	; (8010388 <adc_init+0x1c4>)
 8010306:	2201      	movs	r2, #1
 8010308:	619a      	str	r2, [r3, #24]
		    g_adc1_handler.Init.DiscontinuousConvMode 	= DISABLE;
 801030a:	4b1f      	ldr	r3, [pc, #124]	; (8010388 <adc_init+0x1c4>)
 801030c:	2200      	movs	r2, #0
 801030e:	f883 2020 	strb.w	r2, [r3, #32]
		    g_adc1_handler.Init.ExternalTrigConvEdge 	= ADC_EXTERNALTRIGCONVEDGE_NONE;
 8010312:	4b1d      	ldr	r3, [pc, #116]	; (8010388 <adc_init+0x1c4>)
 8010314:	2200      	movs	r2, #0
 8010316:	62da      	str	r2, [r3, #44]	; 0x2c
		    g_adc1_handler.Init.ExternalTrigConv 		= ADC_SOFTWARE_START;
 8010318:	4b1b      	ldr	r3, [pc, #108]	; (8010388 <adc_init+0x1c4>)
 801031a:	4a1f      	ldr	r2, [pc, #124]	; (8010398 <adc_init+0x1d4>)
 801031c:	629a      	str	r2, [r3, #40]	; 0x28
		    g_adc1_handler.Init.DataAlign 				= ADC_DATAALIGN_RIGHT;
 801031e:	4b1a      	ldr	r3, [pc, #104]	; (8010388 <adc_init+0x1c4>)
 8010320:	2200      	movs	r2, #0
 8010322:	60da      	str	r2, [r3, #12]
		    g_adc1_handler.Init.NbrOfConversion 		= eADC_NUM_OF;
 8010324:	4b18      	ldr	r3, [pc, #96]	; (8010388 <adc_init+0x1c4>)
 8010326:	2206      	movs	r2, #6
 8010328:	61da      	str	r2, [r3, #28]
		    g_adc1_handler.Init.DMAContinuousRequests 	= ENABLE;
 801032a:	4b17      	ldr	r3, [pc, #92]	; (8010388 <adc_init+0x1c4>)
 801032c:	2201      	movs	r2, #1
 801032e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		    g_adc1_handler.Init.EOCSelection 			= ADC_EOC_SINGLE_CONV;
 8010332:	4b15      	ldr	r3, [pc, #84]	; (8010388 <adc_init+0x1c4>)
 8010334:	2201      	movs	r2, #1
 8010336:	615a      	str	r2, [r3, #20]

		    if ( HAL_OK != HAL_ADC_Init( &g_adc1_handler ))
 8010338:	4813      	ldr	r0, [pc, #76]	; (8010388 <adc_init+0x1c4>)
 801033a:	f7f1 fafb 	bl	8001934 <HAL_ADC_Init>
 801033e:	4603      	mov	r3, r0
 8010340:	2b00      	cmp	r3, #0
 8010342:	d001      	beq.n	8010348 <adc_init+0x184>
		    {
		    	status = eADC_ERROR;
 8010344:	2301      	movs	r3, #1
 8010346:	73fb      	strb	r3, [r7, #15]
		    }

		    // Set init flag
		    if ( eADC_OK == status )
 8010348:	7bfb      	ldrb	r3, [r7, #15]
 801034a:	2b00      	cmp	r3, #0
 801034c:	d107      	bne.n	801035e <adc_init+0x19a>
		    {
		    	gb_is_init = true;
 801034e:	4b0b      	ldr	r3, [pc, #44]	; (801037c <adc_init+0x1b8>)
 8010350:	2201      	movs	r2, #1
 8010352:	701a      	strb	r2, [r3, #0]

		        // Start conversions
		        HAL_ADC_Start_DMA( &g_adc1_handler, (uint32_t*)&gu16_adc_result, eADC_NUM_OF );
 8010354:	2206      	movs	r2, #6
 8010356:	4911      	ldr	r1, [pc, #68]	; (801039c <adc_init+0x1d8>)
 8010358:	480b      	ldr	r0, [pc, #44]	; (8010388 <adc_init+0x1c4>)
 801035a:	f7f1 fb2f 	bl	80019bc <HAL_ADC_Start_DMA>
		for ( i = 0; i < eADC_NUM_OF; i++ )
 801035e:	68bb      	ldr	r3, [r7, #8]
 8010360:	3301      	adds	r3, #1
 8010362:	60bb      	str	r3, [r7, #8]
 8010364:	68bb      	ldr	r3, [r7, #8]
 8010366:	2b05      	cmp	r3, #5
 8010368:	f67f af56 	bls.w	8010218 <adc_init+0x54>
 801036c:	e001      	b.n	8010372 <adc_init+0x1ae>
		    }
		}
	}
	else
	{
		status = eADC_ERROR;
 801036e:	2301      	movs	r3, #1
 8010370:	73fb      	strb	r3, [r7, #15]
	}

	return status;
 8010372:	7bfb      	ldrb	r3, [r7, #15]
}
 8010374:	4618      	mov	r0, r3
 8010376:	3714      	adds	r7, #20
 8010378:	46bd      	mov	sp, r7
 801037a:	bd90      	pop	{r4, r7, pc}
 801037c:	20004d3f 	.word	0x20004d3f
 8010380:	40023800 	.word	0x40023800
 8010384:	0801edc4 	.word	0x0801edc4
 8010388:	20004d40 	.word	0x20004d40
 801038c:	20004d88 	.word	0x20004d88
 8010390:	40026410 	.word	0x40026410
 8010394:	40012000 	.word	0x40012000
 8010398:	0f000001 	.word	0x0f000001
 801039c:	20004de8 	.word	0x20004de8

080103a0 <adc_init_gpio>:
* @param[in] 	pin			- GPIO pin number
* @return 		void
*/
////////////////////////////////////////////////////////////////////////////////
static void adc_init_gpio(const GPIO_TypeDef * const p_port, const uint32_t pin)
{
 80103a0:	b580      	push	{r7, lr}
 80103a2:	b088      	sub	sp, #32
 80103a4:	af00      	add	r7, sp, #0
 80103a6:	6078      	str	r0, [r7, #4]
 80103a8:	6039      	str	r1, [r7, #0]
	GPIO_InitTypeDef gpio_init = {0};
 80103aa:	f107 030c 	add.w	r3, r7, #12
 80103ae:	2200      	movs	r2, #0
 80103b0:	601a      	str	r2, [r3, #0]
 80103b2:	605a      	str	r2, [r3, #4]
 80103b4:	609a      	str	r2, [r3, #8]
 80103b6:	60da      	str	r2, [r3, #12]
 80103b8:	611a      	str	r2, [r3, #16]

	// Enable GPIO clock
	gpio_enable_port_clock( p_port );
 80103ba:	6878      	ldr	r0, [r7, #4]
 80103bc:	f000 fa16 	bl	80107ec <gpio_enable_port_clock>

	// Set up config structure
	gpio_init.Mode 	= GPIO_MODE_ANALOG;
 80103c0:	2303      	movs	r3, #3
 80103c2:	613b      	str	r3, [r7, #16]
	gpio_init.Pin 	= pin;
 80103c4:	683b      	ldr	r3, [r7, #0]
 80103c6:	60fb      	str	r3, [r7, #12]
	gpio_init.Pull 	= GPIO_NOPULL;
 80103c8:	2300      	movs	r3, #0
 80103ca:	617b      	str	r3, [r7, #20]

	// Init GPIO as analog pin
	if ( NULL != p_port )
 80103cc:	687b      	ldr	r3, [r7, #4]
 80103ce:	2b00      	cmp	r3, #0
 80103d0:	d005      	beq.n	80103de <adc_init_gpio+0x3e>
	{
		HAL_GPIO_Init((GPIO_TypeDef*) p_port, &gpio_init );
 80103d2:	f107 030c 	add.w	r3, r7, #12
 80103d6:	4619      	mov	r1, r3
 80103d8:	6878      	ldr	r0, [r7, #4]
 80103da:	f7f2 f9bb 	bl	8002754 <HAL_GPIO_Init>
	}
}
 80103de:	bf00      	nop
 80103e0:	3720      	adds	r7, #32
 80103e2:	46bd      	mov	sp, r7
 80103e4:	bd80      	pop	{r7, pc}

080103e6 <adc_init_channels>:
* @param[in] 	samp_time	- Sampling time (number of ADC clock cycles)
* @return 		status 		- Status of operation
*/
////////////////////////////////////////////////////////////////////////////////
static adc_status_t adc_init_channels(const ADC_HandleTypeDef * const p_adc, const uint32_t ch, const uint32_t samp_seq, const uint32_t samp_time)
{
 80103e6:	b580      	push	{r7, lr}
 80103e8:	b08a      	sub	sp, #40	; 0x28
 80103ea:	af00      	add	r7, sp, #0
 80103ec:	60f8      	str	r0, [r7, #12]
 80103ee:	60b9      	str	r1, [r7, #8]
 80103f0:	607a      	str	r2, [r7, #4]
 80103f2:	603b      	str	r3, [r7, #0]
	adc_status_t 			status 		= eADC_OK;
 80103f4:	2300      	movs	r3, #0
 80103f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	ADC_ChannelConfTypeDef 	sConfig  	= {0};
 80103fa:	f107 0314 	add.w	r3, r7, #20
 80103fe:	2200      	movs	r2, #0
 8010400:	601a      	str	r2, [r3, #0]
 8010402:	605a      	str	r2, [r3, #4]
 8010404:	609a      	str	r2, [r3, #8]
 8010406:	60da      	str	r2, [r3, #12]

	// Set up config structure
    sConfig.Channel 		= ch;
 8010408:	68bb      	ldr	r3, [r7, #8]
 801040a:	617b      	str	r3, [r7, #20]
    sConfig.Rank 			= samp_seq;
 801040c:	687b      	ldr	r3, [r7, #4]
 801040e:	61bb      	str	r3, [r7, #24]
    sConfig.SamplingTime 	= samp_time;
 8010410:	683b      	ldr	r3, [r7, #0]
 8010412:	61fb      	str	r3, [r7, #28]

    // Init ADC channel
    if ( NULL != p_adc )
 8010414:	68fb      	ldr	r3, [r7, #12]
 8010416:	2b00      	cmp	r3, #0
 8010418:	d00b      	beq.n	8010432 <adc_init_channels+0x4c>
    {
    	if ( HAL_OK != HAL_ADC_ConfigChannel((ADC_HandleTypeDef*) p_adc, &sConfig ))
 801041a:	f107 0314 	add.w	r3, r7, #20
 801041e:	4619      	mov	r1, r3
 8010420:	68f8      	ldr	r0, [r7, #12]
 8010422:	f7f1 fbe3 	bl	8001bec <HAL_ADC_ConfigChannel>
 8010426:	4603      	mov	r3, r0
 8010428:	2b00      	cmp	r3, #0
 801042a:	d002      	beq.n	8010432 <adc_init_channels+0x4c>
    	{
    		status = eADC_ERROR;
 801042c:	2301      	movs	r3, #1
 801042e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    	}
    }

    return status;
 8010432:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8010436:	4618      	mov	r0, r3
 8010438:	3728      	adds	r7, #40	; 0x28
 801043a:	46bd      	mov	sp, r7
 801043c:	bd80      	pop	{r7, pc}
	...

08010440 <adc_get_raw>:
* @param[in] 	pin		- ADC pin
* @return 		raw_val	- Raw converted value
*/
////////////////////////////////////////////////////////////////////////////////
uint16_t adc_get_raw(const adc_pins_t pin)
{
 8010440:	b480      	push	{r7}
 8010442:	b085      	sub	sp, #20
 8010444:	af00      	add	r7, sp, #0
 8010446:	4603      	mov	r3, r0
 8010448:	71fb      	strb	r3, [r7, #7]
	uint16_t raw_val = 0U;
 801044a:	2300      	movs	r3, #0
 801044c:	81fb      	strh	r3, [r7, #14]

	if 	(	( true == gb_is_init )
 801044e:	4b09      	ldr	r3, [pc, #36]	; (8010474 <adc_get_raw+0x34>)
 8010450:	781b      	ldrb	r3, [r3, #0]
 8010452:	2b00      	cmp	r3, #0
 8010454:	d007      	beq.n	8010466 <adc_get_raw+0x26>
		&& 	( pin < eADC_NUM_OF ))
 8010456:	79fb      	ldrb	r3, [r7, #7]
 8010458:	2b05      	cmp	r3, #5
 801045a:	d804      	bhi.n	8010466 <adc_get_raw+0x26>
	{
		raw_val = gu16_adc_result[ pin ];
 801045c:	79fb      	ldrb	r3, [r7, #7]
 801045e:	4a06      	ldr	r2, [pc, #24]	; (8010478 <adc_get_raw+0x38>)
 8010460:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010464:	81fb      	strh	r3, [r7, #14]
	}

	return raw_val;
 8010466:	89fb      	ldrh	r3, [r7, #14]
}
 8010468:	4618      	mov	r0, r3
 801046a:	3714      	adds	r7, #20
 801046c:	46bd      	mov	sp, r7
 801046e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010472:	4770      	bx	lr
 8010474:	20004d3f 	.word	0x20004d3f
 8010478:	20004de8 	.word	0x20004de8

0801047c <adc_get_real>:
* @param[in] 	pin			- ADC pin
* @return 		real_val	- Real (physical) converted value
*/
////////////////////////////////////////////////////////////////////////////////
float32_t adc_get_real(const adc_pins_t pin)
{
 801047c:	b580      	push	{r7, lr}
 801047e:	ed2d 8b02 	vpush	{d8}
 8010482:	b084      	sub	sp, #16
 8010484:	af00      	add	r7, sp, #0
 8010486:	4603      	mov	r3, r0
 8010488:	71fb      	strb	r3, [r7, #7]
	float32_t real_val = 0.0f;
 801048a:	f04f 0300 	mov.w	r3, #0
 801048e:	60fb      	str	r3, [r7, #12]

	if 	(	( true == gb_is_init )
 8010490:	4b13      	ldr	r3, [pc, #76]	; (80104e0 <adc_get_real+0x64>)
 8010492:	781b      	ldrb	r3, [r3, #0]
 8010494:	2b00      	cmp	r3, #0
 8010496:	d019      	beq.n	80104cc <adc_get_real+0x50>
		&& 	( pin < eADC_NUM_OF ))
 8010498:	79fb      	ldrb	r3, [r7, #7]
 801049a:	2b05      	cmp	r3, #5
 801049c:	d816      	bhi.n	80104cc <adc_get_real+0x50>
	{
		real_val = (float32_t) ( g_adc_cfg_table[pin].k_raw_to_real * (float32_t) adc_get_raw( pin ));
 801049e:	79fa      	ldrb	r2, [r7, #7]
 80104a0:	4910      	ldr	r1, [pc, #64]	; (80104e4 <adc_get_real+0x68>)
 80104a2:	4613      	mov	r3, r2
 80104a4:	005b      	lsls	r3, r3, #1
 80104a6:	4413      	add	r3, r2
 80104a8:	00db      	lsls	r3, r3, #3
 80104aa:	440b      	add	r3, r1
 80104ac:	3314      	adds	r3, #20
 80104ae:	ed93 8a00 	vldr	s16, [r3]
 80104b2:	79fb      	ldrb	r3, [r7, #7]
 80104b4:	4618      	mov	r0, r3
 80104b6:	f7ff ffc3 	bl	8010440 <adc_get_raw>
 80104ba:	4603      	mov	r3, r0
 80104bc:	ee07 3a90 	vmov	s15, r3
 80104c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80104c4:	ee68 7a27 	vmul.f32	s15, s16, s15
 80104c8:	edc7 7a03 	vstr	s15, [r7, #12]
	}

	return real_val;
 80104cc:	68fb      	ldr	r3, [r7, #12]
 80104ce:	ee07 3a90 	vmov	s15, r3
}
 80104d2:	eeb0 0a67 	vmov.f32	s0, s15
 80104d6:	3710      	adds	r7, #16
 80104d8:	46bd      	mov	sp, r7
 80104da:	ecbd 8b02 	vpop	{d8}
 80104de:	bd80      	pop	{r7, pc}
 80104e0:	20004d3f 	.word	0x20004d3f
 80104e4:	0801edc4 	.word	0x0801edc4

080104e8 <gpio_init>:
* @param[in] 	nones
* @return 		status 		- Status of operation
*/
////////////////////////////////////////////////////////////////////////////////
gpio_status_t gpio_init(void)
{
 80104e8:	b580      	push	{r7, lr}
 80104ea:	b088      	sub	sp, #32
 80104ec:	af00      	add	r7, sp, #0
	gpio_status_t 		status 			= eGPIO_OK;
 80104ee:	2300      	movs	r3, #0
 80104f0:	75fb      	strb	r3, [r7, #23]
	GPIO_InitTypeDef 	gpio_init 		= { 0 };
 80104f2:	463b      	mov	r3, r7
 80104f4:	2200      	movs	r2, #0
 80104f6:	601a      	str	r2, [r3, #0]
 80104f8:	605a      	str	r2, [r3, #4]
 80104fa:	609a      	str	r2, [r3, #8]
 80104fc:	60da      	str	r2, [r3, #12]
 80104fe:	611a      	str	r2, [r3, #16]
	uint32_t 			i				= 0UL;
 8010500:	2300      	movs	r3, #0
 8010502:	61fb      	str	r3, [r7, #28]
	uint32_t 			num_of_inputs 	= 0UL;
 8010504:	2300      	movs	r3, #0
 8010506:	61bb      	str	r3, [r7, #24]

	// Is init
	PROJECT_CONFIG_ASSERT( false == gb_is_init );
 8010508:	4b57      	ldr	r3, [pc, #348]	; (8010668 <gpio_init+0x180>)
 801050a:	781b      	ldrb	r3, [r3, #0]
 801050c:	2b00      	cmp	r3, #0
 801050e:	d001      	beq.n	8010514 <gpio_init+0x2c>
 8010510:	f004 fd6c 	bl	8014fec <project_config_assert_fail>

	// Init all GPIOs
	for ( i = 0; i < eGPIO_NUM_OF; i++ )
 8010514:	2300      	movs	r3, #0
 8010516:	61fb      	str	r3, [r7, #28]
 8010518:	e097      	b.n	801064a <gpio_init+0x162>
	{
		// Enable clock
		gpio_enable_port_clock( g_gpio_cfg_table[i].p_port );
 801051a:	4954      	ldr	r1, [pc, #336]	; (801066c <gpio_init+0x184>)
 801051c:	69fa      	ldr	r2, [r7, #28]
 801051e:	4613      	mov	r3, r2
 8010520:	005b      	lsls	r3, r3, #1
 8010522:	4413      	add	r3, r2
 8010524:	00db      	lsls	r3, r3, #3
 8010526:	440b      	add	r3, r1
 8010528:	681b      	ldr	r3, [r3, #0]
 801052a:	4618      	mov	r0, r3
 801052c:	f000 f95e 	bl	80107ec <gpio_enable_port_clock>

		// Prepare init data
		gpio_init.Mode 		= g_gpio_cfg_table[i].mode;
 8010530:	494e      	ldr	r1, [pc, #312]	; (801066c <gpio_init+0x184>)
 8010532:	69fa      	ldr	r2, [r7, #28]
 8010534:	4613      	mov	r3, r2
 8010536:	005b      	lsls	r3, r3, #1
 8010538:	4413      	add	r3, r2
 801053a:	00db      	lsls	r3, r3, #3
 801053c:	440b      	add	r3, r1
 801053e:	330c      	adds	r3, #12
 8010540:	681b      	ldr	r3, [r3, #0]
 8010542:	607b      	str	r3, [r7, #4]
		gpio_init.Pin		= g_gpio_cfg_table[i].pin;
 8010544:	4949      	ldr	r1, [pc, #292]	; (801066c <gpio_init+0x184>)
 8010546:	69fa      	ldr	r2, [r7, #28]
 8010548:	4613      	mov	r3, r2
 801054a:	005b      	lsls	r3, r3, #1
 801054c:	4413      	add	r3, r2
 801054e:	00db      	lsls	r3, r3, #3
 8010550:	440b      	add	r3, r1
 8010552:	3304      	adds	r3, #4
 8010554:	681b      	ldr	r3, [r3, #0]
 8010556:	603b      	str	r3, [r7, #0]
		gpio_init.Speed		= g_gpio_cfg_table[i].speed;
 8010558:	4944      	ldr	r1, [pc, #272]	; (801066c <gpio_init+0x184>)
 801055a:	69fa      	ldr	r2, [r7, #28]
 801055c:	4613      	mov	r3, r2
 801055e:	005b      	lsls	r3, r3, #1
 8010560:	4413      	add	r3, r2
 8010562:	00db      	lsls	r3, r3, #3
 8010564:	440b      	add	r3, r1
 8010566:	3310      	adds	r3, #16
 8010568:	681b      	ldr	r3, [r3, #0]
 801056a:	60fb      	str	r3, [r7, #12]

		// Set output state
		if 	(	( GPIO_MODE_OUTPUT_PP == g_gpio_cfg_table[i].mode )
 801056c:	493f      	ldr	r1, [pc, #252]	; (801066c <gpio_init+0x184>)
 801056e:	69fa      	ldr	r2, [r7, #28]
 8010570:	4613      	mov	r3, r2
 8010572:	005b      	lsls	r3, r3, #1
 8010574:	4413      	add	r3, r2
 8010576:	00db      	lsls	r3, r3, #3
 8010578:	440b      	add	r3, r1
 801057a:	330c      	adds	r3, #12
 801057c:	681b      	ldr	r3, [r3, #0]
 801057e:	2b01      	cmp	r3, #1
 8010580:	d00a      	beq.n	8010598 <gpio_init+0xb0>
			|| 	( GPIO_MODE_OUTPUT_OD == g_gpio_cfg_table[i].mode ))
 8010582:	493a      	ldr	r1, [pc, #232]	; (801066c <gpio_init+0x184>)
 8010584:	69fa      	ldr	r2, [r7, #28]
 8010586:	4613      	mov	r3, r2
 8010588:	005b      	lsls	r3, r3, #1
 801058a:	4413      	add	r3, r2
 801058c:	00db      	lsls	r3, r3, #3
 801058e:	440b      	add	r3, r1
 8010590:	330c      	adds	r3, #12
 8010592:	681b      	ldr	r3, [r3, #0]
 8010594:	2b11      	cmp	r3, #17
 8010596:	d143      	bne.n	8010620 <gpio_init+0x138>
		{
			if ( eGPIO_HIGH == g_gpio_cfg_table[i].init_state )
 8010598:	4934      	ldr	r1, [pc, #208]	; (801066c <gpio_init+0x184>)
 801059a:	69fa      	ldr	r2, [r7, #28]
 801059c:	4613      	mov	r3, r2
 801059e:	005b      	lsls	r3, r3, #1
 80105a0:	4413      	add	r3, r2
 80105a2:	00db      	lsls	r3, r3, #3
 80105a4:	440b      	add	r3, r1
 80105a6:	3314      	adds	r3, #20
 80105a8:	681b      	ldr	r3, [r3, #0]
 80105aa:	2b01      	cmp	r3, #1
 80105ac:	d116      	bne.n	80105dc <gpio_init+0xf4>
			{
				HAL_GPIO_WritePin((GPIO_TypeDef*) g_gpio_cfg_table[i].p_port, g_gpio_cfg_table[i].pin, GPIO_PIN_SET );
 80105ae:	492f      	ldr	r1, [pc, #188]	; (801066c <gpio_init+0x184>)
 80105b0:	69fa      	ldr	r2, [r7, #28]
 80105b2:	4613      	mov	r3, r2
 80105b4:	005b      	lsls	r3, r3, #1
 80105b6:	4413      	add	r3, r2
 80105b8:	00db      	lsls	r3, r3, #3
 80105ba:	440b      	add	r3, r1
 80105bc:	6818      	ldr	r0, [r3, #0]
 80105be:	492b      	ldr	r1, [pc, #172]	; (801066c <gpio_init+0x184>)
 80105c0:	69fa      	ldr	r2, [r7, #28]
 80105c2:	4613      	mov	r3, r2
 80105c4:	005b      	lsls	r3, r3, #1
 80105c6:	4413      	add	r3, r2
 80105c8:	00db      	lsls	r3, r3, #3
 80105ca:	440b      	add	r3, r1
 80105cc:	3304      	adds	r3, #4
 80105ce:	681b      	ldr	r3, [r3, #0]
 80105d0:	b29b      	uxth	r3, r3
 80105d2:	2201      	movs	r2, #1
 80105d4:	4619      	mov	r1, r3
 80105d6:	f7f2 fa81 	bl	8002adc <HAL_GPIO_WritePin>
			if ( eGPIO_HIGH == g_gpio_cfg_table[i].init_state )
 80105da:	e025      	b.n	8010628 <gpio_init+0x140>
			}
			else if ( eGPIO_LOW == g_gpio_cfg_table[i].init_state  )
 80105dc:	4923      	ldr	r1, [pc, #140]	; (801066c <gpio_init+0x184>)
 80105de:	69fa      	ldr	r2, [r7, #28]
 80105e0:	4613      	mov	r3, r2
 80105e2:	005b      	lsls	r3, r3, #1
 80105e4:	4413      	add	r3, r2
 80105e6:	00db      	lsls	r3, r3, #3
 80105e8:	440b      	add	r3, r1
 80105ea:	3314      	adds	r3, #20
 80105ec:	681b      	ldr	r3, [r3, #0]
 80105ee:	2b00      	cmp	r3, #0
 80105f0:	d11a      	bne.n	8010628 <gpio_init+0x140>
			{
				HAL_GPIO_WritePin((GPIO_TypeDef*) g_gpio_cfg_table[i].p_port, g_gpio_cfg_table[i].pin, GPIO_PIN_RESET );
 80105f2:	491e      	ldr	r1, [pc, #120]	; (801066c <gpio_init+0x184>)
 80105f4:	69fa      	ldr	r2, [r7, #28]
 80105f6:	4613      	mov	r3, r2
 80105f8:	005b      	lsls	r3, r3, #1
 80105fa:	4413      	add	r3, r2
 80105fc:	00db      	lsls	r3, r3, #3
 80105fe:	440b      	add	r3, r1
 8010600:	6818      	ldr	r0, [r3, #0]
 8010602:	491a      	ldr	r1, [pc, #104]	; (801066c <gpio_init+0x184>)
 8010604:	69fa      	ldr	r2, [r7, #28]
 8010606:	4613      	mov	r3, r2
 8010608:	005b      	lsls	r3, r3, #1
 801060a:	4413      	add	r3, r2
 801060c:	00db      	lsls	r3, r3, #3
 801060e:	440b      	add	r3, r1
 8010610:	3304      	adds	r3, #4
 8010612:	681b      	ldr	r3, [r3, #0]
 8010614:	b29b      	uxth	r3, r3
 8010616:	2200      	movs	r2, #0
 8010618:	4619      	mov	r1, r3
 801061a:	f7f2 fa5f 	bl	8002adc <HAL_GPIO_WritePin>
			if ( eGPIO_HIGH == g_gpio_cfg_table[i].init_state )
 801061e:	e003      	b.n	8010628 <gpio_init+0x140>
				// No actions...
			}
		}
		else
		{
			num_of_inputs++;
 8010620:	69bb      	ldr	r3, [r7, #24]
 8010622:	3301      	adds	r3, #1
 8010624:	61bb      	str	r3, [r7, #24]
 8010626:	e000      	b.n	801062a <gpio_init+0x142>
			if ( eGPIO_HIGH == g_gpio_cfg_table[i].init_state )
 8010628:	bf00      	nop
		}

		// Initialise
		HAL_GPIO_Init((GPIO_TypeDef*) g_gpio_cfg_table[i].p_port, &gpio_init );
 801062a:	4910      	ldr	r1, [pc, #64]	; (801066c <gpio_init+0x184>)
 801062c:	69fa      	ldr	r2, [r7, #28]
 801062e:	4613      	mov	r3, r2
 8010630:	005b      	lsls	r3, r3, #1
 8010632:	4413      	add	r3, r2
 8010634:	00db      	lsls	r3, r3, #3
 8010636:	440b      	add	r3, r1
 8010638:	681b      	ldr	r3, [r3, #0]
 801063a:	463a      	mov	r2, r7
 801063c:	4611      	mov	r1, r2
 801063e:	4618      	mov	r0, r3
 8010640:	f7f2 f888 	bl	8002754 <HAL_GPIO_Init>
	for ( i = 0; i < eGPIO_NUM_OF; i++ )
 8010644:	69fb      	ldr	r3, [r7, #28]
 8010646:	3301      	adds	r3, #1
 8010648:	61fb      	str	r3, [r7, #28]
 801064a:	69fb      	ldr	r3, [r7, #28]
 801064c:	2b18      	cmp	r3, #24
 801064e:	f67f af64 	bls.w	801051a <gpio_init+0x32>
	}

	// Alles gut - init succeed
	if ( eGPIO_OK == status )
 8010652:	7dfb      	ldrb	r3, [r7, #23]
 8010654:	2b00      	cmp	r3, #0
 8010656:	d102      	bne.n	801065e <gpio_init+0x176>
	{
		gb_is_init = true;
 8010658:	4b03      	ldr	r3, [pc, #12]	; (8010668 <gpio_init+0x180>)
 801065a:	2201      	movs	r2, #1
 801065c:	701a      	strb	r2, [r3, #0]
	}

	return status;
 801065e:	7dfb      	ldrb	r3, [r7, #23]
}
 8010660:	4618      	mov	r0, r3
 8010662:	3720      	adds	r7, #32
 8010664:	46bd      	mov	sp, r7
 8010666:	bd80      	pop	{r7, pc}
 8010668:	20004df4 	.word	0x20004df4
 801066c:	0801ee54 	.word	0x0801ee54

08010670 <gpio_get>:
* @param[in] 	pin		- GPIO pin
* @return 		state	- Current state of pin
*/
////////////////////////////////////////////////////////////////////////////////
gpio_state_t gpio_get(const gpio_pins_t pin)
{
 8010670:	b580      	push	{r7, lr}
 8010672:	b084      	sub	sp, #16
 8010674:	af00      	add	r7, sp, #0
 8010676:	4603      	mov	r3, r0
 8010678:	71fb      	strb	r3, [r7, #7]
	gpio_state_t pin_state = eGPIO_UKNOWN;
 801067a:	2302      	movs	r3, #2
 801067c:	73fb      	strb	r3, [r7, #15]

	// Is init
	PROJECT_CONFIG_ASSERT( true == gb_is_init );
 801067e:	4b18      	ldr	r3, [pc, #96]	; (80106e0 <gpio_get+0x70>)
 8010680:	781b      	ldrb	r3, [r3, #0]
 8010682:	f083 0301 	eor.w	r3, r3, #1
 8010686:	b2db      	uxtb	r3, r3
 8010688:	2b00      	cmp	r3, #0
 801068a:	d001      	beq.n	8010690 <gpio_get+0x20>
 801068c:	f004 fcae 	bl	8014fec <project_config_assert_fail>

	// Check input
	PROJECT_CONFIG_ASSERT( pin < eGPIO_NUM_OF );
 8010690:	79fb      	ldrb	r3, [r7, #7]
 8010692:	2b18      	cmp	r3, #24
 8010694:	d901      	bls.n	801069a <gpio_get+0x2a>
 8010696:	f004 fca9 	bl	8014fec <project_config_assert_fail>

	if ( GPIO_PIN_SET == HAL_GPIO_ReadPin((GPIO_TypeDef*) g_gpio_cfg_table[pin].p_port, g_gpio_cfg_table[pin].pin ))
 801069a:	79fa      	ldrb	r2, [r7, #7]
 801069c:	4911      	ldr	r1, [pc, #68]	; (80106e4 <gpio_get+0x74>)
 801069e:	4613      	mov	r3, r2
 80106a0:	005b      	lsls	r3, r3, #1
 80106a2:	4413      	add	r3, r2
 80106a4:	00db      	lsls	r3, r3, #3
 80106a6:	440b      	add	r3, r1
 80106a8:	6818      	ldr	r0, [r3, #0]
 80106aa:	79fa      	ldrb	r2, [r7, #7]
 80106ac:	490d      	ldr	r1, [pc, #52]	; (80106e4 <gpio_get+0x74>)
 80106ae:	4613      	mov	r3, r2
 80106b0:	005b      	lsls	r3, r3, #1
 80106b2:	4413      	add	r3, r2
 80106b4:	00db      	lsls	r3, r3, #3
 80106b6:	440b      	add	r3, r1
 80106b8:	3304      	adds	r3, #4
 80106ba:	681b      	ldr	r3, [r3, #0]
 80106bc:	b29b      	uxth	r3, r3
 80106be:	4619      	mov	r1, r3
 80106c0:	f7f2 f9f4 	bl	8002aac <HAL_GPIO_ReadPin>
 80106c4:	4603      	mov	r3, r0
 80106c6:	2b01      	cmp	r3, #1
 80106c8:	d102      	bne.n	80106d0 <gpio_get+0x60>
	{
		pin_state = eGPIO_HIGH;
 80106ca:	2301      	movs	r3, #1
 80106cc:	73fb      	strb	r3, [r7, #15]
 80106ce:	e001      	b.n	80106d4 <gpio_get+0x64>
	}
	else
	{
		pin_state = eGPIO_LOW;
 80106d0:	2300      	movs	r3, #0
 80106d2:	73fb      	strb	r3, [r7, #15]
	}

	return pin_state;
 80106d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80106d6:	4618      	mov	r0, r3
 80106d8:	3710      	adds	r7, #16
 80106da:	46bd      	mov	sp, r7
 80106dc:	bd80      	pop	{r7, pc}
 80106de:	bf00      	nop
 80106e0:	20004df4 	.word	0x20004df4
 80106e4:	0801ee54 	.word	0x0801ee54

080106e8 <gpio_set>:
* @param[in] 	state	- Current state of pin
* @return		void
*/
////////////////////////////////////////////////////////////////////////////////
void gpio_set(const gpio_pins_t pin, const gpio_state_t state)
{
 80106e8:	b580      	push	{r7, lr}
 80106ea:	b082      	sub	sp, #8
 80106ec:	af00      	add	r7, sp, #0
 80106ee:	4603      	mov	r3, r0
 80106f0:	460a      	mov	r2, r1
 80106f2:	71fb      	strb	r3, [r7, #7]
 80106f4:	4613      	mov	r3, r2
 80106f6:	71bb      	strb	r3, [r7, #6]
	// Is init
	PROJECT_CONFIG_ASSERT( true == gb_is_init );
 80106f8:	4b22      	ldr	r3, [pc, #136]	; (8010784 <gpio_set+0x9c>)
 80106fa:	781b      	ldrb	r3, [r3, #0]
 80106fc:	f083 0301 	eor.w	r3, r3, #1
 8010700:	b2db      	uxtb	r3, r3
 8010702:	2b00      	cmp	r3, #0
 8010704:	d001      	beq.n	801070a <gpio_set+0x22>
 8010706:	f004 fc71 	bl	8014fec <project_config_assert_fail>

	// Check input
	PROJECT_CONFIG_ASSERT( pin < eGPIO_NUM_OF );
 801070a:	79fb      	ldrb	r3, [r7, #7]
 801070c:	2b18      	cmp	r3, #24
 801070e:	d901      	bls.n	8010714 <gpio_set+0x2c>
 8010710:	f004 fc6c 	bl	8014fec <project_config_assert_fail>

	if ( eGPIO_HIGH == state )
 8010714:	79bb      	ldrb	r3, [r7, #6]
 8010716:	2b01      	cmp	r3, #1
 8010718:	d116      	bne.n	8010748 <gpio_set+0x60>
	{
		HAL_GPIO_WritePin((GPIO_TypeDef*) g_gpio_cfg_table[pin].p_port, g_gpio_cfg_table[pin].pin, GPIO_PIN_SET );
 801071a:	79fa      	ldrb	r2, [r7, #7]
 801071c:	491a      	ldr	r1, [pc, #104]	; (8010788 <gpio_set+0xa0>)
 801071e:	4613      	mov	r3, r2
 8010720:	005b      	lsls	r3, r3, #1
 8010722:	4413      	add	r3, r2
 8010724:	00db      	lsls	r3, r3, #3
 8010726:	440b      	add	r3, r1
 8010728:	6818      	ldr	r0, [r3, #0]
 801072a:	79fa      	ldrb	r2, [r7, #7]
 801072c:	4916      	ldr	r1, [pc, #88]	; (8010788 <gpio_set+0xa0>)
 801072e:	4613      	mov	r3, r2
 8010730:	005b      	lsls	r3, r3, #1
 8010732:	4413      	add	r3, r2
 8010734:	00db      	lsls	r3, r3, #3
 8010736:	440b      	add	r3, r1
 8010738:	3304      	adds	r3, #4
 801073a:	681b      	ldr	r3, [r3, #0]
 801073c:	b29b      	uxth	r3, r3
 801073e:	2201      	movs	r2, #1
 8010740:	4619      	mov	r1, r3
 8010742:	f7f2 f9cb 	bl	8002adc <HAL_GPIO_WritePin>
	}
	else
	{
		// No actions...
	}
}
 8010746:	e018      	b.n	801077a <gpio_set+0x92>
	else if ( eGPIO_LOW == state )
 8010748:	79bb      	ldrb	r3, [r7, #6]
 801074a:	2b00      	cmp	r3, #0
 801074c:	d115      	bne.n	801077a <gpio_set+0x92>
		HAL_GPIO_WritePin((GPIO_TypeDef*) g_gpio_cfg_table[pin].p_port, g_gpio_cfg_table[pin].pin, GPIO_PIN_RESET );
 801074e:	79fa      	ldrb	r2, [r7, #7]
 8010750:	490d      	ldr	r1, [pc, #52]	; (8010788 <gpio_set+0xa0>)
 8010752:	4613      	mov	r3, r2
 8010754:	005b      	lsls	r3, r3, #1
 8010756:	4413      	add	r3, r2
 8010758:	00db      	lsls	r3, r3, #3
 801075a:	440b      	add	r3, r1
 801075c:	6818      	ldr	r0, [r3, #0]
 801075e:	79fa      	ldrb	r2, [r7, #7]
 8010760:	4909      	ldr	r1, [pc, #36]	; (8010788 <gpio_set+0xa0>)
 8010762:	4613      	mov	r3, r2
 8010764:	005b      	lsls	r3, r3, #1
 8010766:	4413      	add	r3, r2
 8010768:	00db      	lsls	r3, r3, #3
 801076a:	440b      	add	r3, r1
 801076c:	3304      	adds	r3, #4
 801076e:	681b      	ldr	r3, [r3, #0]
 8010770:	b29b      	uxth	r3, r3
 8010772:	2200      	movs	r2, #0
 8010774:	4619      	mov	r1, r3
 8010776:	f7f2 f9b1 	bl	8002adc <HAL_GPIO_WritePin>
}
 801077a:	bf00      	nop
 801077c:	3708      	adds	r7, #8
 801077e:	46bd      	mov	sp, r7
 8010780:	bd80      	pop	{r7, pc}
 8010782:	bf00      	nop
 8010784:	20004df4 	.word	0x20004df4
 8010788:	0801ee54 	.word	0x0801ee54

0801078c <gpio_toggle>:
* @param[in] 	pin		- GPIO pin
* @return		void
*/
////////////////////////////////////////////////////////////////////////////////
void gpio_toggle(const gpio_pins_t pin)
{
 801078c:	b580      	push	{r7, lr}
 801078e:	b082      	sub	sp, #8
 8010790:	af00      	add	r7, sp, #0
 8010792:	4603      	mov	r3, r0
 8010794:	71fb      	strb	r3, [r7, #7]
	// Is init
	PROJECT_CONFIG_ASSERT( true == gb_is_init );
 8010796:	4b13      	ldr	r3, [pc, #76]	; (80107e4 <gpio_toggle+0x58>)
 8010798:	781b      	ldrb	r3, [r3, #0]
 801079a:	f083 0301 	eor.w	r3, r3, #1
 801079e:	b2db      	uxtb	r3, r3
 80107a0:	2b00      	cmp	r3, #0
 80107a2:	d001      	beq.n	80107a8 <gpio_toggle+0x1c>
 80107a4:	f004 fc22 	bl	8014fec <project_config_assert_fail>

	// Check input
	PROJECT_CONFIG_ASSERT( pin < eGPIO_NUM_OF );
 80107a8:	79fb      	ldrb	r3, [r7, #7]
 80107aa:	2b18      	cmp	r3, #24
 80107ac:	d901      	bls.n	80107b2 <gpio_toggle+0x26>
 80107ae:	f004 fc1d 	bl	8014fec <project_config_assert_fail>

	HAL_GPIO_TogglePin((GPIO_TypeDef*) g_gpio_cfg_table[pin].p_port, g_gpio_cfg_table[pin].pin );
 80107b2:	79fa      	ldrb	r2, [r7, #7]
 80107b4:	490c      	ldr	r1, [pc, #48]	; (80107e8 <gpio_toggle+0x5c>)
 80107b6:	4613      	mov	r3, r2
 80107b8:	005b      	lsls	r3, r3, #1
 80107ba:	4413      	add	r3, r2
 80107bc:	00db      	lsls	r3, r3, #3
 80107be:	440b      	add	r3, r1
 80107c0:	6818      	ldr	r0, [r3, #0]
 80107c2:	79fa      	ldrb	r2, [r7, #7]
 80107c4:	4908      	ldr	r1, [pc, #32]	; (80107e8 <gpio_toggle+0x5c>)
 80107c6:	4613      	mov	r3, r2
 80107c8:	005b      	lsls	r3, r3, #1
 80107ca:	4413      	add	r3, r2
 80107cc:	00db      	lsls	r3, r3, #3
 80107ce:	440b      	add	r3, r1
 80107d0:	3304      	adds	r3, #4
 80107d2:	681b      	ldr	r3, [r3, #0]
 80107d4:	b29b      	uxth	r3, r3
 80107d6:	4619      	mov	r1, r3
 80107d8:	f7f2 f999 	bl	8002b0e <HAL_GPIO_TogglePin>
}
 80107dc:	bf00      	nop
 80107de:	3708      	adds	r7, #8
 80107e0:	46bd      	mov	sp, r7
 80107e2:	bd80      	pop	{r7, pc}
 80107e4:	20004df4 	.word	0x20004df4
 80107e8:	0801ee54 	.word	0x0801ee54

080107ec <gpio_enable_port_clock>:
* @param[in] 	p_port		- Pointer to GPIO address
* @return 		void
*/
////////////////////////////////////////////////////////////////////////////////
void gpio_enable_port_clock(const GPIO_TypeDef * p_port)
{
 80107ec:	b480      	push	{r7}
 80107ee:	b089      	sub	sp, #36	; 0x24
 80107f0:	af00      	add	r7, sp, #0
 80107f2:	6078      	str	r0, [r7, #4]
	if ( GPIOA == p_port )
 80107f4:	687b      	ldr	r3, [r7, #4]
 80107f6:	4a2c      	ldr	r2, [pc, #176]	; (80108a8 <gpio_enable_port_clock+0xbc>)
 80107f8:	4293      	cmp	r3, r2
 80107fa:	d10c      	bne.n	8010816 <gpio_enable_port_clock+0x2a>
	{
		__HAL_RCC_GPIOA_CLK_ENABLE();
 80107fc:	4b2b      	ldr	r3, [pc, #172]	; (80108ac <gpio_enable_port_clock+0xc0>)
 80107fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010800:	4a2a      	ldr	r2, [pc, #168]	; (80108ac <gpio_enable_port_clock+0xc0>)
 8010802:	f043 0301 	orr.w	r3, r3, #1
 8010806:	6313      	str	r3, [r2, #48]	; 0x30
 8010808:	4b28      	ldr	r3, [pc, #160]	; (80108ac <gpio_enable_port_clock+0xc0>)
 801080a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801080c:	f003 0301 	and.w	r3, r3, #1
 8010810:	61fb      	str	r3, [r7, #28]
 8010812:	69fb      	ldr	r3, [r7, #28]
	}
	else
	{
		// No actions...
	}
}
 8010814:	e042      	b.n	801089c <gpio_enable_port_clock+0xb0>
	else if ( GPIOB == p_port )
 8010816:	687b      	ldr	r3, [r7, #4]
 8010818:	4a25      	ldr	r2, [pc, #148]	; (80108b0 <gpio_enable_port_clock+0xc4>)
 801081a:	4293      	cmp	r3, r2
 801081c:	d10c      	bne.n	8010838 <gpio_enable_port_clock+0x4c>
		__HAL_RCC_GPIOB_CLK_ENABLE();
 801081e:	4b23      	ldr	r3, [pc, #140]	; (80108ac <gpio_enable_port_clock+0xc0>)
 8010820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010822:	4a22      	ldr	r2, [pc, #136]	; (80108ac <gpio_enable_port_clock+0xc0>)
 8010824:	f043 0302 	orr.w	r3, r3, #2
 8010828:	6313      	str	r3, [r2, #48]	; 0x30
 801082a:	4b20      	ldr	r3, [pc, #128]	; (80108ac <gpio_enable_port_clock+0xc0>)
 801082c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801082e:	f003 0302 	and.w	r3, r3, #2
 8010832:	61bb      	str	r3, [r7, #24]
 8010834:	69bb      	ldr	r3, [r7, #24]
}
 8010836:	e031      	b.n	801089c <gpio_enable_port_clock+0xb0>
	else if ( GPIOC == p_port )
 8010838:	687b      	ldr	r3, [r7, #4]
 801083a:	4a1e      	ldr	r2, [pc, #120]	; (80108b4 <gpio_enable_port_clock+0xc8>)
 801083c:	4293      	cmp	r3, r2
 801083e:	d10c      	bne.n	801085a <gpio_enable_port_clock+0x6e>
		__HAL_RCC_GPIOC_CLK_ENABLE();
 8010840:	4b1a      	ldr	r3, [pc, #104]	; (80108ac <gpio_enable_port_clock+0xc0>)
 8010842:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010844:	4a19      	ldr	r2, [pc, #100]	; (80108ac <gpio_enable_port_clock+0xc0>)
 8010846:	f043 0304 	orr.w	r3, r3, #4
 801084a:	6313      	str	r3, [r2, #48]	; 0x30
 801084c:	4b17      	ldr	r3, [pc, #92]	; (80108ac <gpio_enable_port_clock+0xc0>)
 801084e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010850:	f003 0304 	and.w	r3, r3, #4
 8010854:	617b      	str	r3, [r7, #20]
 8010856:	697b      	ldr	r3, [r7, #20]
}
 8010858:	e020      	b.n	801089c <gpio_enable_port_clock+0xb0>
	else if ( GPIOD == p_port )
 801085a:	687b      	ldr	r3, [r7, #4]
 801085c:	4a16      	ldr	r2, [pc, #88]	; (80108b8 <gpio_enable_port_clock+0xcc>)
 801085e:	4293      	cmp	r3, r2
 8010860:	d10c      	bne.n	801087c <gpio_enable_port_clock+0x90>
		__HAL_RCC_GPIOD_CLK_ENABLE();
 8010862:	4b12      	ldr	r3, [pc, #72]	; (80108ac <gpio_enable_port_clock+0xc0>)
 8010864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010866:	4a11      	ldr	r2, [pc, #68]	; (80108ac <gpio_enable_port_clock+0xc0>)
 8010868:	f043 0308 	orr.w	r3, r3, #8
 801086c:	6313      	str	r3, [r2, #48]	; 0x30
 801086e:	4b0f      	ldr	r3, [pc, #60]	; (80108ac <gpio_enable_port_clock+0xc0>)
 8010870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010872:	f003 0308 	and.w	r3, r3, #8
 8010876:	613b      	str	r3, [r7, #16]
 8010878:	693b      	ldr	r3, [r7, #16]
}
 801087a:	e00f      	b.n	801089c <gpio_enable_port_clock+0xb0>
	else if ( GPIOE == p_port )
 801087c:	687b      	ldr	r3, [r7, #4]
 801087e:	4a0f      	ldr	r2, [pc, #60]	; (80108bc <gpio_enable_port_clock+0xd0>)
 8010880:	4293      	cmp	r3, r2
 8010882:	d10b      	bne.n	801089c <gpio_enable_port_clock+0xb0>
		__HAL_RCC_GPIOE_CLK_ENABLE();
 8010884:	4b09      	ldr	r3, [pc, #36]	; (80108ac <gpio_enable_port_clock+0xc0>)
 8010886:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010888:	4a08      	ldr	r2, [pc, #32]	; (80108ac <gpio_enable_port_clock+0xc0>)
 801088a:	f043 0310 	orr.w	r3, r3, #16
 801088e:	6313      	str	r3, [r2, #48]	; 0x30
 8010890:	4b06      	ldr	r3, [pc, #24]	; (80108ac <gpio_enable_port_clock+0xc0>)
 8010892:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010894:	f003 0310 	and.w	r3, r3, #16
 8010898:	60fb      	str	r3, [r7, #12]
 801089a:	68fb      	ldr	r3, [r7, #12]
}
 801089c:	bf00      	nop
 801089e:	3724      	adds	r7, #36	; 0x24
 80108a0:	46bd      	mov	sp, r7
 80108a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108a6:	4770      	bx	lr
 80108a8:	40020000 	.word	0x40020000
 80108ac:	40023800 	.word	0x40023800
 80108b0:	40020400 	.word	0x40020400
 80108b4:	40020800 	.word	0x40020800
 80108b8:	40020c00 	.word	0x40020c00
 80108bc:	40021000 	.word	0x40021000

080108c0 <i2c_init>:
*
* @return 		status 	- Status of operation
*/
////////////////////////////////////////////////////////////////////////////////
i2c_status_t i2c_init(void)
{
 80108c0:	b580      	push	{r7, lr}
 80108c2:	b082      	sub	sp, #8
 80108c4:	af00      	add	r7, sp, #0
	i2c_status_t status = eI2C_OK;
 80108c6:	2300      	movs	r3, #0
 80108c8:	71fb      	strb	r3, [r7, #7]

	// USBC PD chip interface init
	status |= i2c_usbc_init();
 80108ca:	f000 f85b 	bl	8010984 <i2c_usbc_init>
 80108ce:	4603      	mov	r3, r0
 80108d0:	461a      	mov	r2, r3
 80108d2:	79fb      	ldrb	r3, [r7, #7]
 80108d4:	4313      	orrs	r3, r2
 80108d6:	71fb      	strb	r3, [r7, #7]

	// Sensoric I2C init
	// TODO:...

	return status;
 80108d8:	79fb      	ldrb	r3, [r7, #7]
}
 80108da:	4618      	mov	r0, r3
 80108dc:	3708      	adds	r7, #8
 80108de:	46bd      	mov	sp, r7
 80108e0:	bd80      	pop	{r7, pc}
	...

080108e4 <i2c_usbc_read>:
* @param[in] 	size		- Size of read data
* @return 		status 		- Status of operation
*/
////////////////////////////////////////////////////////////////////////////////
i2c_status_t i2c_usbc_read(const uint8_t dev_addr, const uint8_t reg_addr, uint8_t * p_rx_data, const uint32_t size)
{
 80108e4:	b580      	push	{r7, lr}
 80108e6:	b08a      	sub	sp, #40	; 0x28
 80108e8:	af04      	add	r7, sp, #16
 80108ea:	60ba      	str	r2, [r7, #8]
 80108ec:	607b      	str	r3, [r7, #4]
 80108ee:	4603      	mov	r3, r0
 80108f0:	73fb      	strb	r3, [r7, #15]
 80108f2:	460b      	mov	r3, r1
 80108f4:	73bb      	strb	r3, [r7, #14]
	i2c_status_t status = eI2C_OK;
 80108f6:	2300      	movs	r3, #0
 80108f8:	75fb      	strb	r3, [r7, #23]

	if ( HAL_OK != HAL_I2C_Mem_Read( &hi2c4, ( dev_addr << 1U ), reg_addr, I2C_MEMADD_SIZE_8BIT, p_rx_data, size, 10UL ))
 80108fa:	7bfb      	ldrb	r3, [r7, #15]
 80108fc:	b29b      	uxth	r3, r3
 80108fe:	005b      	lsls	r3, r3, #1
 8010900:	b299      	uxth	r1, r3
 8010902:	7bbb      	ldrb	r3, [r7, #14]
 8010904:	b29a      	uxth	r2, r3
 8010906:	687b      	ldr	r3, [r7, #4]
 8010908:	b29b      	uxth	r3, r3
 801090a:	200a      	movs	r0, #10
 801090c:	9002      	str	r0, [sp, #8]
 801090e:	9301      	str	r3, [sp, #4]
 8010910:	68bb      	ldr	r3, [r7, #8]
 8010912:	9300      	str	r3, [sp, #0]
 8010914:	2301      	movs	r3, #1
 8010916:	4806      	ldr	r0, [pc, #24]	; (8010930 <i2c_usbc_read+0x4c>)
 8010918:	f7f2 fab8 	bl	8002e8c <HAL_I2C_Mem_Read>
 801091c:	4603      	mov	r3, r0
 801091e:	2b00      	cmp	r3, #0
 8010920:	d001      	beq.n	8010926 <i2c_usbc_read+0x42>
	{
		status = eI2C_ERROR;
 8010922:	2301      	movs	r3, #1
 8010924:	75fb      	strb	r3, [r7, #23]
	}

	return status;
 8010926:	7dfb      	ldrb	r3, [r7, #23]
}
 8010928:	4618      	mov	r0, r3
 801092a:	3718      	adds	r7, #24
 801092c:	46bd      	mov	sp, r7
 801092e:	bd80      	pop	{r7, pc}
 8010930:	20004df8 	.word	0x20004df8

08010934 <i2c_usbc_write>:
* @param[in] 	size		- Size of write data
* @return 		status 		- Status of operation
*/
////////////////////////////////////////////////////////////////////////////////
i2c_status_t i2c_usbc_write(const uint8_t dev_addr, const uint8_t reg_addr, uint8_t * p_tx_data, const uint32_t size)
{
 8010934:	b580      	push	{r7, lr}
 8010936:	b08a      	sub	sp, #40	; 0x28
 8010938:	af04      	add	r7, sp, #16
 801093a:	60ba      	str	r2, [r7, #8]
 801093c:	607b      	str	r3, [r7, #4]
 801093e:	4603      	mov	r3, r0
 8010940:	73fb      	strb	r3, [r7, #15]
 8010942:	460b      	mov	r3, r1
 8010944:	73bb      	strb	r3, [r7, #14]
	i2c_status_t status = eI2C_OK;
 8010946:	2300      	movs	r3, #0
 8010948:	75fb      	strb	r3, [r7, #23]

	if ( HAL_OK != HAL_I2C_Mem_Write( &hi2c4, ( dev_addr << 1U ), reg_addr, I2C_MEMADD_SIZE_8BIT, p_tx_data, size, 10UL ))
 801094a:	7bfb      	ldrb	r3, [r7, #15]
 801094c:	b29b      	uxth	r3, r3
 801094e:	005b      	lsls	r3, r3, #1
 8010950:	b299      	uxth	r1, r3
 8010952:	7bbb      	ldrb	r3, [r7, #14]
 8010954:	b29a      	uxth	r2, r3
 8010956:	687b      	ldr	r3, [r7, #4]
 8010958:	b29b      	uxth	r3, r3
 801095a:	200a      	movs	r0, #10
 801095c:	9002      	str	r0, [sp, #8]
 801095e:	9301      	str	r3, [sp, #4]
 8010960:	68bb      	ldr	r3, [r7, #8]
 8010962:	9300      	str	r3, [sp, #0]
 8010964:	2301      	movs	r3, #1
 8010966:	4806      	ldr	r0, [pc, #24]	; (8010980 <i2c_usbc_write+0x4c>)
 8010968:	f7f2 f97c 	bl	8002c64 <HAL_I2C_Mem_Write>
 801096c:	4603      	mov	r3, r0
 801096e:	2b00      	cmp	r3, #0
 8010970:	d001      	beq.n	8010976 <i2c_usbc_write+0x42>
	{
		status = eI2C_ERROR;
 8010972:	2301      	movs	r3, #1
 8010974:	75fb      	strb	r3, [r7, #23]
	}

	return status;
 8010976:	7dfb      	ldrb	r3, [r7, #23]
}
 8010978:	4618      	mov	r0, r3
 801097a:	3718      	adds	r7, #24
 801097c:	46bd      	mov	sp, r7
 801097e:	bd80      	pop	{r7, pc}
 8010980:	20004df8 	.word	0x20004df8

08010984 <i2c_usbc_init>:
*
* @return 		status 		- Status of operation
*/
////////////////////////////////////////////////////////////////////////////////
static i2c_status_t i2c_usbc_init(void)
{
 8010984:	b580      	push	{r7, lr}
 8010986:	b082      	sub	sp, #8
 8010988:	af00      	add	r7, sp, #0
	i2c_status_t status = eI2C_OK;
 801098a:	2300      	movs	r3, #0
 801098c:	71fb      	strb	r3, [r7, #7]

	// Enable I2C clock
	__HAL_RCC_I2C4_CLK_ENABLE();
 801098e:	4b24      	ldr	r3, [pc, #144]	; (8010a20 <i2c_usbc_init+0x9c>)
 8010990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010992:	4a23      	ldr	r2, [pc, #140]	; (8010a20 <i2c_usbc_init+0x9c>)
 8010994:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8010998:	6413      	str	r3, [r2, #64]	; 0x40
 801099a:	4b21      	ldr	r3, [pc, #132]	; (8010a20 <i2c_usbc_init+0x9c>)
 801099c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801099e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80109a2:	603b      	str	r3, [r7, #0]
 80109a4:	683b      	ldr	r3, [r7, #0]

	// Initialize GPIO
	i2c_usbc_init_gpio();
 80109a6:	f000 f843 	bl	8010a30 <i2c_usbc_init_gpio>

	// Initialize I2C
	hi2c4.Instance 				= I2C4;
 80109aa:	4b1e      	ldr	r3, [pc, #120]	; (8010a24 <i2c_usbc_init+0xa0>)
 80109ac:	4a1e      	ldr	r2, [pc, #120]	; (8010a28 <i2c_usbc_init+0xa4>)
 80109ae:	601a      	str	r2, [r3, #0]
	hi2c4.Init.Timing 			= 0x00909BEB;;
 80109b0:	4b1c      	ldr	r3, [pc, #112]	; (8010a24 <i2c_usbc_init+0xa0>)
 80109b2:	4a1e      	ldr	r2, [pc, #120]	; (8010a2c <i2c_usbc_init+0xa8>)
 80109b4:	605a      	str	r2, [r3, #4]
	hi2c4.Init.OwnAddress1 		= 0;
 80109b6:	4b1b      	ldr	r3, [pc, #108]	; (8010a24 <i2c_usbc_init+0xa0>)
 80109b8:	2200      	movs	r2, #0
 80109ba:	609a      	str	r2, [r3, #8]
	hi2c4.Init.AddressingMode 	= I2C_ADDRESSINGMODE_7BIT;
 80109bc:	4b19      	ldr	r3, [pc, #100]	; (8010a24 <i2c_usbc_init+0xa0>)
 80109be:	2201      	movs	r2, #1
 80109c0:	60da      	str	r2, [r3, #12]
	hi2c4.Init.DualAddressMode 	= I2C_DUALADDRESS_DISABLE;
 80109c2:	4b18      	ldr	r3, [pc, #96]	; (8010a24 <i2c_usbc_init+0xa0>)
 80109c4:	2200      	movs	r2, #0
 80109c6:	611a      	str	r2, [r3, #16]
	hi2c4.Init.OwnAddress2 		= 0;
 80109c8:	4b16      	ldr	r3, [pc, #88]	; (8010a24 <i2c_usbc_init+0xa0>)
 80109ca:	2200      	movs	r2, #0
 80109cc:	615a      	str	r2, [r3, #20]
	hi2c4.Init.OwnAddress2Masks 	= I2C_OA2_NOMASK;
 80109ce:	4b15      	ldr	r3, [pc, #84]	; (8010a24 <i2c_usbc_init+0xa0>)
 80109d0:	2200      	movs	r2, #0
 80109d2:	619a      	str	r2, [r3, #24]
	hi2c4.Init.GeneralCallMode 	= I2C_GENERALCALL_DISABLE;
 80109d4:	4b13      	ldr	r3, [pc, #76]	; (8010a24 <i2c_usbc_init+0xa0>)
 80109d6:	2200      	movs	r2, #0
 80109d8:	61da      	str	r2, [r3, #28]
	hi2c4.Init.NoStretchMode 	= I2C_NOSTRETCH_DISABLE;
 80109da:	4b12      	ldr	r3, [pc, #72]	; (8010a24 <i2c_usbc_init+0xa0>)
 80109dc:	2200      	movs	r2, #0
 80109de:	621a      	str	r2, [r3, #32]

	if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 80109e0:	4810      	ldr	r0, [pc, #64]	; (8010a24 <i2c_usbc_init+0xa0>)
 80109e2:	f7f2 f8af 	bl	8002b44 <HAL_I2C_Init>
 80109e6:	4603      	mov	r3, r0
 80109e8:	2b00      	cmp	r3, #0
 80109ea:	d001      	beq.n	80109f0 <i2c_usbc_init+0x6c>
	{
		//Error_Handler();
		PROJECT_CONFIG_ASSERT( 0 );
 80109ec:	f004 fafe 	bl	8014fec <project_config_assert_fail>
	}
	/** Configure Analogue filter
	*/
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80109f0:	2100      	movs	r1, #0
 80109f2:	480c      	ldr	r0, [pc, #48]	; (8010a24 <i2c_usbc_init+0xa0>)
 80109f4:	f7f2 fd80 	bl	80034f8 <HAL_I2CEx_ConfigAnalogFilter>
 80109f8:	4603      	mov	r3, r0
 80109fa:	2b00      	cmp	r3, #0
 80109fc:	d001      	beq.n	8010a02 <i2c_usbc_init+0x7e>
	{
		//Error_Handler();
		PROJECT_CONFIG_ASSERT( 0 );
 80109fe:	f004 faf5 	bl	8014fec <project_config_assert_fail>
	}
	/** Configure Digital filter
	*/
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8010a02:	2100      	movs	r1, #0
 8010a04:	4807      	ldr	r0, [pc, #28]	; (8010a24 <i2c_usbc_init+0xa0>)
 8010a06:	f7f2 fdc2 	bl	800358e <HAL_I2CEx_ConfigDigitalFilter>
 8010a0a:	4603      	mov	r3, r0
 8010a0c:	2b00      	cmp	r3, #0
 8010a0e:	d001      	beq.n	8010a14 <i2c_usbc_init+0x90>
	{
		//Error_Handler();
		PROJECT_CONFIG_ASSERT( 0 );
 8010a10:	f004 faec 	bl	8014fec <project_config_assert_fail>
	}

	return status;
 8010a14:	79fb      	ldrb	r3, [r7, #7]
}
 8010a16:	4618      	mov	r0, r3
 8010a18:	3708      	adds	r7, #8
 8010a1a:	46bd      	mov	sp, r7
 8010a1c:	bd80      	pop	{r7, pc}
 8010a1e:	bf00      	nop
 8010a20:	40023800 	.word	0x40023800
 8010a24:	20004df8 	.word	0x20004df8
 8010a28:	40006000 	.word	0x40006000
 8010a2c:	00909beb 	.word	0x00909beb

08010a30 <i2c_usbc_init_gpio>:
*
* @return 		status 		- Status of operation
*/
////////////////////////////////////////////////////////////////////////////////
static void i2c_usbc_init_gpio(void)
{
 8010a30:	b580      	push	{r7, lr}
 8010a32:	b088      	sub	sp, #32
 8010a34:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8010a36:	f107 030c 	add.w	r3, r7, #12
 8010a3a:	2200      	movs	r2, #0
 8010a3c:	601a      	str	r2, [r3, #0]
 8010a3e:	605a      	str	r2, [r3, #4]
 8010a40:	609a      	str	r2, [r3, #8]
 8010a42:	60da      	str	r2, [r3, #12]
 8010a44:	611a      	str	r2, [r3, #16]

	// Init clock
	USBC_PD_SCL_CLK_EN();
 8010a46:	4b16      	ldr	r3, [pc, #88]	; (8010aa0 <i2c_usbc_init_gpio+0x70>)
 8010a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010a4a:	4a15      	ldr	r2, [pc, #84]	; (8010aa0 <i2c_usbc_init_gpio+0x70>)
 8010a4c:	f043 0308 	orr.w	r3, r3, #8
 8010a50:	6313      	str	r3, [r2, #48]	; 0x30
 8010a52:	4b13      	ldr	r3, [pc, #76]	; (8010aa0 <i2c_usbc_init_gpio+0x70>)
 8010a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010a56:	f003 0308 	and.w	r3, r3, #8
 8010a5a:	60bb      	str	r3, [r7, #8]
 8010a5c:	68bb      	ldr	r3, [r7, #8]
	USBC_PD_SDA_CLK_EN();
 8010a5e:	4b10      	ldr	r3, [pc, #64]	; (8010aa0 <i2c_usbc_init_gpio+0x70>)
 8010a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010a62:	4a0f      	ldr	r2, [pc, #60]	; (8010aa0 <i2c_usbc_init_gpio+0x70>)
 8010a64:	f043 0308 	orr.w	r3, r3, #8
 8010a68:	6313      	str	r3, [r2, #48]	; 0x30
 8010a6a:	4b0d      	ldr	r3, [pc, #52]	; (8010aa0 <i2c_usbc_init_gpio+0x70>)
 8010a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010a6e:	f003 0308 	and.w	r3, r3, #8
 8010a72:	607b      	str	r3, [r7, #4]
 8010a74:	687b      	ldr	r3, [r7, #4]

    GPIO_InitStruct.Pin 		= ( USBC_PD_SCL__PIN | USBC_PD_SDA__PIN );
 8010a76:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8010a7a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode 		= GPIO_MODE_AF_OD;
 8010a7c:	2312      	movs	r3, #18
 8010a7e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull 		= GPIO_PULLUP;
 8010a80:	2301      	movs	r3, #1
 8010a82:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed 		= GPIO_SPEED_FREQ_VERY_HIGH;
 8010a84:	2303      	movs	r3, #3
 8010a86:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate 	= GPIO_AF4_I2C4;
 8010a88:	2304      	movs	r3, #4
 8010a8a:	61fb      	str	r3, [r7, #28]

    HAL_GPIO_Init( GPIOD, &GPIO_InitStruct );
 8010a8c:	f107 030c 	add.w	r3, r7, #12
 8010a90:	4619      	mov	r1, r3
 8010a92:	4804      	ldr	r0, [pc, #16]	; (8010aa4 <i2c_usbc_init_gpio+0x74>)
 8010a94:	f7f1 fe5e 	bl	8002754 <HAL_GPIO_Init>
}
 8010a98:	bf00      	nop
 8010a9a:	3720      	adds	r7, #32
 8010a9c:	46bd      	mov	sp, r7
 8010a9e:	bd80      	pop	{r7, pc}
 8010aa0:	40023800 	.word	0x40023800
 8010aa4:	40020c00 	.word	0x40020c00

08010aa8 <spi_display_gpio_init>:
*
* @return 		void
*/
////////////////////////////////////////////////////////////////////////////////
static void	spi_display_gpio_init(void)
{
 8010aa8:	b580      	push	{r7, lr}
 8010aaa:	b088      	sub	sp, #32
 8010aac:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8010aae:	f107 030c 	add.w	r3, r7, #12
 8010ab2:	2200      	movs	r2, #0
 8010ab4:	601a      	str	r2, [r3, #0]
 8010ab6:	605a      	str	r2, [r3, #4]
 8010ab8:	609a      	str	r2, [r3, #8]
 8010aba:	60da      	str	r2, [r3, #12]
 8010abc:	611a      	str	r2, [r3, #16]

	// Enable clock
	D_SCK_CLK_EN();
 8010abe:	4b2c      	ldr	r3, [pc, #176]	; (8010b70 <spi_display_gpio_init+0xc8>)
 8010ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010ac2:	4a2b      	ldr	r2, [pc, #172]	; (8010b70 <spi_display_gpio_init+0xc8>)
 8010ac4:	f043 0302 	orr.w	r3, r3, #2
 8010ac8:	6313      	str	r3, [r2, #48]	; 0x30
 8010aca:	4b29      	ldr	r3, [pc, #164]	; (8010b70 <spi_display_gpio_init+0xc8>)
 8010acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010ace:	f003 0302 	and.w	r3, r3, #2
 8010ad2:	60bb      	str	r3, [r7, #8]
 8010ad4:	68bb      	ldr	r3, [r7, #8]
	D_MISO_CLK_EN();
 8010ad6:	4b26      	ldr	r3, [pc, #152]	; (8010b70 <spi_display_gpio_init+0xc8>)
 8010ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010ada:	4a25      	ldr	r2, [pc, #148]	; (8010b70 <spi_display_gpio_init+0xc8>)
 8010adc:	f043 0302 	orr.w	r3, r3, #2
 8010ae0:	6313      	str	r3, [r2, #48]	; 0x30
 8010ae2:	4b23      	ldr	r3, [pc, #140]	; (8010b70 <spi_display_gpio_init+0xc8>)
 8010ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010ae6:	f003 0302 	and.w	r3, r3, #2
 8010aea:	607b      	str	r3, [r7, #4]
 8010aec:	687b      	ldr	r3, [r7, #4]
	D_MOSI_CLK_EN();
 8010aee:	4b20      	ldr	r3, [pc, #128]	; (8010b70 <spi_display_gpio_init+0xc8>)
 8010af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010af2:	4a1f      	ldr	r2, [pc, #124]	; (8010b70 <spi_display_gpio_init+0xc8>)
 8010af4:	f043 0302 	orr.w	r3, r3, #2
 8010af8:	6313      	str	r3, [r2, #48]	; 0x30
 8010afa:	4b1d      	ldr	r3, [pc, #116]	; (8010b70 <spi_display_gpio_init+0xc8>)
 8010afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010afe:	f003 0302 	and.w	r3, r3, #2
 8010b02:	603b      	str	r3, [r7, #0]
 8010b04:	683b      	ldr	r3, [r7, #0]

	// SPI pins
    GPIO_InitStruct.Pin 		= D_SCK__PIN;
 8010b06:	2308      	movs	r3, #8
 8010b08:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode 		= GPIO_MODE_AF_PP;
 8010b0a:	2302      	movs	r3, #2
 8010b0c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull 		= D_SCK__PULL;
 8010b0e:	2300      	movs	r3, #0
 8010b10:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed 		= GPIO_SPEED_FREQ_VERY_HIGH;
 8010b12:	2303      	movs	r3, #3
 8010b14:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate 	= D_SCK__AF;
 8010b16:	2305      	movs	r3, #5
 8010b18:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init( D_SCK__PORT, &GPIO_InitStruct );
 8010b1a:	f107 030c 	add.w	r3, r7, #12
 8010b1e:	4619      	mov	r1, r3
 8010b20:	4814      	ldr	r0, [pc, #80]	; (8010b74 <spi_display_gpio_init+0xcc>)
 8010b22:	f7f1 fe17 	bl	8002754 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin 		= D_MOSI__PIN;
 8010b26:	2320      	movs	r3, #32
 8010b28:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode 		= GPIO_MODE_AF_PP;
 8010b2a:	2302      	movs	r3, #2
 8010b2c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull 		= D_MOSI__PULL;
 8010b2e:	2300      	movs	r3, #0
 8010b30:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed 		= GPIO_SPEED_FREQ_VERY_HIGH;
 8010b32:	2303      	movs	r3, #3
 8010b34:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate 	= D_MOSI__AF;
 8010b36:	2305      	movs	r3, #5
 8010b38:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init( D_MOSI__PORT, &GPIO_InitStruct );
 8010b3a:	f107 030c 	add.w	r3, r7, #12
 8010b3e:	4619      	mov	r1, r3
 8010b40:	480c      	ldr	r0, [pc, #48]	; (8010b74 <spi_display_gpio_init+0xcc>)
 8010b42:	f7f1 fe07 	bl	8002754 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin 		= D_MISO__PIN;
 8010b46:	2310      	movs	r3, #16
 8010b48:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode 		= GPIO_MODE_AF_PP;
 8010b4a:	2302      	movs	r3, #2
 8010b4c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull 		= D_MISO__PULL;
 8010b4e:	2300      	movs	r3, #0
 8010b50:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed 		= GPIO_SPEED_FREQ_VERY_HIGH;
 8010b52:	2303      	movs	r3, #3
 8010b54:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate 	= D_MISO__AF;
 8010b56:	2305      	movs	r3, #5
 8010b58:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init( D_MISO__PORT, &GPIO_InitStruct );
 8010b5a:	f107 030c 	add.w	r3, r7, #12
 8010b5e:	4619      	mov	r1, r3
 8010b60:	4804      	ldr	r0, [pc, #16]	; (8010b74 <spi_display_gpio_init+0xcc>)
 8010b62:	f7f1 fdf7 	bl	8002754 <HAL_GPIO_Init>

    //NOTE: CS is initialize in gpio
}
 8010b66:	bf00      	nop
 8010b68:	3720      	adds	r7, #32
 8010b6a:	46bd      	mov	sp, r7
 8010b6c:	bd80      	pop	{r7, pc}
 8010b6e:	bf00      	nop
 8010b70:	40023800 	.word	0x40023800
 8010b74:	40020400 	.word	0x40020400

08010b78 <spi_display_init>:
*
* @return 		status 	- Status of operation
*/
////////////////////////////////////////////////////////////////////////////////
static spi_status_t spi_display_init(void)
{
 8010b78:	b580      	push	{r7, lr}
 8010b7a:	b082      	sub	sp, #8
 8010b7c:	af00      	add	r7, sp, #0
	spi_status_t status = eSPI_OK;
 8010b7e:	2300      	movs	r3, #0
 8010b80:	71fb      	strb	r3, [r7, #7]

	// Init gpio pins
	spi_display_gpio_init();
 8010b82:	f7ff ff91 	bl	8010aa8 <spi_display_gpio_init>

	// Enable clock
	__HAL_RCC_SPI1_CLK_ENABLE();
 8010b86:	4b25      	ldr	r3, [pc, #148]	; (8010c1c <spi_display_init+0xa4>)
 8010b88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010b8a:	4a24      	ldr	r2, [pc, #144]	; (8010c1c <spi_display_init+0xa4>)
 8010b8c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8010b90:	6453      	str	r3, [r2, #68]	; 0x44
 8010b92:	4b22      	ldr	r3, [pc, #136]	; (8010c1c <spi_display_init+0xa4>)
 8010b94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010b96:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8010b9a:	603b      	str	r3, [r7, #0]
 8010b9c:	683b      	ldr	r3, [r7, #0]

	// Initialize SPI
	hspi1.Instance 					= SPI1;
 8010b9e:	4b20      	ldr	r3, [pc, #128]	; (8010c20 <spi_display_init+0xa8>)
 8010ba0:	4a20      	ldr	r2, [pc, #128]	; (8010c24 <spi_display_init+0xac>)
 8010ba2:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode 				= SPI_MODE_MASTER;
 8010ba4:	4b1e      	ldr	r3, [pc, #120]	; (8010c20 <spi_display_init+0xa8>)
 8010ba6:	f44f 7282 	mov.w	r2, #260	; 0x104
 8010baa:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction 			= SPI_DIRECTION_2LINES;
 8010bac:	4b1c      	ldr	r3, [pc, #112]	; (8010c20 <spi_display_init+0xa8>)
 8010bae:	2200      	movs	r2, #0
 8010bb0:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize 			= SPI_DATASIZE_8BIT;
 8010bb2:	4b1b      	ldr	r3, [pc, #108]	; (8010c20 <spi_display_init+0xa8>)
 8010bb4:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8010bb8:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity 			= SPI_POLARITY_LOW;
 8010bba:	4b19      	ldr	r3, [pc, #100]	; (8010c20 <spi_display_init+0xa8>)
 8010bbc:	2200      	movs	r2, #0
 8010bbe:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase 			= SPI_PHASE_1EDGE;
 8010bc0:	4b17      	ldr	r3, [pc, #92]	; (8010c20 <spi_display_init+0xa8>)
 8010bc2:	2200      	movs	r2, #0
 8010bc4:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS 					= SPI_NSS_SOFT;
 8010bc6:	4b16      	ldr	r3, [pc, #88]	; (8010c20 <spi_display_init+0xa8>)
 8010bc8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8010bcc:	619a      	str	r2, [r3, #24]
	//hspi1.Init.BaudRatePrescaler 	= SPI_BAUDRATEPRESCALER_32;
	//hspi1.Init.BaudRatePrescaler 	= SPI_BAUDRATEPRESCALER_4;		// Speed 20 MHz
	hspi1.Init.BaudRatePrescaler 	= SPI_BAUDRATEPRESCALER_8;		// Speed 10 MHz
 8010bce:	4b14      	ldr	r3, [pc, #80]	; (8010c20 <spi_display_init+0xa8>)
 8010bd0:	2210      	movs	r2, #16
 8010bd2:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit 			= SPI_FIRSTBIT_MSB;
 8010bd4:	4b12      	ldr	r3, [pc, #72]	; (8010c20 <spi_display_init+0xa8>)
 8010bd6:	2200      	movs	r2, #0
 8010bd8:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode 				= SPI_TIMODE_DISABLE;
 8010bda:	4b11      	ldr	r3, [pc, #68]	; (8010c20 <spi_display_init+0xa8>)
 8010bdc:	2200      	movs	r2, #0
 8010bde:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation 		= SPI_CRCCALCULATION_DISABLE;
 8010be0:	4b0f      	ldr	r3, [pc, #60]	; (8010c20 <spi_display_init+0xa8>)
 8010be2:	2200      	movs	r2, #0
 8010be4:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial 		= 7;
 8010be6:	4b0e      	ldr	r3, [pc, #56]	; (8010c20 <spi_display_init+0xa8>)
 8010be8:	2207      	movs	r2, #7
 8010bea:	62da      	str	r2, [r3, #44]	; 0x2c
	hspi1.Init.CRCLength 			= SPI_CRC_LENGTH_DATASIZE;
 8010bec:	4b0c      	ldr	r3, [pc, #48]	; (8010c20 <spi_display_init+0xa8>)
 8010bee:	2200      	movs	r2, #0
 8010bf0:	631a      	str	r2, [r3, #48]	; 0x30
	hspi1.Init.NSSPMode 			= SPI_NSS_PULSE_ENABLE;
 8010bf2:	4b0b      	ldr	r3, [pc, #44]	; (8010c20 <spi_display_init+0xa8>)
 8010bf4:	2208      	movs	r2, #8
 8010bf6:	635a      	str	r2, [r3, #52]	; 0x34

	if ( HAL_SPI_Init( &hspi1 ) != HAL_OK )
 8010bf8:	4809      	ldr	r0, [pc, #36]	; (8010c20 <spi_display_init+0xa8>)
 8010bfa:	f7f3 fd8f 	bl	800471c <HAL_SPI_Init>
 8010bfe:	4603      	mov	r3, r0
 8010c00:	2b00      	cmp	r3, #0
 8010c02:	d002      	beq.n	8010c0a <spi_display_init+0x92>
	{
		status = eSPI_ERROR;
 8010c04:	2301      	movs	r3, #1
 8010c06:	71fb      	strb	r3, [r7, #7]
 8010c08:	e002      	b.n	8010c10 <spi_display_init+0x98>
	}
	else
	{
		gb_spi1_is_init = true;
 8010c0a:	4b07      	ldr	r3, [pc, #28]	; (8010c28 <spi_display_init+0xb0>)
 8010c0c:	2201      	movs	r2, #1
 8010c0e:	701a      	strb	r2, [r3, #0]
	}

	return status;
 8010c10:	79fb      	ldrb	r3, [r7, #7]
}
 8010c12:	4618      	mov	r0, r3
 8010c14:	3708      	adds	r7, #8
 8010c16:	46bd      	mov	sp, r7
 8010c18:	bd80      	pop	{r7, pc}
 8010c1a:	bf00      	nop
 8010c1c:	40023800 	.word	0x40023800
 8010c20:	20004e44 	.word	0x20004e44
 8010c24:	40013000 	.word	0x40013000
 8010c28:	20004ea8 	.word	0x20004ea8

08010c2c <spi_init>:
*
* @return 		status 	- Status of operation
*/
////////////////////////////////////////////////////////////////////////////////
spi_status_t spi_init(void)
{
 8010c2c:	b580      	push	{r7, lr}
 8010c2e:	b082      	sub	sp, #8
 8010c30:	af00      	add	r7, sp, #0
	spi_status_t status = eSPI_OK;
 8010c32:	2300      	movs	r3, #0
 8010c34:	71fb      	strb	r3, [r7, #7]

	// TODO: Solve why ADC stops to work when SPI1 is initialized
	// FIXED: Change order of init. SPI before ADC... Might have some side effects...
	// This line is a problem: if (HAL_SPI_Init( &hspi1 ) != HAL_OK)
	// Init display SPI
	status |= spi_display_init();
 8010c36:	f7ff ff9f 	bl	8010b78 <spi_display_init>
 8010c3a:	4603      	mov	r3, r0
 8010c3c:	461a      	mov	r2, r3
 8010c3e:	79fb      	ldrb	r3, [r7, #7]
 8010c40:	4313      	orrs	r3, r2
 8010c42:	71fb      	strb	r3, [r7, #7]

	// Init touch/eeprom/GPIO expander SPI
	status |= spi_2_init();
 8010c44:	f000 f856 	bl	8010cf4 <spi_2_init>
 8010c48:	4603      	mov	r3, r0
 8010c4a:	461a      	mov	r2, r3
 8010c4c:	79fb      	ldrb	r3, [r7, #7]
 8010c4e:	4313      	orrs	r3, r2
 8010c50:	71fb      	strb	r3, [r7, #7]

	return status;
 8010c52:	79fb      	ldrb	r3, [r7, #7]
}
 8010c54:	4618      	mov	r0, r3
 8010c56:	3708      	adds	r7, #8
 8010c58:	46bd      	mov	sp, r7
 8010c5a:	bd80      	pop	{r7, pc}

08010c5c <spi_display_receive>:
* @param[in]	size 	- Number of data to receive
* @return		status 	- Status of reception
*/
////////////////////////////////////////////////////////////////////////////////
spi_status_t spi_display_receive(uint8_t * p_rx, const uint32_t size)
{
 8010c5c:	b580      	push	{r7, lr}
 8010c5e:	b084      	sub	sp, #16
 8010c60:	af00      	add	r7, sp, #0
 8010c62:	6078      	str	r0, [r7, #4]
 8010c64:	6039      	str	r1, [r7, #0]
	spi_status_t status = eSPI_OK;
 8010c66:	2300      	movs	r3, #0
 8010c68:	73fb      	strb	r3, [r7, #15]

	// Is init
	PROJECT_CONFIG_ASSERT( true == gb_spi1_is_init );
 8010c6a:	4b0d      	ldr	r3, [pc, #52]	; (8010ca0 <spi_display_receive+0x44>)
 8010c6c:	781b      	ldrb	r3, [r3, #0]
 8010c6e:	f083 0301 	eor.w	r3, r3, #1
 8010c72:	b2db      	uxtb	r3, r3
 8010c74:	2b00      	cmp	r3, #0
 8010c76:	d001      	beq.n	8010c7c <spi_display_receive+0x20>
 8010c78:	f004 f9b8 	bl	8014fec <project_config_assert_fail>

	if ( HAL_OK != HAL_SPI_Receive( &hspi1, p_rx, size, SPI_1_TX_RX_TIMEOUT_MS ))
 8010c7c:	683b      	ldr	r3, [r7, #0]
 8010c7e:	b29a      	uxth	r2, r3
 8010c80:	230a      	movs	r3, #10
 8010c82:	6879      	ldr	r1, [r7, #4]
 8010c84:	4807      	ldr	r0, [pc, #28]	; (8010ca4 <spi_display_receive+0x48>)
 8010c86:	f7f3 ff62 	bl	8004b4e <HAL_SPI_Receive>
 8010c8a:	4603      	mov	r3, r0
 8010c8c:	2b00      	cmp	r3, #0
 8010c8e:	d001      	beq.n	8010c94 <spi_display_receive+0x38>
	{
		status = eSPI_ERROR;
 8010c90:	2301      	movs	r3, #1
 8010c92:	73fb      	strb	r3, [r7, #15]
	}

	return status;
 8010c94:	7bfb      	ldrb	r3, [r7, #15]
}
 8010c96:	4618      	mov	r0, r3
 8010c98:	3710      	adds	r7, #16
 8010c9a:	46bd      	mov	sp, r7
 8010c9c:	bd80      	pop	{r7, pc}
 8010c9e:	bf00      	nop
 8010ca0:	20004ea8 	.word	0x20004ea8
 8010ca4:	20004e44 	.word	0x20004e44

08010ca8 <spi_display_transmit>:
* @param[in]	size 	- Number of data to transmit
* @return		status 	- Status of transmittion
*/
////////////////////////////////////////////////////////////////////////////////
spi_status_t spi_display_transmit(uint8_t * p_tx, const uint32_t size)
{
 8010ca8:	b580      	push	{r7, lr}
 8010caa:	b084      	sub	sp, #16
 8010cac:	af00      	add	r7, sp, #0
 8010cae:	6078      	str	r0, [r7, #4]
 8010cb0:	6039      	str	r1, [r7, #0]
	spi_status_t status = eSPI_OK;
 8010cb2:	2300      	movs	r3, #0
 8010cb4:	73fb      	strb	r3, [r7, #15]

	// Is init
	PROJECT_CONFIG_ASSERT( true == gb_spi1_is_init );
 8010cb6:	4b0d      	ldr	r3, [pc, #52]	; (8010cec <spi_display_transmit+0x44>)
 8010cb8:	781b      	ldrb	r3, [r3, #0]
 8010cba:	f083 0301 	eor.w	r3, r3, #1
 8010cbe:	b2db      	uxtb	r3, r3
 8010cc0:	2b00      	cmp	r3, #0
 8010cc2:	d001      	beq.n	8010cc8 <spi_display_transmit+0x20>
 8010cc4:	f004 f992 	bl	8014fec <project_config_assert_fail>

	if ( HAL_OK != HAL_SPI_Transmit( &hspi1, p_tx, size, SPI_1_TX_RX_TIMEOUT_MS ))
 8010cc8:	683b      	ldr	r3, [r7, #0]
 8010cca:	b29a      	uxth	r2, r3
 8010ccc:	230a      	movs	r3, #10
 8010cce:	6879      	ldr	r1, [r7, #4]
 8010cd0:	4807      	ldr	r0, [pc, #28]	; (8010cf0 <spi_display_transmit+0x48>)
 8010cd2:	f7f3 fdce 	bl	8004872 <HAL_SPI_Transmit>
 8010cd6:	4603      	mov	r3, r0
 8010cd8:	2b00      	cmp	r3, #0
 8010cda:	d001      	beq.n	8010ce0 <spi_display_transmit+0x38>
	{
		status = eSPI_ERROR;
 8010cdc:	2301      	movs	r3, #1
 8010cde:	73fb      	strb	r3, [r7, #15]
	}

	return status;
 8010ce0:	7bfb      	ldrb	r3, [r7, #15]
}
 8010ce2:	4618      	mov	r0, r3
 8010ce4:	3710      	adds	r7, #16
 8010ce6:	46bd      	mov	sp, r7
 8010ce8:	bd80      	pop	{r7, pc}
 8010cea:	bf00      	nop
 8010cec:	20004ea8 	.word	0x20004ea8
 8010cf0:	20004e44 	.word	0x20004e44

08010cf4 <spi_2_init>:
*
* @return 		status 	- Status of operation
*/
////////////////////////////////////////////////////////////////////////////////
static spi_status_t spi_2_init(void)
{
 8010cf4:	b580      	push	{r7, lr}
 8010cf6:	b082      	sub	sp, #8
 8010cf8:	af00      	add	r7, sp, #0
	spi_status_t status = eSPI_OK;
 8010cfa:	2300      	movs	r3, #0
 8010cfc:	71fb      	strb	r3, [r7, #7]

	// Init gpio pins
	spi_2_gpio_init();
 8010cfe:	f000 f863 	bl	8010dc8 <spi_2_gpio_init>

	// Enable clock
	__HAL_RCC_SPI2_CLK_ENABLE();
 8010d02:	4b2b      	ldr	r3, [pc, #172]	; (8010db0 <spi_2_init+0xbc>)
 8010d04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010d06:	4a2a      	ldr	r2, [pc, #168]	; (8010db0 <spi_2_init+0xbc>)
 8010d08:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8010d0c:	6413      	str	r3, [r2, #64]	; 0x40
 8010d0e:	4b28      	ldr	r3, [pc, #160]	; (8010db0 <spi_2_init+0xbc>)
 8010d10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010d12:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8010d16:	603b      	str	r3, [r7, #0]
 8010d18:	683b      	ldr	r3, [r7, #0]

	// Initialize SPI
	hspi2.Instance 					= SPI2;
 8010d1a:	4b26      	ldr	r3, [pc, #152]	; (8010db4 <spi_2_init+0xc0>)
 8010d1c:	4a26      	ldr	r2, [pc, #152]	; (8010db8 <spi_2_init+0xc4>)
 8010d1e:	601a      	str	r2, [r3, #0]
	hspi2.Init.Mode 				= SPI_MODE_MASTER;
 8010d20:	4b24      	ldr	r3, [pc, #144]	; (8010db4 <spi_2_init+0xc0>)
 8010d22:	f44f 7282 	mov.w	r2, #260	; 0x104
 8010d26:	605a      	str	r2, [r3, #4]
	hspi2.Init.Direction 			= SPI_DIRECTION_2LINES;
 8010d28:	4b22      	ldr	r3, [pc, #136]	; (8010db4 <spi_2_init+0xc0>)
 8010d2a:	2200      	movs	r2, #0
 8010d2c:	609a      	str	r2, [r3, #8]
	hspi2.Init.DataSize 			= SPI_DATASIZE_8BIT;
 8010d2e:	4b21      	ldr	r3, [pc, #132]	; (8010db4 <spi_2_init+0xc0>)
 8010d30:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8010d34:	60da      	str	r2, [r3, #12]
	hspi2.Init.CLKPolarity 			= SPI_POLARITY_LOW;
 8010d36:	4b1f      	ldr	r3, [pc, #124]	; (8010db4 <spi_2_init+0xc0>)
 8010d38:	2200      	movs	r2, #0
 8010d3a:	611a      	str	r2, [r3, #16]
	hspi2.Init.CLKPhase 			= SPI_PHASE_1EDGE;
 8010d3c:	4b1d      	ldr	r3, [pc, #116]	; (8010db4 <spi_2_init+0xc0>)
 8010d3e:	2200      	movs	r2, #0
 8010d40:	615a      	str	r2, [r3, #20]
	hspi2.Init.NSS 					= SPI_NSS_SOFT;
 8010d42:	4b1c      	ldr	r3, [pc, #112]	; (8010db4 <spi_2_init+0xc0>)
 8010d44:	f44f 7200 	mov.w	r2, #512	; 0x200
 8010d48:	619a      	str	r2, [r3, #24]
	hspi2.Init.BaudRatePrescaler 	= SPI_BAUDRATEPRESCALER_32;	// Speed: 1.57MHz
 8010d4a:	4b1a      	ldr	r3, [pc, #104]	; (8010db4 <spi_2_init+0xc0>)
 8010d4c:	2220      	movs	r2, #32
 8010d4e:	61da      	str	r2, [r3, #28]
	hspi2.Init.FirstBit 			= SPI_FIRSTBIT_MSB;
 8010d50:	4b18      	ldr	r3, [pc, #96]	; (8010db4 <spi_2_init+0xc0>)
 8010d52:	2200      	movs	r2, #0
 8010d54:	621a      	str	r2, [r3, #32]
	hspi2.Init.TIMode 				= SPI_TIMODE_DISABLE;
 8010d56:	4b17      	ldr	r3, [pc, #92]	; (8010db4 <spi_2_init+0xc0>)
 8010d58:	2200      	movs	r2, #0
 8010d5a:	625a      	str	r2, [r3, #36]	; 0x24
	hspi2.Init.CRCCalculation 		= SPI_CRCCALCULATION_DISABLE;
 8010d5c:	4b15      	ldr	r3, [pc, #84]	; (8010db4 <spi_2_init+0xc0>)
 8010d5e:	2200      	movs	r2, #0
 8010d60:	629a      	str	r2, [r3, #40]	; 0x28
	hspi2.Init.CRCPolynomial 		= 7;
 8010d62:	4b14      	ldr	r3, [pc, #80]	; (8010db4 <spi_2_init+0xc0>)
 8010d64:	2207      	movs	r2, #7
 8010d66:	62da      	str	r2, [r3, #44]	; 0x2c
	hspi2.Init.CRCLength 			= SPI_CRC_LENGTH_DATASIZE;
 8010d68:	4b12      	ldr	r3, [pc, #72]	; (8010db4 <spi_2_init+0xc0>)
 8010d6a:	2200      	movs	r2, #0
 8010d6c:	631a      	str	r2, [r3, #48]	; 0x30
	hspi2.Init.NSSPMode 			= SPI_NSS_PULSE_ENABLE;
 8010d6e:	4b11      	ldr	r3, [pc, #68]	; (8010db4 <spi_2_init+0xc0>)
 8010d70:	2208      	movs	r2, #8
 8010d72:	635a      	str	r2, [r3, #52]	; 0x34

	if ( HAL_SPI_Init( &hspi2 ) != HAL_OK)
 8010d74:	480f      	ldr	r0, [pc, #60]	; (8010db4 <spi_2_init+0xc0>)
 8010d76:	f7f3 fcd1 	bl	800471c <HAL_SPI_Init>
 8010d7a:	4603      	mov	r3, r0
 8010d7c:	2b00      	cmp	r3, #0
 8010d7e:	d002      	beq.n	8010d86 <spi_2_init+0x92>
	{
		status = eSPI_ERROR;
 8010d80:	2301      	movs	r3, #1
 8010d82:	71fb      	strb	r3, [r7, #7]
 8010d84:	e00f      	b.n	8010da6 <spi_2_init+0xb2>
	}
	else
	{
		// Create mutex
		g_spi2_mutex_id = osMutexNew( &g_spi2_mutex_attr );
 8010d86:	480d      	ldr	r0, [pc, #52]	; (8010dbc <spi_2_init+0xc8>)
 8010d88:	f7f6 fa48 	bl	800721c <osMutexNew>
 8010d8c:	4603      	mov	r3, r0
 8010d8e:	4a0c      	ldr	r2, [pc, #48]	; (8010dc0 <spi_2_init+0xcc>)
 8010d90:	6013      	str	r3, [r2, #0]

		if ( NULL == g_spi2_mutex_id )
 8010d92:	4b0b      	ldr	r3, [pc, #44]	; (8010dc0 <spi_2_init+0xcc>)
 8010d94:	681b      	ldr	r3, [r3, #0]
 8010d96:	2b00      	cmp	r3, #0
 8010d98:	d102      	bne.n	8010da0 <spi_2_init+0xac>
		{
			status = eSPI_ERROR;
 8010d9a:	2301      	movs	r3, #1
 8010d9c:	71fb      	strb	r3, [r7, #7]
 8010d9e:	e002      	b.n	8010da6 <spi_2_init+0xb2>
		}
		else
		{
			gb_spi2_is_init = true;
 8010da0:	4b08      	ldr	r3, [pc, #32]	; (8010dc4 <spi_2_init+0xd0>)
 8010da2:	2201      	movs	r2, #1
 8010da4:	701a      	strb	r2, [r3, #0]
		}
	}

	return status;
 8010da6:	79fb      	ldrb	r3, [r7, #7]
}
 8010da8:	4618      	mov	r0, r3
 8010daa:	3708      	adds	r7, #8
 8010dac:	46bd      	mov	sp, r7
 8010dae:	bd80      	pop	{r7, pc}
 8010db0:	40023800 	.word	0x40023800
 8010db4:	20004eac 	.word	0x20004eac
 8010db8:	40003800 	.word	0x40003800
 8010dbc:	0801f0ac 	.word	0x0801f0ac
 8010dc0:	20004f14 	.word	0x20004f14
 8010dc4:	20004f10 	.word	0x20004f10

08010dc8 <spi_2_gpio_init>:
*
* @return 		void
*/
////////////////////////////////////////////////////////////////////////////////
static void spi_2_gpio_init(void)
{
 8010dc8:	b580      	push	{r7, lr}
 8010dca:	b08a      	sub	sp, #40	; 0x28
 8010dcc:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8010dce:	f107 0310 	add.w	r3, r7, #16
 8010dd2:	2200      	movs	r2, #0
 8010dd4:	601a      	str	r2, [r3, #0]
 8010dd6:	605a      	str	r2, [r3, #4]
 8010dd8:	609a      	str	r2, [r3, #8]
 8010dda:	60da      	str	r2, [r3, #12]
 8010ddc:	611a      	str	r2, [r3, #16]

	// Enable clock
	T_SCK_CLK_EN();
 8010dde:	4b35      	ldr	r3, [pc, #212]	; (8010eb4 <spi_2_gpio_init+0xec>)
 8010de0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010de2:	4a34      	ldr	r2, [pc, #208]	; (8010eb4 <spi_2_gpio_init+0xec>)
 8010de4:	f043 0308 	orr.w	r3, r3, #8
 8010de8:	6313      	str	r3, [r2, #48]	; 0x30
 8010dea:	4b32      	ldr	r3, [pc, #200]	; (8010eb4 <spi_2_gpio_init+0xec>)
 8010dec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010dee:	f003 0308 	and.w	r3, r3, #8
 8010df2:	60fb      	str	r3, [r7, #12]
 8010df4:	68fb      	ldr	r3, [r7, #12]
	T_MISO_CLK_EN();
 8010df6:	4b2f      	ldr	r3, [pc, #188]	; (8010eb4 <spi_2_gpio_init+0xec>)
 8010df8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010dfa:	4a2e      	ldr	r2, [pc, #184]	; (8010eb4 <spi_2_gpio_init+0xec>)
 8010dfc:	f043 0304 	orr.w	r3, r3, #4
 8010e00:	6313      	str	r3, [r2, #48]	; 0x30
 8010e02:	4b2c      	ldr	r3, [pc, #176]	; (8010eb4 <spi_2_gpio_init+0xec>)
 8010e04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010e06:	f003 0304 	and.w	r3, r3, #4
 8010e0a:	60bb      	str	r3, [r7, #8]
 8010e0c:	68bb      	ldr	r3, [r7, #8]
	T_MOSI_CLK_EN();
 8010e0e:	4b29      	ldr	r3, [pc, #164]	; (8010eb4 <spi_2_gpio_init+0xec>)
 8010e10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010e12:	4a28      	ldr	r2, [pc, #160]	; (8010eb4 <spi_2_gpio_init+0xec>)
 8010e14:	f043 0304 	orr.w	r3, r3, #4
 8010e18:	6313      	str	r3, [r2, #48]	; 0x30
 8010e1a:	4b26      	ldr	r3, [pc, #152]	; (8010eb4 <spi_2_gpio_init+0xec>)
 8010e1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010e1e:	f003 0304 	and.w	r3, r3, #4
 8010e22:	607b      	str	r3, [r7, #4]
 8010e24:	687b      	ldr	r3, [r7, #4]

	// SPI pins
    GPIO_InitStruct.Pin 		= T_SCK__PIN;
 8010e26:	2308      	movs	r3, #8
 8010e28:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode 		= GPIO_MODE_AF_PP;
 8010e2a:	2302      	movs	r3, #2
 8010e2c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull 		= T_SCK__PULL;
 8010e2e:	2300      	movs	r3, #0
 8010e30:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed 		= GPIO_SPEED_FREQ_VERY_HIGH;
 8010e32:	2303      	movs	r3, #3
 8010e34:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Alternate 	= T_SCK__AF;
 8010e36:	2305      	movs	r3, #5
 8010e38:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init( T_SCK__PORT, &GPIO_InitStruct );
 8010e3a:	f107 0310 	add.w	r3, r7, #16
 8010e3e:	4619      	mov	r1, r3
 8010e40:	481d      	ldr	r0, [pc, #116]	; (8010eb8 <spi_2_gpio_init+0xf0>)
 8010e42:	f7f1 fc87 	bl	8002754 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin 		= T_MOSI__PIN;
 8010e46:	2308      	movs	r3, #8
 8010e48:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode 		= GPIO_MODE_AF_PP;
 8010e4a:	2302      	movs	r3, #2
 8010e4c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull 		= T_MOSI__PULL;
 8010e4e:	2300      	movs	r3, #0
 8010e50:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed 		= GPIO_SPEED_FREQ_VERY_HIGH;
 8010e52:	2303      	movs	r3, #3
 8010e54:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Alternate 	= T_MOSI__AF;
 8010e56:	2305      	movs	r3, #5
 8010e58:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init( T_MOSI__PORT, &GPIO_InitStruct );
 8010e5a:	f107 0310 	add.w	r3, r7, #16
 8010e5e:	4619      	mov	r1, r3
 8010e60:	4816      	ldr	r0, [pc, #88]	; (8010ebc <spi_2_gpio_init+0xf4>)
 8010e62:	f7f1 fc77 	bl	8002754 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin 		= T_MISO__PIN;
 8010e66:	2304      	movs	r3, #4
 8010e68:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode 		= GPIO_MODE_AF_PP;
 8010e6a:	2302      	movs	r3, #2
 8010e6c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull 		= T_MISO__PULL;
 8010e6e:	2300      	movs	r3, #0
 8010e70:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed 		= GPIO_SPEED_FREQ_VERY_HIGH;
 8010e72:	2303      	movs	r3, #3
 8010e74:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Alternate 	= T_MISO__AF;
 8010e76:	2305      	movs	r3, #5
 8010e78:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init( T_MISO__PORT, &GPIO_InitStruct );
 8010e7a:	f107 0310 	add.w	r3, r7, #16
 8010e7e:	4619      	mov	r1, r3
 8010e80:	480e      	ldr	r0, [pc, #56]	; (8010ebc <spi_2_gpio_init+0xf4>)
 8010e82:	f7f1 fc67 	bl	8002754 <HAL_GPIO_Init>

    // Init all CS to high
    for ( uint32_t i = 0; i < eSPI2_CH_NUM_OF; i++ )
 8010e86:	2300      	movs	r3, #0
 8010e88:	627b      	str	r3, [r7, #36]	; 0x24
 8010e8a:	e00a      	b.n	8010ea2 <spi_2_gpio_init+0xda>
    {
    	gpio_set( g_spi2_cs_pins[i], eGPIO_HIGH );
 8010e8c:	4a0c      	ldr	r2, [pc, #48]	; (8010ec0 <spi_2_gpio_init+0xf8>)
 8010e8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e90:	4413      	add	r3, r2
 8010e92:	781b      	ldrb	r3, [r3, #0]
 8010e94:	2101      	movs	r1, #1
 8010e96:	4618      	mov	r0, r3
 8010e98:	f7ff fc26 	bl	80106e8 <gpio_set>
    for ( uint32_t i = 0; i < eSPI2_CH_NUM_OF; i++ )
 8010e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e9e:	3301      	adds	r3, #1
 8010ea0:	627b      	str	r3, [r7, #36]	; 0x24
 8010ea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ea4:	2b02      	cmp	r3, #2
 8010ea6:	d9f1      	bls.n	8010e8c <spi_2_gpio_init+0xc4>
    }
}
 8010ea8:	bf00      	nop
 8010eaa:	bf00      	nop
 8010eac:	3728      	adds	r7, #40	; 0x28
 8010eae:	46bd      	mov	sp, r7
 8010eb0:	bd80      	pop	{r7, pc}
 8010eb2:	bf00      	nop
 8010eb4:	40023800 	.word	0x40023800
 8010eb8:	40020c00 	.word	0x40020c00
 8010ebc:	40020800 	.word	0x40020800
 8010ec0:	20000130 	.word	0x20000130

08010ec4 <spi_2_transmit>:
* @param[in]	cs_action 	- Action for CS pin of SPI2 channel ch
* @return		status 		- Status of transmittion
*/
////////////////////////////////////////////////////////////////////////////////
spi_status_t spi_2_transmit(const spi_2_ch_t ch, uint8_t * p_data, const uint32_t size, const spi_cs_action_t cs_action)
{
 8010ec4:	b580      	push	{r7, lr}
 8010ec6:	b086      	sub	sp, #24
 8010ec8:	af00      	add	r7, sp, #0
 8010eca:	60b9      	str	r1, [r7, #8]
 8010ecc:	607a      	str	r2, [r7, #4]
 8010ece:	461a      	mov	r2, r3
 8010ed0:	4603      	mov	r3, r0
 8010ed2:	73fb      	strb	r3, [r7, #15]
 8010ed4:	4613      	mov	r3, r2
 8010ed6:	73bb      	strb	r3, [r7, #14]
	spi_status_t status = eSPI_OK;
 8010ed8:	2300      	movs	r3, #0
 8010eda:	75fb      	strb	r3, [r7, #23]

	// Is init
	PROJECT_CONFIG_ASSERT( true == gb_spi1_is_init );
 8010edc:	4b28      	ldr	r3, [pc, #160]	; (8010f80 <spi_2_transmit+0xbc>)
 8010ede:	781b      	ldrb	r3, [r3, #0]
 8010ee0:	f083 0301 	eor.w	r3, r3, #1
 8010ee4:	b2db      	uxtb	r3, r3
 8010ee6:	2b00      	cmp	r3, #0
 8010ee8:	d001      	beq.n	8010eee <spi_2_transmit+0x2a>
 8010eea:	f004 f87f 	bl	8014fec <project_config_assert_fail>

	// Check if available
	if ( osOK == osMutexAcquire( g_spi2_mutex_id, SPI_2_MUTEX_TIMEOUT ))
 8010eee:	4b25      	ldr	r3, [pc, #148]	; (8010f84 <spi_2_transmit+0xc0>)
 8010ef0:	681b      	ldr	r3, [r3, #0]
 8010ef2:	210a      	movs	r1, #10
 8010ef4:	4618      	mov	r0, r3
 8010ef6:	f7f6 fa2b 	bl	8007350 <osMutexAcquire>
 8010efa:	4603      	mov	r3, r0
 8010efc:	2b00      	cmp	r3, #0
 8010efe:	d139      	bne.n	8010f74 <spi_2_transmit+0xb0>
	{
		// Set CS low if demanded
		if ( cs_action & eSPI_CS_LOW_ON_ENTRY )
 8010f00:	7bbb      	ldrb	r3, [r7, #14]
 8010f02:	f003 0301 	and.w	r3, r3, #1
 8010f06:	2b00      	cmp	r3, #0
 8010f08:	d006      	beq.n	8010f18 <spi_2_transmit+0x54>
		{
			gpio_set( g_spi2_cs_pins[ch], eGPIO_LOW );
 8010f0a:	7bfb      	ldrb	r3, [r7, #15]
 8010f0c:	4a1e      	ldr	r2, [pc, #120]	; (8010f88 <spi_2_transmit+0xc4>)
 8010f0e:	5cd3      	ldrb	r3, [r2, r3]
 8010f10:	2100      	movs	r1, #0
 8010f12:	4618      	mov	r0, r3
 8010f14:	f7ff fbe8 	bl	80106e8 <gpio_set>
		}

		// Transmit data
		if ( HAL_OK != HAL_SPI_Transmit( &hspi2, p_data, size, SPI_2_TX_RX_TIMEOUT_MS ))
 8010f18:	687b      	ldr	r3, [r7, #4]
 8010f1a:	b29a      	uxth	r2, r3
 8010f1c:	230a      	movs	r3, #10
 8010f1e:	68b9      	ldr	r1, [r7, #8]
 8010f20:	481a      	ldr	r0, [pc, #104]	; (8010f8c <spi_2_transmit+0xc8>)
 8010f22:	f7f3 fca6 	bl	8004872 <HAL_SPI_Transmit>
 8010f26:	4603      	mov	r3, r0
 8010f28:	2b00      	cmp	r3, #0
 8010f2a:	d001      	beq.n	8010f30 <spi_2_transmit+0x6c>
		{
			status = eSPI_ERROR;
 8010f2c:	2301      	movs	r3, #1
 8010f2e:	75fb      	strb	r3, [r7, #23]
		}

		// Set CS high if demanded
		if ( cs_action & eSPI_CS_HIGH_ON_EXIT )
 8010f30:	7bbb      	ldrb	r3, [r7, #14]
 8010f32:	f003 0302 	and.w	r3, r3, #2
 8010f36:	2b00      	cmp	r3, #0
 8010f38:	d01c      	beq.n	8010f74 <spi_2_transmit+0xb0>
		{
			gpio_set( g_spi2_cs_pins[ch], eGPIO_HIGH );
 8010f3a:	7bfb      	ldrb	r3, [r7, #15]
 8010f3c:	4a12      	ldr	r2, [pc, #72]	; (8010f88 <spi_2_transmit+0xc4>)
 8010f3e:	5cd3      	ldrb	r3, [r2, r3]
 8010f40:	2101      	movs	r1, #1
 8010f42:	4618      	mov	r0, r3
 8010f44:	f7ff fbd0 	bl	80106e8 <gpio_set>

			// Release mutex
			// NOTE: Mutex release many times as it gets acquired!
			uint32_t u32_loop_guard = 1000;
 8010f48:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8010f4c:	613b      	str	r3, [r7, #16]
			while ( osErrorResource != osMutexRelease( g_spi2_mutex_id ))
 8010f4e:	e008      	b.n	8010f62 <spi_2_transmit+0x9e>
			{
				u32_loop_guard--;
 8010f50:	693b      	ldr	r3, [r7, #16]
 8010f52:	3b01      	subs	r3, #1
 8010f54:	613b      	str	r3, [r7, #16]

				if ( 0 == u32_loop_guard )
 8010f56:	693b      	ldr	r3, [r7, #16]
 8010f58:	2b00      	cmp	r3, #0
 8010f5a:	d102      	bne.n	8010f62 <spi_2_transmit+0x9e>
				{
					status = eSPI_ERROR;
 8010f5c:	2301      	movs	r3, #1
 8010f5e:	75fb      	strb	r3, [r7, #23]
					break;
 8010f60:	e008      	b.n	8010f74 <spi_2_transmit+0xb0>
			while ( osErrorResource != osMutexRelease( g_spi2_mutex_id ))
 8010f62:	4b08      	ldr	r3, [pc, #32]	; (8010f84 <spi_2_transmit+0xc0>)
 8010f64:	681b      	ldr	r3, [r3, #0]
 8010f66:	4618      	mov	r0, r3
 8010f68:	f7f6 fa50 	bl	800740c <osMutexRelease>
 8010f6c:	4603      	mov	r3, r0
 8010f6e:	f113 0f03 	cmn.w	r3, #3
 8010f72:	d1ed      	bne.n	8010f50 <spi_2_transmit+0x8c>
				}
			}
		}
	}

	return status;
 8010f74:	7dfb      	ldrb	r3, [r7, #23]
}
 8010f76:	4618      	mov	r0, r3
 8010f78:	3718      	adds	r7, #24
 8010f7a:	46bd      	mov	sp, r7
 8010f7c:	bd80      	pop	{r7, pc}
 8010f7e:	bf00      	nop
 8010f80:	20004ea8 	.word	0x20004ea8
 8010f84:	20004f14 	.word	0x20004f14
 8010f88:	20000130 	.word	0x20000130
 8010f8c:	20004eac 	.word	0x20004eac

08010f90 <spi_2_receive>:
* @param[in]	cs_action 	- Action for CS pin of SPI2 channel ch
* @return		status 		- Status of reception
*/
////////////////////////////////////////////////////////////////////////////////
spi_status_t spi_2_receive(const spi_2_ch_t ch, uint8_t * p_data, const uint32_t size, const spi_cs_action_t cs_action)
{
 8010f90:	b580      	push	{r7, lr}
 8010f92:	b086      	sub	sp, #24
 8010f94:	af00      	add	r7, sp, #0
 8010f96:	60b9      	str	r1, [r7, #8]
 8010f98:	607a      	str	r2, [r7, #4]
 8010f9a:	461a      	mov	r2, r3
 8010f9c:	4603      	mov	r3, r0
 8010f9e:	73fb      	strb	r3, [r7, #15]
 8010fa0:	4613      	mov	r3, r2
 8010fa2:	73bb      	strb	r3, [r7, #14]
	spi_status_t status = eSPI_OK;
 8010fa4:	2300      	movs	r3, #0
 8010fa6:	75fb      	strb	r3, [r7, #23]

	// Is init
	PROJECT_CONFIG_ASSERT( true == gb_spi2_is_init );
 8010fa8:	4b28      	ldr	r3, [pc, #160]	; (801104c <spi_2_receive+0xbc>)
 8010faa:	781b      	ldrb	r3, [r3, #0]
 8010fac:	f083 0301 	eor.w	r3, r3, #1
 8010fb0:	b2db      	uxtb	r3, r3
 8010fb2:	2b00      	cmp	r3, #0
 8010fb4:	d001      	beq.n	8010fba <spi_2_receive+0x2a>
 8010fb6:	f004 f819 	bl	8014fec <project_config_assert_fail>

	// Check if available
	if ( osOK == osMutexAcquire( g_spi2_mutex_id, SPI_2_MUTEX_TIMEOUT ))
 8010fba:	4b25      	ldr	r3, [pc, #148]	; (8011050 <spi_2_receive+0xc0>)
 8010fbc:	681b      	ldr	r3, [r3, #0]
 8010fbe:	210a      	movs	r1, #10
 8010fc0:	4618      	mov	r0, r3
 8010fc2:	f7f6 f9c5 	bl	8007350 <osMutexAcquire>
 8010fc6:	4603      	mov	r3, r0
 8010fc8:	2b00      	cmp	r3, #0
 8010fca:	d139      	bne.n	8011040 <spi_2_receive+0xb0>
	{
		// Set CS low if demanded - ON ENTRY
		if ( cs_action & eSPI_CS_LOW_ON_ENTRY )
 8010fcc:	7bbb      	ldrb	r3, [r7, #14]
 8010fce:	f003 0301 	and.w	r3, r3, #1
 8010fd2:	2b00      	cmp	r3, #0
 8010fd4:	d006      	beq.n	8010fe4 <spi_2_receive+0x54>
		{
			gpio_set( g_spi2_cs_pins[ch], eGPIO_LOW );
 8010fd6:	7bfb      	ldrb	r3, [r7, #15]
 8010fd8:	4a1e      	ldr	r2, [pc, #120]	; (8011054 <spi_2_receive+0xc4>)
 8010fda:	5cd3      	ldrb	r3, [r2, r3]
 8010fdc:	2100      	movs	r1, #0
 8010fde:	4618      	mov	r0, r3
 8010fe0:	f7ff fb82 	bl	80106e8 <gpio_set>
		}

		// Receive data
		if ( HAL_OK != HAL_SPI_Receive( &hspi2, p_data, size, SPI_2_TX_RX_TIMEOUT_MS ))
 8010fe4:	687b      	ldr	r3, [r7, #4]
 8010fe6:	b29a      	uxth	r2, r3
 8010fe8:	230a      	movs	r3, #10
 8010fea:	68b9      	ldr	r1, [r7, #8]
 8010fec:	481a      	ldr	r0, [pc, #104]	; (8011058 <spi_2_receive+0xc8>)
 8010fee:	f7f3 fdae 	bl	8004b4e <HAL_SPI_Receive>
 8010ff2:	4603      	mov	r3, r0
 8010ff4:	2b00      	cmp	r3, #0
 8010ff6:	d001      	beq.n	8010ffc <spi_2_receive+0x6c>
		{
			status = eSPI_ERROR;
 8010ff8:	2301      	movs	r3, #1
 8010ffa:	75fb      	strb	r3, [r7, #23]
		}

		// Set CS high if demanded - ON EXIT
		if ( cs_action & eSPI_CS_HIGH_ON_EXIT )
 8010ffc:	7bbb      	ldrb	r3, [r7, #14]
 8010ffe:	f003 0302 	and.w	r3, r3, #2
 8011002:	2b00      	cmp	r3, #0
 8011004:	d01c      	beq.n	8011040 <spi_2_receive+0xb0>
		{
			gpio_set( g_spi2_cs_pins[ch], eGPIO_HIGH );
 8011006:	7bfb      	ldrb	r3, [r7, #15]
 8011008:	4a12      	ldr	r2, [pc, #72]	; (8011054 <spi_2_receive+0xc4>)
 801100a:	5cd3      	ldrb	r3, [r2, r3]
 801100c:	2101      	movs	r1, #1
 801100e:	4618      	mov	r0, r3
 8011010:	f7ff fb6a 	bl	80106e8 <gpio_set>

			// Release mutex
			// NOTE: Mutex release many times as it gets acquired!
			uint32_t u32_loop_guard = 1000;
 8011014:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8011018:	613b      	str	r3, [r7, #16]
			while ( osErrorResource != osMutexRelease( g_spi2_mutex_id ))
 801101a:	e008      	b.n	801102e <spi_2_receive+0x9e>
			{
				u32_loop_guard--;
 801101c:	693b      	ldr	r3, [r7, #16]
 801101e:	3b01      	subs	r3, #1
 8011020:	613b      	str	r3, [r7, #16]

				if ( 0 == u32_loop_guard )
 8011022:	693b      	ldr	r3, [r7, #16]
 8011024:	2b00      	cmp	r3, #0
 8011026:	d102      	bne.n	801102e <spi_2_receive+0x9e>
				{
					status = eSPI_ERROR;
 8011028:	2301      	movs	r3, #1
 801102a:	75fb      	strb	r3, [r7, #23]
					break;
 801102c:	e008      	b.n	8011040 <spi_2_receive+0xb0>
			while ( osErrorResource != osMutexRelease( g_spi2_mutex_id ))
 801102e:	4b08      	ldr	r3, [pc, #32]	; (8011050 <spi_2_receive+0xc0>)
 8011030:	681b      	ldr	r3, [r3, #0]
 8011032:	4618      	mov	r0, r3
 8011034:	f7f6 f9ea 	bl	800740c <osMutexRelease>
 8011038:	4603      	mov	r3, r0
 801103a:	f113 0f03 	cmn.w	r3, #3
 801103e:	d1ed      	bne.n	801101c <spi_2_receive+0x8c>
				}
			}
		}
	}

	return status;
 8011040:	7dfb      	ldrb	r3, [r7, #23]
}
 8011042:	4618      	mov	r0, r3
 8011044:	3718      	adds	r7, #24
 8011046:	46bd      	mov	sp, r7
 8011048:	bd80      	pop	{r7, pc}
 801104a:	bf00      	nop
 801104c:	20004f10 	.word	0x20004f10
 8011050:	20004f14 	.word	0x20004f14
 8011054:	20000130 	.word	0x20000130
 8011058:	20004eac 	.word	0x20004eac

0801105c <spi_2_transmit_receive>:
* @param[in]	cs_action 	- Action for CS pin of SPI2 channel ch
* @return		status 		- Status of reception
*/
////////////////////////////////////////////////////////////////////////////////
spi_status_t spi_2_transmit_receive(const spi_2_ch_t ch, uint8_t * p_tx, uint8_t * p_rx, const uint32_t size, const spi_cs_action_t cs_action)
{
 801105c:	b580      	push	{r7, lr}
 801105e:	b088      	sub	sp, #32
 8011060:	af02      	add	r7, sp, #8
 8011062:	60b9      	str	r1, [r7, #8]
 8011064:	607a      	str	r2, [r7, #4]
 8011066:	603b      	str	r3, [r7, #0]
 8011068:	4603      	mov	r3, r0
 801106a:	73fb      	strb	r3, [r7, #15]
	spi_status_t status = eSPI_OK;
 801106c:	2300      	movs	r3, #0
 801106e:	75fb      	strb	r3, [r7, #23]

	// Is init
	PROJECT_CONFIG_ASSERT( true == gb_spi2_is_init );
 8011070:	4b2a      	ldr	r3, [pc, #168]	; (801111c <spi_2_transmit_receive+0xc0>)
 8011072:	781b      	ldrb	r3, [r3, #0]
 8011074:	f083 0301 	eor.w	r3, r3, #1
 8011078:	b2db      	uxtb	r3, r3
 801107a:	2b00      	cmp	r3, #0
 801107c:	d001      	beq.n	8011082 <spi_2_transmit_receive+0x26>
 801107e:	f003 ffb5 	bl	8014fec <project_config_assert_fail>

	// Check if available
	if ( osOK == osMutexAcquire( g_spi2_mutex_id, SPI_2_MUTEX_TIMEOUT ))
 8011082:	4b27      	ldr	r3, [pc, #156]	; (8011120 <spi_2_transmit_receive+0xc4>)
 8011084:	681b      	ldr	r3, [r3, #0]
 8011086:	210a      	movs	r1, #10
 8011088:	4618      	mov	r0, r3
 801108a:	f7f6 f961 	bl	8007350 <osMutexAcquire>
 801108e:	4603      	mov	r3, r0
 8011090:	2b00      	cmp	r3, #0
 8011092:	d13d      	bne.n	8011110 <spi_2_transmit_receive+0xb4>
	{
		// Set CS low if demanded - ON ENTRY
		if ( cs_action & eSPI_CS_LOW_ON_ENTRY )
 8011094:	f897 3020 	ldrb.w	r3, [r7, #32]
 8011098:	f003 0301 	and.w	r3, r3, #1
 801109c:	2b00      	cmp	r3, #0
 801109e:	d006      	beq.n	80110ae <spi_2_transmit_receive+0x52>
		{
			gpio_set( g_spi2_cs_pins[ch], eGPIO_LOW );
 80110a0:	7bfb      	ldrb	r3, [r7, #15]
 80110a2:	4a20      	ldr	r2, [pc, #128]	; (8011124 <spi_2_transmit_receive+0xc8>)
 80110a4:	5cd3      	ldrb	r3, [r2, r3]
 80110a6:	2100      	movs	r1, #0
 80110a8:	4618      	mov	r0, r3
 80110aa:	f7ff fb1d 	bl	80106e8 <gpio_set>
		}

		// Receive data
		if ( HAL_OK != HAL_SPI_TransmitReceive(&hspi2, p_tx, p_rx, size, SPI_2_TX_RX_TIMEOUT_MS ))
 80110ae:	683b      	ldr	r3, [r7, #0]
 80110b0:	b29b      	uxth	r3, r3
 80110b2:	220a      	movs	r2, #10
 80110b4:	9200      	str	r2, [sp, #0]
 80110b6:	687a      	ldr	r2, [r7, #4]
 80110b8:	68b9      	ldr	r1, [r7, #8]
 80110ba:	481b      	ldr	r0, [pc, #108]	; (8011128 <spi_2_transmit_receive+0xcc>)
 80110bc:	f7f3 fe77 	bl	8004dae <HAL_SPI_TransmitReceive>
 80110c0:	4603      	mov	r3, r0
 80110c2:	2b00      	cmp	r3, #0
 80110c4:	d001      	beq.n	80110ca <spi_2_transmit_receive+0x6e>
		{
			status = eSPI_ERROR;
 80110c6:	2301      	movs	r3, #1
 80110c8:	75fb      	strb	r3, [r7, #23]
		}

		// Set CS high if demanded - ON EXIT
		if ( cs_action & eSPI_CS_HIGH_ON_EXIT )
 80110ca:	f897 3020 	ldrb.w	r3, [r7, #32]
 80110ce:	f003 0302 	and.w	r3, r3, #2
 80110d2:	2b00      	cmp	r3, #0
 80110d4:	d01c      	beq.n	8011110 <spi_2_transmit_receive+0xb4>
		{
			gpio_set( g_spi2_cs_pins[ch], eGPIO_HIGH );
 80110d6:	7bfb      	ldrb	r3, [r7, #15]
 80110d8:	4a12      	ldr	r2, [pc, #72]	; (8011124 <spi_2_transmit_receive+0xc8>)
 80110da:	5cd3      	ldrb	r3, [r2, r3]
 80110dc:	2101      	movs	r1, #1
 80110de:	4618      	mov	r0, r3
 80110e0:	f7ff fb02 	bl	80106e8 <gpio_set>

			// Release mutex
			// NOTE: Mutex release many times as it gets acquired!
			uint32_t u32_loop_guard = 1000;
 80110e4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80110e8:	613b      	str	r3, [r7, #16]
			while ( osErrorResource != osMutexRelease( g_spi2_mutex_id ))
 80110ea:	e008      	b.n	80110fe <spi_2_transmit_receive+0xa2>
			{
				u32_loop_guard--;
 80110ec:	693b      	ldr	r3, [r7, #16]
 80110ee:	3b01      	subs	r3, #1
 80110f0:	613b      	str	r3, [r7, #16]

				if ( 0 == u32_loop_guard )
 80110f2:	693b      	ldr	r3, [r7, #16]
 80110f4:	2b00      	cmp	r3, #0
 80110f6:	d102      	bne.n	80110fe <spi_2_transmit_receive+0xa2>
				{
					status = eSPI_ERROR;
 80110f8:	2301      	movs	r3, #1
 80110fa:	75fb      	strb	r3, [r7, #23]
					break;
 80110fc:	e008      	b.n	8011110 <spi_2_transmit_receive+0xb4>
			while ( osErrorResource != osMutexRelease( g_spi2_mutex_id ))
 80110fe:	4b08      	ldr	r3, [pc, #32]	; (8011120 <spi_2_transmit_receive+0xc4>)
 8011100:	681b      	ldr	r3, [r3, #0]
 8011102:	4618      	mov	r0, r3
 8011104:	f7f6 f982 	bl	800740c <osMutexRelease>
 8011108:	4603      	mov	r3, r0
 801110a:	f113 0f03 	cmn.w	r3, #3
 801110e:	d1ed      	bne.n	80110ec <spi_2_transmit_receive+0x90>
				}
			}
		}
	}

	return status;
 8011110:	7dfb      	ldrb	r3, [r7, #23]
}
 8011112:	4618      	mov	r0, r3
 8011114:	3718      	adds	r7, #24
 8011116:	46bd      	mov	sp, r7
 8011118:	bd80      	pop	{r7, pc}
 801111a:	bf00      	nop
 801111c:	20004f10 	.word	0x20004f10
 8011120:	20004f14 	.word	0x20004f14
 8011124:	20000130 	.word	0x20000130
 8011128:	20004eac 	.word	0x20004eac

0801112c <timer_init_gpio>:
*
* @return 		status - Status of operation
*/
////////////////////////////////////////////////////////////////////////////////
static void timer_init_gpio(void)
{
 801112c:	b580      	push	{r7, lr}
 801112e:	b086      	sub	sp, #24
 8011130:	af00      	add	r7, sp, #0
	 GPIO_InitTypeDef 	GPIO_InitStruct = {0};
 8011132:	463b      	mov	r3, r7
 8011134:	2200      	movs	r2, #0
 8011136:	601a      	str	r2, [r3, #0]
 8011138:	605a      	str	r2, [r3, #4]
 801113a:	609a      	str	r2, [r3, #8]
 801113c:	60da      	str	r2, [r3, #12]
 801113e:	611a      	str	r2, [r3, #16]
	 uint32_t 			i				= 0UL;
 8011140:	2300      	movs	r3, #0
 8011142:	617b      	str	r3, [r7, #20]

	 // For each timer channel
	 for ( i = 0; i < eTIMER_CH_NUM_OF; i++ )
 8011144:	2300      	movs	r3, #0
 8011146:	617b      	str	r3, [r7, #20]
 8011148:	e046      	b.n	80111d8 <timer_init_gpio+0xac>
	 {
		 // Enable GPIO clocks
		 gpio_enable_port_clock( g_timer_cfg_table_t.ch[i].p_port );
 801114a:	4927      	ldr	r1, [pc, #156]	; (80111e8 <timer_init_gpio+0xbc>)
 801114c:	697a      	ldr	r2, [r7, #20]
 801114e:	4613      	mov	r3, r2
 8011150:	00db      	lsls	r3, r3, #3
 8011152:	1a9b      	subs	r3, r3, r2
 8011154:	009b      	lsls	r3, r3, #2
 8011156:	440b      	add	r3, r1
 8011158:	333c      	adds	r3, #60	; 0x3c
 801115a:	681b      	ldr	r3, [r3, #0]
 801115c:	4618      	mov	r0, r3
 801115e:	f7ff fb45 	bl	80107ec <gpio_enable_port_clock>

		// Configure Pins
		GPIO_InitStruct.Pin 			= g_timer_cfg_table_t.ch[i].pin;
 8011162:	4921      	ldr	r1, [pc, #132]	; (80111e8 <timer_init_gpio+0xbc>)
 8011164:	697a      	ldr	r2, [r7, #20]
 8011166:	4613      	mov	r3, r2
 8011168:	00db      	lsls	r3, r3, #3
 801116a:	1a9b      	subs	r3, r3, r2
 801116c:	009b      	lsls	r3, r3, #2
 801116e:	440b      	add	r3, r1
 8011170:	3340      	adds	r3, #64	; 0x40
 8011172:	681b      	ldr	r3, [r3, #0]
 8011174:	603b      	str	r3, [r7, #0]
		GPIO_InitStruct.Mode 			= GPIO_MODE_AF_PP;
 8011176:	2302      	movs	r3, #2
 8011178:	607b      	str	r3, [r7, #4]
		GPIO_InitStruct.Pull 			= g_timer_cfg_table_t.ch[i].pull;
 801117a:	491b      	ldr	r1, [pc, #108]	; (80111e8 <timer_init_gpio+0xbc>)
 801117c:	697a      	ldr	r2, [r7, #20]
 801117e:	4613      	mov	r3, r2
 8011180:	00db      	lsls	r3, r3, #3
 8011182:	1a9b      	subs	r3, r3, r2
 8011184:	009b      	lsls	r3, r3, #2
 8011186:	440b      	add	r3, r1
 8011188:	3344      	adds	r3, #68	; 0x44
 801118a:	681b      	ldr	r3, [r3, #0]
 801118c:	60bb      	str	r3, [r7, #8]
		GPIO_InitStruct.Speed 			= g_timer_cfg_table_t.ch[i].speed;
 801118e:	4916      	ldr	r1, [pc, #88]	; (80111e8 <timer_init_gpio+0xbc>)
 8011190:	697a      	ldr	r2, [r7, #20]
 8011192:	4613      	mov	r3, r2
 8011194:	00db      	lsls	r3, r3, #3
 8011196:	1a9b      	subs	r3, r3, r2
 8011198:	009b      	lsls	r3, r3, #2
 801119a:	440b      	add	r3, r1
 801119c:	334c      	adds	r3, #76	; 0x4c
 801119e:	681b      	ldr	r3, [r3, #0]
 80111a0:	60fb      	str	r3, [r7, #12]
		GPIO_InitStruct.Alternate 		= g_timer_cfg_table_t.ch[i].alternate;
 80111a2:	4911      	ldr	r1, [pc, #68]	; (80111e8 <timer_init_gpio+0xbc>)
 80111a4:	697a      	ldr	r2, [r7, #20]
 80111a6:	4613      	mov	r3, r2
 80111a8:	00db      	lsls	r3, r3, #3
 80111aa:	1a9b      	subs	r3, r3, r2
 80111ac:	009b      	lsls	r3, r3, #2
 80111ae:	440b      	add	r3, r1
 80111b0:	3348      	adds	r3, #72	; 0x48
 80111b2:	681b      	ldr	r3, [r3, #0]
 80111b4:	613b      	str	r3, [r7, #16]

		// Init pin
		HAL_GPIO_Init( g_timer_cfg_table_t.ch[i].p_port, &GPIO_InitStruct );
 80111b6:	490c      	ldr	r1, [pc, #48]	; (80111e8 <timer_init_gpio+0xbc>)
 80111b8:	697a      	ldr	r2, [r7, #20]
 80111ba:	4613      	mov	r3, r2
 80111bc:	00db      	lsls	r3, r3, #3
 80111be:	1a9b      	subs	r3, r3, r2
 80111c0:	009b      	lsls	r3, r3, #2
 80111c2:	440b      	add	r3, r1
 80111c4:	333c      	adds	r3, #60	; 0x3c
 80111c6:	681b      	ldr	r3, [r3, #0]
 80111c8:	463a      	mov	r2, r7
 80111ca:	4611      	mov	r1, r2
 80111cc:	4618      	mov	r0, r3
 80111ce:	f7f1 fac1 	bl	8002754 <HAL_GPIO_Init>
	 for ( i = 0; i < eTIMER_CH_NUM_OF; i++ )
 80111d2:	697b      	ldr	r3, [r7, #20]
 80111d4:	3301      	adds	r3, #1
 80111d6:	617b      	str	r3, [r7, #20]
 80111d8:	697b      	ldr	r3, [r7, #20]
 80111da:	2b05      	cmp	r3, #5
 80111dc:	d9b5      	bls.n	801114a <timer_init_gpio+0x1e>
	 }
}
 80111de:	bf00      	nop
 80111e0:	bf00      	nop
 80111e2:	3718      	adds	r7, #24
 80111e4:	46bd      	mov	sp, r7
 80111e6:	bd80      	pop	{r7, pc}
 80111e8:	0801f0bc 	.word	0x0801f0bc

080111ec <timer_init>:
*
* @return 		status - Status of operation
*/
////////////////////////////////////////////////////////////////////////////////
timer_status_t timer_init(void)
{
 80111ec:	b580      	push	{r7, lr}
 80111ee:	b092      	sub	sp, #72	; 0x48
 80111f0:	af00      	add	r7, sp, #0
	timer_status_t 			status 				= eTIMER_OK;
 80111f2:	2300      	movs	r3, #0
 80111f4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    TIM_ClockConfigTypeDef 	sClockSourceConfig 	= {0};
 80111f8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80111fc:	2200      	movs	r2, #0
 80111fe:	601a      	str	r2, [r3, #0]
 8011200:	605a      	str	r2, [r3, #4]
 8011202:	609a      	str	r2, [r3, #8]
 8011204:	60da      	str	r2, [r3, #12]
    TIM_OC_InitTypeDef 		sConfigOC 			= {0};
 8011206:	f107 0314 	add.w	r3, r7, #20
 801120a:	2200      	movs	r2, #0
 801120c:	601a      	str	r2, [r3, #0]
 801120e:	605a      	str	r2, [r3, #4]
 8011210:	609a      	str	r2, [r3, #8]
 8011212:	60da      	str	r2, [r3, #12]
 8011214:	611a      	str	r2, [r3, #16]
 8011216:	615a      	str	r2, [r3, #20]
 8011218:	619a      	str	r2, [r3, #24]
    uint32_t				i					= 0UL;
 801121a:	2300      	movs	r3, #0
 801121c:	643b      	str	r3, [r7, #64]	; 0x40

    // Init gpio pins
    timer_init_gpio();
 801121e:	f7ff ff85 	bl	801112c <timer_init_gpio>

    // Enable timer clocks
    __HAL_RCC_TIM1_CLK_ENABLE();
 8011222:	4bb1      	ldr	r3, [pc, #708]	; (80114e8 <timer_init+0x2fc>)
 8011224:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011226:	4ab0      	ldr	r2, [pc, #704]	; (80114e8 <timer_init+0x2fc>)
 8011228:	f043 0301 	orr.w	r3, r3, #1
 801122c:	6453      	str	r3, [r2, #68]	; 0x44
 801122e:	4bae      	ldr	r3, [pc, #696]	; (80114e8 <timer_init+0x2fc>)
 8011230:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011232:	f003 0301 	and.w	r3, r3, #1
 8011236:	613b      	str	r3, [r7, #16]
 8011238:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_TIM3_CLK_ENABLE();
 801123a:	4bab      	ldr	r3, [pc, #684]	; (80114e8 <timer_init+0x2fc>)
 801123c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801123e:	4aaa      	ldr	r2, [pc, #680]	; (80114e8 <timer_init+0x2fc>)
 8011240:	f043 0302 	orr.w	r3, r3, #2
 8011244:	6413      	str	r3, [r2, #64]	; 0x40
 8011246:	4ba8      	ldr	r3, [pc, #672]	; (80114e8 <timer_init+0x2fc>)
 8011248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801124a:	f003 0302 	and.w	r3, r3, #2
 801124e:	60fb      	str	r3, [r7, #12]
 8011250:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM4_CLK_ENABLE();
 8011252:	4ba5      	ldr	r3, [pc, #660]	; (80114e8 <timer_init+0x2fc>)
 8011254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011256:	4aa4      	ldr	r2, [pc, #656]	; (80114e8 <timer_init+0x2fc>)
 8011258:	f043 0304 	orr.w	r3, r3, #4
 801125c:	6413      	str	r3, [r2, #64]	; 0x40
 801125e:	4ba2      	ldr	r3, [pc, #648]	; (80114e8 <timer_init+0x2fc>)
 8011260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011262:	f003 0304 	and.w	r3, r3, #4
 8011266:	60bb      	str	r3, [r7, #8]
 8011268:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_TIM10_CLK_ENABLE();
 801126a:	4b9f      	ldr	r3, [pc, #636]	; (80114e8 <timer_init+0x2fc>)
 801126c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801126e:	4a9e      	ldr	r2, [pc, #632]	; (80114e8 <timer_init+0x2fc>)
 8011270:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8011274:	6453      	str	r3, [r2, #68]	; 0x44
 8011276:	4b9c      	ldr	r3, [pc, #624]	; (80114e8 <timer_init+0x2fc>)
 8011278:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801127a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801127e:	607b      	str	r3, [r7, #4]
 8011280:	687b      	ldr	r3, [r7, #4]
    __HAL_RCC_TIM11_CLK_ENABLE();
 8011282:	4b99      	ldr	r3, [pc, #612]	; (80114e8 <timer_init+0x2fc>)
 8011284:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011286:	4a98      	ldr	r2, [pc, #608]	; (80114e8 <timer_init+0x2fc>)
 8011288:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 801128c:	6453      	str	r3, [r2, #68]	; 0x44
 801128e:	4b96      	ldr	r3, [pc, #600]	; (80114e8 <timer_init+0x2fc>)
 8011290:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011292:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8011296:	603b      	str	r3, [r7, #0]
 8011298:	683b      	ldr	r3, [r7, #0]
    //
    //	APB2 clock
    // =====================================================================================

    // Configure Timer
    gh_tim1.Instance 				= TIM1;
 801129a:	4b94      	ldr	r3, [pc, #592]	; (80114ec <timer_init+0x300>)
 801129c:	4a94      	ldr	r2, [pc, #592]	; (80114f0 <timer_init+0x304>)
 801129e:	601a      	str	r2, [r3, #0]
    gh_tim1.Init.Prescaler 			= 32;
 80112a0:	4b92      	ldr	r3, [pc, #584]	; (80114ec <timer_init+0x300>)
 80112a2:	2220      	movs	r2, #32
 80112a4:	605a      	str	r2, [r3, #4]
    gh_tim1.Init.CounterMode 		= TIM_COUNTERMODE_UP;
 80112a6:	4b91      	ldr	r3, [pc, #580]	; (80114ec <timer_init+0x300>)
 80112a8:	2200      	movs	r2, #0
 80112aa:	609a      	str	r2, [r3, #8]
    gh_tim1.Init.Period 			= (( 2.0f * HAL_RCC_GetPCLK2Freq()) / ( g_timer_cfg_table_t.tim[eTIMER_TIM1].frequency * ( gh_tim1.Init.Prescaler + 1U )));
 80112ac:	f7f2 fe32 	bl	8003f14 <HAL_RCC_GetPCLK2Freq>
 80112b0:	ee07 0a90 	vmov	s15, r0
 80112b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80112b8:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80112bc:	ed9f 7a8d 	vldr	s14, [pc, #564]	; 80114f4 <timer_init+0x308>
 80112c0:	4b8a      	ldr	r3, [pc, #552]	; (80114ec <timer_init+0x300>)
 80112c2:	685b      	ldr	r3, [r3, #4]
 80112c4:	3301      	adds	r3, #1
 80112c6:	ee07 3a90 	vmov	s15, r3
 80112ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80112ce:	ee27 7a27 	vmul.f32	s14, s14, s15
 80112d2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80112d6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80112da:	ee17 2a90 	vmov	r2, s15
 80112de:	4b83      	ldr	r3, [pc, #524]	; (80114ec <timer_init+0x300>)
 80112e0:	60da      	str	r2, [r3, #12]
    gh_tim1.Init.ClockDivision 		= TIM_CLOCKDIVISION_DIV1;
 80112e2:	4b82      	ldr	r3, [pc, #520]	; (80114ec <timer_init+0x300>)
 80112e4:	2200      	movs	r2, #0
 80112e6:	611a      	str	r2, [r3, #16]
    gh_tim1.Init.RepetitionCounter 	= 0;
 80112e8:	4b80      	ldr	r3, [pc, #512]	; (80114ec <timer_init+0x300>)
 80112ea:	2200      	movs	r2, #0
 80112ec:	615a      	str	r2, [r3, #20]
    gh_tim1.Init.AutoReloadPreload 	= TIM_AUTORELOAD_PRELOAD_DISABLE;
 80112ee:	4b7f      	ldr	r3, [pc, #508]	; (80114ec <timer_init+0x300>)
 80112f0:	2200      	movs	r2, #0
 80112f2:	619a      	str	r2, [r3, #24]
    HAL_TIM_Base_Init( &gh_tim1 );
 80112f4:	487d      	ldr	r0, [pc, #500]	; (80114ec <timer_init+0x300>)
 80112f6:	f7f4 f925 	bl	8005544 <HAL_TIM_Base_Init>

    sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80112fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80112fe:	633b      	str	r3, [r7, #48]	; 0x30

    // Set up clock source
    if ( HAL_OK != HAL_TIM_ConfigClockSource( &gh_tim1, &sClockSourceConfig ))
 8011300:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8011304:	4619      	mov	r1, r3
 8011306:	4879      	ldr	r0, [pc, #484]	; (80114ec <timer_init+0x300>)
 8011308:	f7f4 fbde 	bl	8005ac8 <HAL_TIM_ConfigClockSource>
 801130c:	4603      	mov	r3, r0
 801130e:	2b00      	cmp	r3, #0
 8011310:	d005      	beq.n	801131e <timer_init+0x132>
    {
    	status |= eTIMER_ERROR_INIT;
 8011312:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8011316:	f043 0302 	orr.w	r3, r3, #2
 801131a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }

    // Init PWM unit
	if ( HAL_OK != HAL_TIM_PWM_Init( &gh_tim1 ))
 801131e:	4873      	ldr	r0, [pc, #460]	; (80114ec <timer_init+0x300>)
 8011320:	f7f4 f967 	bl	80055f2 <HAL_TIM_PWM_Init>
 8011324:	4603      	mov	r3, r0
 8011326:	2b00      	cmp	r3, #0
 8011328:	d005      	beq.n	8011336 <timer_init+0x14a>
	{
		status |= eTIMER_ERROR_INIT;
 801132a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 801132e:	f043 0302 	orr.w	r3, r3, #2
 8011332:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

	}

	 // Set up channel
	sConfigOC.OCMode 				= TIM_OCMODE_PWM1;
 8011336:	2360      	movs	r3, #96	; 0x60
 8011338:	617b      	str	r3, [r7, #20]
	sConfigOC.Pulse 				= 0;
 801133a:	2300      	movs	r3, #0
 801133c:	61bb      	str	r3, [r7, #24]
	sConfigOC.OCPolarity 			= TIM_OCPOLARITY_HIGH;
 801133e:	2300      	movs	r3, #0
 8011340:	61fb      	str	r3, [r7, #28]
	sConfigOC.OCNPolarity 			= TIM_OCNPOLARITY_HIGH;
 8011342:	2300      	movs	r3, #0
 8011344:	623b      	str	r3, [r7, #32]
	sConfigOC.OCFastMode 			= TIM_OCFAST_DISABLE;
 8011346:	2300      	movs	r3, #0
 8011348:	627b      	str	r3, [r7, #36]	; 0x24
	sConfigOC.OCIdleState 			= TIM_OCIDLESTATE_RESET;
 801134a:	2300      	movs	r3, #0
 801134c:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfigOC.OCNIdleState 			= TIM_OCNIDLESTATE_RESET;
 801134e:	2300      	movs	r3, #0
 8011350:	62fb      	str	r3, [r7, #44]	; 0x2c

	// Config channel
	if ( HAL_OK != HAL_TIM_PWM_ConfigChannel( &gh_tim1, &sConfigOC, g_timer_cfg_table_t.ch[eTIMER_TIM1_CH4_D_LED].tim_ch ))
 8011352:	220c      	movs	r2, #12
 8011354:	f107 0314 	add.w	r3, r7, #20
 8011358:	4619      	mov	r1, r3
 801135a:	4864      	ldr	r0, [pc, #400]	; (80114ec <timer_init+0x300>)
 801135c:	f7f4 faa4 	bl	80058a8 <HAL_TIM_PWM_ConfigChannel>
 8011360:	4603      	mov	r3, r0
 8011362:	2b00      	cmp	r3, #0
 8011364:	d005      	beq.n	8011372 <timer_init+0x186>
	{
		status |= eTIMER_ERROR_INIT;
 8011366:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 801136a:	f043 0302 	orr.w	r3, r3, #2
 801136e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    //
    //	APB1 clock
    // =====================================================================================

    // Configure Timer
    gh_tim3.Instance 				= TIM3;
 8011372:	4b61      	ldr	r3, [pc, #388]	; (80114f8 <timer_init+0x30c>)
 8011374:	4a61      	ldr	r2, [pc, #388]	; (80114fc <timer_init+0x310>)
 8011376:	601a      	str	r2, [r3, #0]
    gh_tim3.Init.Prescaler 			= 16;
 8011378:	4b5f      	ldr	r3, [pc, #380]	; (80114f8 <timer_init+0x30c>)
 801137a:	2210      	movs	r2, #16
 801137c:	605a      	str	r2, [r3, #4]
    gh_tim3.Init.CounterMode 		= TIM_COUNTERMODE_UP;
 801137e:	4b5e      	ldr	r3, [pc, #376]	; (80114f8 <timer_init+0x30c>)
 8011380:	2200      	movs	r2, #0
 8011382:	609a      	str	r2, [r3, #8]
    gh_tim3.Init.Period 			= (( 2.0f * HAL_RCC_GetPCLK1Freq()) / ( g_timer_cfg_table_t.tim[eTIMER_TIM3].frequency * ( gh_tim3.Init.Prescaler + 1U )));
 8011384:	f7f2 fdb2 	bl	8003eec <HAL_RCC_GetPCLK1Freq>
 8011388:	ee07 0a90 	vmov	s15, r0
 801138c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011390:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8011394:	ed9f 7a5a 	vldr	s14, [pc, #360]	; 8011500 <timer_init+0x314>
 8011398:	4b57      	ldr	r3, [pc, #348]	; (80114f8 <timer_init+0x30c>)
 801139a:	685b      	ldr	r3, [r3, #4]
 801139c:	3301      	adds	r3, #1
 801139e:	ee07 3a90 	vmov	s15, r3
 80113a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80113a6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80113aa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80113ae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80113b2:	ee17 2a90 	vmov	r2, s15
 80113b6:	4b50      	ldr	r3, [pc, #320]	; (80114f8 <timer_init+0x30c>)
 80113b8:	60da      	str	r2, [r3, #12]
    gh_tim3.Init.ClockDivision 		= TIM_CLOCKDIVISION_DIV1;
 80113ba:	4b4f      	ldr	r3, [pc, #316]	; (80114f8 <timer_init+0x30c>)
 80113bc:	2200      	movs	r2, #0
 80113be:	611a      	str	r2, [r3, #16]
    gh_tim3.Init.RepetitionCounter 	= 0;
 80113c0:	4b4d      	ldr	r3, [pc, #308]	; (80114f8 <timer_init+0x30c>)
 80113c2:	2200      	movs	r2, #0
 80113c4:	615a      	str	r2, [r3, #20]
    gh_tim3.Init.AutoReloadPreload 	= TIM_AUTORELOAD_PRELOAD_DISABLE;
 80113c6:	4b4c      	ldr	r3, [pc, #304]	; (80114f8 <timer_init+0x30c>)
 80113c8:	2200      	movs	r2, #0
 80113ca:	619a      	str	r2, [r3, #24]
    HAL_TIM_Base_Init( &gh_tim3 );
 80113cc:	484a      	ldr	r0, [pc, #296]	; (80114f8 <timer_init+0x30c>)
 80113ce:	f7f4 f8b9 	bl	8005544 <HAL_TIM_Base_Init>

    sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80113d2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80113d6:	633b      	str	r3, [r7, #48]	; 0x30

    // Set up clock source
    if ( HAL_OK != HAL_TIM_ConfigClockSource( &gh_tim3, &sClockSourceConfig ))
 80113d8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80113dc:	4619      	mov	r1, r3
 80113de:	4846      	ldr	r0, [pc, #280]	; (80114f8 <timer_init+0x30c>)
 80113e0:	f7f4 fb72 	bl	8005ac8 <HAL_TIM_ConfigClockSource>
 80113e4:	4603      	mov	r3, r0
 80113e6:	2b00      	cmp	r3, #0
 80113e8:	d005      	beq.n	80113f6 <timer_init+0x20a>
    {
    	status |= eTIMER_ERROR_INIT;
 80113ea:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80113ee:	f043 0302 	orr.w	r3, r3, #2
 80113f2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }

    // Init PWM unit
	if ( HAL_OK != HAL_TIM_PWM_Init( &gh_tim3 ))
 80113f6:	4840      	ldr	r0, [pc, #256]	; (80114f8 <timer_init+0x30c>)
 80113f8:	f7f4 f8fb 	bl	80055f2 <HAL_TIM_PWM_Init>
 80113fc:	4603      	mov	r3, r0
 80113fe:	2b00      	cmp	r3, #0
 8011400:	d005      	beq.n	801140e <timer_init+0x222>
	{
		status |= eTIMER_ERROR_INIT;
 8011402:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8011406:	f043 0302 	orr.w	r3, r3, #2
 801140a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

	}

	sConfigOC.OCMode 				= TIM_OCMODE_PWM1;
 801140e:	2360      	movs	r3, #96	; 0x60
 8011410:	617b      	str	r3, [r7, #20]
	sConfigOC.Pulse 				= 0;
 8011412:	2300      	movs	r3, #0
 8011414:	61bb      	str	r3, [r7, #24]
	sConfigOC.OCPolarity 			= TIM_OCPOLARITY_HIGH;
 8011416:	2300      	movs	r3, #0
 8011418:	61fb      	str	r3, [r7, #28]
	sConfigOC.OCNPolarity 			= TIM_OCNPOLARITY_HIGH;
 801141a:	2300      	movs	r3, #0
 801141c:	623b      	str	r3, [r7, #32]
	sConfigOC.OCFastMode 			= TIM_OCFAST_DISABLE;
 801141e:	2300      	movs	r3, #0
 8011420:	627b      	str	r3, [r7, #36]	; 0x24
	sConfigOC.OCIdleState 			= TIM_OCIDLESTATE_RESET;
 8011422:	2300      	movs	r3, #0
 8011424:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfigOC.OCNIdleState 			= TIM_OCNIDLESTATE_RESET;
 8011426:	2300      	movs	r3, #0
 8011428:	62fb      	str	r3, [r7, #44]	; 0x2c

	// Config channel
	if ( HAL_OK != HAL_TIM_PWM_ConfigChannel( &gh_tim3, &sConfigOC, g_timer_cfg_table_t.ch[eTIMER_TIM3_CH4_BUZZER].tim_ch ))
 801142a:	220c      	movs	r2, #12
 801142c:	f107 0314 	add.w	r3, r7, #20
 8011430:	4619      	mov	r1, r3
 8011432:	4831      	ldr	r0, [pc, #196]	; (80114f8 <timer_init+0x30c>)
 8011434:	f7f4 fa38 	bl	80058a8 <HAL_TIM_PWM_ConfigChannel>
 8011438:	4603      	mov	r3, r0
 801143a:	2b00      	cmp	r3, #0
 801143c:	d005      	beq.n	801144a <timer_init+0x25e>
	{
		status |= eTIMER_ERROR_INIT;
 801143e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8011442:	f043 0302 	orr.w	r3, r3, #2
 8011446:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    //
    //	APB1 clock
    // =====================================================================================

    // Configure Timer
    gh_tim4.Instance 				= TIM4;
 801144a:	4b2e      	ldr	r3, [pc, #184]	; (8011504 <timer_init+0x318>)
 801144c:	4a2e      	ldr	r2, [pc, #184]	; (8011508 <timer_init+0x31c>)
 801144e:	601a      	str	r2, [r3, #0]
    gh_tim4.Init.Prescaler 			= 16;
 8011450:	4b2c      	ldr	r3, [pc, #176]	; (8011504 <timer_init+0x318>)
 8011452:	2210      	movs	r2, #16
 8011454:	605a      	str	r2, [r3, #4]
    gh_tim4.Init.CounterMode 		= TIM_COUNTERMODE_UP;
 8011456:	4b2b      	ldr	r3, [pc, #172]	; (8011504 <timer_init+0x318>)
 8011458:	2200      	movs	r2, #0
 801145a:	609a      	str	r2, [r3, #8]
    gh_tim4.Init.Period 			= (( 2.0f * HAL_RCC_GetPCLK1Freq()) / ( g_timer_cfg_table_t.tim[eTIMER_TIM4].frequency * ( gh_tim4.Init.Prescaler + 1U )));
 801145c:	f7f2 fd46 	bl	8003eec <HAL_RCC_GetPCLK1Freq>
 8011460:	ee07 0a90 	vmov	s15, r0
 8011464:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011468:	ee77 6aa7 	vadd.f32	s13, s15, s15
 801146c:	ed9f 7a24 	vldr	s14, [pc, #144]	; 8011500 <timer_init+0x314>
 8011470:	4b24      	ldr	r3, [pc, #144]	; (8011504 <timer_init+0x318>)
 8011472:	685b      	ldr	r3, [r3, #4]
 8011474:	3301      	adds	r3, #1
 8011476:	ee07 3a90 	vmov	s15, r3
 801147a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801147e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8011482:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8011486:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801148a:	ee17 2a90 	vmov	r2, s15
 801148e:	4b1d      	ldr	r3, [pc, #116]	; (8011504 <timer_init+0x318>)
 8011490:	60da      	str	r2, [r3, #12]
    gh_tim4.Init.ClockDivision 		= TIM_CLOCKDIVISION_DIV1;
 8011492:	4b1c      	ldr	r3, [pc, #112]	; (8011504 <timer_init+0x318>)
 8011494:	2200      	movs	r2, #0
 8011496:	611a      	str	r2, [r3, #16]
    gh_tim4.Init.RepetitionCounter 	= 0;
 8011498:	4b1a      	ldr	r3, [pc, #104]	; (8011504 <timer_init+0x318>)
 801149a:	2200      	movs	r2, #0
 801149c:	615a      	str	r2, [r3, #20]
    gh_tim4.Init.AutoReloadPreload 	= TIM_AUTORELOAD_PRELOAD_DISABLE;
 801149e:	4b19      	ldr	r3, [pc, #100]	; (8011504 <timer_init+0x318>)
 80114a0:	2200      	movs	r2, #0
 80114a2:	619a      	str	r2, [r3, #24]
    HAL_TIM_Base_Init( &gh_tim4 );
 80114a4:	4817      	ldr	r0, [pc, #92]	; (8011504 <timer_init+0x318>)
 80114a6:	f7f4 f84d 	bl	8005544 <HAL_TIM_Base_Init>

    sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80114aa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80114ae:	633b      	str	r3, [r7, #48]	; 0x30

    // Set up clock source
    if ( HAL_OK != HAL_TIM_ConfigClockSource( &gh_tim4, &sClockSourceConfig ))
 80114b0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80114b4:	4619      	mov	r1, r3
 80114b6:	4813      	ldr	r0, [pc, #76]	; (8011504 <timer_init+0x318>)
 80114b8:	f7f4 fb06 	bl	8005ac8 <HAL_TIM_ConfigClockSource>
 80114bc:	4603      	mov	r3, r0
 80114be:	2b00      	cmp	r3, #0
 80114c0:	d005      	beq.n	80114ce <timer_init+0x2e2>
    {
    	status |= eTIMER_ERROR_INIT;
 80114c2:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80114c6:	f043 0302 	orr.w	r3, r3, #2
 80114ca:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }

    // Init PWM unit
	if ( HAL_OK != HAL_TIM_PWM_Init( &gh_tim4 ))
 80114ce:	480d      	ldr	r0, [pc, #52]	; (8011504 <timer_init+0x318>)
 80114d0:	f7f4 f88f 	bl	80055f2 <HAL_TIM_PWM_Init>
 80114d4:	4603      	mov	r3, r0
 80114d6:	2b00      	cmp	r3, #0
 80114d8:	d018      	beq.n	801150c <timer_init+0x320>
	{
		status |= eTIMER_ERROR_INIT;
 80114da:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80114de:	f043 0302 	orr.w	r3, r3, #2
 80114e2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80114e6:	e011      	b.n	801150c <timer_init+0x320>
 80114e8:	40023800 	.word	0x40023800
 80114ec:	20004f18 	.word	0x20004f18
 80114f0:	40010000 	.word	0x40010000
 80114f4:	469c4000 	.word	0x469c4000
 80114f8:	20004f64 	.word	0x20004f64
 80114fc:	40000400 	.word	0x40000400
 8011500:	47435000 	.word	0x47435000
 8011504:	20004fb0 	.word	0x20004fb0
 8011508:	40000800 	.word	0x40000800

	}

	sConfigOC.OCMode 				= TIM_OCMODE_PWM1;
 801150c:	2360      	movs	r3, #96	; 0x60
 801150e:	617b      	str	r3, [r7, #20]
	sConfigOC.Pulse 				= 0;
 8011510:	2300      	movs	r3, #0
 8011512:	61bb      	str	r3, [r7, #24]
	sConfigOC.OCPolarity 			= TIM_OCPOLARITY_HIGH;
 8011514:	2300      	movs	r3, #0
 8011516:	61fb      	str	r3, [r7, #28]
	sConfigOC.OCNPolarity 			= TIM_OCNPOLARITY_HIGH;
 8011518:	2300      	movs	r3, #0
 801151a:	623b      	str	r3, [r7, #32]
	sConfigOC.OCFastMode 			= TIM_OCFAST_DISABLE;
 801151c:	2300      	movs	r3, #0
 801151e:	627b      	str	r3, [r7, #36]	; 0x24
	sConfigOC.OCIdleState 			= TIM_OCIDLESTATE_RESET;
 8011520:	2300      	movs	r3, #0
 8011522:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfigOC.OCNIdleState 			= TIM_OCNIDLESTATE_RESET;
 8011524:	2300      	movs	r3, #0
 8011526:	62fb      	str	r3, [r7, #44]	; 0x2c

	// Config channel
	if ( HAL_OK != HAL_TIM_PWM_ConfigChannel( &gh_tim4, &sConfigOC, g_timer_cfg_table_t.ch[eTIMER_TIM4_CH3_VUSB_SWITCH_PWM].tim_ch ))
 8011528:	2208      	movs	r2, #8
 801152a:	f107 0314 	add.w	r3, r7, #20
 801152e:	4619      	mov	r1, r3
 8011530:	488f      	ldr	r0, [pc, #572]	; (8011770 <timer_init+0x584>)
 8011532:	f7f4 f9b9 	bl	80058a8 <HAL_TIM_PWM_ConfigChannel>
 8011536:	4603      	mov	r3, r0
 8011538:	2b00      	cmp	r3, #0
 801153a:	d005      	beq.n	8011548 <timer_init+0x35c>
	{
		status |= eTIMER_ERROR_INIT;
 801153c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8011540:	f043 0302 	orr.w	r3, r3, #2
 8011544:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	}

	if ( HAL_OK != HAL_TIM_PWM_ConfigChannel( &gh_tim4, &sConfigOC, g_timer_cfg_table_t.ch[eTIMER_TIM4_CH4_VEXT_SWITCH_PWM].tim_ch ))
 8011548:	220c      	movs	r2, #12
 801154a:	f107 0314 	add.w	r3, r7, #20
 801154e:	4619      	mov	r1, r3
 8011550:	4887      	ldr	r0, [pc, #540]	; (8011770 <timer_init+0x584>)
 8011552:	f7f4 f9a9 	bl	80058a8 <HAL_TIM_PWM_ConfigChannel>
 8011556:	4603      	mov	r3, r0
 8011558:	2b00      	cmp	r3, #0
 801155a:	d005      	beq.n	8011568 <timer_init+0x37c>
	{
		status |= eTIMER_ERROR_INIT;
 801155c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8011560:	f043 0302 	orr.w	r3, r3, #2
 8011564:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    //
    //	APB2 clock
    // =====================================================================================

    // Configure Timer
    gh_tim10.Instance 					= TIM10;
 8011568:	4b82      	ldr	r3, [pc, #520]	; (8011774 <timer_init+0x588>)
 801156a:	4a83      	ldr	r2, [pc, #524]	; (8011778 <timer_init+0x58c>)
 801156c:	601a      	str	r2, [r3, #0]
    gh_tim10.Init.Prescaler 			= 16;
 801156e:	4b81      	ldr	r3, [pc, #516]	; (8011774 <timer_init+0x588>)
 8011570:	2210      	movs	r2, #16
 8011572:	605a      	str	r2, [r3, #4]
    gh_tim10.Init.CounterMode 			= TIM_COUNTERMODE_UP;
 8011574:	4b7f      	ldr	r3, [pc, #508]	; (8011774 <timer_init+0x588>)
 8011576:	2200      	movs	r2, #0
 8011578:	609a      	str	r2, [r3, #8]
    gh_tim10.Init.Period 				= (( 2.0f * HAL_RCC_GetPCLK2Freq()) / ( g_timer_cfg_table_t.tim[eTIMER_TIM10].frequency * ( gh_tim10.Init.Prescaler + 1U )));
 801157a:	f7f2 fccb 	bl	8003f14 <HAL_RCC_GetPCLK2Freq>
 801157e:	ee07 0a90 	vmov	s15, r0
 8011582:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011586:	ee77 6aa7 	vadd.f32	s13, s15, s15
 801158a:	ed9f 7a7c 	vldr	s14, [pc, #496]	; 801177c <timer_init+0x590>
 801158e:	4b79      	ldr	r3, [pc, #484]	; (8011774 <timer_init+0x588>)
 8011590:	685b      	ldr	r3, [r3, #4]
 8011592:	3301      	adds	r3, #1
 8011594:	ee07 3a90 	vmov	s15, r3
 8011598:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801159c:	ee27 7a27 	vmul.f32	s14, s14, s15
 80115a0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80115a4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80115a8:	ee17 2a90 	vmov	r2, s15
 80115ac:	4b71      	ldr	r3, [pc, #452]	; (8011774 <timer_init+0x588>)
 80115ae:	60da      	str	r2, [r3, #12]
    gh_tim10.Init.ClockDivision 		= TIM_CLOCKDIVISION_DIV1;
 80115b0:	4b70      	ldr	r3, [pc, #448]	; (8011774 <timer_init+0x588>)
 80115b2:	2200      	movs	r2, #0
 80115b4:	611a      	str	r2, [r3, #16]
    gh_tim10.Init.RepetitionCounter 	= 0;
 80115b6:	4b6f      	ldr	r3, [pc, #444]	; (8011774 <timer_init+0x588>)
 80115b8:	2200      	movs	r2, #0
 80115ba:	615a      	str	r2, [r3, #20]
    gh_tim10.Init.AutoReloadPreload 	= TIM_AUTORELOAD_PRELOAD_DISABLE;
 80115bc:	4b6d      	ldr	r3, [pc, #436]	; (8011774 <timer_init+0x588>)
 80115be:	2200      	movs	r2, #0
 80115c0:	619a      	str	r2, [r3, #24]
    HAL_TIM_Base_Init( &gh_tim10 );
 80115c2:	486c      	ldr	r0, [pc, #432]	; (8011774 <timer_init+0x588>)
 80115c4:	f7f3 ffbe 	bl	8005544 <HAL_TIM_Base_Init>

    sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80115c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80115cc:	633b      	str	r3, [r7, #48]	; 0x30

    // Set up clock source
    if ( HAL_OK != HAL_TIM_ConfigClockSource( &gh_tim10, &sClockSourceConfig ))
 80115ce:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80115d2:	4619      	mov	r1, r3
 80115d4:	4867      	ldr	r0, [pc, #412]	; (8011774 <timer_init+0x588>)
 80115d6:	f7f4 fa77 	bl	8005ac8 <HAL_TIM_ConfigClockSource>
 80115da:	4603      	mov	r3, r0
 80115dc:	2b00      	cmp	r3, #0
 80115de:	d005      	beq.n	80115ec <timer_init+0x400>
    {
    	status |= eTIMER_ERROR_INIT;
 80115e0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80115e4:	f043 0302 	orr.w	r3, r3, #2
 80115e8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }

    // Init PWM unit
	if ( HAL_OK != HAL_TIM_PWM_Init( &gh_tim10 ))
 80115ec:	4861      	ldr	r0, [pc, #388]	; (8011774 <timer_init+0x588>)
 80115ee:	f7f4 f800 	bl	80055f2 <HAL_TIM_PWM_Init>
 80115f2:	4603      	mov	r3, r0
 80115f4:	2b00      	cmp	r3, #0
 80115f6:	d005      	beq.n	8011604 <timer_init+0x418>
	{
		status |= eTIMER_ERROR_INIT;
 80115f8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80115fc:	f043 0302 	orr.w	r3, r3, #2
 8011600:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

	}

	sConfigOC.OCMode 				= TIM_OCMODE_PWM1;
 8011604:	2360      	movs	r3, #96	; 0x60
 8011606:	617b      	str	r3, [r7, #20]
	sConfigOC.Pulse 				= 0;
 8011608:	2300      	movs	r3, #0
 801160a:	61bb      	str	r3, [r7, #24]
	sConfigOC.OCPolarity 			= TIM_OCPOLARITY_HIGH;
 801160c:	2300      	movs	r3, #0
 801160e:	61fb      	str	r3, [r7, #28]
	sConfigOC.OCNPolarity 			= TIM_OCNPOLARITY_HIGH;
 8011610:	2300      	movs	r3, #0
 8011612:	623b      	str	r3, [r7, #32]
	sConfigOC.OCFastMode 			= TIM_OCFAST_DISABLE;
 8011614:	2300      	movs	r3, #0
 8011616:	627b      	str	r3, [r7, #36]	; 0x24
	sConfigOC.OCIdleState 			= TIM_OCIDLESTATE_RESET;
 8011618:	2300      	movs	r3, #0
 801161a:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfigOC.OCNIdleState 			= TIM_OCNIDLESTATE_RESET;
 801161c:	2300      	movs	r3, #0
 801161e:	62fb      	str	r3, [r7, #44]	; 0x2c

	// Config channel
	if ( HAL_OK != HAL_TIM_PWM_ConfigChannel( &gh_tim10, &sConfigOC, g_timer_cfg_table_t.ch[eTIMER_TIM10_CH1_LED_G_PWM].tim_ch ))
 8011620:	2200      	movs	r2, #0
 8011622:	f107 0314 	add.w	r3, r7, #20
 8011626:	4619      	mov	r1, r3
 8011628:	4852      	ldr	r0, [pc, #328]	; (8011774 <timer_init+0x588>)
 801162a:	f7f4 f93d 	bl	80058a8 <HAL_TIM_PWM_ConfigChannel>
 801162e:	4603      	mov	r3, r0
 8011630:	2b00      	cmp	r3, #0
 8011632:	d005      	beq.n	8011640 <timer_init+0x454>
	{
		status |= eTIMER_ERROR_INIT;
 8011634:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8011638:	f043 0302 	orr.w	r3, r3, #2
 801163c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    //
    //	APB2 clock
    // =====================================================================================

    // Configure Timer
    gh_tim11.Instance 					= TIM11;
 8011640:	4b4f      	ldr	r3, [pc, #316]	; (8011780 <timer_init+0x594>)
 8011642:	4a50      	ldr	r2, [pc, #320]	; (8011784 <timer_init+0x598>)
 8011644:	601a      	str	r2, [r3, #0]
    gh_tim11.Init.Prescaler 			= 16;
 8011646:	4b4e      	ldr	r3, [pc, #312]	; (8011780 <timer_init+0x594>)
 8011648:	2210      	movs	r2, #16
 801164a:	605a      	str	r2, [r3, #4]
    gh_tim11.Init.CounterMode 			= TIM_COUNTERMODE_UP;
 801164c:	4b4c      	ldr	r3, [pc, #304]	; (8011780 <timer_init+0x594>)
 801164e:	2200      	movs	r2, #0
 8011650:	609a      	str	r2, [r3, #8]
    gh_tim11.Init.Period 				= (( 2.0f *  HAL_RCC_GetPCLK2Freq()) / ( g_timer_cfg_table_t.tim[eTIMER_TIM11].frequency * ( gh_tim11.Init.Prescaler + 1U )));
 8011652:	f7f2 fc5f 	bl	8003f14 <HAL_RCC_GetPCLK2Freq>
 8011656:	ee07 0a90 	vmov	s15, r0
 801165a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801165e:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8011662:	ed9f 7a46 	vldr	s14, [pc, #280]	; 801177c <timer_init+0x590>
 8011666:	4b46      	ldr	r3, [pc, #280]	; (8011780 <timer_init+0x594>)
 8011668:	685b      	ldr	r3, [r3, #4]
 801166a:	3301      	adds	r3, #1
 801166c:	ee07 3a90 	vmov	s15, r3
 8011670:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011674:	ee27 7a27 	vmul.f32	s14, s14, s15
 8011678:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801167c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8011680:	ee17 2a90 	vmov	r2, s15
 8011684:	4b3e      	ldr	r3, [pc, #248]	; (8011780 <timer_init+0x594>)
 8011686:	60da      	str	r2, [r3, #12]
    gh_tim11.Init.ClockDivision 		= TIM_CLOCKDIVISION_DIV1;
 8011688:	4b3d      	ldr	r3, [pc, #244]	; (8011780 <timer_init+0x594>)
 801168a:	2200      	movs	r2, #0
 801168c:	611a      	str	r2, [r3, #16]
    gh_tim11.Init.RepetitionCounter 	= 0;
 801168e:	4b3c      	ldr	r3, [pc, #240]	; (8011780 <timer_init+0x594>)
 8011690:	2200      	movs	r2, #0
 8011692:	615a      	str	r2, [r3, #20]
    gh_tim11.Init.AutoReloadPreload 	= TIM_AUTORELOAD_PRELOAD_DISABLE;
 8011694:	4b3a      	ldr	r3, [pc, #232]	; (8011780 <timer_init+0x594>)
 8011696:	2200      	movs	r2, #0
 8011698:	619a      	str	r2, [r3, #24]
    HAL_TIM_Base_Init( &gh_tim11 );
 801169a:	4839      	ldr	r0, [pc, #228]	; (8011780 <timer_init+0x594>)
 801169c:	f7f3 ff52 	bl	8005544 <HAL_TIM_Base_Init>

    sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80116a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80116a4:	633b      	str	r3, [r7, #48]	; 0x30

    // Set up clock source
    if ( HAL_OK != HAL_TIM_ConfigClockSource( &gh_tim11, &sClockSourceConfig ))
 80116a6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80116aa:	4619      	mov	r1, r3
 80116ac:	4834      	ldr	r0, [pc, #208]	; (8011780 <timer_init+0x594>)
 80116ae:	f7f4 fa0b 	bl	8005ac8 <HAL_TIM_ConfigClockSource>
 80116b2:	4603      	mov	r3, r0
 80116b4:	2b00      	cmp	r3, #0
 80116b6:	d005      	beq.n	80116c4 <timer_init+0x4d8>
    {
    	status |= eTIMER_ERROR_INIT;
 80116b8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80116bc:	f043 0302 	orr.w	r3, r3, #2
 80116c0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }

    // Init PWM unit
	if ( HAL_OK != HAL_TIM_PWM_Init( &gh_tim11 ))
 80116c4:	482e      	ldr	r0, [pc, #184]	; (8011780 <timer_init+0x594>)
 80116c6:	f7f3 ff94 	bl	80055f2 <HAL_TIM_PWM_Init>
 80116ca:	4603      	mov	r3, r0
 80116cc:	2b00      	cmp	r3, #0
 80116ce:	d005      	beq.n	80116dc <timer_init+0x4f0>
	{
		status |= eTIMER_ERROR_INIT;
 80116d0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80116d4:	f043 0302 	orr.w	r3, r3, #2
 80116d8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

	}

	sConfigOC.OCMode 				= TIM_OCMODE_PWM1;
 80116dc:	2360      	movs	r3, #96	; 0x60
 80116de:	617b      	str	r3, [r7, #20]
	sConfigOC.Pulse 				= 0;
 80116e0:	2300      	movs	r3, #0
 80116e2:	61bb      	str	r3, [r7, #24]
	sConfigOC.OCPolarity 			= TIM_OCPOLARITY_HIGH;
 80116e4:	2300      	movs	r3, #0
 80116e6:	61fb      	str	r3, [r7, #28]
	sConfigOC.OCNPolarity 			= TIM_OCNPOLARITY_HIGH;
 80116e8:	2300      	movs	r3, #0
 80116ea:	623b      	str	r3, [r7, #32]
	sConfigOC.OCFastMode 			= TIM_OCFAST_DISABLE;
 80116ec:	2300      	movs	r3, #0
 80116ee:	627b      	str	r3, [r7, #36]	; 0x24
	sConfigOC.OCIdleState 			= TIM_OCIDLESTATE_RESET;
 80116f0:	2300      	movs	r3, #0
 80116f2:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfigOC.OCNIdleState 			= TIM_OCNIDLESTATE_RESET;
 80116f4:	2300      	movs	r3, #0
 80116f6:	62fb      	str	r3, [r7, #44]	; 0x2c

	// Config channel
	if ( HAL_OK != HAL_TIM_PWM_ConfigChannel( &gh_tim11, &sConfigOC, g_timer_cfg_table_t.ch[eTIMER_TIM11_CH1_LED_R_PWM].tim_ch ))
 80116f8:	2200      	movs	r2, #0
 80116fa:	f107 0314 	add.w	r3, r7, #20
 80116fe:	4619      	mov	r1, r3
 8011700:	481f      	ldr	r0, [pc, #124]	; (8011780 <timer_init+0x594>)
 8011702:	f7f4 f8d1 	bl	80058a8 <HAL_TIM_PWM_ConfigChannel>
 8011706:	4603      	mov	r3, r0
 8011708:	2b00      	cmp	r3, #0
 801170a:	d005      	beq.n	8011718 <timer_init+0x52c>
	{
		status |= eTIMER_ERROR_INIT;
 801170c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8011710:	f043 0302 	orr.w	r3, r3, #2
 8011714:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	}

	// Starts timers
	if ( eTIMER_OK == status )
 8011718:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 801171c:	2b00      	cmp	r3, #0
 801171e:	d120      	bne.n	8011762 <timer_init+0x576>
	{
		gb_is_init = true;
 8011720:	4b19      	ldr	r3, [pc, #100]	; (8011788 <timer_init+0x59c>)
 8011722:	2201      	movs	r2, #1
 8011724:	701a      	strb	r2, [r3, #0]

		for ( i = 0; i < eTIMER_CH_NUM_OF; i++ )
 8011726:	2300      	movs	r3, #0
 8011728:	643b      	str	r3, [r7, #64]	; 0x40
 801172a:	e017      	b.n	801175c <timer_init+0x570>
		{
			HAL_TIM_PWM_Start((TIM_HandleTypeDef*) g_timer_cfg_table_t.ch[i].p_tim_handle, g_timer_cfg_table_t.ch[i].tim_ch );
 801172c:	4917      	ldr	r1, [pc, #92]	; (801178c <timer_init+0x5a0>)
 801172e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8011730:	4613      	mov	r3, r2
 8011732:	00db      	lsls	r3, r3, #3
 8011734:	1a9b      	subs	r3, r3, r2
 8011736:	009b      	lsls	r3, r3, #2
 8011738:	440b      	add	r3, r1
 801173a:	3350      	adds	r3, #80	; 0x50
 801173c:	6818      	ldr	r0, [r3, #0]
 801173e:	4913      	ldr	r1, [pc, #76]	; (801178c <timer_init+0x5a0>)
 8011740:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8011742:	4613      	mov	r3, r2
 8011744:	00db      	lsls	r3, r3, #3
 8011746:	1a9b      	subs	r3, r3, r2
 8011748:	009b      	lsls	r3, r3, #2
 801174a:	440b      	add	r3, r1
 801174c:	3354      	adds	r3, #84	; 0x54
 801174e:	681b      	ldr	r3, [r3, #0]
 8011750:	4619      	mov	r1, r3
 8011752:	f7f3 ffaf 	bl	80056b4 <HAL_TIM_PWM_Start>
		for ( i = 0; i < eTIMER_CH_NUM_OF; i++ )
 8011756:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011758:	3301      	adds	r3, #1
 801175a:	643b      	str	r3, [r7, #64]	; 0x40
 801175c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801175e:	2b05      	cmp	r3, #5
 8011760:	d9e4      	bls.n	801172c <timer_init+0x540>
		}
	}

	return status;
 8011762:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8011766:	4618      	mov	r0, r3
 8011768:	3748      	adds	r7, #72	; 0x48
 801176a:	46bd      	mov	sp, r7
 801176c:	bd80      	pop	{r7, pc}
 801176e:	bf00      	nop
 8011770:	20004fb0 	.word	0x20004fb0
 8011774:	20004ffc 	.word	0x20004ffc
 8011778:	40014400 	.word	0x40014400
 801177c:	469c4000 	.word	0x469c4000
 8011780:	20005048 	.word	0x20005048
 8011784:	40014800 	.word	0x40014800
 8011788:	20005094 	.word	0x20005094
 801178c:	0801f0bc 	.word	0x0801f0bc

08011790 <timer_set_pwm>:
* @param[in] 	duty 	- Duty cycle in range 0.0-1.0
* @return 		status 	- Status of operation
*/
////////////////////////////////////////////////////////////////////////////////
timer_status_t timer_set_pwm(const timer_ch_t ch, const float32_t duty)
{
 8011790:	b480      	push	{r7}
 8011792:	b085      	sub	sp, #20
 8011794:	af00      	add	r7, sp, #0
 8011796:	4603      	mov	r3, r0
 8011798:	ed87 0a00 	vstr	s0, [r7]
 801179c:	71fb      	strb	r3, [r7, #7]
	timer_status_t 		status 			= eTIMER_OK;
 801179e:	2300      	movs	r3, #0
 80117a0:	73fb      	strb	r3, [r7, #15]
	TIM_HandleTypeDef * p_tim_handle 	= NULL;
 80117a2:	2300      	movs	r3, #0
 80117a4:	60bb      	str	r3, [r7, #8]

	if ( true == gb_is_init )
 80117a6:	4b6b      	ldr	r3, [pc, #428]	; (8011954 <timer_set_pwm+0x1c4>)
 80117a8:	781b      	ldrb	r3, [r3, #0]
 80117aa:	2b00      	cmp	r3, #0
 80117ac:	f000 80c8 	beq.w	8011940 <timer_set_pwm+0x1b0>
	{
		p_tim_handle = g_timer_cfg_table_t.ch[ch].p_tim_handle;
 80117b0:	79fa      	ldrb	r2, [r7, #7]
 80117b2:	4969      	ldr	r1, [pc, #420]	; (8011958 <timer_set_pwm+0x1c8>)
 80117b4:	4613      	mov	r3, r2
 80117b6:	00db      	lsls	r3, r3, #3
 80117b8:	1a9b      	subs	r3, r3, r2
 80117ba:	009b      	lsls	r3, r3, #2
 80117bc:	440b      	add	r3, r1
 80117be:	3350      	adds	r3, #80	; 0x50
 80117c0:	681b      	ldr	r3, [r3, #0]
 80117c2:	60bb      	str	r3, [r7, #8]

		if (( duty >= 0.0f ) && ( duty <= 1.0f ))
 80117c4:	edd7 7a00 	vldr	s15, [r7]
 80117c8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80117cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80117d0:	f2c0 80b3 	blt.w	801193a <timer_set_pwm+0x1aa>
 80117d4:	edd7 7a00 	vldr	s15, [r7]
 80117d8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80117dc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80117e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80117e4:	f200 80a9 	bhi.w	801193a <timer_set_pwm+0x1aa>
		{
			__HAL_TIM_SET_COMPARE( p_tim_handle, g_timer_cfg_table_t.ch[ch].tim_ch, (__HAL_TIM_GET_AUTORELOAD( p_tim_handle ) * duty ));
 80117e8:	79fa      	ldrb	r2, [r7, #7]
 80117ea:	495b      	ldr	r1, [pc, #364]	; (8011958 <timer_set_pwm+0x1c8>)
 80117ec:	4613      	mov	r3, r2
 80117ee:	00db      	lsls	r3, r3, #3
 80117f0:	1a9b      	subs	r3, r3, r2
 80117f2:	009b      	lsls	r3, r3, #2
 80117f4:	440b      	add	r3, r1
 80117f6:	3354      	adds	r3, #84	; 0x54
 80117f8:	681b      	ldr	r3, [r3, #0]
 80117fa:	2b00      	cmp	r3, #0
 80117fc:	d112      	bne.n	8011824 <timer_set_pwm+0x94>
 80117fe:	68bb      	ldr	r3, [r7, #8]
 8011800:	681b      	ldr	r3, [r3, #0]
 8011802:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011804:	ee07 3a90 	vmov	s15, r3
 8011808:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 801180c:	edd7 7a00 	vldr	s15, [r7]
 8011810:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011814:	68bb      	ldr	r3, [r7, #8]
 8011816:	681b      	ldr	r3, [r3, #0]
 8011818:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801181c:	ee17 2a90 	vmov	r2, s15
 8011820:	635a      	str	r2, [r3, #52]	; 0x34
 8011822:	e08f      	b.n	8011944 <timer_set_pwm+0x1b4>
 8011824:	79fa      	ldrb	r2, [r7, #7]
 8011826:	494c      	ldr	r1, [pc, #304]	; (8011958 <timer_set_pwm+0x1c8>)
 8011828:	4613      	mov	r3, r2
 801182a:	00db      	lsls	r3, r3, #3
 801182c:	1a9b      	subs	r3, r3, r2
 801182e:	009b      	lsls	r3, r3, #2
 8011830:	440b      	add	r3, r1
 8011832:	3354      	adds	r3, #84	; 0x54
 8011834:	681b      	ldr	r3, [r3, #0]
 8011836:	2b04      	cmp	r3, #4
 8011838:	d112      	bne.n	8011860 <timer_set_pwm+0xd0>
 801183a:	68bb      	ldr	r3, [r7, #8]
 801183c:	681b      	ldr	r3, [r3, #0]
 801183e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011840:	ee07 3a90 	vmov	s15, r3
 8011844:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8011848:	edd7 7a00 	vldr	s15, [r7]
 801184c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011850:	68bb      	ldr	r3, [r7, #8]
 8011852:	681a      	ldr	r2, [r3, #0]
 8011854:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8011858:	ee17 3a90 	vmov	r3, s15
 801185c:	6393      	str	r3, [r2, #56]	; 0x38
 801185e:	e071      	b.n	8011944 <timer_set_pwm+0x1b4>
 8011860:	79fa      	ldrb	r2, [r7, #7]
 8011862:	493d      	ldr	r1, [pc, #244]	; (8011958 <timer_set_pwm+0x1c8>)
 8011864:	4613      	mov	r3, r2
 8011866:	00db      	lsls	r3, r3, #3
 8011868:	1a9b      	subs	r3, r3, r2
 801186a:	009b      	lsls	r3, r3, #2
 801186c:	440b      	add	r3, r1
 801186e:	3354      	adds	r3, #84	; 0x54
 8011870:	681b      	ldr	r3, [r3, #0]
 8011872:	2b08      	cmp	r3, #8
 8011874:	d112      	bne.n	801189c <timer_set_pwm+0x10c>
 8011876:	68bb      	ldr	r3, [r7, #8]
 8011878:	681b      	ldr	r3, [r3, #0]
 801187a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801187c:	ee07 3a90 	vmov	s15, r3
 8011880:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8011884:	edd7 7a00 	vldr	s15, [r7]
 8011888:	ee67 7a27 	vmul.f32	s15, s14, s15
 801188c:	68bb      	ldr	r3, [r7, #8]
 801188e:	681a      	ldr	r2, [r3, #0]
 8011890:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8011894:	ee17 3a90 	vmov	r3, s15
 8011898:	63d3      	str	r3, [r2, #60]	; 0x3c
 801189a:	e053      	b.n	8011944 <timer_set_pwm+0x1b4>
 801189c:	79fa      	ldrb	r2, [r7, #7]
 801189e:	492e      	ldr	r1, [pc, #184]	; (8011958 <timer_set_pwm+0x1c8>)
 80118a0:	4613      	mov	r3, r2
 80118a2:	00db      	lsls	r3, r3, #3
 80118a4:	1a9b      	subs	r3, r3, r2
 80118a6:	009b      	lsls	r3, r3, #2
 80118a8:	440b      	add	r3, r1
 80118aa:	3354      	adds	r3, #84	; 0x54
 80118ac:	681b      	ldr	r3, [r3, #0]
 80118ae:	2b0c      	cmp	r3, #12
 80118b0:	d112      	bne.n	80118d8 <timer_set_pwm+0x148>
 80118b2:	68bb      	ldr	r3, [r7, #8]
 80118b4:	681b      	ldr	r3, [r3, #0]
 80118b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80118b8:	ee07 3a90 	vmov	s15, r3
 80118bc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80118c0:	edd7 7a00 	vldr	s15, [r7]
 80118c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80118c8:	68bb      	ldr	r3, [r7, #8]
 80118ca:	681a      	ldr	r2, [r3, #0]
 80118cc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80118d0:	ee17 3a90 	vmov	r3, s15
 80118d4:	6413      	str	r3, [r2, #64]	; 0x40
 80118d6:	e035      	b.n	8011944 <timer_set_pwm+0x1b4>
 80118d8:	79fa      	ldrb	r2, [r7, #7]
 80118da:	491f      	ldr	r1, [pc, #124]	; (8011958 <timer_set_pwm+0x1c8>)
 80118dc:	4613      	mov	r3, r2
 80118de:	00db      	lsls	r3, r3, #3
 80118e0:	1a9b      	subs	r3, r3, r2
 80118e2:	009b      	lsls	r3, r3, #2
 80118e4:	440b      	add	r3, r1
 80118e6:	3354      	adds	r3, #84	; 0x54
 80118e8:	681b      	ldr	r3, [r3, #0]
 80118ea:	2b10      	cmp	r3, #16
 80118ec:	d112      	bne.n	8011914 <timer_set_pwm+0x184>
 80118ee:	68bb      	ldr	r3, [r7, #8]
 80118f0:	681b      	ldr	r3, [r3, #0]
 80118f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80118f4:	ee07 3a90 	vmov	s15, r3
 80118f8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80118fc:	edd7 7a00 	vldr	s15, [r7]
 8011900:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011904:	68bb      	ldr	r3, [r7, #8]
 8011906:	681a      	ldr	r2, [r3, #0]
 8011908:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801190c:	ee17 3a90 	vmov	r3, s15
 8011910:	6593      	str	r3, [r2, #88]	; 0x58
 8011912:	e017      	b.n	8011944 <timer_set_pwm+0x1b4>
 8011914:	68bb      	ldr	r3, [r7, #8]
 8011916:	681b      	ldr	r3, [r3, #0]
 8011918:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801191a:	ee07 3a90 	vmov	s15, r3
 801191e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8011922:	edd7 7a00 	vldr	s15, [r7]
 8011926:	ee67 7a27 	vmul.f32	s15, s14, s15
 801192a:	68bb      	ldr	r3, [r7, #8]
 801192c:	681a      	ldr	r2, [r3, #0]
 801192e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8011932:	ee17 3a90 	vmov	r3, s15
 8011936:	65d3      	str	r3, [r2, #92]	; 0x5c
 8011938:	e004      	b.n	8011944 <timer_set_pwm+0x1b4>
		}
		else
		{
			status = eTIMER_ERROR;
 801193a:	2301      	movs	r3, #1
 801193c:	73fb      	strb	r3, [r7, #15]
 801193e:	e001      	b.n	8011944 <timer_set_pwm+0x1b4>
		}
	}
	else
	{
		status = eTIMER_ERROR_INIT;
 8011940:	2302      	movs	r3, #2
 8011942:	73fb      	strb	r3, [r7, #15]
	}

	return status;
 8011944:	7bfb      	ldrb	r3, [r7, #15]
}
 8011946:	4618      	mov	r0, r3
 8011948:	3714      	adds	r7, #20
 801194a:	46bd      	mov	sp, r7
 801194c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011950:	4770      	bx	lr
 8011952:	bf00      	nop
 8011954:	20005094 	.word	0x20005094
 8011958:	0801f0bc 	.word	0x0801f0bc

0801195c <__NVIC_EnableIRQ>:
{
 801195c:	b480      	push	{r7}
 801195e:	b083      	sub	sp, #12
 8011960:	af00      	add	r7, sp, #0
 8011962:	4603      	mov	r3, r0
 8011964:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8011966:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801196a:	2b00      	cmp	r3, #0
 801196c:	db0b      	blt.n	8011986 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 801196e:	79fb      	ldrb	r3, [r7, #7]
 8011970:	f003 021f 	and.w	r2, r3, #31
 8011974:	4907      	ldr	r1, [pc, #28]	; (8011994 <__NVIC_EnableIRQ+0x38>)
 8011976:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801197a:	095b      	lsrs	r3, r3, #5
 801197c:	2001      	movs	r0, #1
 801197e:	fa00 f202 	lsl.w	r2, r0, r2
 8011982:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8011986:	bf00      	nop
 8011988:	370c      	adds	r7, #12
 801198a:	46bd      	mov	sp, r7
 801198c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011990:	4770      	bx	lr
 8011992:	bf00      	nop
 8011994:	e000e100 	.word	0xe000e100

08011998 <__NVIC_SetPriority>:
{
 8011998:	b480      	push	{r7}
 801199a:	b083      	sub	sp, #12
 801199c:	af00      	add	r7, sp, #0
 801199e:	4603      	mov	r3, r0
 80119a0:	6039      	str	r1, [r7, #0]
 80119a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80119a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80119a8:	2b00      	cmp	r3, #0
 80119aa:	db0a      	blt.n	80119c2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80119ac:	683b      	ldr	r3, [r7, #0]
 80119ae:	b2da      	uxtb	r2, r3
 80119b0:	490c      	ldr	r1, [pc, #48]	; (80119e4 <__NVIC_SetPriority+0x4c>)
 80119b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80119b6:	0112      	lsls	r2, r2, #4
 80119b8:	b2d2      	uxtb	r2, r2
 80119ba:	440b      	add	r3, r1
 80119bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80119c0:	e00a      	b.n	80119d8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80119c2:	683b      	ldr	r3, [r7, #0]
 80119c4:	b2da      	uxtb	r2, r3
 80119c6:	4908      	ldr	r1, [pc, #32]	; (80119e8 <__NVIC_SetPriority+0x50>)
 80119c8:	79fb      	ldrb	r3, [r7, #7]
 80119ca:	f003 030f 	and.w	r3, r3, #15
 80119ce:	3b04      	subs	r3, #4
 80119d0:	0112      	lsls	r2, r2, #4
 80119d2:	b2d2      	uxtb	r2, r2
 80119d4:	440b      	add	r3, r1
 80119d6:	761a      	strb	r2, [r3, #24]
}
 80119d8:	bf00      	nop
 80119da:	370c      	adds	r7, #12
 80119dc:	46bd      	mov	sp, r7
 80119de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119e2:	4770      	bx	lr
 80119e4:	e000e100 	.word	0xe000e100
 80119e8:	e000ed00 	.word	0xe000ed00

080119ec <uart_dbg_init>:
*
* @return 		status - Status of operation
*/
////////////////////////////////////////////////////////////////////////////////
uart_dbg_status_t uart_dbg_init(void)
{
 80119ec:	b580      	push	{r7, lr}
 80119ee:	b08a      	sub	sp, #40	; 0x28
 80119f0:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef  	gpio_init 	= {0};
 80119f2:	f107 0310 	add.w	r3, r7, #16
 80119f6:	2200      	movs	r2, #0
 80119f8:	601a      	str	r2, [r3, #0]
 80119fa:	605a      	str	r2, [r3, #4]
 80119fc:	609a      	str	r2, [r3, #8]
 80119fe:	60da      	str	r2, [r3, #12]
 8011a00:	611a      	str	r2, [r3, #16]
	uart_dbg_status_t	 status		= eUART_DBG_OK;
 8011a02:	2300      	movs	r3, #0
 8011a04:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if ((fifo_create(&gfifo_uart_tx, gu8_uart_tx_buffer, UART_DBG_TX_BUFFER_LEN) == eFIFO_OK) &&
 8011a08:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8011a0c:	4949      	ldr	r1, [pc, #292]	; (8011b34 <uart_dbg_init+0x148>)
 8011a0e:	484a      	ldr	r0, [pc, #296]	; (8011b38 <uart_dbg_init+0x14c>)
 8011a10:	f001 fc08 	bl	8013224 <fifo_create>
 8011a14:	4603      	mov	r3, r0
 8011a16:	2b00      	cmp	r3, #0
 8011a18:	f040 8082 	bne.w	8011b20 <uart_dbg_init+0x134>
		(fifo_create(&gfifo_uart_rx, gu8_uart_rx_buffer, UART_DBG_RX_BUFFER_LEN) == eFIFO_OK))
 8011a1c:	2280      	movs	r2, #128	; 0x80
 8011a1e:	4947      	ldr	r1, [pc, #284]	; (8011b3c <uart_dbg_init+0x150>)
 8011a20:	4847      	ldr	r0, [pc, #284]	; (8011b40 <uart_dbg_init+0x154>)
 8011a22:	f001 fbff 	bl	8013224 <fifo_create>
 8011a26:	4603      	mov	r3, r0
	if ((fifo_create(&gfifo_uart_tx, gu8_uart_tx_buffer, UART_DBG_TX_BUFFER_LEN) == eFIFO_OK) &&
 8011a28:	2b00      	cmp	r3, #0
 8011a2a:	d179      	bne.n	8011b20 <uart_dbg_init+0x134>
	{
		// Init peripheral clocks
		UART_DBG_CLK_ENABLE();
 8011a2c:	4b45      	ldr	r3, [pc, #276]	; (8011b44 <uart_dbg_init+0x158>)
 8011a2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011a30:	4a44      	ldr	r2, [pc, #272]	; (8011b44 <uart_dbg_init+0x158>)
 8011a32:	f043 0310 	orr.w	r3, r3, #16
 8011a36:	6453      	str	r3, [r2, #68]	; 0x44
 8011a38:	4b42      	ldr	r3, [pc, #264]	; (8011b44 <uart_dbg_init+0x158>)
 8011a3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011a3c:	f003 0310 	and.w	r3, r3, #16
 8011a40:	60fb      	str	r3, [r7, #12]
 8011a42:	68fb      	ldr	r3, [r7, #12]
		UART_TX_CLK_ENABLE();
 8011a44:	4b3f      	ldr	r3, [pc, #252]	; (8011b44 <uart_dbg_init+0x158>)
 8011a46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011a48:	4a3e      	ldr	r2, [pc, #248]	; (8011b44 <uart_dbg_init+0x158>)
 8011a4a:	f043 0301 	orr.w	r3, r3, #1
 8011a4e:	6313      	str	r3, [r2, #48]	; 0x30
 8011a50:	4b3c      	ldr	r3, [pc, #240]	; (8011b44 <uart_dbg_init+0x158>)
 8011a52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011a54:	f003 0301 	and.w	r3, r3, #1
 8011a58:	60bb      	str	r3, [r7, #8]
 8011a5a:	68bb      	ldr	r3, [r7, #8]
		UART_RX_CLK_ENABLE();
 8011a5c:	4b39      	ldr	r3, [pc, #228]	; (8011b44 <uart_dbg_init+0x158>)
 8011a5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011a60:	4a38      	ldr	r2, [pc, #224]	; (8011b44 <uart_dbg_init+0x158>)
 8011a62:	f043 0301 	orr.w	r3, r3, #1
 8011a66:	6313      	str	r3, [r2, #48]	; 0x30
 8011a68:	4b36      	ldr	r3, [pc, #216]	; (8011b44 <uart_dbg_init+0x158>)
 8011a6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011a6c:	f003 0301 	and.w	r3, r3, #1
 8011a70:	607b      	str	r3, [r7, #4]
 8011a72:	687b      	ldr	r3, [r7, #4]

		// Init Tx pin
		gpio_init.Pin 	     = UART_TX__PIN;
 8011a74:	f44f 7300 	mov.w	r3, #512	; 0x200
 8011a78:	613b      	str	r3, [r7, #16]
		gpio_init.Mode 	     = GPIO_MODE_AF_PP;
 8011a7a:	2302      	movs	r3, #2
 8011a7c:	617b      	str	r3, [r7, #20]
		gpio_init.Speed 	 = GPIO_SPEED_FREQ_VERY_HIGH;
 8011a7e:	2303      	movs	r3, #3
 8011a80:	61fb      	str	r3, [r7, #28]
		gpio_init.Pull       = GPIO_PULLUP;
 8011a82:	2301      	movs	r3, #1
 8011a84:	61bb      	str	r3, [r7, #24]
		gpio_init.Alternate  = UART_TX__AF;
 8011a86:	2307      	movs	r3, #7
 8011a88:	623b      	str	r3, [r7, #32]
		HAL_GPIO_Init(UART_TX__GPIO, &gpio_init);
 8011a8a:	f107 0310 	add.w	r3, r7, #16
 8011a8e:	4619      	mov	r1, r3
 8011a90:	482d      	ldr	r0, [pc, #180]	; (8011b48 <uart_dbg_init+0x15c>)
 8011a92:	f7f0 fe5f 	bl	8002754 <HAL_GPIO_Init>

		// Init Rx pin
		gpio_init.Pin 	     = UART_RX__PIN;
 8011a96:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011a9a:	613b      	str	r3, [r7, #16]
		gpio_init.Mode 	     = GPIO_MODE_AF_OD;
 8011a9c:	2312      	movs	r3, #18
 8011a9e:	617b      	str	r3, [r7, #20]
		gpio_init.Speed 	 = GPIO_SPEED_FREQ_VERY_HIGH;
 8011aa0:	2303      	movs	r3, #3
 8011aa2:	61fb      	str	r3, [r7, #28]
		gpio_init.Pull 	   	 = GPIO_PULLUP;
 8011aa4:	2301      	movs	r3, #1
 8011aa6:	61bb      	str	r3, [r7, #24]
		gpio_init.Alternate  = UART_RX__AF;
 8011aa8:	2307      	movs	r3, #7
 8011aaa:	623b      	str	r3, [r7, #32]
		HAL_GPIO_Init(UART_RX__GPIO, &gpio_init);
 8011aac:	f107 0310 	add.w	r3, r7, #16
 8011ab0:	4619      	mov	r1, r3
 8011ab2:	4825      	ldr	r0, [pc, #148]	; (8011b48 <uart_dbg_init+0x15c>)
 8011ab4:	f7f0 fe4e 	bl	8002754 <HAL_GPIO_Init>
        
        uart_dbg.Instance 			= UART_DBG_PERIPH;
 8011ab8:	4b24      	ldr	r3, [pc, #144]	; (8011b4c <uart_dbg_init+0x160>)
 8011aba:	4a25      	ldr	r2, [pc, #148]	; (8011b50 <uart_dbg_init+0x164>)
 8011abc:	601a      	str	r2, [r3, #0]
        uart_dbg.Init.BaudRate 		= UART_BAUDRATE;
 8011abe:	4b23      	ldr	r3, [pc, #140]	; (8011b4c <uart_dbg_init+0x160>)
 8011ac0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8011ac4:	605a      	str	r2, [r3, #4]
        uart_dbg.Init.WordLength 	= UART_WORDLENGTH_8B;
 8011ac6:	4b21      	ldr	r3, [pc, #132]	; (8011b4c <uart_dbg_init+0x160>)
 8011ac8:	2200      	movs	r2, #0
 8011aca:	609a      	str	r2, [r3, #8]
        uart_dbg.Init.StopBits 		= UART_STOPBITS_1;
 8011acc:	4b1f      	ldr	r3, [pc, #124]	; (8011b4c <uart_dbg_init+0x160>)
 8011ace:	2200      	movs	r2, #0
 8011ad0:	60da      	str	r2, [r3, #12]
        uart_dbg.Init.Parity 		= UART_PARITY_NONE;
 8011ad2:	4b1e      	ldr	r3, [pc, #120]	; (8011b4c <uart_dbg_init+0x160>)
 8011ad4:	2200      	movs	r2, #0
 8011ad6:	611a      	str	r2, [r3, #16]
        uart_dbg.Init.Mode 			= UART_MODE_TX_RX;
 8011ad8:	4b1c      	ldr	r3, [pc, #112]	; (8011b4c <uart_dbg_init+0x160>)
 8011ada:	220c      	movs	r2, #12
 8011adc:	615a      	str	r2, [r3, #20]
        uart_dbg.Init.HwFlowCtl 	= UART_HWCONTROL_NONE;
 8011ade:	4b1b      	ldr	r3, [pc, #108]	; (8011b4c <uart_dbg_init+0x160>)
 8011ae0:	2200      	movs	r2, #0
 8011ae2:	619a      	str	r2, [r3, #24]
        uart_dbg.Init.OverSampling 	= UART_OVERSAMPLING_16;
 8011ae4:	4b19      	ldr	r3, [pc, #100]	; (8011b4c <uart_dbg_init+0x160>)
 8011ae6:	2200      	movs	r2, #0
 8011ae8:	61da      	str	r2, [r3, #28]
        HAL_UART_Init(&uart_dbg);
 8011aea:	4818      	ldr	r0, [pc, #96]	; (8011b4c <uart_dbg_init+0x160>)
 8011aec:	f7f4 fc6f 	bl	80063ce <HAL_UART_Init>

		// Enable Rx IRQ
        __HAL_UART_ENABLE_IT(&uart_dbg, UART_IT_RXNE);
 8011af0:	4b16      	ldr	r3, [pc, #88]	; (8011b4c <uart_dbg_init+0x160>)
 8011af2:	681b      	ldr	r3, [r3, #0]
 8011af4:	681a      	ldr	r2, [r3, #0]
 8011af6:	4b15      	ldr	r3, [pc, #84]	; (8011b4c <uart_dbg_init+0x160>)
 8011af8:	681b      	ldr	r3, [r3, #0]
 8011afa:	f042 0220 	orr.w	r2, r2, #32
 8011afe:	601a      	str	r2, [r3, #0]

		NVIC_SetPriority(UART_DBG_IRQ, UART_DBG_IRQ_PRIORITY);
 8011b00:	210a      	movs	r1, #10
 8011b02:	2025      	movs	r0, #37	; 0x25
 8011b04:	f7ff ff48 	bl	8011998 <__NVIC_SetPriority>
		NVIC_EnableIRQ(UART_DBG_IRQ);
 8011b08:	2025      	movs	r0, #37	; 0x25
 8011b0a:	f7ff ff27 	bl	801195c <__NVIC_EnableIRQ>
        
        __HAL_UART_ENABLE(&uart_dbg);
 8011b0e:	4b0f      	ldr	r3, [pc, #60]	; (8011b4c <uart_dbg_init+0x160>)
 8011b10:	681b      	ldr	r3, [r3, #0]
 8011b12:	681a      	ldr	r2, [r3, #0]
 8011b14:	4b0d      	ldr	r3, [pc, #52]	; (8011b4c <uart_dbg_init+0x160>)
 8011b16:	681b      	ldr	r3, [r3, #0]
 8011b18:	f042 0201 	orr.w	r2, r2, #1
 8011b1c:	601a      	str	r2, [r3, #0]
 8011b1e:	e002      	b.n	8011b26 <uart_dbg_init+0x13a>
	}
	else
	{
		status = eUART_DBG_ERROR;
 8011b20:	2301      	movs	r3, #1
 8011b22:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	return status;
 8011b26:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8011b2a:	4618      	mov	r0, r3
 8011b2c:	3728      	adds	r7, #40	; 0x28
 8011b2e:	46bd      	mov	sp, r7
 8011b30:	bd80      	pop	{r7, pc}
 8011b32:	bf00      	nop
 8011b34:	200050b0 	.word	0x200050b0
 8011b38:	20005098 	.word	0x20005098
 8011b3c:	20005230 	.word	0x20005230
 8011b40:	200050a4 	.word	0x200050a4
 8011b44:	40023800 	.word	0x40023800
 8011b48:	40020000 	.word	0x40020000
 8011b4c:	200052b4 	.word	0x200052b4
 8011b50:	40011000 	.word	0x40011000

08011b54 <USART1_IRQHandler>:
*
* @return 		void
*/
////////////////////////////////////////////////////////////////////////////////
void UART_DBG_IRQ_HANDLER(void)
{
 8011b54:	b580      	push	{r7, lr}
 8011b56:	b082      	sub	sp, #8
 8011b58:	af00      	add	r7, sp, #0
	uint8_t u8_data;

	// Overrun error
    
	if( __HAL_UART_GET_FLAG(&uart_dbg, UART_FLAG_ORE) )
 8011b5a:	4b20      	ldr	r3, [pc, #128]	; (8011bdc <USART1_IRQHandler+0x88>)
 8011b5c:	681b      	ldr	r3, [r3, #0]
 8011b5e:	69db      	ldr	r3, [r3, #28]
 8011b60:	f003 0308 	and.w	r3, r3, #8
 8011b64:	2b08      	cmp	r3, #8
 8011b66:	d106      	bne.n	8011b76 <USART1_IRQHandler+0x22>
	{
		UART_DBG_PERIPH->RDR;
 8011b68:	4b1d      	ldr	r3, [pc, #116]	; (8011be0 <USART1_IRQHandler+0x8c>)
 8011b6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24

		// Clear overrun interrupt flag
		__HAL_UART_CLEAR_IT( &uart_dbg, UART_CLEAR_OREF );
 8011b6c:	4b1b      	ldr	r3, [pc, #108]	; (8011bdc <USART1_IRQHandler+0x88>)
 8011b6e:	681b      	ldr	r3, [r3, #0]
 8011b70:	2208      	movs	r2, #8
 8011b72:	621a      	str	r2, [r3, #32]
	}
	else
	{
		// Other UART flags
	}
}
 8011b74:	e02e      	b.n	8011bd4 <USART1_IRQHandler+0x80>
	else if( __HAL_UART_GET_FLAG(&uart_dbg, UART_FLAG_RXNE) )
 8011b76:	4b19      	ldr	r3, [pc, #100]	; (8011bdc <USART1_IRQHandler+0x88>)
 8011b78:	681b      	ldr	r3, [r3, #0]
 8011b7a:	69db      	ldr	r3, [r3, #28]
 8011b7c:	f003 0320 	and.w	r3, r3, #32
 8011b80:	2b20      	cmp	r3, #32
 8011b82:	d109      	bne.n	8011b98 <USART1_IRQHandler+0x44>
		u8_data = UART_DBG_PERIPH->RDR;
 8011b84:	4b16      	ldr	r3, [pc, #88]	; (8011be0 <USART1_IRQHandler+0x8c>)
 8011b86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011b88:	b2db      	uxtb	r3, r3
 8011b8a:	71fb      	strb	r3, [r7, #7]
		if ( fifo_add(&gfifo_uart_rx, &u8_data) == eFIFO_OK )
 8011b8c:	1dfb      	adds	r3, r7, #7
 8011b8e:	4619      	mov	r1, r3
 8011b90:	4814      	ldr	r0, [pc, #80]	; (8011be4 <USART1_IRQHandler+0x90>)
 8011b92:	f001 fb71 	bl	8013278 <fifo_add>
}
 8011b96:	e01d      	b.n	8011bd4 <USART1_IRQHandler+0x80>
	else if( __HAL_UART_GET_FLAG(&uart_dbg, UART_FLAG_TXE) )
 8011b98:	4b10      	ldr	r3, [pc, #64]	; (8011bdc <USART1_IRQHandler+0x88>)
 8011b9a:	681b      	ldr	r3, [r3, #0]
 8011b9c:	69db      	ldr	r3, [r3, #28]
 8011b9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011ba2:	2b80      	cmp	r3, #128	; 0x80
 8011ba4:	d116      	bne.n	8011bd4 <USART1_IRQHandler+0x80>
		if (fifo_get(&gfifo_uart_tx, &u8_data) == eFIFO_OK )
 8011ba6:	1dfb      	adds	r3, r7, #7
 8011ba8:	4619      	mov	r1, r3
 8011baa:	480f      	ldr	r0, [pc, #60]	; (8011be8 <USART1_IRQHandler+0x94>)
 8011bac:	f001 fb9a 	bl	80132e4 <fifo_get>
 8011bb0:	4603      	mov	r3, r0
 8011bb2:	2b00      	cmp	r3, #0
 8011bb4:	d103      	bne.n	8011bbe <USART1_IRQHandler+0x6a>
			UART_DBG_PERIPH->TDR = u8_data;
 8011bb6:	79fa      	ldrb	r2, [r7, #7]
 8011bb8:	4b09      	ldr	r3, [pc, #36]	; (8011be0 <USART1_IRQHandler+0x8c>)
 8011bba:	629a      	str	r2, [r3, #40]	; 0x28
}
 8011bbc:	e00a      	b.n	8011bd4 <USART1_IRQHandler+0x80>
            __HAL_UART_DISABLE_IT(&uart_dbg, UART_IT_TXE);
 8011bbe:	4b07      	ldr	r3, [pc, #28]	; (8011bdc <USART1_IRQHandler+0x88>)
 8011bc0:	681b      	ldr	r3, [r3, #0]
 8011bc2:	681a      	ldr	r2, [r3, #0]
 8011bc4:	4b05      	ldr	r3, [pc, #20]	; (8011bdc <USART1_IRQHandler+0x88>)
 8011bc6:	681b      	ldr	r3, [r3, #0]
 8011bc8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8011bcc:	601a      	str	r2, [r3, #0]
			g_is_write_line_end = 1;
 8011bce:	4b07      	ldr	r3, [pc, #28]	; (8011bec <USART1_IRQHandler+0x98>)
 8011bd0:	2201      	movs	r2, #1
 8011bd2:	701a      	strb	r2, [r3, #0]
}
 8011bd4:	bf00      	nop
 8011bd6:	3708      	adds	r7, #8
 8011bd8:	46bd      	mov	sp, r7
 8011bda:	bd80      	pop	{r7, pc}
 8011bdc:	200052b4 	.word	0x200052b4
 8011be0:	40011000 	.word	0x40011000
 8011be4:	200050a4 	.word	0x200050a4
 8011be8:	20005098 	.word	0x20005098
 8011bec:	200052b0 	.word	0x200052b0

08011bf0 <uart_dbg_write>:
* @param[in] 	pc_string	- String to be sended over UART
* @return 		status		- Status of operation
*/
////////////////////////////////////////////////////////////////////////////////
uart_dbg_status_t uart_dbg_write(const char* pc_string)
{
 8011bf0:	b580      	push	{r7, lr}
 8011bf2:	b084      	sub	sp, #16
 8011bf4:	af00      	add	r7, sp, #0
 8011bf6:	6078      	str	r0, [r7, #4]
	uint16_t 	  	  u16_len 			= strlen_safe(pc_string, UART_DBG_TX_BUFFER_LEN);
 8011bf8:	f44f 71c0 	mov.w	r1, #384	; 0x180
 8011bfc:	6878      	ldr	r0, [r7, #4]
 8011bfe:	f001 fbab 	bl	8013358 <strlen_safe>
 8011c02:	4603      	mov	r3, r0
 8011c04:	81fb      	strh	r3, [r7, #14]
	uart_dbg_status_t status  			= eUART_DBG_ERROR;
 8011c06:	2301      	movs	r3, #1
 8011c08:	737b      	strb	r3, [r7, #13]
	uint32_t		   u32_curr_timeout = 0;
 8011c0a:	2300      	movs	r3, #0
 8011c0c:	60bb      	str	r3, [r7, #8]

	g_is_write_line_end = 0;
 8011c0e:	4b20      	ldr	r3, [pc, #128]	; (8011c90 <uart_dbg_write+0xa0>)
 8011c10:	2200      	movs	r2, #0
 8011c12:	701a      	strb	r2, [r3, #0]

	if (u16_len > 0)
 8011c14:	89fb      	ldrh	r3, [r7, #14]
 8011c16:	2b00      	cmp	r3, #0
 8011c18:	d033      	beq.n	8011c82 <uart_dbg_write+0x92>
	{
		u16_len -= 1;	// -1 discard '\0'
 8011c1a:	89fb      	ldrh	r3, [r7, #14]
 8011c1c:	3b01      	subs	r3, #1
 8011c1e:	81fb      	strh	r3, [r7, #14]
		while (u16_len > 0)
 8011c20:	e00c      	b.n	8011c3c <uart_dbg_write+0x4c>
		{
			if (fifo_add(&gfifo_uart_tx, pc_string) != eFIFO_OK)
 8011c22:	6879      	ldr	r1, [r7, #4]
 8011c24:	481b      	ldr	r0, [pc, #108]	; (8011c94 <uart_dbg_write+0xa4>)
 8011c26:	f001 fb27 	bl	8013278 <fifo_add>
 8011c2a:	4603      	mov	r3, r0
 8011c2c:	2b00      	cmp	r3, #0
 8011c2e:	d109      	bne.n	8011c44 <uart_dbg_write+0x54>
			{
				// TODO: handle error if not all data added
				break;
			}

			u16_len--;
 8011c30:	89fb      	ldrh	r3, [r7, #14]
 8011c32:	3b01      	subs	r3, #1
 8011c34:	81fb      	strh	r3, [r7, #14]
			pc_string++;
 8011c36:	687b      	ldr	r3, [r7, #4]
 8011c38:	3301      	adds	r3, #1
 8011c3a:	607b      	str	r3, [r7, #4]
		while (u16_len > 0)
 8011c3c:	89fb      	ldrh	r3, [r7, #14]
 8011c3e:	2b00      	cmp	r3, #0
 8011c40:	d1ef      	bne.n	8011c22 <uart_dbg_write+0x32>
 8011c42:	e000      	b.n	8011c46 <uart_dbg_write+0x56>
				break;
 8011c44:	bf00      	nop
		}

		__HAL_UART_ENABLE_IT(&uart_dbg, UART_IT_TXE);
 8011c46:	4b14      	ldr	r3, [pc, #80]	; (8011c98 <uart_dbg_write+0xa8>)
 8011c48:	681b      	ldr	r3, [r3, #0]
 8011c4a:	681a      	ldr	r2, [r3, #0]
 8011c4c:	4b12      	ldr	r3, [pc, #72]	; (8011c98 <uart_dbg_write+0xa8>)
 8011c4e:	681b      	ldr	r3, [r3, #0]
 8011c50:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8011c54:	601a      	str	r2, [r3, #0]

		// Wait for transmission to finish.
		while (u32_curr_timeout < TX_TIMEOUT)
 8011c56:	e00f      	b.n	8011c78 <uart_dbg_write+0x88>
		{
			if ((g_is_write_line_end) && (UART_DBG_PERIPH->ISR & USART_ISR_TC))
 8011c58:	4b0d      	ldr	r3, [pc, #52]	; (8011c90 <uart_dbg_write+0xa0>)
 8011c5a:	781b      	ldrb	r3, [r3, #0]
 8011c5c:	2b00      	cmp	r3, #0
 8011c5e:	d008      	beq.n	8011c72 <uart_dbg_write+0x82>
 8011c60:	4b0e      	ldr	r3, [pc, #56]	; (8011c9c <uart_dbg_write+0xac>)
 8011c62:	69db      	ldr	r3, [r3, #28]
 8011c64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011c68:	2b00      	cmp	r3, #0
 8011c6a:	d002      	beq.n	8011c72 <uart_dbg_write+0x82>
			{
				status = eUART_DBG_OK;
 8011c6c:	2300      	movs	r3, #0
 8011c6e:	737b      	strb	r3, [r7, #13]
				break;
 8011c70:	e009      	b.n	8011c86 <uart_dbg_write+0x96>
			}

			u32_curr_timeout++;
 8011c72:	68bb      	ldr	r3, [r7, #8]
 8011c74:	3301      	adds	r3, #1
 8011c76:	60bb      	str	r3, [r7, #8]
		while (u32_curr_timeout < TX_TIMEOUT)
 8011c78:	68bb      	ldr	r3, [r7, #8]
 8011c7a:	4a09      	ldr	r2, [pc, #36]	; (8011ca0 <uart_dbg_write+0xb0>)
 8011c7c:	4293      	cmp	r3, r2
 8011c7e:	d9eb      	bls.n	8011c58 <uart_dbg_write+0x68>
 8011c80:	e001      	b.n	8011c86 <uart_dbg_write+0x96>
		}
	}
	else
	{
		status = eUART_DBG_ERROR;
 8011c82:	2301      	movs	r3, #1
 8011c84:	737b      	strb	r3, [r7, #13]
	}

	return status;
 8011c86:	7b7b      	ldrb	r3, [r7, #13]
}
 8011c88:	4618      	mov	r0, r3
 8011c8a:	3710      	adds	r7, #16
 8011c8c:	46bd      	mov	sp, r7
 8011c8e:	bd80      	pop	{r7, pc}
 8011c90:	200052b0 	.word	0x200052b0
 8011c94:	20005098 	.word	0x20005098
 8011c98:	200052b4 	.word	0x200052b4
 8011c9c:	40011000 	.word	0x40011000
 8011ca0:	000927bf 	.word	0x000927bf

08011ca4 <uart_dbg_get>:
* @param[in] 	p_char	- Pointer to received character
* @return 		status	- Status of operation
*/
////////////////////////////////////////////////////////////////////////////////
uart_dbg_status_t uart_dbg_get(char * const p_char)
{
 8011ca4:	b580      	push	{r7, lr}
 8011ca6:	b084      	sub	sp, #16
 8011ca8:	af00      	add	r7, sp, #0
 8011caa:	6078      	str	r0, [r7, #4]
	uart_dbg_status_t status = eUART_DBG_OK;
 8011cac:	2300      	movs	r3, #0
 8011cae:	73fb      	strb	r3, [r7, #15]

	if ( fifo_get( &gfifo_uart_rx, p_char ) != eFIFO_OK )
 8011cb0:	6879      	ldr	r1, [r7, #4]
 8011cb2:	4806      	ldr	r0, [pc, #24]	; (8011ccc <uart_dbg_get+0x28>)
 8011cb4:	f001 fb16 	bl	80132e4 <fifo_get>
 8011cb8:	4603      	mov	r3, r0
 8011cba:	2b00      	cmp	r3, #0
 8011cbc:	d001      	beq.n	8011cc2 <uart_dbg_get+0x1e>
	{
		status = eUART_DBG_ERROR;
 8011cbe:	2301      	movs	r3, #1
 8011cc0:	73fb      	strb	r3, [r7, #15]
	}

	return status;
 8011cc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8011cc4:	4618      	mov	r0, r3
 8011cc6:	3710      	adds	r7, #16
 8011cc8:	46bd      	mov	sp, r7
 8011cca:	bd80      	pop	{r7, pc}
 8011ccc:	200050a4 	.word	0x200050a4

08011cd0 <com_dbg_init>:
* @param[in]    string
* @return       none
*/
////////////////////////////////////////////////////////////////////////////////
com_dbg_status_t com_dbg_init(void)
{
 8011cd0:	b580      	push	{r7, lr}
 8011cd2:	b082      	sub	sp, #8
 8011cd4:	af00      	add	r7, sp, #0
	com_dbg_status_t status = eCOM_DBG_OK;
 8011cd6:	2300      	movs	r3, #0
 8011cd8:	71fb      	strb	r3, [r7, #7]

	#if ( COM_DBG_USE_OS_MUTEX_EN )
		// Create mutex
		com_dbg_mutex_id = osMutexNew( &com_dbg_mutex_attr );
 8011cda:	4805      	ldr	r0, [pc, #20]	; (8011cf0 <com_dbg_init+0x20>)
 8011cdc:	f7f5 fa9e 	bl	800721c <osMutexNew>
 8011ce0:	4603      	mov	r3, r0
 8011ce2:	4a04      	ldr	r2, [pc, #16]	; (8011cf4 <com_dbg_init+0x24>)
 8011ce4:	6013      	str	r3, [r2, #0]
	#endif

	return status;
 8011ce6:	79fb      	ldrb	r3, [r7, #7]
}
 8011ce8:	4618      	mov	r0, r3
 8011cea:	3708      	adds	r7, #8
 8011cec:	46bd      	mov	sp, r7
 8011cee:	bd80      	pop	{r7, pc}
 8011cf0:	0801f1a0 	.word	0x0801f1a0
 8011cf4:	200053b8 	.word	0x200053b8

08011cf8 <com_dbg_write>:
* @param[in]    string
* @return       none
*/
////////////////////////////////////////////////////////////////////////////////
com_dbg_status_t com_dbg_write(const char* str)
{
 8011cf8:	b580      	push	{r7, lr}
 8011cfa:	b084      	sub	sp, #16
 8011cfc:	af00      	add	r7, sp, #0
 8011cfe:	6078      	str	r0, [r7, #4]
	com_dbg_status_t status = eCOM_DBG_OK;
 8011d00:	2300      	movs	r3, #0
 8011d02:	73fb      	strb	r3, [r7, #15]

	#if ( COM_DBG_USE_OS_MUTEX_EN )

		// Mutex obtain
		if ( osOK == osMutexAcquire( com_dbg_mutex_id, COM_DBG_OS_MUTEX_TIMEOUT_MS ))
 8011d04:	4b0c      	ldr	r3, [pc, #48]	; (8011d38 <com_dbg_write+0x40>)
 8011d06:	681b      	ldr	r3, [r3, #0]
 8011d08:	210a      	movs	r1, #10
 8011d0a:	4618      	mov	r0, r3
 8011d0c:	f7f5 fb20 	bl	8007350 <osMutexAcquire>
 8011d10:	4603      	mov	r3, r0
 8011d12:	2b00      	cmp	r3, #0
 8011d14:	d103      	bne.n	8011d1e <com_dbg_write+0x26>
		{
			// Communication port
			uart_dbg_write(str);
 8011d16:	6878      	ldr	r0, [r7, #4]
 8011d18:	f7ff ff6a 	bl	8011bf0 <uart_dbg_write>
 8011d1c:	e001      	b.n	8011d22 <com_dbg_write+0x2a>
		}
		else
		{
			status = eCOM_DBG_ERROR;
 8011d1e:	2301      	movs	r3, #1
 8011d20:	73fb      	strb	r3, [r7, #15]
		}

		// Release mutex
		osMutexRelease( com_dbg_mutex_id );
 8011d22:	4b05      	ldr	r3, [pc, #20]	; (8011d38 <com_dbg_write+0x40>)
 8011d24:	681b      	ldr	r3, [r3, #0]
 8011d26:	4618      	mov	r0, r3
 8011d28:	f7f5 fb70 	bl	800740c <osMutexRelease>

	#else
		uart_dbg_write(str);
	#endif

	return status;
 8011d2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8011d2e:	4618      	mov	r0, r3
 8011d30:	3710      	adds	r7, #16
 8011d32:	46bd      	mov	sp, r7
 8011d34:	bd80      	pop	{r7, pc}
 8011d36:	bf00      	nop
 8011d38:	200053b8 	.word	0x200053b8

08011d3c <com_dbg_print>:
* @param[in]    formated string
* @return       none
*/
////////////////////////////////////////////////////////////////////////////////
void com_dbg_print(com_dbg_channel_t channel, const char* format, ...)
{
 8011d3c:	b40e      	push	{r1, r2, r3}
 8011d3e:	b580      	push	{r7, lr}
 8011d40:	b085      	sub	sp, #20
 8011d42:	af00      	add	r7, sp, #0
 8011d44:	4603      	mov	r3, r0
 8011d46:	71fb      	strb	r3, [r7, #7]
	va_list args;
	static uint8_t str[32];

	// Check if valid channel
	if ( channel < eCOM_DBG_CH_NUM_OF )
 8011d48:	79fb      	ldrb	r3, [r7, #7]
 8011d4a:	2b03      	cmp	r3, #3
 8011d4c:	d82c      	bhi.n	8011da8 <com_dbg_print+0x6c>
	{
		if ( g_com_dbg_cfg[channel].en )
 8011d4e:	79fb      	ldrb	r3, [r7, #7]
 8011d50:	4a19      	ldr	r2, [pc, #100]	; (8011db8 <com_dbg_print+0x7c>)
 8011d52:	00db      	lsls	r3, r3, #3
 8011d54:	4413      	add	r3, r2
 8011d56:	791b      	ldrb	r3, [r3, #4]
 8011d58:	2b00      	cmp	r3, #0
 8011d5a:	d025      	beq.n	8011da8 <com_dbg_print+0x6c>
		{
			// Taking args from stack
			va_start(args, format);
 8011d5c:	f107 0320 	add.w	r3, r7, #32
 8011d60:	60fb      	str	r3, [r7, #12]
			vsprintf((char*) gu8_tx_buffer, format, args);
 8011d62:	68fa      	ldr	r2, [r7, #12]
 8011d64:	69f9      	ldr	r1, [r7, #28]
 8011d66:	4815      	ldr	r0, [pc, #84]	; (8011dbc <com_dbg_print+0x80>)
 8011d68:	f005 f8a2 	bl	8016eb0 <vsiprintf>
			va_end(args);

			// Print channel name except NONE
			if ( channel != eCOM_DBG_CH_NONE )
 8011d6c:	79fb      	ldrb	r3, [r7, #7]
 8011d6e:	2b00      	cmp	r3, #0
 8011d70:	d00b      	beq.n	8011d8a <com_dbg_print+0x4e>
			{
				sprintf((char*) &str, "%s: ", g_com_dbg_cfg[channel].name );
 8011d72:	79fb      	ldrb	r3, [r7, #7]
 8011d74:	4a10      	ldr	r2, [pc, #64]	; (8011db8 <com_dbg_print+0x7c>)
 8011d76:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8011d7a:	461a      	mov	r2, r3
 8011d7c:	4910      	ldr	r1, [pc, #64]	; (8011dc0 <com_dbg_print+0x84>)
 8011d7e:	4811      	ldr	r0, [pc, #68]	; (8011dc4 <com_dbg_print+0x88>)
 8011d80:	f004 f916 	bl	8015fb0 <siprintf>
				com_dbg_write((const char*) ( &str ));
 8011d84:	480f      	ldr	r0, [pc, #60]	; (8011dc4 <com_dbg_print+0x88>)
 8011d86:	f7ff ffb7 	bl	8011cf8 <com_dbg_write>
			}

			// Add line termination and print message
			strcat((char*)gu8_tx_buffer, "\r");
 8011d8a:	480c      	ldr	r0, [pc, #48]	; (8011dbc <com_dbg_print+0x80>)
 8011d8c:	f7ee fa4a 	bl	8000224 <strlen>
 8011d90:	4603      	mov	r3, r0
 8011d92:	461a      	mov	r2, r3
 8011d94:	4b09      	ldr	r3, [pc, #36]	; (8011dbc <com_dbg_print+0x80>)
 8011d96:	4413      	add	r3, r2
 8011d98:	490b      	ldr	r1, [pc, #44]	; (8011dc8 <com_dbg_print+0x8c>)
 8011d9a:	461a      	mov	r2, r3
 8011d9c:	460b      	mov	r3, r1
 8011d9e:	881b      	ldrh	r3, [r3, #0]
 8011da0:	8013      	strh	r3, [r2, #0]
			com_dbg_write((const char*) &gu8_tx_buffer);
 8011da2:	4806      	ldr	r0, [pc, #24]	; (8011dbc <com_dbg_print+0x80>)
 8011da4:	f7ff ffa8 	bl	8011cf8 <com_dbg_write>
		}
	}
}
 8011da8:	bf00      	nop
 8011daa:	3714      	adds	r7, #20
 8011dac:	46bd      	mov	sp, r7
 8011dae:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8011db2:	b003      	add	sp, #12
 8011db4:	4770      	bx	lr
 8011db6:	bf00      	nop
 8011db8:	20000134 	.word	0x20000134
 8011dbc:	20005338 	.word	0x20005338
 8011dc0:	0801a5ec 	.word	0x0801a5ec
 8011dc4:	200053bc 	.word	0x200053bc
 8011dc8:	0801a5f4 	.word	0x0801a5f4

08011dcc <com_dbg_get_config>:
* @param[in]    channel
* @return       none
*/
////////////////////////////////////////////////////////////////////////////////
com_dbg_cfg_t* com_dbg_get_config(void)
{
 8011dcc:	b480      	push	{r7}
 8011dce:	af00      	add	r7, sp, #0
	return (com_dbg_cfg_t*) &g_com_dbg_cfg;
 8011dd0:	4b02      	ldr	r3, [pc, #8]	; (8011ddc <com_dbg_get_config+0x10>)
}
 8011dd2:	4618      	mov	r0, r3
 8011dd4:	46bd      	mov	sp, r7
 8011dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011dda:	4770      	bx	lr
 8011ddc:	20000134 	.word	0x20000134

08011de0 <shell_write>:
* @param[in] 	none
* @return 		none
*/
////////////////////////////////////////////////////////////////////////////////
static void shell_write(const char *str)
{
 8011de0:	b580      	push	{r7, lr}
 8011de2:	b082      	sub	sp, #8
 8011de4:	af00      	add	r7, sp, #0
 8011de6:	6078      	str	r0, [r7, #4]
	com_dbg_write(str);
 8011de8:	6878      	ldr	r0, [r7, #4]
 8011dea:	f7ff ff85 	bl	8011cf8 <com_dbg_write>
}
 8011dee:	bf00      	nop
 8011df0:	3708      	adds	r7, #8
 8011df2:	46bd      	mov	sp, r7
 8011df4:	bd80      	pop	{r7, pc}
	...

08011df8 <shell_init>:
* @param[in] 	none
* @return 		shell_status_t initialization of shell
*/
////////////////////////////////////////////////////////////////////////////////
shell_status_t shell_init(void)
{
 8011df8:	b580      	push	{r7, lr}
 8011dfa:	b082      	sub	sp, #8
 8011dfc:	af00      	add	r7, sp, #0
	shell_status_t status = eSHELL_OK;
 8011dfe:	2300      	movs	r3, #0
 8011e00:	71fb      	strb	r3, [r7, #7]

	// Init mutex
	com_dbg_init();
 8011e02:	f7ff ff65 	bl	8011cd0 <com_dbg_init>

	// Init debug uart
	if (uart_dbg_init() != eUART_DBG_OK)
 8011e06:	f7ff fdf1 	bl	80119ec <uart_dbg_init>
 8011e0a:	4603      	mov	r3, r0
 8011e0c:	2b00      	cmp	r3, #0
 8011e0e:	d001      	beq.n	8011e14 <shell_init+0x1c>
	{
		return eSHELL_ERROR;
 8011e10:	2301      	movs	r3, #1
 8011e12:	e040      	b.n	8011e96 <shell_init+0x9e>

	// Set callback for received data
	//uart_dbg_set_rx_recived_callback( shell_data_received );

	// Prints power up message
	shell_write("=====================================\r");
 8011e14:	4822      	ldr	r0, [pc, #136]	; (8011ea0 <shell_init+0xa8>)
 8011e16:	f7ff ffe3 	bl	8011de0 <shell_write>
	shell_write(" SLEEP MONITOR 2.0\r");
 8011e1a:	4822      	ldr	r0, [pc, #136]	; (8011ea4 <shell_init+0xac>)
 8011e1c:	f7ff ffe0 	bl	8011de0 <shell_write>
	shell_write("=====================================\r");
 8011e20:	481f      	ldr	r0, [pc, #124]	; (8011ea0 <shell_init+0xa8>)
 8011e22:	f7ff ffdd 	bl	8011de0 <shell_write>
	shell_write( hw_version_string() );
 8011e26:	f003 f8f5 	bl	8015014 <hw_version_string>
 8011e2a:	4603      	mov	r3, r0
 8011e2c:	4618      	mov	r0, r3
 8011e2e:	f7ff ffd7 	bl	8011de0 <shell_write>
	shell_write("\r");
 8011e32:	481d      	ldr	r0, [pc, #116]	; (8011ea8 <shell_init+0xb0>)
 8011e34:	f7ff ffd4 	bl	8011de0 <shell_write>
	shell_write( sw_version_string() );
 8011e38:	f003 f8e2 	bl	8015000 <sw_version_string>
 8011e3c:	4603      	mov	r3, r0
 8011e3e:	4618      	mov	r0, r3
 8011e40:	f7ff ffce 	bl	8011de0 <shell_write>
	shell_write("\r");
 8011e44:	4818      	ldr	r0, [pc, #96]	; (8011ea8 <shell_init+0xb0>)
 8011e46:	f7ff ffcb 	bl	8011de0 <shell_write>

	// Set up pointer to debug configs
	gp_com_dbg_cfg = com_dbg_get_config();
 8011e4a:	f7ff ffbf 	bl	8011dcc <com_dbg_get_config>
 8011e4e:	4603      	mov	r3, r0
 8011e50:	4a16      	ldr	r2, [pc, #88]	; (8011eac <shell_init+0xb4>)
 8011e52:	6013      	str	r3, [r2, #0]

	if ( gp_com_dbg_cfg == NULL )
 8011e54:	4b15      	ldr	r3, [pc, #84]	; (8011eac <shell_init+0xb4>)
 8011e56:	681b      	ldr	r3, [r3, #0]
 8011e58:	2b00      	cmp	r3, #0
 8011e5a:	d101      	bne.n	8011e60 <shell_init+0x68>
	{
		return eSHELL_ERROR;
 8011e5c:	2301      	movs	r3, #1
 8011e5e:	e01a      	b.n	8011e96 <shell_init+0x9e>
	}

	// Print debug com status
	shell_com_dbg_info(NULL);
 8011e60:	2000      	movs	r0, #0
 8011e62:	f000 fe9f 	bl	8012ba4 <shell_com_dbg_info>

	// Create task
	thread_shell_id = osThreadNew( shell_thread, NULL, &thread_shell_attr );
 8011e66:	4a12      	ldr	r2, [pc, #72]	; (8011eb0 <shell_init+0xb8>)
 8011e68:	2100      	movs	r1, #0
 8011e6a:	4812      	ldr	r0, [pc, #72]	; (8011eb4 <shell_init+0xbc>)
 8011e6c:	f7f4 ff22 	bl	8006cb4 <osThreadNew>
 8011e70:	4603      	mov	r3, r0
 8011e72:	4a11      	ldr	r2, [pc, #68]	; (8011eb8 <shell_init+0xc0>)
 8011e74:	6013      	str	r3, [r2, #0]

	// Create timer
	timer_shell_id = osTimerNew( shell_timer_callback, osTimerPeriodic, NULL, NULL );
 8011e76:	2300      	movs	r3, #0
 8011e78:	2200      	movs	r2, #0
 8011e7a:	2101      	movs	r1, #1
 8011e7c:	480f      	ldr	r0, [pc, #60]	; (8011ebc <shell_init+0xc4>)
 8011e7e:	f7f5 f909 	bl	8007094 <osTimerNew>
 8011e82:	4603      	mov	r3, r0
 8011e84:	4a0e      	ldr	r2, [pc, #56]	; (8011ec0 <shell_init+0xc8>)
 8011e86:	6013      	str	r3, [r2, #0]
	osTimerStart( timer_shell_id, 10 );
 8011e88:	4b0d      	ldr	r3, [pc, #52]	; (8011ec0 <shell_init+0xc8>)
 8011e8a:	681b      	ldr	r3, [r3, #0]
 8011e8c:	210a      	movs	r1, #10
 8011e8e:	4618      	mov	r0, r3
 8011e90:	f7f5 f984 	bl	800719c <osTimerStart>

	return status;
 8011e94:	79fb      	ldrb	r3, [r7, #7]
}
 8011e96:	4618      	mov	r0, r3
 8011e98:	3708      	adds	r7, #8
 8011e9a:	46bd      	mov	sp, r7
 8011e9c:	bd80      	pop	{r7, pc}
 8011e9e:	bf00      	nop
 8011ea0:	0801a8d8 	.word	0x0801a8d8
 8011ea4:	0801a900 	.word	0x0801a900
 8011ea8:	0801a914 	.word	0x0801a914
 8011eac:	200055dc 	.word	0x200055dc
 8011eb0:	0801f2ac 	.word	0x0801f2ac
 8011eb4:	08011ec5 	.word	0x08011ec5
 8011eb8:	200055e0 	.word	0x200055e0
 8011ebc:	08011eed 	.word	0x08011eed
 8011ec0:	200055e4 	.word	0x200055e4

08011ec4 <shell_thread>:
*	param:		args - Optional arguments
*	return:		none
*/
//////////////////////////////////////////////////////////////
static void shell_thread(void * args)
{
 8011ec4:	b580      	push	{r7, lr}
 8011ec6:	b084      	sub	sp, #16
 8011ec8:	af00      	add	r7, sp, #0
 8011eca:	6078      	str	r0, [r7, #4]
	uint32_t flags;

	while(1)
	{
		// Get flags
		flags = osThreadFlagsWait( 0x01, osFlagsWaitAny, osWaitForever);
 8011ecc:	f04f 32ff 	mov.w	r2, #4294967295
 8011ed0:	2100      	movs	r1, #0
 8011ed2:	2001      	movs	r0, #1
 8011ed4:	f7f5 f834 	bl	8006f40 <osThreadFlagsWait>
 8011ed8:	60f8      	str	r0, [r7, #12]

		// Timer period expire
		if ( flags & 0x01 )
 8011eda:	68fb      	ldr	r3, [r7, #12]
 8011edc:	f003 0301 	and.w	r3, r3, #1
 8011ee0:	2b00      	cmp	r3, #0
 8011ee2:	d0f3      	beq.n	8011ecc <shell_thread+0x8>
		{
			shell_task_parser();
 8011ee4:	f000 f812 	bl	8011f0c <shell_task_parser>
		flags = osThreadFlagsWait( 0x01, osFlagsWaitAny, osWaitForever);
 8011ee8:	e7f0      	b.n	8011ecc <shell_thread+0x8>
	...

08011eec <shell_timer_callback>:
*	param:		args - Optional arguments
*	return:		none
*/
//////////////////////////////////////////////////////////////
static void shell_timer_callback(void *arg)
{
 8011eec:	b580      	push	{r7, lr}
 8011eee:	b082      	sub	sp, #8
 8011ef0:	af00      	add	r7, sp, #0
 8011ef2:	6078      	str	r0, [r7, #4]
	osThreadFlagsSet(thread_shell_id, 0x01 );
 8011ef4:	4b04      	ldr	r3, [pc, #16]	; (8011f08 <shell_timer_callback+0x1c>)
 8011ef6:	681b      	ldr	r3, [r3, #0]
 8011ef8:	2101      	movs	r1, #1
 8011efa:	4618      	mov	r0, r3
 8011efc:	f7f4 ffc0 	bl	8006e80 <osThreadFlagsSet>
}
 8011f00:	bf00      	nop
 8011f02:	3708      	adds	r7, #8
 8011f04:	46bd      	mov	sp, r7
 8011f06:	bd80      	pop	{r7, pc}
 8011f08:	200055e0 	.word	0x200055e0

08011f0c <shell_task_parser>:
* @param[in] 	none
* @return 		none
*/
////////////////////////////////////////////////////////////////////////////////
void shell_task_parser(void)
{
 8011f0c:	b580      	push	{r7, lr}
 8011f0e:	af00      	add	r7, sp, #0
	static uint8_t u8_chr_cnt = 0;

	while (uart_dbg_get(&gs_input_buffer[u8_chr_cnt]) == eUART_DBG_OK)
 8011f10:	e029      	b.n	8011f66 <shell_task_parser+0x5a>
	{
		if ((gs_input_buffer[u8_chr_cnt] == '\r') ||
 8011f12:	4b25      	ldr	r3, [pc, #148]	; (8011fa8 <shell_task_parser+0x9c>)
 8011f14:	781b      	ldrb	r3, [r3, #0]
 8011f16:	461a      	mov	r2, r3
 8011f18:	4b24      	ldr	r3, [pc, #144]	; (8011fac <shell_task_parser+0xa0>)
 8011f1a:	5c9b      	ldrb	r3, [r3, r2]
 8011f1c:	2b0d      	cmp	r3, #13
 8011f1e:	d006      	beq.n	8011f2e <shell_task_parser+0x22>
			(gs_input_buffer[u8_chr_cnt] == '\n'))
 8011f20:	4b21      	ldr	r3, [pc, #132]	; (8011fa8 <shell_task_parser+0x9c>)
 8011f22:	781b      	ldrb	r3, [r3, #0]
 8011f24:	461a      	mov	r2, r3
 8011f26:	4b21      	ldr	r3, [pc, #132]	; (8011fac <shell_task_parser+0xa0>)
 8011f28:	5c9b      	ldrb	r3, [r3, r2]
		if ((gs_input_buffer[u8_chr_cnt] == '\r') ||
 8011f2a:	2b0a      	cmp	r3, #10
 8011f2c:	d10c      	bne.n	8011f48 <shell_task_parser+0x3c>
		{
			gs_input_buffer[u8_chr_cnt] = '\0';	// Replace newline with '\0'
 8011f2e:	4b1e      	ldr	r3, [pc, #120]	; (8011fa8 <shell_task_parser+0x9c>)
 8011f30:	781b      	ldrb	r3, [r3, #0]
 8011f32:	461a      	mov	r2, r3
 8011f34:	4b1d      	ldr	r3, [pc, #116]	; (8011fac <shell_task_parser+0xa0>)
 8011f36:	2100      	movs	r1, #0
 8011f38:	5499      	strb	r1, [r3, r2]
			u8_chr_cnt = 0;
 8011f3a:	4b1b      	ldr	r3, [pc, #108]	; (8011fa8 <shell_task_parser+0x9c>)
 8011f3c:	2200      	movs	r2, #0
 8011f3e:	701a      	strb	r2, [r3, #0]

			shell_parse_input(gs_input_buffer);
 8011f40:	481a      	ldr	r0, [pc, #104]	; (8011fac <shell_task_parser+0xa0>)
 8011f42:	f000 f8c9 	bl	80120d8 <shell_parse_input>
			break;
 8011f46:	e019      	b.n	8011f7c <shell_task_parser+0x70>
		}
		else if (u8_chr_cnt < (SHELL_INPUT_LINE_SIZE - 2))	// -2 because we need to add '\0' character for corrent parsing
 8011f48:	4b17      	ldr	r3, [pc, #92]	; (8011fa8 <shell_task_parser+0x9c>)
 8011f4a:	781b      	ldrb	r3, [r3, #0]
 8011f4c:	2b7d      	cmp	r3, #125	; 0x7d
 8011f4e:	d806      	bhi.n	8011f5e <shell_task_parser+0x52>
		{
			u8_chr_cnt++;
 8011f50:	4b15      	ldr	r3, [pc, #84]	; (8011fa8 <shell_task_parser+0x9c>)
 8011f52:	781b      	ldrb	r3, [r3, #0]
 8011f54:	3301      	adds	r3, #1
 8011f56:	b2da      	uxtb	r2, r3
 8011f58:	4b13      	ldr	r3, [pc, #76]	; (8011fa8 <shell_task_parser+0x9c>)
 8011f5a:	701a      	strb	r2, [r3, #0]
 8011f5c:	e003      	b.n	8011f66 <shell_task_parser+0x5a>
		}
		else
		{
			u8_chr_cnt = 0;
 8011f5e:	4b12      	ldr	r3, [pc, #72]	; (8011fa8 <shell_task_parser+0x9c>)
 8011f60:	2200      	movs	r2, #0
 8011f62:	701a      	strb	r2, [r3, #0]
			break;
 8011f64:	e00a      	b.n	8011f7c <shell_task_parser+0x70>
	while (uart_dbg_get(&gs_input_buffer[u8_chr_cnt]) == eUART_DBG_OK)
 8011f66:	4b10      	ldr	r3, [pc, #64]	; (8011fa8 <shell_task_parser+0x9c>)
 8011f68:	781b      	ldrb	r3, [r3, #0]
 8011f6a:	461a      	mov	r2, r3
 8011f6c:	4b0f      	ldr	r3, [pc, #60]	; (8011fac <shell_task_parser+0xa0>)
 8011f6e:	4413      	add	r3, r2
 8011f70:	4618      	mov	r0, r3
 8011f72:	f7ff fe97 	bl	8011ca4 <uart_dbg_get>
 8011f76:	4603      	mov	r3, r0
 8011f78:	2b00      	cmp	r3, #0
 8011f7a:	d0ca      	beq.n	8011f12 <shell_task_parser+0x6>
	}


	static uint8_t u8_tick_cnt = 0;

	if ( true == gb_stream_data_f )
 8011f7c:	4b0c      	ldr	r3, [pc, #48]	; (8011fb0 <shell_task_parser+0xa4>)
 8011f7e:	781b      	ldrb	r3, [r3, #0]
 8011f80:	2b00      	cmp	r3, #0
 8011f82:	d00f      	beq.n	8011fa4 <shell_task_parser+0x98>
	{
		if ( u8_tick_cnt >= ( STREAMING_PERIOD / 10 ))
 8011f84:	4b0b      	ldr	r3, [pc, #44]	; (8011fb4 <shell_task_parser+0xa8>)
 8011f86:	781b      	ldrb	r3, [r3, #0]
 8011f88:	2b00      	cmp	r3, #0
 8011f8a:	d005      	beq.n	8011f98 <shell_task_parser+0x8c>
		{
			u8_tick_cnt = 0;
 8011f8c:	4b09      	ldr	r3, [pc, #36]	; (8011fb4 <shell_task_parser+0xa8>)
 8011f8e:	2200      	movs	r2, #0
 8011f90:	701a      	strb	r2, [r3, #0]
			shell_stream_data();
 8011f92:	f000 f811 	bl	8011fb8 <shell_stream_data>
		else
		{
			u8_tick_cnt++;
		}
	}
}
 8011f96:	e005      	b.n	8011fa4 <shell_task_parser+0x98>
			u8_tick_cnt++;
 8011f98:	4b06      	ldr	r3, [pc, #24]	; (8011fb4 <shell_task_parser+0xa8>)
 8011f9a:	781b      	ldrb	r3, [r3, #0]
 8011f9c:	3301      	adds	r3, #1
 8011f9e:	b2da      	uxtb	r2, r3
 8011fa0:	4b04      	ldr	r3, [pc, #16]	; (8011fb4 <shell_task_parser+0xa8>)
 8011fa2:	701a      	strb	r2, [r3, #0]
}
 8011fa4:	bf00      	nop
 8011fa6:	bd80      	pop	{r7, pc}
 8011fa8:	200055fe 	.word	0x200055fe
 8011fac:	200053dc 	.word	0x200053dc
 8011fb0:	200055fd 	.word	0x200055fd
 8011fb4:	200055ff 	.word	0x200055ff

08011fb8 <shell_stream_data>:


static void shell_stream_data(void)
{
 8011fb8:	b580      	push	{r7, lr}
 8011fba:	b084      	sub	sp, #16
 8011fbc:	af00      	add	r7, sp, #0
	par_type_list_t par_type 	= ePAR_TYPE_U8;
 8011fbe:	2300      	movs	r3, #0
 8011fc0:	72fb      	strb	r3, [r7, #11]
	par_type_t 		par_val		= { .u32 = 0UL };
 8011fc2:	2300      	movs	r3, #0
 8011fc4:	607b      	str	r3, [r7, #4]
	par_num_t 		par_num 	= 0;
 8011fc6:	2300      	movs	r3, #0
 8011fc8:	72bb      	strb	r3, [r7, #10]

	for(int param = 0; param < streaming_pars_num; param++)
 8011fca:	2300      	movs	r3, #0
 8011fcc:	60fb      	str	r3, [r7, #12]
 8011fce:	e067      	b.n	80120a0 <shell_stream_data+0xe8>
	{
		// Get parameter number from streaming list
		par_num = (par_num_t) par_get_num_by_id( streaming_pars[param] );
 8011fd0:	4a3a      	ldr	r2, [pc, #232]	; (80120bc <shell_stream_data+0x104>)
 8011fd2:	68fb      	ldr	r3, [r7, #12]
 8011fd4:	4413      	add	r3, r2
 8011fd6:	781b      	ldrb	r3, [r3, #0]
 8011fd8:	b29b      	uxth	r3, r3
 8011fda:	4618      	mov	r0, r3
 8011fdc:	f001 fc5a 	bl	8013894 <par_get_num_by_id>
 8011fe0:	4603      	mov	r3, r0
 8011fe2:	72bb      	strb	r3, [r7, #10]

		// Get parameter data type
		par_type = par_get_data_type( par_num );
 8011fe4:	7abb      	ldrb	r3, [r7, #10]
 8011fe6:	4618      	mov	r0, r3
 8011fe8:	f001 fea0 	bl	8013d2c <par_get_data_type>
 8011fec:	4603      	mov	r3, r0
 8011fee:	72fb      	strb	r3, [r7, #11]

		// Get parameter
		par_get( par_num, &par_val.u32 );
 8011ff0:	1d3a      	adds	r2, r7, #4
 8011ff2:	7abb      	ldrb	r3, [r7, #10]
 8011ff4:	4611      	mov	r1, r2
 8011ff6:	4618      	mov	r0, r3
 8011ff8:	f001 fd16 	bl	8013a28 <par_get>


		switch ( par_type )
 8011ffc:	7afb      	ldrb	r3, [r7, #11]
 8011ffe:	2b06      	cmp	r3, #6
 8012000:	d847      	bhi.n	8012092 <shell_stream_data+0xda>
 8012002:	a201      	add	r2, pc, #4	; (adr r2, 8012008 <shell_stream_data+0x50>)
 8012004:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012008:	08012025 	.word	0x08012025
 801200c:	08012033 	.word	0x08012033
 8012010:	08012041 	.word	0x08012041
 8012014:	0801204f 	.word	0x0801204f
 8012018:	0801205f 	.word	0x0801205f
 801201c:	0801206f 	.word	0x0801206f
 8012020:	0801207d 	.word	0x0801207d
		{
			case ePAR_TYPE_U8:
				sprintf(gs_output_buffer, "%d,", (int)par_val.u8 );
 8012024:	793b      	ldrb	r3, [r7, #4]
 8012026:	461a      	mov	r2, r3
 8012028:	4925      	ldr	r1, [pc, #148]	; (80120c0 <shell_stream_data+0x108>)
 801202a:	4826      	ldr	r0, [pc, #152]	; (80120c4 <shell_stream_data+0x10c>)
 801202c:	f003 ffc0 	bl	8015fb0 <siprintf>
				break;
 8012030:	e030      	b.n	8012094 <shell_stream_data+0xdc>
			case ePAR_TYPE_U16:
				sprintf(gs_output_buffer, "%d,", (int)par_val.u16 );
 8012032:	88bb      	ldrh	r3, [r7, #4]
 8012034:	461a      	mov	r2, r3
 8012036:	4922      	ldr	r1, [pc, #136]	; (80120c0 <shell_stream_data+0x108>)
 8012038:	4822      	ldr	r0, [pc, #136]	; (80120c4 <shell_stream_data+0x10c>)
 801203a:	f003 ffb9 	bl	8015fb0 <siprintf>
			break;
 801203e:	e029      	b.n	8012094 <shell_stream_data+0xdc>
			case ePAR_TYPE_U32:
				sprintf( gs_output_buffer, "%d,", (int)par_val.u32 );
 8012040:	687b      	ldr	r3, [r7, #4]
 8012042:	461a      	mov	r2, r3
 8012044:	491e      	ldr	r1, [pc, #120]	; (80120c0 <shell_stream_data+0x108>)
 8012046:	481f      	ldr	r0, [pc, #124]	; (80120c4 <shell_stream_data+0x10c>)
 8012048:	f003 ffb2 	bl	8015fb0 <siprintf>
			break;
 801204c:	e022      	b.n	8012094 <shell_stream_data+0xdc>
			case ePAR_TYPE_I8:
				sprintf(gs_output_buffer, "%i,", (int)par_val.i8 );
 801204e:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8012052:	461a      	mov	r2, r3
 8012054:	491c      	ldr	r1, [pc, #112]	; (80120c8 <shell_stream_data+0x110>)
 8012056:	481b      	ldr	r0, [pc, #108]	; (80120c4 <shell_stream_data+0x10c>)
 8012058:	f003 ffaa 	bl	8015fb0 <siprintf>
				break;
 801205c:	e01a      	b.n	8012094 <shell_stream_data+0xdc>
			case ePAR_TYPE_I16:
				sprintf(gs_output_buffer, "%i,", (int)par_val.i16 );
 801205e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8012062:	461a      	mov	r2, r3
 8012064:	4918      	ldr	r1, [pc, #96]	; (80120c8 <shell_stream_data+0x110>)
 8012066:	4817      	ldr	r0, [pc, #92]	; (80120c4 <shell_stream_data+0x10c>)
 8012068:	f003 ffa2 	bl	8015fb0 <siprintf>
			break;
 801206c:	e012      	b.n	8012094 <shell_stream_data+0xdc>
			case ePAR_TYPE_I32:
				sprintf( gs_output_buffer, "%i,", (int)par_val.i32 );
 801206e:	687b      	ldr	r3, [r7, #4]
 8012070:	461a      	mov	r2, r3
 8012072:	4915      	ldr	r1, [pc, #84]	; (80120c8 <shell_stream_data+0x110>)
 8012074:	4813      	ldr	r0, [pc, #76]	; (80120c4 <shell_stream_data+0x10c>)
 8012076:	f003 ff9b 	bl	8015fb0 <siprintf>
			break;
 801207a:	e00b      	b.n	8012094 <shell_stream_data+0xdc>
			case ePAR_TYPE_F32:
				sprintf( gs_output_buffer, "%g,", par_val.f32 );
 801207c:	687b      	ldr	r3, [r7, #4]
 801207e:	4618      	mov	r0, r3
 8012080:	f7ee fa92 	bl	80005a8 <__aeabi_f2d>
 8012084:	4602      	mov	r2, r0
 8012086:	460b      	mov	r3, r1
 8012088:	4910      	ldr	r1, [pc, #64]	; (80120cc <shell_stream_data+0x114>)
 801208a:	480e      	ldr	r0, [pc, #56]	; (80120c4 <shell_stream_data+0x10c>)
 801208c:	f003 ff90 	bl	8015fb0 <siprintf>
			break;
 8012090:	e000      	b.n	8012094 <shell_stream_data+0xdc>

			default:
				// No actions..
			break;
 8012092:	bf00      	nop
		}

		shell_write(gs_output_buffer);
 8012094:	480b      	ldr	r0, [pc, #44]	; (80120c4 <shell_stream_data+0x10c>)
 8012096:	f7ff fea3 	bl	8011de0 <shell_write>
	for(int param = 0; param < streaming_pars_num; param++)
 801209a:	68fb      	ldr	r3, [r7, #12]
 801209c:	3301      	adds	r3, #1
 801209e:	60fb      	str	r3, [r7, #12]
 80120a0:	4b0b      	ldr	r3, [pc, #44]	; (80120d0 <shell_stream_data+0x118>)
 80120a2:	781b      	ldrb	r3, [r3, #0]
 80120a4:	461a      	mov	r2, r3
 80120a6:	68fb      	ldr	r3, [r7, #12]
 80120a8:	4293      	cmp	r3, r2
 80120aa:	db91      	blt.n	8011fd0 <shell_stream_data+0x18>
	}

	shell_write("\r");
 80120ac:	4809      	ldr	r0, [pc, #36]	; (80120d4 <shell_stream_data+0x11c>)
 80120ae:	f7ff fe97 	bl	8011de0 <shell_write>
}
 80120b2:	bf00      	nop
 80120b4:	3710      	adds	r7, #16
 80120b6:	46bd      	mov	sp, r7
 80120b8:	bd80      	pop	{r7, pc}
 80120ba:	bf00      	nop
 80120bc:	200055e8 	.word	0x200055e8
 80120c0:	0801a918 	.word	0x0801a918
 80120c4:	2000545c 	.word	0x2000545c
 80120c8:	0801a91c 	.word	0x0801a91c
 80120cc:	0801a920 	.word	0x0801a920
 80120d0:	200055fc 	.word	0x200055fc
 80120d4:	0801a914 	.word	0x0801a914

080120d8 <shell_parse_input>:
* @param[in] 	char* pc_line - pointer to paased command string
* @return 		none
*/
////////////////////////////////////////////////////////////////////////////////
static void shell_parse_input(const char* pc_line)
{
 80120d8:	b580      	push	{r7, lr}
 80120da:	b088      	sub	sp, #32
 80120dc:	af00      	add	r7, sp, #0
 80120de:	6078      	str	r0, [r7, #4]
	const cmd_t* p_cmd = g_cmd_table;
 80120e0:	4b30      	ldr	r3, [pc, #192]	; (80121a4 <shell_parse_input+0xcc>)
 80120e2:	61fb      	str	r3, [r7, #28]
	uint8_t  	 u8_table_len;
	uint8_t  	 u8_max_len;
	char* 	 	 pc_space;
	uint32_t 	 u32_space_addr;
	uint32_t 	 u32_line_addr;
	uint16_t 	 u16_n_cmds = gu16_n_cmds - 1;	// Discard NULL command
 80120e4:	2315      	movs	r3, #21
 80120e6:	3b01      	subs	r3, #1
 80120e8:	833b      	strh	r3, [r7, #24]

	u8_line_len = strlen_safe(pc_line, SHELL_INPUT_LINE_SIZE);
 80120ea:	2180      	movs	r1, #128	; 0x80
 80120ec:	6878      	ldr	r0, [r7, #4]
 80120ee:	f001 f933 	bl	8013358 <strlen_safe>
 80120f2:	4603      	mov	r3, r0
 80120f4:	76fb      	strb	r3, [r7, #27]
	if (u8_line_len > 1)	// 1 if only carriage return received
 80120f6:	7efb      	ldrb	r3, [r7, #27]
 80120f8:	2b01      	cmp	r3, #1
 80120fa:	d93e      	bls.n	801217a <shell_parse_input+0xa2>
	{
		// String contains space?
		pc_space = strchr_safe(pc_line, ' ', SHELL_INPUT_LINE_SIZE);
 80120fc:	2280      	movs	r2, #128	; 0x80
 80120fe:	2120      	movs	r1, #32
 8012100:	6878      	ldr	r0, [r7, #4]
 8012102:	f001 f954 	bl	80133ae <strchr_safe>
 8012106:	6178      	str	r0, [r7, #20]
		if (pc_space != NULL)
 8012108:	697b      	ldr	r3, [r7, #20]
 801210a:	2b00      	cmp	r3, #0
 801210c:	d00a      	beq.n	8012124 <shell_parse_input+0x4c>
		{
			// Calculate command length (without arguments)
			u32_line_addr  = (uint32_t)pc_line;
 801210e:	687b      	ldr	r3, [r7, #4]
 8012110:	613b      	str	r3, [r7, #16]
			u32_space_addr = (uint32_t)pc_space;
 8012112:	697b      	ldr	r3, [r7, #20]
 8012114:	60fb      	str	r3, [r7, #12]
			u8_line_len    = u32_space_addr - u32_line_addr;
 8012116:	68fb      	ldr	r3, [r7, #12]
 8012118:	b2da      	uxtb	r2, r3
 801211a:	693b      	ldr	r3, [r7, #16]
 801211c:	b2db      	uxtb	r3, r3
 801211e:	1ad3      	subs	r3, r2, r3
 8012120:	76fb      	strb	r3, [r7, #27]
 8012122:	e026      	b.n	8012172 <shell_parse_input+0x9a>
		}
		else
		{
			u8_line_len -= 1;	// Discard carriage return
 8012124:	7efb      	ldrb	r3, [r7, #27]
 8012126:	3b01      	subs	r3, #1
 8012128:	76fb      	strb	r3, [r7, #27]
		}

		// Loop over the parse table entries in order to find one that matches line
		while (u16_n_cmds > 0)
 801212a:	e022      	b.n	8012172 <shell_parse_input+0x9a>
		{
			u8_table_len = strlen_safe(p_cmd->pc_name, SHELL_INPUT_LINE_SIZE) - 1;	// Discard carriage return
 801212c:	69fb      	ldr	r3, [r7, #28]
 801212e:	681b      	ldr	r3, [r3, #0]
 8012130:	2180      	movs	r1, #128	; 0x80
 8012132:	4618      	mov	r0, r3
 8012134:	f001 f910 	bl	8013358 <strlen_safe>
 8012138:	4603      	mov	r3, r0
 801213a:	b2db      	uxtb	r3, r3
 801213c:	3b01      	subs	r3, #1
 801213e:	72fb      	strb	r3, [r7, #11]

			// Always compare with longest length, table command or received command
			if (u8_line_len >= u8_table_len)
 8012140:	7efa      	ldrb	r2, [r7, #27]
 8012142:	7afb      	ldrb	r3, [r7, #11]
 8012144:	429a      	cmp	r2, r3
 8012146:	d302      	bcc.n	801214e <shell_parse_input+0x76>
			{
				u8_max_len = u8_line_len;
 8012148:	7efb      	ldrb	r3, [r7, #27]
 801214a:	76bb      	strb	r3, [r7, #26]
 801214c:	e001      	b.n	8012152 <shell_parse_input+0x7a>
			}
			else
			{
				u8_max_len = u8_table_len;
 801214e:	7afb      	ldrb	r3, [r7, #11]
 8012150:	76bb      	strb	r3, [r7, #26]
			}

			if (strncmp(pc_line, p_cmd->pc_name, u8_max_len) == 0)
 8012152:	69fb      	ldr	r3, [r7, #28]
 8012154:	681b      	ldr	r3, [r3, #0]
 8012156:	7eba      	ldrb	r2, [r7, #26]
 8012158:	4619      	mov	r1, r3
 801215a:	6878      	ldr	r0, [r7, #4]
 801215c:	f003 ffb9 	bl	80160d2 <strncmp>
 8012160:	4603      	mov	r3, r0
 8012162:	2b00      	cmp	r3, #0
 8012164:	d014      	beq.n	8012190 <shell_parse_input+0xb8>
			{
				// Found matching command in table
				break;
			}

			u16_n_cmds--;
 8012166:	8b3b      	ldrh	r3, [r7, #24]
 8012168:	3b01      	subs	r3, #1
 801216a:	833b      	strh	r3, [r7, #24]
			p_cmd++;
 801216c:	69fb      	ldr	r3, [r7, #28]
 801216e:	330c      	adds	r3, #12
 8012170:	61fb      	str	r3, [r7, #28]
		while (u16_n_cmds > 0)
 8012172:	8b3b      	ldrh	r3, [r7, #24]
 8012174:	2b00      	cmp	r3, #0
 8012176:	d1d9      	bne.n	801212c <shell_parse_input+0x54>
 8012178:	e00b      	b.n	8012192 <shell_parse_input+0xba>
		// If command not found in table, call last table entry
	}
	else
	{
		// Empty string, call last (unknown) command handler
		p_cmd += gu16_n_cmds - 1;
 801217a:	2315      	movs	r3, #21
 801217c:	461a      	mov	r2, r3
 801217e:	4613      	mov	r3, r2
 8012180:	005b      	lsls	r3, r3, #1
 8012182:	4413      	add	r3, r2
 8012184:	009b      	lsls	r3, r3, #2
 8012186:	3b0c      	subs	r3, #12
 8012188:	69fa      	ldr	r2, [r7, #28]
 801218a:	4413      	add	r3, r2
 801218c:	61fb      	str	r3, [r7, #28]
 801218e:	e000      	b.n	8012192 <shell_parse_input+0xba>
				break;
 8012190:	bf00      	nop
	}

	p_cmd->p_func(pc_line);
 8012192:	69fb      	ldr	r3, [r7, #28]
 8012194:	685b      	ldr	r3, [r3, #4]
 8012196:	6878      	ldr	r0, [r7, #4]
 8012198:	4798      	blx	r3
}
 801219a:	bf00      	nop
 801219c:	3720      	adds	r7, #32
 801219e:	46bd      	mov	sp, r7
 80121a0:	bd80      	pop	{r7, pc}
 80121a2:	bf00      	nop
 80121a4:	0801f1b0 	.word	0x0801f1b0

080121a8 <shell_help>:
* @param[in] 	char* pc_line - pointer to paased command string
* @return 		none
*/
////////////////////////////////////////////////////////////////////////////////
static void shell_help(const char* pc_line)
{
 80121a8:	b580      	push	{r7, lr}
 80121aa:	b086      	sub	sp, #24
 80121ac:	af00      	add	r7, sp, #0
 80121ae:	6078      	str	r0, [r7, #4]
	uint8_t 	 u8_max_cmd_len = 0;
 80121b0:	2300      	movs	r3, #0
 80121b2:	75fb      	strb	r3, [r7, #23]
	uint8_t 	 u8_cmd_len 	= 0;
 80121b4:	2300      	movs	r3, #0
 80121b6:	75bb      	strb	r3, [r7, #22]
	const cmd_t* p_cmd 			= g_cmd_table;
 80121b8:	4b32      	ldr	r3, [pc, #200]	; (8012284 <shell_help+0xdc>)
 80121ba:	613b      	str	r3, [r7, #16]
	uint16_t	 u16_n_cmds 	= gu16_n_cmds - 1;	// Discard NULL command
 80121bc:	2315      	movs	r3, #21
 80121be:	3b01      	subs	r3, #1
 80121c0:	81fb      	strh	r3, [r7, #14]

	// Find longest command for alignment
	while (u16_n_cmds > 0)
 80121c2:	e013      	b.n	80121ec <shell_help+0x44>
	{
		u8_cmd_len = strlen_safe(p_cmd->pc_name, SHELL_INPUT_LINE_SIZE);
 80121c4:	693b      	ldr	r3, [r7, #16]
 80121c6:	681b      	ldr	r3, [r3, #0]
 80121c8:	2180      	movs	r1, #128	; 0x80
 80121ca:	4618      	mov	r0, r3
 80121cc:	f001 f8c4 	bl	8013358 <strlen_safe>
 80121d0:	4603      	mov	r3, r0
 80121d2:	75bb      	strb	r3, [r7, #22]

		if (u8_cmd_len > u8_max_cmd_len)
 80121d4:	7dba      	ldrb	r2, [r7, #22]
 80121d6:	7dfb      	ldrb	r3, [r7, #23]
 80121d8:	429a      	cmp	r2, r3
 80121da:	d901      	bls.n	80121e0 <shell_help+0x38>
		{
			u8_max_cmd_len = u8_cmd_len;
 80121dc:	7dbb      	ldrb	r3, [r7, #22]
 80121de:	75fb      	strb	r3, [r7, #23]
		}

		u16_n_cmds--;
 80121e0:	89fb      	ldrh	r3, [r7, #14]
 80121e2:	3b01      	subs	r3, #1
 80121e4:	81fb      	strh	r3, [r7, #14]
		p_cmd++;
 80121e6:	693b      	ldr	r3, [r7, #16]
 80121e8:	330c      	adds	r3, #12
 80121ea:	613b      	str	r3, [r7, #16]
	while (u16_n_cmds > 0)
 80121ec:	89fb      	ldrh	r3, [r7, #14]
 80121ee:	2b00      	cmp	r3, #0
 80121f0:	d1e8      	bne.n	80121c4 <shell_help+0x1c>
	}

	p_cmd 	   = g_cmd_table;
 80121f2:	4b24      	ldr	r3, [pc, #144]	; (8012284 <shell_help+0xdc>)
 80121f4:	613b      	str	r3, [r7, #16]
	u16_n_cmds = gu16_n_cmds - 1;
 80121f6:	2315      	movs	r3, #21
 80121f8:	3b01      	subs	r3, #1
 80121fa:	81fb      	strh	r3, [r7, #14]
	// Print all commands and descriptions
	while (u16_n_cmds > 0)
 80121fc:	e03a      	b.n	8012274 <shell_help+0xcc>
	{
		u8_cmd_len = strlen_safe(p_cmd->pc_name, SHELL_INPUT_LINE_SIZE);
 80121fe:	693b      	ldr	r3, [r7, #16]
 8012200:	681b      	ldr	r3, [r3, #0]
 8012202:	2180      	movs	r1, #128	; 0x80
 8012204:	4618      	mov	r0, r3
 8012206:	f001 f8a7 	bl	8013358 <strlen_safe>
 801220a:	4603      	mov	r3, r0
 801220c:	75bb      	strb	r3, [r7, #22]

		snprintf(gs_output_buffer, SHELL_OUTPUT_LINE_SIZE, "%s", p_cmd->pc_name);
 801220e:	693b      	ldr	r3, [r7, #16]
 8012210:	681b      	ldr	r3, [r3, #0]
 8012212:	4a1d      	ldr	r2, [pc, #116]	; (8012288 <shell_help+0xe0>)
 8012214:	f44f 71c0 	mov.w	r1, #384	; 0x180
 8012218:	481c      	ldr	r0, [pc, #112]	; (801228c <shell_help+0xe4>)
 801221a:	f003 fe95 	bl	8015f48 <sniprintf>
		shell_write(gs_output_buffer);
 801221e:	481b      	ldr	r0, [pc, #108]	; (801228c <shell_help+0xe4>)
 8012220:	f7ff fdde 	bl	8011de0 <shell_write>

		// Align printed command to longest
		while (u8_cmd_len < SHELL_INPUT_LINE_SIZE)
 8012224:	e009      	b.n	801223a <shell_help+0x92>
		{
			if (u8_cmd_len < u8_max_cmd_len)
 8012226:	7dba      	ldrb	r2, [r7, #22]
 8012228:	7dfb      	ldrb	r3, [r7, #23]
 801222a:	429a      	cmp	r2, r3
 801222c:	d20a      	bcs.n	8012244 <shell_help+0x9c>
			{
				shell_write(" ");
 801222e:	4818      	ldr	r0, [pc, #96]	; (8012290 <shell_help+0xe8>)
 8012230:	f7ff fdd6 	bl	8011de0 <shell_write>
				u8_cmd_len++;
 8012234:	7dbb      	ldrb	r3, [r7, #22]
 8012236:	3301      	adds	r3, #1
 8012238:	75bb      	strb	r3, [r7, #22]
		while (u8_cmd_len < SHELL_INPUT_LINE_SIZE)
 801223a:	f997 3016 	ldrsb.w	r3, [r7, #22]
 801223e:	2b00      	cmp	r3, #0
 8012240:	daf1      	bge.n	8012226 <shell_help+0x7e>
 8012242:	e000      	b.n	8012246 <shell_help+0x9e>
			}
			else
			{
				break;
 8012244:	bf00      	nop
			}
		}

		shell_write("\t\t");
 8012246:	4813      	ldr	r0, [pc, #76]	; (8012294 <shell_help+0xec>)
 8012248:	f7ff fdca 	bl	8011de0 <shell_write>
		snprintf(gs_output_buffer, SHELL_OUTPUT_LINE_SIZE, " %s", p_cmd->pc_descr);
 801224c:	693b      	ldr	r3, [r7, #16]
 801224e:	689b      	ldr	r3, [r3, #8]
 8012250:	4a11      	ldr	r2, [pc, #68]	; (8012298 <shell_help+0xf0>)
 8012252:	f44f 71c0 	mov.w	r1, #384	; 0x180
 8012256:	480d      	ldr	r0, [pc, #52]	; (801228c <shell_help+0xe4>)
 8012258:	f003 fe76 	bl	8015f48 <sniprintf>
		shell_write(gs_output_buffer);
 801225c:	480b      	ldr	r0, [pc, #44]	; (801228c <shell_help+0xe4>)
 801225e:	f7ff fdbf 	bl	8011de0 <shell_write>
		shell_write("\r");
 8012262:	480e      	ldr	r0, [pc, #56]	; (801229c <shell_help+0xf4>)
 8012264:	f7ff fdbc 	bl	8011de0 <shell_write>

		u16_n_cmds--;
 8012268:	89fb      	ldrh	r3, [r7, #14]
 801226a:	3b01      	subs	r3, #1
 801226c:	81fb      	strh	r3, [r7, #14]
		p_cmd++;
 801226e:	693b      	ldr	r3, [r7, #16]
 8012270:	330c      	adds	r3, #12
 8012272:	613b      	str	r3, [r7, #16]
	while (u16_n_cmds > 0)
 8012274:	89fb      	ldrh	r3, [r7, #14]
 8012276:	2b00      	cmp	r3, #0
 8012278:	d1c1      	bne.n	80121fe <shell_help+0x56>
	}
}
 801227a:	bf00      	nop
 801227c:	bf00      	nop
 801227e:	3718      	adds	r7, #24
 8012280:	46bd      	mov	sp, r7
 8012282:	bd80      	pop	{r7, pc}
 8012284:	0801f1b0 	.word	0x0801f1b0
 8012288:	0801a924 	.word	0x0801a924
 801228c:	2000545c 	.word	0x2000545c
 8012290:	0801a928 	.word	0x0801a928
 8012294:	0801a92c 	.word	0x0801a92c
 8012298:	0801a930 	.word	0x0801a930
 801229c:	0801a914 	.word	0x0801a914

080122a0 <shell_unknown>:
* @param[in] 	char* pc_line - pointer to paased command string
* @return 		none
*/
////////////////////////////////////////////////////////////////////////////////
static void shell_unknown(const char* pc_line)
{
 80122a0:	b580      	push	{r7, lr}
 80122a2:	b082      	sub	sp, #8
 80122a4:	af00      	add	r7, sp, #0
 80122a6:	6078      	str	r0, [r7, #4]
	shell_write("Unknown command received\r");
 80122a8:	4803      	ldr	r0, [pc, #12]	; (80122b8 <shell_unknown+0x18>)
 80122aa:	f7ff fd99 	bl	8011de0 <shell_write>
}
 80122ae:	bf00      	nop
 80122b0:	3708      	adds	r7, #8
 80122b2:	46bd      	mov	sp, r7
 80122b4:	bd80      	pop	{r7, pc}
 80122b6:	bf00      	nop
 80122b8:	0801a934 	.word	0x0801a934

080122bc <shell_reset>:
* @param[in] 	char* pc_line - pointer to paased command string
* @return 		none
*/
////////////////////////////////////////////////////////////////////////////////
static void shell_reset(const char* pc_line)
{
 80122bc:	b580      	push	{r7, lr}
 80122be:	b082      	sub	sp, #8
 80122c0:	af00      	add	r7, sp, #0
 80122c2:	6078      	str	r0, [r7, #4]
	shell_write("OK, Reseting device...\r");
 80122c4:	4804      	ldr	r0, [pc, #16]	; (80122d8 <shell_reset+0x1c>)
 80122c6:	f7ff fd8b 	bl	8011de0 <shell_write>
	HAL_NVIC_SystemReset();
 80122ca:	f7f0 f844 	bl	8002356 <HAL_NVIC_SystemReset>
}
 80122ce:	bf00      	nop
 80122d0:	3708      	adds	r7, #8
 80122d2:	46bd      	mov	sp, r7
 80122d4:	bd80      	pop	{r7, pc}
 80122d6:	bf00      	nop
 80122d8:	0801a950 	.word	0x0801a950

080122dc <shell_fw_version>:
* @param[in] 	char* pc_line - pointer to passed command string
* @return 		none
*/
////////////////////////////////////////////////////////////////////////////////
static void shell_fw_version(const char* pc_line)
{
 80122dc:	b580      	push	{r7, lr}
 80122de:	b082      	sub	sp, #8
 80122e0:	af00      	add	r7, sp, #0
 80122e2:	6078      	str	r0, [r7, #4]
	shell_write( sw_version_string() );
 80122e4:	f002 fe8c 	bl	8015000 <sw_version_string>
 80122e8:	4603      	mov	r3, r0
 80122ea:	4618      	mov	r0, r3
 80122ec:	f7ff fd78 	bl	8011de0 <shell_write>
	shell_write("\r");
 80122f0:	4803      	ldr	r0, [pc, #12]	; (8012300 <shell_fw_version+0x24>)
 80122f2:	f7ff fd75 	bl	8011de0 <shell_write>
}
 80122f6:	bf00      	nop
 80122f8:	3708      	adds	r7, #8
 80122fa:	46bd      	mov	sp, r7
 80122fc:	bd80      	pop	{r7, pc}
 80122fe:	bf00      	nop
 8012300:	0801a914 	.word	0x0801a914

08012304 <shell_hw_version>:
* @param[in] 	char* pc_line - pointer to passed command string
* @return 		none
*/
////////////////////////////////////////////////////////////////////////////////
static void shell_hw_version(const char* pc_line)
{
 8012304:	b580      	push	{r7, lr}
 8012306:	b082      	sub	sp, #8
 8012308:	af00      	add	r7, sp, #0
 801230a:	6078      	str	r0, [r7, #4]
	shell_write( hw_version_string() );
 801230c:	f002 fe82 	bl	8015014 <hw_version_string>
 8012310:	4603      	mov	r3, r0
 8012312:	4618      	mov	r0, r3
 8012314:	f7ff fd64 	bl	8011de0 <shell_write>
	shell_write("\r");
 8012318:	4803      	ldr	r0, [pc, #12]	; (8012328 <shell_hw_version+0x24>)
 801231a:	f7ff fd61 	bl	8011de0 <shell_write>
}
 801231e:	bf00      	nop
 8012320:	3708      	adds	r7, #8
 8012322:	46bd      	mov	sp, r7
 8012324:	bd80      	pop	{r7, pc}
 8012326:	bf00      	nop
 8012328:	0801a914 	.word	0x0801a914

0801232c <shell_status_start>:
* @param[in] 	char* pc_line - pointer to paased command string
* @return 		none
*/
////////////////////////////////////////////////////////////////////////////////
static void shell_status_start(const char* pc_line)
{
 801232c:	b480      	push	{r7}
 801232e:	b083      	sub	sp, #12
 8012330:	af00      	add	r7, sp, #0
 8012332:	6078      	str	r0, [r7, #4]
	gb_stream_data_f = true;
 8012334:	4b04      	ldr	r3, [pc, #16]	; (8012348 <shell_status_start+0x1c>)
 8012336:	2201      	movs	r2, #1
 8012338:	701a      	strb	r2, [r3, #0]
}
 801233a:	bf00      	nop
 801233c:	370c      	adds	r7, #12
 801233e:	46bd      	mov	sp, r7
 8012340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012344:	4770      	bx	lr
 8012346:	bf00      	nop
 8012348:	200055fd 	.word	0x200055fd

0801234c <shell_status_stop>:
* @param[in] 	char* pc_line - pointer to paased command string
* @return 		none
*/
////////////////////////////////////////////////////////////////////////////////
static void shell_status_stop(const char* pc_line)
{
 801234c:	b480      	push	{r7}
 801234e:	b083      	sub	sp, #12
 8012350:	af00      	add	r7, sp, #0
 8012352:	6078      	str	r0, [r7, #4]
	gb_stream_data_f = false;
 8012354:	4b04      	ldr	r3, [pc, #16]	; (8012368 <shell_status_stop+0x1c>)
 8012356:	2200      	movs	r2, #0
 8012358:	701a      	strb	r2, [r3, #0]
}
 801235a:	bf00      	nop
 801235c:	370c      	adds	r7, #12
 801235e:	46bd      	mov	sp, r7
 8012360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012364:	4770      	bx	lr
 8012366:	bf00      	nop
 8012368:	200055fd 	.word	0x200055fd
 801236c:	00000000 	.word	0x00000000

08012370 <shell_status_des>:
* @param[in] 	char* pc_line - pointer to paased command string
* @return 		none
*/
////////////////////////////////////////////////////////////////////////////////
static void shell_status_des(const char* pc_line)
{
 8012370:	b580      	push	{r7, lr}
 8012372:	b08e      	sub	sp, #56	; 0x38
 8012374:	af00      	add	r7, sp, #0
 8012376:	6078      	str	r0, [r7, #4]
	uint32_t ch_cnt;
	uint32_t par_num = 0;
 8012378:	2300      	movs	r3, #0
 801237a:	637b      	str	r3, [r7, #52]	; 0x34
	uint16_t par_id;
	char name[32];

	sscanf(pc_line, "status_des%n", (int*)&ch_cnt);
 801237c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8012380:	461a      	mov	r2, r3
 8012382:	4935      	ldr	r1, [pc, #212]	; (8012458 <shell_status_des+0xe8>)
 8012384:	6878      	ldr	r0, [r7, #4]
 8012386:	f003 fe33 	bl	8015ff0 <siscanf>
	pc_line += ch_cnt;
 801238a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801238c:	687a      	ldr	r2, [r7, #4]
 801238e:	4413      	add	r3, r2
 8012390:	607b      	str	r3, [r7, #4]

	while( par_num < MAX_STREAMING_PARS && 1 == sscanf(pc_line, "%d%n", (int*)&par_id, (int*)&ch_cnt) )
 8012392:	e011      	b.n	80123b8 <shell_status_des+0x48>
	{
		streaming_pars[par_num++] = par_id;
 8012394:	8d79      	ldrh	r1, [r7, #42]	; 0x2a
 8012396:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012398:	1c5a      	adds	r2, r3, #1
 801239a:	637a      	str	r2, [r7, #52]	; 0x34
 801239c:	b2c9      	uxtb	r1, r1
 801239e:	4a2f      	ldr	r2, [pc, #188]	; (801245c <shell_status_des+0xec>)
 80123a0:	54d1      	strb	r1, [r2, r3]
		pc_line += ch_cnt;
 80123a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80123a4:	687a      	ldr	r2, [r7, #4]
 80123a6:	4413      	add	r3, r2
 80123a8:	607b      	str	r3, [r7, #4]

		// skipp comma
		if( *pc_line == ',' )
 80123aa:	687b      	ldr	r3, [r7, #4]
 80123ac:	781b      	ldrb	r3, [r3, #0]
 80123ae:	2b2c      	cmp	r3, #44	; 0x2c
 80123b0:	d102      	bne.n	80123b8 <shell_status_des+0x48>
		{
			pc_line++;
 80123b2:	687b      	ldr	r3, [r7, #4]
 80123b4:	3301      	adds	r3, #1
 80123b6:	607b      	str	r3, [r7, #4]
	while( par_num < MAX_STREAMING_PARS && 1 == sscanf(pc_line, "%d%n", (int*)&par_id, (int*)&ch_cnt) )
 80123b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80123ba:	2b13      	cmp	r3, #19
 80123bc:	d80a      	bhi.n	80123d4 <shell_status_des+0x64>
 80123be:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80123c2:	f107 022a 	add.w	r2, r7, #42	; 0x2a
 80123c6:	4926      	ldr	r1, [pc, #152]	; (8012460 <shell_status_des+0xf0>)
 80123c8:	6878      	ldr	r0, [r7, #4]
 80123ca:	f003 fe11 	bl	8015ff0 <siscanf>
 80123ce:	4603      	mov	r3, r0
 80123d0:	2b01      	cmp	r3, #1
 80123d2:	d0df      	beq.n	8012394 <shell_status_des+0x24>
		}
	}

	if( par_num > 0)
 80123d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80123d6:	2b00      	cmp	r3, #0
 80123d8:	d003      	beq.n	80123e2 <shell_status_des+0x72>
	{
		streaming_pars_num = par_num;
 80123da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80123dc:	b2da      	uxtb	r2, r3
 80123de:	4b21      	ldr	r3, [pc, #132]	; (8012464 <shell_status_des+0xf4>)
 80123e0:	701a      	strb	r2, [r3, #0]
	}

	// Send sample time
	sprintf(gs_output_buffer, "OK,%g", (STREAMING_PERIOD / 1000.0f) );
 80123e2:	a31b      	add	r3, pc, #108	; (adr r3, 8012450 <shell_status_des+0xe0>)
 80123e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80123e8:	491f      	ldr	r1, [pc, #124]	; (8012468 <shell_status_des+0xf8>)
 80123ea:	4820      	ldr	r0, [pc, #128]	; (801246c <shell_status_des+0xfc>)
 80123ec:	f003 fde0 	bl	8015fb0 <siprintf>
	shell_write(gs_output_buffer);
 80123f0:	481e      	ldr	r0, [pc, #120]	; (801246c <shell_status_des+0xfc>)
 80123f2:	f7ff fcf5 	bl	8011de0 <shell_write>

	// Print streaming parameters/variables
	for(int i = 0; i < streaming_pars_num; i++)
 80123f6:	2300      	movs	r3, #0
 80123f8:	633b      	str	r3, [r7, #48]	; 0x30
 80123fa:	e01c      	b.n	8012436 <shell_status_des+0xc6>
	{
		par_get_name( (par_num_t) par_get_num_by_id( streaming_pars[i] ) ,(uint8_t*) &name );
 80123fc:	4a17      	ldr	r2, [pc, #92]	; (801245c <shell_status_des+0xec>)
 80123fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012400:	4413      	add	r3, r2
 8012402:	781b      	ldrb	r3, [r3, #0]
 8012404:	b29b      	uxth	r3, r3
 8012406:	4618      	mov	r0, r3
 8012408:	f001 fa44 	bl	8013894 <par_get_num_by_id>
 801240c:	4603      	mov	r3, r0
 801240e:	461a      	mov	r2, r3
 8012410:	f107 0308 	add.w	r3, r7, #8
 8012414:	4619      	mov	r1, r3
 8012416:	4610      	mov	r0, r2
 8012418:	f001 fc5e 	bl	8013cd8 <par_get_name>
		sprintf( gs_output_buffer, ",%s,d,1", name );
 801241c:	f107 0308 	add.w	r3, r7, #8
 8012420:	461a      	mov	r2, r3
 8012422:	4913      	ldr	r1, [pc, #76]	; (8012470 <shell_status_des+0x100>)
 8012424:	4811      	ldr	r0, [pc, #68]	; (801246c <shell_status_des+0xfc>)
 8012426:	f003 fdc3 	bl	8015fb0 <siprintf>
		shell_write( gs_output_buffer );
 801242a:	4810      	ldr	r0, [pc, #64]	; (801246c <shell_status_des+0xfc>)
 801242c:	f7ff fcd8 	bl	8011de0 <shell_write>
	for(int i = 0; i < streaming_pars_num; i++)
 8012430:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012432:	3301      	adds	r3, #1
 8012434:	633b      	str	r3, [r7, #48]	; 0x30
 8012436:	4b0b      	ldr	r3, [pc, #44]	; (8012464 <shell_status_des+0xf4>)
 8012438:	781b      	ldrb	r3, [r3, #0]
 801243a:	461a      	mov	r2, r3
 801243c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801243e:	4293      	cmp	r3, r2
 8012440:	dbdc      	blt.n	80123fc <shell_status_des+0x8c>
	}

	shell_write("\r");
 8012442:	480c      	ldr	r0, [pc, #48]	; (8012474 <shell_status_des+0x104>)
 8012444:	f7ff fccc 	bl	8011de0 <shell_write>
}
 8012448:	bf00      	nop
 801244a:	3738      	adds	r7, #56	; 0x38
 801244c:	46bd      	mov	sp, r7
 801244e:	bd80      	pop	{r7, pc}
 8012450:	40000000 	.word	0x40000000
 8012454:	3f847ae1 	.word	0x3f847ae1
 8012458:	0801a968 	.word	0x0801a968
 801245c:	200055e8 	.word	0x200055e8
 8012460:	0801a978 	.word	0x0801a978
 8012464:	200055fc 	.word	0x200055fc
 8012468:	0801a980 	.word	0x0801a980
 801246c:	2000545c 	.word	0x2000545c
 8012470:	0801a988 	.word	0x0801a988
 8012474:	0801a914 	.word	0x0801a914

08012478 <shell_par_val_to_float>:
* @param[in] 	p_val		- Pointer to parameter value
* @return 		f32_par_val	- Floating representation of parameter value
*/
////////////////////////////////////////////////////////////////////////////////
static float32_t shell_par_val_to_float(const par_type_list_t par_type, const void * p_val)
{
 8012478:	b480      	push	{r7}
 801247a:	b085      	sub	sp, #20
 801247c:	af00      	add	r7, sp, #0
 801247e:	4603      	mov	r3, r0
 8012480:	6039      	str	r1, [r7, #0]
 8012482:	71fb      	strb	r3, [r7, #7]
	float32_t f32_par_val = 0.0f;
 8012484:	f04f 0300 	mov.w	r3, #0
 8012488:	60fb      	str	r3, [r7, #12]

	switch( par_type )
 801248a:	79fb      	ldrb	r3, [r7, #7]
 801248c:	2b06      	cmp	r3, #6
 801248e:	d84d      	bhi.n	801252c <shell_par_val_to_float+0xb4>
 8012490:	a201      	add	r2, pc, #4	; (adr r2, 8012498 <shell_par_val_to_float+0x20>)
 8012492:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012496:	bf00      	nop
 8012498:	080124b5 	.word	0x080124b5
 801249c:	080124db 	.word	0x080124db
 80124a0:	08012501 	.word	0x08012501
 80124a4:	080124c7 	.word	0x080124c7
 80124a8:	080124ed 	.word	0x080124ed
 80124ac:	08012513 	.word	0x08012513
 80124b0:	08012525 	.word	0x08012525
	{
		case ePAR_TYPE_U8:
			f32_par_val = *(uint8_t*) p_val;
 80124b4:	683b      	ldr	r3, [r7, #0]
 80124b6:	781b      	ldrb	r3, [r3, #0]
 80124b8:	ee07 3a90 	vmov	s15, r3
 80124bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80124c0:	edc7 7a03 	vstr	s15, [r7, #12]
			break;
 80124c4:	e033      	b.n	801252e <shell_par_val_to_float+0xb6>

		case ePAR_TYPE_I8:
			f32_par_val = *(int8_t*) p_val;
 80124c6:	683b      	ldr	r3, [r7, #0]
 80124c8:	f993 3000 	ldrsb.w	r3, [r3]
 80124cc:	ee07 3a90 	vmov	s15, r3
 80124d0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80124d4:	edc7 7a03 	vstr	s15, [r7, #12]
			break;
 80124d8:	e029      	b.n	801252e <shell_par_val_to_float+0xb6>

		case ePAR_TYPE_U16:
			f32_par_val = *(uint16_t*) p_val;
 80124da:	683b      	ldr	r3, [r7, #0]
 80124dc:	881b      	ldrh	r3, [r3, #0]
 80124de:	ee07 3a90 	vmov	s15, r3
 80124e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80124e6:	edc7 7a03 	vstr	s15, [r7, #12]
			break;
 80124ea:	e020      	b.n	801252e <shell_par_val_to_float+0xb6>

		case ePAR_TYPE_I16:
			f32_par_val = *(int16_t*) p_val;
 80124ec:	683b      	ldr	r3, [r7, #0]
 80124ee:	f9b3 3000 	ldrsh.w	r3, [r3]
 80124f2:	ee07 3a90 	vmov	s15, r3
 80124f6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80124fa:	edc7 7a03 	vstr	s15, [r7, #12]
			break;
 80124fe:	e016      	b.n	801252e <shell_par_val_to_float+0xb6>

		case ePAR_TYPE_U32:
			f32_par_val = *(uint32_t*) p_val;
 8012500:	683b      	ldr	r3, [r7, #0]
 8012502:	681b      	ldr	r3, [r3, #0]
 8012504:	ee07 3a90 	vmov	s15, r3
 8012508:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801250c:	edc7 7a03 	vstr	s15, [r7, #12]
			break;
 8012510:	e00d      	b.n	801252e <shell_par_val_to_float+0xb6>

		case ePAR_TYPE_I32:
			f32_par_val = *(int32_t*) p_val;
 8012512:	683b      	ldr	r3, [r7, #0]
 8012514:	681b      	ldr	r3, [r3, #0]
 8012516:	ee07 3a90 	vmov	s15, r3
 801251a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801251e:	edc7 7a03 	vstr	s15, [r7, #12]
			break;
 8012522:	e004      	b.n	801252e <shell_par_val_to_float+0xb6>

		case ePAR_TYPE_F32:
			f32_par_val = *(float32_t*) p_val;
 8012524:	683b      	ldr	r3, [r7, #0]
 8012526:	681b      	ldr	r3, [r3, #0]
 8012528:	60fb      	str	r3, [r7, #12]
			break;
 801252a:	e000      	b.n	801252e <shell_par_val_to_float+0xb6>

		default:
			// No actions..
			break;
 801252c:	bf00      	nop
	}

	return f32_par_val;
 801252e:	68fb      	ldr	r3, [r7, #12]
 8012530:	ee07 3a90 	vmov	s15, r3
}
 8012534:	eeb0 0a67 	vmov.f32	s0, s15
 8012538:	3714      	adds	r7, #20
 801253a:	46bd      	mov	sp, r7
 801253c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012540:	4770      	bx	lr
 8012542:	bf00      	nop

08012544 <shell_par_print>:
* @param[in] 	pc_line	- Command from PC tool
* @return 		void
*/
////////////////////////////////////////////////////////////////////////////////
static void shell_par_print(const char* pc_line)
{
 8012544:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012548:	b097      	sub	sp, #92	; 0x5c
 801254a:	af0a      	add	r7, sp, #40	; 0x28
 801254c:	6078      	str	r0, [r7, #4]
	par_cfg_t 	par_cfg 	= { 0 };
 801254e:	f107 0310 	add.w	r3, r7, #16
 8012552:	2200      	movs	r2, #0
 8012554:	601a      	str	r2, [r3, #0]
 8012556:	605a      	str	r2, [r3, #4]
 8012558:	609a      	str	r2, [r3, #8]
 801255a:	60da      	str	r2, [r3, #12]
 801255c:	611a      	str	r2, [r3, #16]
 801255e:	615a      	str	r2, [r3, #20]
 8012560:	619a      	str	r2, [r3, #24]
	uint32_t 	par_num		= 0UL;
 8012562:	2300      	movs	r3, #0
 8012564:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t	par_val		= 0UL;
 8012566:	2300      	movs	r3, #0
 8012568:	60fb      	str	r3, [r7, #12]

	// Send header
	shell_write(";Par.ID, Par.Name, Par.value, Par.def, Par.Min, Par.Max, Comment, Type, Access level\r");
 801256a:	483f      	ldr	r0, [pc, #252]	; (8012668 <shell_par_print+0x124>)
 801256c:	f7ff fc38 	bl	8011de0 <shell_write>

	// For each parameter
	for ( par_num = 0; par_num < ePAR_NUM_OF; par_num++ )
 8012570:	2300      	movs	r3, #0
 8012572:	62fb      	str	r3, [r7, #44]	; 0x2c
 8012574:	e06c      	b.n	8012650 <shell_par_print+0x10c>
	{
		// Get parameter configuration
		par_get_config( par_num, &par_cfg );
 8012576:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012578:	b2db      	uxtb	r3, r3
 801257a:	f107 0210 	add.w	r2, r7, #16
 801257e:	4611      	mov	r1, r2
 8012580:	4618      	mov	r0, r3
 8012582:	f001 fb57 	bl	8013c34 <par_get_config>

		// Get current parameter value
		par_get( par_num, &par_val );
 8012586:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012588:	b2db      	uxtb	r3, r3
 801258a:	f107 020c 	add.w	r2, r7, #12
 801258e:	4611      	mov	r1, r2
 8012590:	4618      	mov	r0, r3
 8012592:	f001 fa49 	bl	8013a28 <par_get>

		// Print header
		shell_par_print_header( par_num );
 8012596:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012598:	b2db      	uxtb	r3, r3
 801259a:	4618      	mov	r0, r3
 801259c:	f000 f86c 	bl	8012678 <shell_par_print_header>

		// Assemble par info response
		snprintf(gs_output_buffer, SHELL_OUTPUT_LINE_SIZE, "%u, %s, %g, %g, %g, %g, ,f,4\r",
				(int) par_cfg.id,
 80125a0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
		snprintf(gs_output_buffer, SHELL_OUTPUT_LINE_SIZE, "%u, %s, %g, %g, %g, %g, ,f,4\r",
 80125a2:	603b      	str	r3, [r7, #0]
 80125a4:	693e      	ldr	r6, [r7, #16]
				par_cfg.name,
				shell_par_val_to_float( par_cfg.type, &par_val ),
 80125a6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80125aa:	f107 020c 	add.w	r2, r7, #12
 80125ae:	4611      	mov	r1, r2
 80125b0:	4618      	mov	r0, r3
 80125b2:	f7ff ff61 	bl	8012478 <shell_par_val_to_float>
 80125b6:	ee10 3a10 	vmov	r3, s0
		snprintf(gs_output_buffer, SHELL_OUTPUT_LINE_SIZE, "%u, %s, %g, %g, %g, %g, ,f,4\r",
 80125ba:	4618      	mov	r0, r3
 80125bc:	f7ed fff4 	bl	80005a8 <__aeabi_f2d>
 80125c0:	4604      	mov	r4, r0
 80125c2:	460d      	mov	r5, r1
				shell_par_val_to_float( par_cfg.type, &par_cfg.def.u32 ),
 80125c4:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80125c8:	f107 0310 	add.w	r3, r7, #16
 80125cc:	330c      	adds	r3, #12
 80125ce:	4619      	mov	r1, r3
 80125d0:	4610      	mov	r0, r2
 80125d2:	f7ff ff51 	bl	8012478 <shell_par_val_to_float>
 80125d6:	ee10 3a10 	vmov	r3, s0
		snprintf(gs_output_buffer, SHELL_OUTPUT_LINE_SIZE, "%u, %s, %g, %g, %g, %g, ,f,4\r",
 80125da:	4618      	mov	r0, r3
 80125dc:	f7ed ffe4 	bl	80005a8 <__aeabi_f2d>
 80125e0:	4680      	mov	r8, r0
 80125e2:	4689      	mov	r9, r1
				shell_par_val_to_float( par_cfg.type, &par_cfg.min.u32 ),
 80125e4:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80125e8:	f107 0310 	add.w	r3, r7, #16
 80125ec:	3304      	adds	r3, #4
 80125ee:	4619      	mov	r1, r3
 80125f0:	4610      	mov	r0, r2
 80125f2:	f7ff ff41 	bl	8012478 <shell_par_val_to_float>
 80125f6:	ee10 3a10 	vmov	r3, s0
		snprintf(gs_output_buffer, SHELL_OUTPUT_LINE_SIZE, "%u, %s, %g, %g, %g, %g, ,f,4\r",
 80125fa:	4618      	mov	r0, r3
 80125fc:	f7ed ffd4 	bl	80005a8 <__aeabi_f2d>
 8012600:	4682      	mov	sl, r0
 8012602:	468b      	mov	fp, r1
				shell_par_val_to_float( par_cfg.type, &par_cfg.max.u32 ));
 8012604:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8012608:	f107 0310 	add.w	r3, r7, #16
 801260c:	3308      	adds	r3, #8
 801260e:	4619      	mov	r1, r3
 8012610:	4610      	mov	r0, r2
 8012612:	f7ff ff31 	bl	8012478 <shell_par_val_to_float>
 8012616:	ee10 3a10 	vmov	r3, s0
		snprintf(gs_output_buffer, SHELL_OUTPUT_LINE_SIZE, "%u, %s, %g, %g, %g, %g, ,f,4\r",
 801261a:	4618      	mov	r0, r3
 801261c:	f7ed ffc4 	bl	80005a8 <__aeabi_f2d>
 8012620:	4602      	mov	r2, r0
 8012622:	460b      	mov	r3, r1
 8012624:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8012628:	e9cd ab06 	strd	sl, fp, [sp, #24]
 801262c:	e9cd 8904 	strd	r8, r9, [sp, #16]
 8012630:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8012634:	9600      	str	r6, [sp, #0]
 8012636:	683b      	ldr	r3, [r7, #0]
 8012638:	4a0c      	ldr	r2, [pc, #48]	; (801266c <shell_par_print+0x128>)
 801263a:	f44f 71c0 	mov.w	r1, #384	; 0x180
 801263e:	480c      	ldr	r0, [pc, #48]	; (8012670 <shell_par_print+0x12c>)
 8012640:	f003 fc82 	bl	8015f48 <sniprintf>

		// Send par info
		shell_write(gs_output_buffer);
 8012644:	480a      	ldr	r0, [pc, #40]	; (8012670 <shell_par_print+0x12c>)
 8012646:	f7ff fbcb 	bl	8011de0 <shell_write>
	for ( par_num = 0; par_num < ePAR_NUM_OF; par_num++ )
 801264a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801264c:	3301      	adds	r3, #1
 801264e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8012650:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012652:	2b13      	cmp	r3, #19
 8012654:	d98f      	bls.n	8012576 <shell_par_print+0x32>
	}

	shell_write(";END\r");
 8012656:	4807      	ldr	r0, [pc, #28]	; (8012674 <shell_par_print+0x130>)
 8012658:	f7ff fbc2 	bl	8011de0 <shell_write>
}
 801265c:	bf00      	nop
 801265e:	3734      	adds	r7, #52	; 0x34
 8012660:	46bd      	mov	sp, r7
 8012662:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012666:	bf00      	nop
 8012668:	0801a990 	.word	0x0801a990
 801266c:	0801a9e8 	.word	0x0801a9e8
 8012670:	2000545c 	.word	0x2000545c
 8012674:	0801aa08 	.word	0x0801aa08

08012678 <shell_par_print_header>:
* @param[in] 	pc_line	- Command from PC tool
* @return 		void
*/
////////////////////////////////////////////////////////////////////////////////
static void shell_par_print_header(const par_num_t par_num)
{
 8012678:	b580      	push	{r7, lr}
 801267a:	b082      	sub	sp, #8
 801267c:	af00      	add	r7, sp, #0
 801267e:	4603      	mov	r3, r0
 8012680:	71fb      	strb	r3, [r7, #7]
	switch ( par_num )
 8012682:	79fb      	ldrb	r3, [r7, #7]
 8012684:	2b00      	cmp	r3, #0
 8012686:	d002      	beq.n	801268e <shell_par_print_header+0x16>
 8012688:	2b09      	cmp	r3, #9
 801268a:	d004      	beq.n	8012696 <shell_par_print_header+0x1e>
			break;

		// ADD MORE HERE...

		default:
			break;
 801268c:	e007      	b.n	801269e <shell_par_print_header+0x26>
			shell_write( ":TOUCH\r" );
 801268e:	4806      	ldr	r0, [pc, #24]	; (80126a8 <shell_par_print_header+0x30>)
 8012690:	f7ff fba6 	bl	8011de0 <shell_write>
			break;
 8012694:	e003      	b.n	801269e <shell_par_print_header+0x26>
			shell_write( ":POWER MANAGEMENT\r" );
 8012696:	4805      	ldr	r0, [pc, #20]	; (80126ac <shell_par_print_header+0x34>)
 8012698:	f7ff fba2 	bl	8011de0 <shell_write>
			break;
 801269c:	bf00      	nop
	}
}
 801269e:	bf00      	nop
 80126a0:	3708      	adds	r7, #8
 80126a2:	46bd      	mov	sp, r7
 80126a4:	bd80      	pop	{r7, pc}
 80126a6:	bf00      	nop
 80126a8:	0801aa10 	.word	0x0801aa10
 80126ac:	0801aa18 	.word	0x0801aa18

080126b0 <shell_par_set>:
* @param[in] 	pc_line	- Input command from shell
* @return 		void
*/
////////////////////////////////////////////////////////////////////////////////
static void shell_par_set(const char* pc_line)
{
 80126b0:	b580      	push	{r7, lr}
 80126b2:	b088      	sub	sp, #32
 80126b4:	af02      	add	r7, sp, #8
 80126b6:	6078      	str	r0, [r7, #4]
	uint16_t 	   	par_id	= 0UL;
 80126b8:	2300      	movs	r3, #0
 80126ba:	827b      	strh	r3, [r7, #18]
	par_num_t 	   	par_num	= 0UL;
 80126bc:	2300      	movs	r3, #0
 80126be:	75fb      	strb	r3, [r7, #23]
	par_type_list_t	par_type	= ePAR_TYPE_U8;;
 80126c0:	2300      	movs	r3, #0
 80126c2:	753b      	strb	r3, [r7, #20]
	par_type_t   	par_data	= { .u32 = 0UL };
 80126c4:	2300      	movs	r3, #0
 80126c6:	60fb      	str	r3, [r7, #12]
	uint8_t	 	   	param_found = 0;
 80126c8:	2300      	movs	r3, #0
 80126ca:	75bb      	strb	r3, [r7, #22]
	par_status_t	status 		= ePAR_OK;
 80126cc:	2300      	movs	r3, #0
 80126ce:	757b      	strb	r3, [r7, #21]

	// Check input command
	if ( 2U == sscanf( pc_line, "par_set %u,%f", (unsigned int*)&par_id, &par_data.f32 ))
 80126d0:	f107 030c 	add.w	r3, r7, #12
 80126d4:	f107 0212 	add.w	r2, r7, #18
 80126d8:	4984      	ldr	r1, [pc, #528]	; (80128ec <shell_par_set+0x23c>)
 80126da:	6878      	ldr	r0, [r7, #4]
 80126dc:	f003 fc88 	bl	8015ff0 <siscanf>
 80126e0:	4603      	mov	r3, r0
 80126e2:	2b02      	cmp	r3, #2
 80126e4:	d10a      	bne.n	80126fc <shell_par_set+0x4c>
	{
		// Get parameter number from ID
		par_num = par_get_num_by_id( par_id );
 80126e6:	8a7b      	ldrh	r3, [r7, #18]
 80126e8:	4618      	mov	r0, r3
 80126ea:	f001 f8d3 	bl	8013894 <par_get_num_by_id>
 80126ee:	4603      	mov	r3, r0
 80126f0:	75fb      	strb	r3, [r7, #23]

		// Check for validy
		if ( par_num < ePAR_NUM_OF )
 80126f2:	7dfb      	ldrb	r3, [r7, #23]
 80126f4:	2b13      	cmp	r3, #19
 80126f6:	d801      	bhi.n	80126fc <shell_par_set+0x4c>
		{
			param_found = 1;
 80126f8:	2301      	movs	r3, #1
 80126fa:	75bb      	strb	r3, [r7, #22]
	else
	{
		// Unsupported par_set
	}

	par_type = par_get_data_type( par_num );
 80126fc:	7dfb      	ldrb	r3, [r7, #23]
 80126fe:	4618      	mov	r0, r3
 8012700:	f001 fb14 	bl	8013d2c <par_get_data_type>
 8012704:	4603      	mov	r3, r0
 8012706:	753b      	strb	r3, [r7, #20]

	// Was parameter found?
	if ( 1 == param_found )
 8012708:	7dbb      	ldrb	r3, [r7, #22]
 801270a:	2b01      	cmp	r3, #1
 801270c:	f040 80e6 	bne.w	80128dc <shell_par_set+0x22c>
	{
		if ( ePAR_ACCESS_RW == par_get_access( par_num ))
 8012710:	7dfb      	ldrb	r3, [r7, #23]
 8012712:	4618      	mov	r0, r3
 8012714:	f001 fb32 	bl	8013d7c <par_get_access>
 8012718:	4603      	mov	r3, r0
 801271a:	2b01      	cmp	r3, #1
 801271c:	f040 80d4 	bne.w	80128c8 <shell_par_set+0x218>
		{
			switch (par_type)
 8012720:	7d3b      	ldrb	r3, [r7, #20]
 8012722:	2b06      	cmp	r3, #6
 8012724:	f200 80c2 	bhi.w	80128ac <shell_par_set+0x1fc>
 8012728:	a201      	add	r2, pc, #4	; (adr r2, 8012730 <shell_par_set+0x80>)
 801272a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801272e:	bf00      	nop
 8012730:	0801274d 	.word	0x0801274d
 8012734:	080127b7 	.word	0x080127b7
 8012738:	0801281d 	.word	0x0801281d
 801273c:	08012781 	.word	0x08012781
 8012740:	080127e9 	.word	0x080127e9
 8012744:	0801284d 	.word	0x0801284d
 8012748:	0801287d 	.word	0x0801287d
			{
				case ePAR_TYPE_U8:
					par_data.u8 = (uint8_t)par_data.f32;
 801274c:	edd7 7a03 	vldr	s15, [r7, #12]
 8012750:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8012754:	edc7 7a00 	vstr	s15, [r7]
 8012758:	683b      	ldr	r3, [r7, #0]
 801275a:	b2db      	uxtb	r3, r3
 801275c:	733b      	strb	r3, [r7, #12]
					status = par_set( par_num, (uint8_t*) &par_data.u8 );
 801275e:	f107 020c 	add.w	r2, r7, #12
 8012762:	7dfb      	ldrb	r3, [r7, #23]
 8012764:	4611      	mov	r1, r2
 8012766:	4618      	mov	r0, r3
 8012768:	f001 f8ca 	bl	8013900 <par_set>
 801276c:	4603      	mov	r3, r0
 801276e:	757b      	strb	r3, [r7, #21]
					snprintf(gs_output_buffer, SHELL_OUTPUT_LINE_SIZE, "OK,PAR_SET=%u\r", par_data.u8);
 8012770:	7b3b      	ldrb	r3, [r7, #12]
 8012772:	4a5f      	ldr	r2, [pc, #380]	; (80128f0 <shell_par_set+0x240>)
 8012774:	f44f 71c0 	mov.w	r1, #384	; 0x180
 8012778:	485e      	ldr	r0, [pc, #376]	; (80128f4 <shell_par_set+0x244>)
 801277a:	f003 fbe5 	bl	8015f48 <sniprintf>
				break;
 801277e:	e098      	b.n	80128b2 <shell_par_set+0x202>

				case ePAR_TYPE_I8:
					par_data.i8 = (int8_t)par_data.f32;
 8012780:	edd7 7a03 	vldr	s15, [r7, #12]
 8012784:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8012788:	edc7 7a00 	vstr	s15, [r7]
 801278c:	683b      	ldr	r3, [r7, #0]
 801278e:	b25b      	sxtb	r3, r3
 8012790:	733b      	strb	r3, [r7, #12]
					status = par_set( par_num, (int8_t*) &par_data.i8 );
 8012792:	f107 020c 	add.w	r2, r7, #12
 8012796:	7dfb      	ldrb	r3, [r7, #23]
 8012798:	4611      	mov	r1, r2
 801279a:	4618      	mov	r0, r3
 801279c:	f001 f8b0 	bl	8013900 <par_set>
 80127a0:	4603      	mov	r3, r0
 80127a2:	757b      	strb	r3, [r7, #21]
					snprintf(gs_output_buffer, SHELL_OUTPUT_LINE_SIZE, "OK,PAR_SET=%i\r", (int) par_data.i8);
 80127a4:	f997 300c 	ldrsb.w	r3, [r7, #12]
 80127a8:	4a53      	ldr	r2, [pc, #332]	; (80128f8 <shell_par_set+0x248>)
 80127aa:	f44f 71c0 	mov.w	r1, #384	; 0x180
 80127ae:	4851      	ldr	r0, [pc, #324]	; (80128f4 <shell_par_set+0x244>)
 80127b0:	f003 fbca 	bl	8015f48 <sniprintf>
				break;
 80127b4:	e07d      	b.n	80128b2 <shell_par_set+0x202>

				case ePAR_TYPE_U16:
					par_data.u16 = (uint16_t)par_data.f32;
 80127b6:	edd7 7a03 	vldr	s15, [r7, #12]
 80127ba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80127be:	ee17 3a90 	vmov	r3, s15
 80127c2:	b29b      	uxth	r3, r3
 80127c4:	81bb      	strh	r3, [r7, #12]
					status = par_set( par_num, (uint16_t*) &par_data.u16 );
 80127c6:	f107 020c 	add.w	r2, r7, #12
 80127ca:	7dfb      	ldrb	r3, [r7, #23]
 80127cc:	4611      	mov	r1, r2
 80127ce:	4618      	mov	r0, r3
 80127d0:	f001 f896 	bl	8013900 <par_set>
 80127d4:	4603      	mov	r3, r0
 80127d6:	757b      	strb	r3, [r7, #21]
					snprintf(gs_output_buffer, SHELL_OUTPUT_LINE_SIZE, "OK,PAR_SET=%u\r", par_data.u16);
 80127d8:	89bb      	ldrh	r3, [r7, #12]
 80127da:	4a45      	ldr	r2, [pc, #276]	; (80128f0 <shell_par_set+0x240>)
 80127dc:	f44f 71c0 	mov.w	r1, #384	; 0x180
 80127e0:	4844      	ldr	r0, [pc, #272]	; (80128f4 <shell_par_set+0x244>)
 80127e2:	f003 fbb1 	bl	8015f48 <sniprintf>
				break;
 80127e6:	e064      	b.n	80128b2 <shell_par_set+0x202>

				case ePAR_TYPE_I16:
					par_data.i16 = (int16_t)par_data.f32;
 80127e8:	edd7 7a03 	vldr	s15, [r7, #12]
 80127ec:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80127f0:	ee17 3a90 	vmov	r3, s15
 80127f4:	b21b      	sxth	r3, r3
 80127f6:	81bb      	strh	r3, [r7, #12]
					status = par_set( par_num, (int16_t*) &par_data.i16 );
 80127f8:	f107 020c 	add.w	r2, r7, #12
 80127fc:	7dfb      	ldrb	r3, [r7, #23]
 80127fe:	4611      	mov	r1, r2
 8012800:	4618      	mov	r0, r3
 8012802:	f001 f87d 	bl	8013900 <par_set>
 8012806:	4603      	mov	r3, r0
 8012808:	757b      	strb	r3, [r7, #21]
					snprintf(gs_output_buffer, SHELL_OUTPUT_LINE_SIZE, "OK,PAR_SET=%i\r", (int) par_data.i16);
 801280a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 801280e:	4a3a      	ldr	r2, [pc, #232]	; (80128f8 <shell_par_set+0x248>)
 8012810:	f44f 71c0 	mov.w	r1, #384	; 0x180
 8012814:	4837      	ldr	r0, [pc, #220]	; (80128f4 <shell_par_set+0x244>)
 8012816:	f003 fb97 	bl	8015f48 <sniprintf>
				break;
 801281a:	e04a      	b.n	80128b2 <shell_par_set+0x202>

				case ePAR_TYPE_U32:
					par_data.u32 = (uint32_t)par_data.f32;
 801281c:	edd7 7a03 	vldr	s15, [r7, #12]
 8012820:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8012824:	ee17 3a90 	vmov	r3, s15
 8012828:	60fb      	str	r3, [r7, #12]
					status = par_set( par_num, (uint32_t*) &par_data.u32 );
 801282a:	f107 020c 	add.w	r2, r7, #12
 801282e:	7dfb      	ldrb	r3, [r7, #23]
 8012830:	4611      	mov	r1, r2
 8012832:	4618      	mov	r0, r3
 8012834:	f001 f864 	bl	8013900 <par_set>
 8012838:	4603      	mov	r3, r0
 801283a:	757b      	strb	r3, [r7, #21]
					snprintf(gs_output_buffer, SHELL_OUTPUT_LINE_SIZE, "OK,PAR_SET=%u\r", (int) par_data.u32);
 801283c:	68fb      	ldr	r3, [r7, #12]
 801283e:	4a2c      	ldr	r2, [pc, #176]	; (80128f0 <shell_par_set+0x240>)
 8012840:	f44f 71c0 	mov.w	r1, #384	; 0x180
 8012844:	482b      	ldr	r0, [pc, #172]	; (80128f4 <shell_par_set+0x244>)
 8012846:	f003 fb7f 	bl	8015f48 <sniprintf>
				break;
 801284a:	e032      	b.n	80128b2 <shell_par_set+0x202>

				case ePAR_TYPE_I32:
					par_data.i32 = (int32_t)par_data.f32;
 801284c:	edd7 7a03 	vldr	s15, [r7, #12]
 8012850:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8012854:	ee17 3a90 	vmov	r3, s15
 8012858:	60fb      	str	r3, [r7, #12]
					status = par_set( par_num, (int32_t*) &par_data.i32 );
 801285a:	f107 020c 	add.w	r2, r7, #12
 801285e:	7dfb      	ldrb	r3, [r7, #23]
 8012860:	4611      	mov	r1, r2
 8012862:	4618      	mov	r0, r3
 8012864:	f001 f84c 	bl	8013900 <par_set>
 8012868:	4603      	mov	r3, r0
 801286a:	757b      	strb	r3, [r7, #21]
					snprintf(gs_output_buffer, SHELL_OUTPUT_LINE_SIZE, "OK,PAR_SET=%i\r", (int) par_data.i32);
 801286c:	68fb      	ldr	r3, [r7, #12]
 801286e:	4a22      	ldr	r2, [pc, #136]	; (80128f8 <shell_par_set+0x248>)
 8012870:	f44f 71c0 	mov.w	r1, #384	; 0x180
 8012874:	481f      	ldr	r0, [pc, #124]	; (80128f4 <shell_par_set+0x244>)
 8012876:	f003 fb67 	bl	8015f48 <sniprintf>
				break;
 801287a:	e01a      	b.n	80128b2 <shell_par_set+0x202>

				case ePAR_TYPE_F32:
					status = par_set( par_num, (float32_t*) &par_data.f32 );
 801287c:	f107 020c 	add.w	r2, r7, #12
 8012880:	7dfb      	ldrb	r3, [r7, #23]
 8012882:	4611      	mov	r1, r2
 8012884:	4618      	mov	r0, r3
 8012886:	f001 f83b 	bl	8013900 <par_set>
 801288a:	4603      	mov	r3, r0
 801288c:	757b      	strb	r3, [r7, #21]
					snprintf(gs_output_buffer, SHELL_OUTPUT_LINE_SIZE, "OK,PAR_SET=%g\r", par_data.f32);
 801288e:	68fb      	ldr	r3, [r7, #12]
 8012890:	4618      	mov	r0, r3
 8012892:	f7ed fe89 	bl	80005a8 <__aeabi_f2d>
 8012896:	4602      	mov	r2, r0
 8012898:	460b      	mov	r3, r1
 801289a:	e9cd 2300 	strd	r2, r3, [sp]
 801289e:	4a17      	ldr	r2, [pc, #92]	; (80128fc <shell_par_set+0x24c>)
 80128a0:	f44f 71c0 	mov.w	r1, #384	; 0x180
 80128a4:	4813      	ldr	r0, [pc, #76]	; (80128f4 <shell_par_set+0x244>)
 80128a6:	f003 fb4f 	bl	8015f48 <sniprintf>
				break;
 80128aa:	e002      	b.n	80128b2 <shell_par_set+0x202>

				default:
					status = ePAR_ERROR;
 80128ac:	2304      	movs	r3, #4
 80128ae:	757b      	strb	r3, [r7, #21]
				break;
 80128b0:	bf00      	nop
			}

			if ( ePAR_OK != status )
 80128b2:	7d7b      	ldrb	r3, [r7, #21]
 80128b4:	2b00      	cmp	r3, #0
 80128b6:	d00d      	beq.n	80128d4 <shell_par_set+0x224>
			{
				snprintf(gs_output_buffer, SHELL_OUTPUT_LINE_SIZE, "ERR %u, Cannot write value!\r", (uint16_t)status);
 80128b8:	7d7b      	ldrb	r3, [r7, #21]
 80128ba:	4a11      	ldr	r2, [pc, #68]	; (8012900 <shell_par_set+0x250>)
 80128bc:	f44f 71c0 	mov.w	r1, #384	; 0x180
 80128c0:	480c      	ldr	r0, [pc, #48]	; (80128f4 <shell_par_set+0x244>)
 80128c2:	f003 fb41 	bl	8015f48 <sniprintf>
 80128c6:	e005      	b.n	80128d4 <shell_par_set+0x224>
			}
		}
		else
		{
			snprintf(gs_output_buffer, SHELL_OUTPUT_LINE_SIZE, "ERR, Parameter is read only!\r");
 80128c8:	4a0e      	ldr	r2, [pc, #56]	; (8012904 <shell_par_set+0x254>)
 80128ca:	f44f 71c0 	mov.w	r1, #384	; 0x180
 80128ce:	4809      	ldr	r0, [pc, #36]	; (80128f4 <shell_par_set+0x244>)
 80128d0:	f003 fb3a 	bl	8015f48 <sniprintf>
		}

		shell_write(gs_output_buffer);
 80128d4:	4807      	ldr	r0, [pc, #28]	; (80128f4 <shell_par_set+0x244>)
 80128d6:	f7ff fa83 	bl	8011de0 <shell_write>
	}
	else
	{
		shell_write("ERR, Wrong parameter!\r");
	}
}
 80128da:	e002      	b.n	80128e2 <shell_par_set+0x232>
		shell_write("ERR, Wrong parameter!\r");
 80128dc:	480a      	ldr	r0, [pc, #40]	; (8012908 <shell_par_set+0x258>)
 80128de:	f7ff fa7f 	bl	8011de0 <shell_write>
}
 80128e2:	bf00      	nop
 80128e4:	3718      	adds	r7, #24
 80128e6:	46bd      	mov	sp, r7
 80128e8:	bd80      	pop	{r7, pc}
 80128ea:	bf00      	nop
 80128ec:	0801aa2c 	.word	0x0801aa2c
 80128f0:	0801aa3c 	.word	0x0801aa3c
 80128f4:	2000545c 	.word	0x2000545c
 80128f8:	0801aa4c 	.word	0x0801aa4c
 80128fc:	0801aa5c 	.word	0x0801aa5c
 8012900:	0801aa6c 	.word	0x0801aa6c
 8012904:	0801aa8c 	.word	0x0801aa8c
 8012908:	0801aaac 	.word	0x0801aaac

0801290c <shell_par_get>:
* @param[in] 	pc_line	- Input command from shell
* @return 		void
*/
////////////////////////////////////////////////////////////////////////////////
static void shell_par_get(const char* pc_line)
{
 801290c:	b580      	push	{r7, lr}
 801290e:	b088      	sub	sp, #32
 8012910:	af02      	add	r7, sp, #8
 8012912:	6078      	str	r0, [r7, #4]
	uint16_t 	   	par_id		= 0UL;
 8012914:	2300      	movs	r3, #0
 8012916:	81fb      	strh	r3, [r7, #14]
	uint32_t 	   	par_num		= 0UL;
 8012918:	2300      	movs	r3, #0
 801291a:	617b      	str	r3, [r7, #20]
	par_type_list_t	par_type	= ePAR_TYPE_U8;;
 801291c:	2300      	movs	r3, #0
 801291e:	747b      	strb	r3, [r7, #17]
	par_type_t   	par_data	= { .u32 = 0UL };
 8012920:	2300      	movs	r3, #0
 8012922:	60bb      	str	r3, [r7, #8]
	uint8_t	 	   	param_found = 0;
 8012924:	2300      	movs	r3, #0
 8012926:	74fb      	strb	r3, [r7, #19]
	par_status_t	status 		= ePAR_OK;
 8012928:	2300      	movs	r3, #0
 801292a:	74bb      	strb	r3, [r7, #18]

	// Check input command
	if ( 1U == sscanf( pc_line, "par_get %u", (unsigned int*)&par_id ))
 801292c:	f107 030e 	add.w	r3, r7, #14
 8012930:	461a      	mov	r2, r3
 8012932:	496a      	ldr	r1, [pc, #424]	; (8012adc <shell_par_get+0x1d0>)
 8012934:	6878      	ldr	r0, [r7, #4]
 8012936:	f003 fb5b 	bl	8015ff0 <siscanf>
 801293a:	4603      	mov	r3, r0
 801293c:	2b01      	cmp	r3, #1
 801293e:	d10a      	bne.n	8012956 <shell_par_get+0x4a>
	{
		// Get parameter number from ID
		par_num = par_get_num_by_id( par_id );
 8012940:	89fb      	ldrh	r3, [r7, #14]
 8012942:	4618      	mov	r0, r3
 8012944:	f000 ffa6 	bl	8013894 <par_get_num_by_id>
 8012948:	4603      	mov	r3, r0
 801294a:	617b      	str	r3, [r7, #20]

		// Check for validy
		if ( par_num < ePAR_NUM_OF )
 801294c:	697b      	ldr	r3, [r7, #20]
 801294e:	2b13      	cmp	r3, #19
 8012950:	d801      	bhi.n	8012956 <shell_par_get+0x4a>
		{
			param_found = 1;
 8012952:	2301      	movs	r3, #1
 8012954:	74fb      	strb	r3, [r7, #19]
	else
	{
		// Unsupported par_get
	}

	par_type = par_get_data_type( par_num );
 8012956:	697b      	ldr	r3, [r7, #20]
 8012958:	b2db      	uxtb	r3, r3
 801295a:	4618      	mov	r0, r3
 801295c:	f001 f9e6 	bl	8013d2c <par_get_data_type>
 8012960:	4603      	mov	r3, r0
 8012962:	747b      	strb	r3, [r7, #17]

	// Was parameter found?
	if ( 1 == param_found )
 8012964:	7cfb      	ldrb	r3, [r7, #19]
 8012966:	2b01      	cmp	r3, #1
 8012968:	f040 80b0 	bne.w	8012acc <shell_par_get+0x1c0>
	{
		par_data.u32 = 0;
 801296c:	2300      	movs	r3, #0
 801296e:	60bb      	str	r3, [r7, #8]

		switch ( par_type )
 8012970:	7c7b      	ldrb	r3, [r7, #17]
 8012972:	2b06      	cmp	r3, #6
 8012974:	f200 8099 	bhi.w	8012aaa <shell_par_get+0x19e>
 8012978:	a201      	add	r2, pc, #4	; (adr r2, 8012980 <shell_par_get+0x74>)
 801297a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801297e:	bf00      	nop
 8012980:	0801299d 	.word	0x0801299d
 8012984:	080129e7 	.word	0x080129e7
 8012988:	08012a31 	.word	0x08012a31
 801298c:	080129c1 	.word	0x080129c1
 8012990:	08012a0b 	.word	0x08012a0b
 8012994:	08012a55 	.word	0x08012a55
 8012998:	08012a79 	.word	0x08012a79
		{
			case ePAR_TYPE_U8:
				status = par_get( par_num, (uint8_t*) &par_data.u8 );
 801299c:	697b      	ldr	r3, [r7, #20]
 801299e:	b2db      	uxtb	r3, r3
 80129a0:	f107 0208 	add.w	r2, r7, #8
 80129a4:	4611      	mov	r1, r2
 80129a6:	4618      	mov	r0, r3
 80129a8:	f001 f83e 	bl	8013a28 <par_get>
 80129ac:	4603      	mov	r3, r0
 80129ae:	74bb      	strb	r3, [r7, #18]
				snprintf(gs_output_buffer, SHELL_OUTPUT_LINE_SIZE, "OK,PAR_GET=%u\r", par_data.u8 );
 80129b0:	7a3b      	ldrb	r3, [r7, #8]
 80129b2:	4a4b      	ldr	r2, [pc, #300]	; (8012ae0 <shell_par_get+0x1d4>)
 80129b4:	f44f 71c0 	mov.w	r1, #384	; 0x180
 80129b8:	484a      	ldr	r0, [pc, #296]	; (8012ae4 <shell_par_get+0x1d8>)
 80129ba:	f003 fac5 	bl	8015f48 <sniprintf>
			break;
 80129be:	e077      	b.n	8012ab0 <shell_par_get+0x1a4>

			case ePAR_TYPE_I8:
				status = par_get( par_num, (int8_t*) &par_data.i8 );
 80129c0:	697b      	ldr	r3, [r7, #20]
 80129c2:	b2db      	uxtb	r3, r3
 80129c4:	f107 0208 	add.w	r2, r7, #8
 80129c8:	4611      	mov	r1, r2
 80129ca:	4618      	mov	r0, r3
 80129cc:	f001 f82c 	bl	8013a28 <par_get>
 80129d0:	4603      	mov	r3, r0
 80129d2:	74bb      	strb	r3, [r7, #18]
				snprintf(gs_output_buffer, SHELL_OUTPUT_LINE_SIZE, "OK,PAR_GET=%i\r", (int) par_data.i8 );
 80129d4:	f997 3008 	ldrsb.w	r3, [r7, #8]
 80129d8:	4a43      	ldr	r2, [pc, #268]	; (8012ae8 <shell_par_get+0x1dc>)
 80129da:	f44f 71c0 	mov.w	r1, #384	; 0x180
 80129de:	4841      	ldr	r0, [pc, #260]	; (8012ae4 <shell_par_get+0x1d8>)
 80129e0:	f003 fab2 	bl	8015f48 <sniprintf>
			break;
 80129e4:	e064      	b.n	8012ab0 <shell_par_get+0x1a4>

			case ePAR_TYPE_U16:
				status = par_get( par_num, (uint16_t*) &par_data.u16 );
 80129e6:	697b      	ldr	r3, [r7, #20]
 80129e8:	b2db      	uxtb	r3, r3
 80129ea:	f107 0208 	add.w	r2, r7, #8
 80129ee:	4611      	mov	r1, r2
 80129f0:	4618      	mov	r0, r3
 80129f2:	f001 f819 	bl	8013a28 <par_get>
 80129f6:	4603      	mov	r3, r0
 80129f8:	74bb      	strb	r3, [r7, #18]
				snprintf(gs_output_buffer, SHELL_OUTPUT_LINE_SIZE, "OK,PAR_GET=%u\r", par_data.u16 );
 80129fa:	893b      	ldrh	r3, [r7, #8]
 80129fc:	4a38      	ldr	r2, [pc, #224]	; (8012ae0 <shell_par_get+0x1d4>)
 80129fe:	f44f 71c0 	mov.w	r1, #384	; 0x180
 8012a02:	4838      	ldr	r0, [pc, #224]	; (8012ae4 <shell_par_get+0x1d8>)
 8012a04:	f003 faa0 	bl	8015f48 <sniprintf>
			break;
 8012a08:	e052      	b.n	8012ab0 <shell_par_get+0x1a4>

			case ePAR_TYPE_I16:
				status = par_get( par_num, (int16_t*) &par_data.i16 );
 8012a0a:	697b      	ldr	r3, [r7, #20]
 8012a0c:	b2db      	uxtb	r3, r3
 8012a0e:	f107 0208 	add.w	r2, r7, #8
 8012a12:	4611      	mov	r1, r2
 8012a14:	4618      	mov	r0, r3
 8012a16:	f001 f807 	bl	8013a28 <par_get>
 8012a1a:	4603      	mov	r3, r0
 8012a1c:	74bb      	strb	r3, [r7, #18]
				snprintf(gs_output_buffer, SHELL_OUTPUT_LINE_SIZE, "OK,PAR_GET=%i\r", (int) par_data.i16 );
 8012a1e:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8012a22:	4a31      	ldr	r2, [pc, #196]	; (8012ae8 <shell_par_get+0x1dc>)
 8012a24:	f44f 71c0 	mov.w	r1, #384	; 0x180
 8012a28:	482e      	ldr	r0, [pc, #184]	; (8012ae4 <shell_par_get+0x1d8>)
 8012a2a:	f003 fa8d 	bl	8015f48 <sniprintf>
			break;
 8012a2e:	e03f      	b.n	8012ab0 <shell_par_get+0x1a4>

			case ePAR_TYPE_U32:
				status = par_get( par_num, (uint32_t*) &par_data.u32 );
 8012a30:	697b      	ldr	r3, [r7, #20]
 8012a32:	b2db      	uxtb	r3, r3
 8012a34:	f107 0208 	add.w	r2, r7, #8
 8012a38:	4611      	mov	r1, r2
 8012a3a:	4618      	mov	r0, r3
 8012a3c:	f000 fff4 	bl	8013a28 <par_get>
 8012a40:	4603      	mov	r3, r0
 8012a42:	74bb      	strb	r3, [r7, #18]
				snprintf(gs_output_buffer, SHELL_OUTPUT_LINE_SIZE, "OK,PAR_GET=%u\r", (int) par_data.u32 );
 8012a44:	68bb      	ldr	r3, [r7, #8]
 8012a46:	4a26      	ldr	r2, [pc, #152]	; (8012ae0 <shell_par_get+0x1d4>)
 8012a48:	f44f 71c0 	mov.w	r1, #384	; 0x180
 8012a4c:	4825      	ldr	r0, [pc, #148]	; (8012ae4 <shell_par_get+0x1d8>)
 8012a4e:	f003 fa7b 	bl	8015f48 <sniprintf>
			break;
 8012a52:	e02d      	b.n	8012ab0 <shell_par_get+0x1a4>

			case ePAR_TYPE_I32:
				status = par_get( par_num, (int32_t*) &par_data.i32 );
 8012a54:	697b      	ldr	r3, [r7, #20]
 8012a56:	b2db      	uxtb	r3, r3
 8012a58:	f107 0208 	add.w	r2, r7, #8
 8012a5c:	4611      	mov	r1, r2
 8012a5e:	4618      	mov	r0, r3
 8012a60:	f000 ffe2 	bl	8013a28 <par_get>
 8012a64:	4603      	mov	r3, r0
 8012a66:	74bb      	strb	r3, [r7, #18]
				snprintf(gs_output_buffer, SHELL_OUTPUT_LINE_SIZE, "OK,PAR_GET=%i\r", (int) par_data.i32 );
 8012a68:	68bb      	ldr	r3, [r7, #8]
 8012a6a:	4a1f      	ldr	r2, [pc, #124]	; (8012ae8 <shell_par_get+0x1dc>)
 8012a6c:	f44f 71c0 	mov.w	r1, #384	; 0x180
 8012a70:	481c      	ldr	r0, [pc, #112]	; (8012ae4 <shell_par_get+0x1d8>)
 8012a72:	f003 fa69 	bl	8015f48 <sniprintf>
			break;
 8012a76:	e01b      	b.n	8012ab0 <shell_par_get+0x1a4>

			case ePAR_TYPE_F32:
				status = par_get( par_num, (float32_t*) &par_data.f32 );
 8012a78:	697b      	ldr	r3, [r7, #20]
 8012a7a:	b2db      	uxtb	r3, r3
 8012a7c:	f107 0208 	add.w	r2, r7, #8
 8012a80:	4611      	mov	r1, r2
 8012a82:	4618      	mov	r0, r3
 8012a84:	f000 ffd0 	bl	8013a28 <par_get>
 8012a88:	4603      	mov	r3, r0
 8012a8a:	74bb      	strb	r3, [r7, #18]
				snprintf(gs_output_buffer, SHELL_OUTPUT_LINE_SIZE, "OK,PAR_GET=%g\r", par_data.f32 );
 8012a8c:	68bb      	ldr	r3, [r7, #8]
 8012a8e:	4618      	mov	r0, r3
 8012a90:	f7ed fd8a 	bl	80005a8 <__aeabi_f2d>
 8012a94:	4602      	mov	r2, r0
 8012a96:	460b      	mov	r3, r1
 8012a98:	e9cd 2300 	strd	r2, r3, [sp]
 8012a9c:	4a13      	ldr	r2, [pc, #76]	; (8012aec <shell_par_get+0x1e0>)
 8012a9e:	f44f 71c0 	mov.w	r1, #384	; 0x180
 8012aa2:	4810      	ldr	r0, [pc, #64]	; (8012ae4 <shell_par_get+0x1d8>)
 8012aa4:	f003 fa50 	bl	8015f48 <sniprintf>
			break;
 8012aa8:	e002      	b.n	8012ab0 <shell_par_get+0x1a4>

			default:
				status = ePAR_ERROR;
 8012aaa:	2304      	movs	r3, #4
 8012aac:	74bb      	strb	r3, [r7, #18]
			break;
 8012aae:	bf00      	nop
		}

		if ( ePAR_OK != status )
 8012ab0:	7cbb      	ldrb	r3, [r7, #18]
 8012ab2:	2b00      	cmp	r3, #0
 8012ab4:	d006      	beq.n	8012ac4 <shell_par_get+0x1b8>
		{
			snprintf(gs_output_buffer, SHELL_OUTPUT_LINE_SIZE, "ERR %u, Cannot read value!\r", (uint16_t)status);
 8012ab6:	7cbb      	ldrb	r3, [r7, #18]
 8012ab8:	4a0d      	ldr	r2, [pc, #52]	; (8012af0 <shell_par_get+0x1e4>)
 8012aba:	f44f 71c0 	mov.w	r1, #384	; 0x180
 8012abe:	4809      	ldr	r0, [pc, #36]	; (8012ae4 <shell_par_get+0x1d8>)
 8012ac0:	f003 fa42 	bl	8015f48 <sniprintf>
		}

		uart_dbg_write(gs_output_buffer);
 8012ac4:	4807      	ldr	r0, [pc, #28]	; (8012ae4 <shell_par_get+0x1d8>)
 8012ac6:	f7ff f893 	bl	8011bf0 <uart_dbg_write>
	}
	else
	{
		shell_write("ERR, Wrong parameter!\r");
	}
}
 8012aca:	e002      	b.n	8012ad2 <shell_par_get+0x1c6>
		shell_write("ERR, Wrong parameter!\r");
 8012acc:	4809      	ldr	r0, [pc, #36]	; (8012af4 <shell_par_get+0x1e8>)
 8012ace:	f7ff f987 	bl	8011de0 <shell_write>
}
 8012ad2:	bf00      	nop
 8012ad4:	3718      	adds	r7, #24
 8012ad6:	46bd      	mov	sp, r7
 8012ad8:	bd80      	pop	{r7, pc}
 8012ada:	bf00      	nop
 8012adc:	0801aac4 	.word	0x0801aac4
 8012ae0:	0801aad0 	.word	0x0801aad0
 8012ae4:	2000545c 	.word	0x2000545c
 8012ae8:	0801aae0 	.word	0x0801aae0
 8012aec:	0801aaf0 	.word	0x0801aaf0
 8012af0:	0801ab00 	.word	0x0801ab00
 8012af4:	0801aaac 	.word	0x0801aaac

08012af8 <shell_par_def>:
* @param[in] 	pc_line	- Input command from shell
* @return 		void
*/
////////////////////////////////////////////////////////////////////////////////
static void shell_par_def(const char* pc_line)
{
 8012af8:	b580      	push	{r7, lr}
 8012afa:	b084      	sub	sp, #16
 8012afc:	af00      	add	r7, sp, #0
 8012afe:	6078      	str	r0, [r7, #4]
	uint32_t 	par_num	= 0UL;
 8012b00:	2300      	movs	r3, #0
 8012b02:	60fb      	str	r3, [r7, #12]
	uint16_t	par_id	= 0UL;
 8012b04:	2300      	movs	r3, #0
 8012b06:	817b      	strh	r3, [r7, #10]

	// Check input command
	if ( 1U == sscanf( pc_line, "par_def %u", (unsigned int*)&par_id ))
 8012b08:	f107 030a 	add.w	r3, r7, #10
 8012b0c:	461a      	mov	r2, r3
 8012b0e:	490e      	ldr	r1, [pc, #56]	; (8012b48 <shell_par_def+0x50>)
 8012b10:	6878      	ldr	r0, [r7, #4]
 8012b12:	f003 fa6d 	bl	8015ff0 <siscanf>
 8012b16:	4603      	mov	r3, r0
 8012b18:	2b01      	cmp	r3, #1
 8012b1a:	d10e      	bne.n	8012b3a <shell_par_def+0x42>
	{
		// Get parameter number from ID
		par_num = par_get_num_by_id( par_id );
 8012b1c:	897b      	ldrh	r3, [r7, #10]
 8012b1e:	4618      	mov	r0, r3
 8012b20:	f000 feb8 	bl	8013894 <par_get_num_by_id>
 8012b24:	4603      	mov	r3, r0
 8012b26:	60fb      	str	r3, [r7, #12]

		// Set to default
		par_set_to_default( par_num );
 8012b28:	68fb      	ldr	r3, [r7, #12]
 8012b2a:	b2db      	uxtb	r3, r3
 8012b2c:	4618      	mov	r0, r3
 8012b2e:	f001 f817 	bl	8013b60 <par_set_to_default>

		// Rtn msg
		shell_write( "PAR SET TO DEFAULT\r" );
 8012b32:	4806      	ldr	r0, [pc, #24]	; (8012b4c <shell_par_def+0x54>)
 8012b34:	f7ff f954 	bl	8011de0 <shell_write>
	}
	else
	{
		shell_write( "ERR, INVALID INPUT\r" );
	}
}
 8012b38:	e002      	b.n	8012b40 <shell_par_def+0x48>
		shell_write( "ERR, INVALID INPUT\r" );
 8012b3a:	4805      	ldr	r0, [pc, #20]	; (8012b50 <shell_par_def+0x58>)
 8012b3c:	f7ff f950 	bl	8011de0 <shell_write>
}
 8012b40:	bf00      	nop
 8012b42:	3710      	adds	r7, #16
 8012b44:	46bd      	mov	sp, r7
 8012b46:	bd80      	pop	{r7, pc}
 8012b48:	0801ab1c 	.word	0x0801ab1c
 8012b4c:	0801ab28 	.word	0x0801ab28
 8012b50:	0801ab3c 	.word	0x0801ab3c

08012b54 <shell_par_def_all>:
* @param[in] 	pc_line	- Input command from shell
* @return 		void
*/
////////////////////////////////////////////////////////////////////////////////
static void shell_par_def_all(const char* pc_line)
{
 8012b54:	b580      	push	{r7, lr}
 8012b56:	b082      	sub	sp, #8
 8012b58:	af00      	add	r7, sp, #0
 8012b5a:	6078      	str	r0, [r7, #4]
	// Set to default
	par_set_all_to_default();
 8012b5c:	f001 f842 	bl	8013be4 <par_set_all_to_default>

	// Rtn msg
	shell_write( "PAR SET TO DEFAULT\r" );
 8012b60:	4803      	ldr	r0, [pc, #12]	; (8012b70 <shell_par_def_all+0x1c>)
 8012b62:	f7ff f93d 	bl	8011de0 <shell_write>
}
 8012b66:	bf00      	nop
 8012b68:	3708      	adds	r7, #8
 8012b6a:	46bd      	mov	sp, r7
 8012b6c:	bd80      	pop	{r7, pc}
 8012b6e:	bf00      	nop
 8012b70:	0801ab28 	.word	0x0801ab28

08012b74 <shell_par_save>:
* @param[in] 	pc_line	- Input command from shell
* @return 		void
*/
////////////////////////////////////////////////////////////////////////////////
static void shell_par_save(const char* pc_line)
{
 8012b74:	b580      	push	{r7, lr}
 8012b76:	b082      	sub	sp, #8
 8012b78:	af00      	add	r7, sp, #0
 8012b7a:	6078      	str	r0, [r7, #4]
	#if ( 1 == PAR_CFG_NVM_EN )

		if ( ePAR_OK == par_store_all_to_nvm())
 8012b7c:	f001 f94e 	bl	8013e1c <par_store_all_to_nvm>
 8012b80:	4603      	mov	r3, r0
 8012b82:	2b00      	cmp	r3, #0
 8012b84:	d103      	bne.n	8012b8e <shell_par_save+0x1a>
		{
			shell_write( "OK, PAR STORED TO NVM\r" );
 8012b86:	4805      	ldr	r0, [pc, #20]	; (8012b9c <shell_par_save+0x28>)
 8012b88:	f7ff f92a 	bl	8011de0 <shell_write>
	#else

		shell_write( "ERR, STORING NOT SUPPORTED\r" );

	#endif
}
 8012b8c:	e002      	b.n	8012b94 <shell_par_save+0x20>
			shell_write( "ERR, STORING TO NVM\r" );
 8012b8e:	4804      	ldr	r0, [pc, #16]	; (8012ba0 <shell_par_save+0x2c>)
 8012b90:	f7ff f926 	bl	8011de0 <shell_write>
}
 8012b94:	bf00      	nop
 8012b96:	3708      	adds	r7, #8
 8012b98:	46bd      	mov	sp, r7
 8012b9a:	bd80      	pop	{r7, pc}
 8012b9c:	0801ab50 	.word	0x0801ab50
 8012ba0:	0801ab68 	.word	0x0801ab68

08012ba4 <shell_com_dbg_info>:
* @param[in] 	none
* @return 		none
*/
////////////////////////////////////////////////////////////////////////////////
static void shell_com_dbg_info(const char* pc_line)
{
 8012ba4:	b580      	push	{r7, lr}
 8012ba6:	b086      	sub	sp, #24
 8012ba8:	af02      	add	r7, sp, #8
 8012baa:	6078      	str	r0, [r7, #4]
	uint16_t i;
	static uint8_t str[64];

	shell_write((const char*) ("--------DEBUG CHANNELS-------\r"));
 8012bac:	481e      	ldr	r0, [pc, #120]	; (8012c28 <shell_com_dbg_info+0x84>)
 8012bae:	f7ff f917 	bl	8011de0 <shell_write>
	sprintf((char*) &str, "%-6s %-12s %-4s\r", "idx", "ch name", "en");
 8012bb2:	4b1e      	ldr	r3, [pc, #120]	; (8012c2c <shell_com_dbg_info+0x88>)
 8012bb4:	9300      	str	r3, [sp, #0]
 8012bb6:	4b1e      	ldr	r3, [pc, #120]	; (8012c30 <shell_com_dbg_info+0x8c>)
 8012bb8:	4a1e      	ldr	r2, [pc, #120]	; (8012c34 <shell_com_dbg_info+0x90>)
 8012bba:	491f      	ldr	r1, [pc, #124]	; (8012c38 <shell_com_dbg_info+0x94>)
 8012bbc:	481f      	ldr	r0, [pc, #124]	; (8012c3c <shell_com_dbg_info+0x98>)
 8012bbe:	f003 f9f7 	bl	8015fb0 <siprintf>
	shell_write((const char*) &str);
 8012bc2:	481e      	ldr	r0, [pc, #120]	; (8012c3c <shell_com_dbg_info+0x98>)
 8012bc4:	f7ff f90c 	bl	8011de0 <shell_write>
	shell_write((const char*) ("-----------------------------\r"));
 8012bc8:	481d      	ldr	r0, [pc, #116]	; (8012c40 <shell_com_dbg_info+0x9c>)
 8012bca:	f7ff f909 	bl	8011de0 <shell_write>

	for ( i = 0; i < eCOM_DBG_CH_NUM_OF; i++ )
 8012bce:	2300      	movs	r3, #0
 8012bd0:	81fb      	strh	r3, [r7, #14]
 8012bd2:	e01e      	b.n	8012c12 <shell_com_dbg_info+0x6e>
	{
		sprintf((char*) &str, "%-6d %-12s %-4s\r", i, gp_com_dbg_cfg[i].name, (( gp_com_dbg_cfg[i].en ) ? ( "ON" ) : ( "OFF" ) ));
 8012bd4:	89f9      	ldrh	r1, [r7, #14]
 8012bd6:	4b1b      	ldr	r3, [pc, #108]	; (8012c44 <shell_com_dbg_info+0xa0>)
 8012bd8:	681a      	ldr	r2, [r3, #0]
 8012bda:	89fb      	ldrh	r3, [r7, #14]
 8012bdc:	00db      	lsls	r3, r3, #3
 8012bde:	4413      	add	r3, r2
 8012be0:	6818      	ldr	r0, [r3, #0]
 8012be2:	4b18      	ldr	r3, [pc, #96]	; (8012c44 <shell_com_dbg_info+0xa0>)
 8012be4:	681a      	ldr	r2, [r3, #0]
 8012be6:	89fb      	ldrh	r3, [r7, #14]
 8012be8:	00db      	lsls	r3, r3, #3
 8012bea:	4413      	add	r3, r2
 8012bec:	791b      	ldrb	r3, [r3, #4]
 8012bee:	2b00      	cmp	r3, #0
 8012bf0:	d001      	beq.n	8012bf6 <shell_com_dbg_info+0x52>
 8012bf2:	4b15      	ldr	r3, [pc, #84]	; (8012c48 <shell_com_dbg_info+0xa4>)
 8012bf4:	e000      	b.n	8012bf8 <shell_com_dbg_info+0x54>
 8012bf6:	4b15      	ldr	r3, [pc, #84]	; (8012c4c <shell_com_dbg_info+0xa8>)
 8012bf8:	9300      	str	r3, [sp, #0]
 8012bfa:	4603      	mov	r3, r0
 8012bfc:	460a      	mov	r2, r1
 8012bfe:	4914      	ldr	r1, [pc, #80]	; (8012c50 <shell_com_dbg_info+0xac>)
 8012c00:	480e      	ldr	r0, [pc, #56]	; (8012c3c <shell_com_dbg_info+0x98>)
 8012c02:	f003 f9d5 	bl	8015fb0 <siprintf>
		shell_write((const char*) &str);
 8012c06:	480d      	ldr	r0, [pc, #52]	; (8012c3c <shell_com_dbg_info+0x98>)
 8012c08:	f7ff f8ea 	bl	8011de0 <shell_write>
	for ( i = 0; i < eCOM_DBG_CH_NUM_OF; i++ )
 8012c0c:	89fb      	ldrh	r3, [r7, #14]
 8012c0e:	3301      	adds	r3, #1
 8012c10:	81fb      	strh	r3, [r7, #14]
 8012c12:	89fb      	ldrh	r3, [r7, #14]
 8012c14:	2b03      	cmp	r3, #3
 8012c16:	d9dd      	bls.n	8012bd4 <shell_com_dbg_info+0x30>
	}
	shell_write((const char*) ("-----------------------------\r"));
 8012c18:	4809      	ldr	r0, [pc, #36]	; (8012c40 <shell_com_dbg_info+0x9c>)
 8012c1a:	f7ff f8e1 	bl	8011de0 <shell_write>
}
 8012c1e:	bf00      	nop
 8012c20:	3710      	adds	r7, #16
 8012c22:	46bd      	mov	sp, r7
 8012c24:	bd80      	pop	{r7, pc}
 8012c26:	bf00      	nop
 8012c28:	0801ab80 	.word	0x0801ab80
 8012c2c:	0801abc0 	.word	0x0801abc0
 8012c30:	0801aba0 	.word	0x0801aba0
 8012c34:	0801aba8 	.word	0x0801aba8
 8012c38:	0801abac 	.word	0x0801abac
 8012c3c:	20005600 	.word	0x20005600
 8012c40:	0801abc4 	.word	0x0801abc4
 8012c44:	200055dc 	.word	0x200055dc
 8012c48:	0801abe4 	.word	0x0801abe4
 8012c4c:	0801abe8 	.word	0x0801abe8
 8012c50:	0801abec 	.word	0x0801abec

08012c54 <shell_com_dbg_enable>:
* @param[in] 	none
* @return 		none
*/
////////////////////////////////////////////////////////////////////////////////
static void shell_com_dbg_enable(const char* pc_line)
{
 8012c54:	b580      	push	{r7, lr}
 8012c56:	b084      	sub	sp, #16
 8012c58:	af00      	add	r7, sp, #0
 8012c5a:	6078      	str	r0, [r7, #4]
	int nrofpar;
	static char opt[16];
	static char str[32];
	uint16_t i = 0;
 8012c5c:	2300      	movs	r3, #0
 8012c5e:	81fb      	strh	r3, [r7, #14]

	nrofpar = sscanf(pc_line,"%s %s", str, opt);
 8012c60:	4b29      	ldr	r3, [pc, #164]	; (8012d08 <shell_com_dbg_enable+0xb4>)
 8012c62:	4a2a      	ldr	r2, [pc, #168]	; (8012d0c <shell_com_dbg_enable+0xb8>)
 8012c64:	492a      	ldr	r1, [pc, #168]	; (8012d10 <shell_com_dbg_enable+0xbc>)
 8012c66:	6878      	ldr	r0, [r7, #4]
 8012c68:	f003 f9c2 	bl	8015ff0 <siscanf>
 8012c6c:	60b8      	str	r0, [r7, #8]

	if ( nrofpar != 2)
 8012c6e:	68bb      	ldr	r3, [r7, #8]
 8012c70:	2b02      	cmp	r3, #2
 8012c72:	d003      	beq.n	8012c7c <shell_com_dbg_enable+0x28>
	{
		shell_write("ERROR,INVALID INPUT\r\n");
 8012c74:	4827      	ldr	r0, [pc, #156]	; (8012d14 <shell_com_dbg_enable+0xc0>)
 8012c76:	f7ff f8b3 	bl	8011de0 <shell_write>
		return;
 8012c7a:	e041      	b.n	8012d00 <shell_com_dbg_enable+0xac>
	}

	else
	{
		// Enable all
		if ( 0 == strcmp("all", opt ))
 8012c7c:	4922      	ldr	r1, [pc, #136]	; (8012d08 <shell_com_dbg_enable+0xb4>)
 8012c7e:	4826      	ldr	r0, [pc, #152]	; (8012d18 <shell_com_dbg_enable+0xc4>)
 8012c80:	f7ed fac6 	bl	8000210 <strcmp>
 8012c84:	4603      	mov	r3, r0
 8012c86:	2b00      	cmp	r3, #0
 8012c88:	d113      	bne.n	8012cb2 <shell_com_dbg_enable+0x5e>
		{
			for ( i = 0; i < eCOM_DBG_CH_NUM_OF; i++ )
 8012c8a:	2300      	movs	r3, #0
 8012c8c:	81fb      	strh	r3, [r7, #14]
 8012c8e:	e009      	b.n	8012ca4 <shell_com_dbg_enable+0x50>
			{
				gp_com_dbg_cfg[i].en = true;
 8012c90:	4b22      	ldr	r3, [pc, #136]	; (8012d1c <shell_com_dbg_enable+0xc8>)
 8012c92:	681a      	ldr	r2, [r3, #0]
 8012c94:	89fb      	ldrh	r3, [r7, #14]
 8012c96:	00db      	lsls	r3, r3, #3
 8012c98:	4413      	add	r3, r2
 8012c9a:	2201      	movs	r2, #1
 8012c9c:	711a      	strb	r2, [r3, #4]
			for ( i = 0; i < eCOM_DBG_CH_NUM_OF; i++ )
 8012c9e:	89fb      	ldrh	r3, [r7, #14]
 8012ca0:	3301      	adds	r3, #1
 8012ca2:	81fb      	strh	r3, [r7, #14]
 8012ca4:	89fb      	ldrh	r3, [r7, #14]
 8012ca6:	2b03      	cmp	r3, #3
 8012ca8:	d9f2      	bls.n	8012c90 <shell_com_dbg_enable+0x3c>
			}
			shell_write("OK, all channels enabled!\r");
 8012caa:	481d      	ldr	r0, [pc, #116]	; (8012d20 <shell_com_dbg_enable+0xcc>)
 8012cac:	f7ff f898 	bl	8011de0 <shell_write>
 8012cb0:	e026      	b.n	8012d00 <shell_com_dbg_enable+0xac>
		}
		
		// Enable specific channel
		else
		{
			for ( i = 0; i < eCOM_DBG_CH_NUM_OF; i++ )
 8012cb2:	2300      	movs	r3, #0
 8012cb4:	81fb      	strh	r3, [r7, #14]
 8012cb6:	e01a      	b.n	8012cee <shell_com_dbg_enable+0x9a>
			{
				if ( 0 ==  strcmp(opt, gp_com_dbg_cfg[i].name))
 8012cb8:	4b18      	ldr	r3, [pc, #96]	; (8012d1c <shell_com_dbg_enable+0xc8>)
 8012cba:	681a      	ldr	r2, [r3, #0]
 8012cbc:	89fb      	ldrh	r3, [r7, #14]
 8012cbe:	00db      	lsls	r3, r3, #3
 8012cc0:	4413      	add	r3, r2
 8012cc2:	681b      	ldr	r3, [r3, #0]
 8012cc4:	4619      	mov	r1, r3
 8012cc6:	4810      	ldr	r0, [pc, #64]	; (8012d08 <shell_com_dbg_enable+0xb4>)
 8012cc8:	f7ed faa2 	bl	8000210 <strcmp>
 8012ccc:	4603      	mov	r3, r0
 8012cce:	2b00      	cmp	r3, #0
 8012cd0:	d10a      	bne.n	8012ce8 <shell_com_dbg_enable+0x94>
				{
					gp_com_dbg_cfg[i].en = true;
 8012cd2:	4b12      	ldr	r3, [pc, #72]	; (8012d1c <shell_com_dbg_enable+0xc8>)
 8012cd4:	681a      	ldr	r2, [r3, #0]
 8012cd6:	89fb      	ldrh	r3, [r7, #14]
 8012cd8:	00db      	lsls	r3, r3, #3
 8012cda:	4413      	add	r3, r2
 8012cdc:	2201      	movs	r2, #1
 8012cde:	711a      	strb	r2, [r3, #4]
					shell_write("OK, channel enabled!\r");
 8012ce0:	4810      	ldr	r0, [pc, #64]	; (8012d24 <shell_com_dbg_enable+0xd0>)
 8012ce2:	f7ff f87d 	bl	8011de0 <shell_write>
					break;
 8012ce6:	e005      	b.n	8012cf4 <shell_com_dbg_enable+0xa0>
			for ( i = 0; i < eCOM_DBG_CH_NUM_OF; i++ )
 8012ce8:	89fb      	ldrh	r3, [r7, #14]
 8012cea:	3301      	adds	r3, #1
 8012cec:	81fb      	strh	r3, [r7, #14]
 8012cee:	89fb      	ldrh	r3, [r7, #14]
 8012cf0:	2b03      	cmp	r3, #3
 8012cf2:	d9e1      	bls.n	8012cb8 <shell_com_dbg_enable+0x64>
				}
			}

			if ( i == eCOM_DBG_CH_NUM_OF )	shell_write("ERROR, INVALID CHANNEL NAME\r");
 8012cf4:	89fb      	ldrh	r3, [r7, #14]
 8012cf6:	2b04      	cmp	r3, #4
 8012cf8:	d102      	bne.n	8012d00 <shell_com_dbg_enable+0xac>
 8012cfa:	480b      	ldr	r0, [pc, #44]	; (8012d28 <shell_com_dbg_enable+0xd4>)
 8012cfc:	f7ff f870 	bl	8011de0 <shell_write>
		}
	}
}
 8012d00:	3710      	adds	r7, #16
 8012d02:	46bd      	mov	sp, r7
 8012d04:	bd80      	pop	{r7, pc}
 8012d06:	bf00      	nop
 8012d08:	20005660 	.word	0x20005660
 8012d0c:	20005640 	.word	0x20005640
 8012d10:	0801ac00 	.word	0x0801ac00
 8012d14:	0801ac08 	.word	0x0801ac08
 8012d18:	0801ac20 	.word	0x0801ac20
 8012d1c:	200055dc 	.word	0x200055dc
 8012d20:	0801ac24 	.word	0x0801ac24
 8012d24:	0801ac40 	.word	0x0801ac40
 8012d28:	0801ac58 	.word	0x0801ac58

08012d2c <shell_com_dbg_disable>:
* @param[in] 	none
* @return 		none
*/
////////////////////////////////////////////////////////////////////////////////
static void shell_com_dbg_disable(const char* pc_line)
{
 8012d2c:	b580      	push	{r7, lr}
 8012d2e:	b084      	sub	sp, #16
 8012d30:	af00      	add	r7, sp, #0
 8012d32:	6078      	str	r0, [r7, #4]
	int nrofpar;
	static char opt[32];
	static char str[32];
	uint16_t i = 0;
 8012d34:	2300      	movs	r3, #0
 8012d36:	81fb      	strh	r3, [r7, #14]

	nrofpar = sscanf(pc_line,"%s %s", str, opt);
 8012d38:	4b29      	ldr	r3, [pc, #164]	; (8012de0 <shell_com_dbg_disable+0xb4>)
 8012d3a:	4a2a      	ldr	r2, [pc, #168]	; (8012de4 <shell_com_dbg_disable+0xb8>)
 8012d3c:	492a      	ldr	r1, [pc, #168]	; (8012de8 <shell_com_dbg_disable+0xbc>)
 8012d3e:	6878      	ldr	r0, [r7, #4]
 8012d40:	f003 f956 	bl	8015ff0 <siscanf>
 8012d44:	60b8      	str	r0, [r7, #8]

	if ( nrofpar != 2)
 8012d46:	68bb      	ldr	r3, [r7, #8]
 8012d48:	2b02      	cmp	r3, #2
 8012d4a:	d003      	beq.n	8012d54 <shell_com_dbg_disable+0x28>
	{
		shell_write("ERROR,INVALID INPUT\r\n");
 8012d4c:	4827      	ldr	r0, [pc, #156]	; (8012dec <shell_com_dbg_disable+0xc0>)
 8012d4e:	f7ff f847 	bl	8011de0 <shell_write>
		return;
 8012d52:	e041      	b.n	8012dd8 <shell_com_dbg_disable+0xac>
	}
	
	else
	{
		// Enable all
		if ( 0 == strcmp("all", opt ))
 8012d54:	4922      	ldr	r1, [pc, #136]	; (8012de0 <shell_com_dbg_disable+0xb4>)
 8012d56:	4826      	ldr	r0, [pc, #152]	; (8012df0 <shell_com_dbg_disable+0xc4>)
 8012d58:	f7ed fa5a 	bl	8000210 <strcmp>
 8012d5c:	4603      	mov	r3, r0
 8012d5e:	2b00      	cmp	r3, #0
 8012d60:	d113      	bne.n	8012d8a <shell_com_dbg_disable+0x5e>
		{
			for ( i = 0; i < eCOM_DBG_CH_NUM_OF; i++ )
 8012d62:	2300      	movs	r3, #0
 8012d64:	81fb      	strh	r3, [r7, #14]
 8012d66:	e009      	b.n	8012d7c <shell_com_dbg_disable+0x50>
			{
				gp_com_dbg_cfg[i].en = false;
 8012d68:	4b22      	ldr	r3, [pc, #136]	; (8012df4 <shell_com_dbg_disable+0xc8>)
 8012d6a:	681a      	ldr	r2, [r3, #0]
 8012d6c:	89fb      	ldrh	r3, [r7, #14]
 8012d6e:	00db      	lsls	r3, r3, #3
 8012d70:	4413      	add	r3, r2
 8012d72:	2200      	movs	r2, #0
 8012d74:	711a      	strb	r2, [r3, #4]
			for ( i = 0; i < eCOM_DBG_CH_NUM_OF; i++ )
 8012d76:	89fb      	ldrh	r3, [r7, #14]
 8012d78:	3301      	adds	r3, #1
 8012d7a:	81fb      	strh	r3, [r7, #14]
 8012d7c:	89fb      	ldrh	r3, [r7, #14]
 8012d7e:	2b03      	cmp	r3, #3
 8012d80:	d9f2      	bls.n	8012d68 <shell_com_dbg_disable+0x3c>
			}
			shell_write("OK, all channel disabled!\r");
 8012d82:	481d      	ldr	r0, [pc, #116]	; (8012df8 <shell_com_dbg_disable+0xcc>)
 8012d84:	f7ff f82c 	bl	8011de0 <shell_write>
 8012d88:	e026      	b.n	8012dd8 <shell_com_dbg_disable+0xac>
		}
		
		// Disable specific channel
		else
		{
			for ( i = 0; i < eCOM_DBG_CH_NUM_OF; i++ )
 8012d8a:	2300      	movs	r3, #0
 8012d8c:	81fb      	strh	r3, [r7, #14]
 8012d8e:	e01a      	b.n	8012dc6 <shell_com_dbg_disable+0x9a>
			{
				if ( 0 ==  strcmp(opt, gp_com_dbg_cfg[i].name))
 8012d90:	4b18      	ldr	r3, [pc, #96]	; (8012df4 <shell_com_dbg_disable+0xc8>)
 8012d92:	681a      	ldr	r2, [r3, #0]
 8012d94:	89fb      	ldrh	r3, [r7, #14]
 8012d96:	00db      	lsls	r3, r3, #3
 8012d98:	4413      	add	r3, r2
 8012d9a:	681b      	ldr	r3, [r3, #0]
 8012d9c:	4619      	mov	r1, r3
 8012d9e:	4810      	ldr	r0, [pc, #64]	; (8012de0 <shell_com_dbg_disable+0xb4>)
 8012da0:	f7ed fa36 	bl	8000210 <strcmp>
 8012da4:	4603      	mov	r3, r0
 8012da6:	2b00      	cmp	r3, #0
 8012da8:	d10a      	bne.n	8012dc0 <shell_com_dbg_disable+0x94>
				{
					gp_com_dbg_cfg[i].en = false;
 8012daa:	4b12      	ldr	r3, [pc, #72]	; (8012df4 <shell_com_dbg_disable+0xc8>)
 8012dac:	681a      	ldr	r2, [r3, #0]
 8012dae:	89fb      	ldrh	r3, [r7, #14]
 8012db0:	00db      	lsls	r3, r3, #3
 8012db2:	4413      	add	r3, r2
 8012db4:	2200      	movs	r2, #0
 8012db6:	711a      	strb	r2, [r3, #4]
					shell_write("OK, channel disabled!\r");
 8012db8:	4810      	ldr	r0, [pc, #64]	; (8012dfc <shell_com_dbg_disable+0xd0>)
 8012dba:	f7ff f811 	bl	8011de0 <shell_write>
					break;
 8012dbe:	e005      	b.n	8012dcc <shell_com_dbg_disable+0xa0>
			for ( i = 0; i < eCOM_DBG_CH_NUM_OF; i++ )
 8012dc0:	89fb      	ldrh	r3, [r7, #14]
 8012dc2:	3301      	adds	r3, #1
 8012dc4:	81fb      	strh	r3, [r7, #14]
 8012dc6:	89fb      	ldrh	r3, [r7, #14]
 8012dc8:	2b03      	cmp	r3, #3
 8012dca:	d9e1      	bls.n	8012d90 <shell_com_dbg_disable+0x64>
				}
			}

			if ( i == eCOM_DBG_CH_NUM_OF )	shell_write("ERROR, INVALID CHANNEL NAME\r");
 8012dcc:	89fb      	ldrh	r3, [r7, #14]
 8012dce:	2b04      	cmp	r3, #4
 8012dd0:	d102      	bne.n	8012dd8 <shell_com_dbg_disable+0xac>
 8012dd2:	480b      	ldr	r0, [pc, #44]	; (8012e00 <shell_com_dbg_disable+0xd4>)
 8012dd4:	f7ff f804 	bl	8011de0 <shell_write>
		}
	}
}
 8012dd8:	3710      	adds	r7, #16
 8012dda:	46bd      	mov	sp, r7
 8012ddc:	bd80      	pop	{r7, pc}
 8012dde:	bf00      	nop
 8012de0:	20005690 	.word	0x20005690
 8012de4:	20005670 	.word	0x20005670
 8012de8:	0801ac00 	.word	0x0801ac00
 8012dec:	0801ac08 	.word	0x0801ac08
 8012df0:	0801ac20 	.word	0x0801ac20
 8012df4:	200055dc 	.word	0x200055dc
 8012df8:	0801ac78 	.word	0x0801ac78
 8012dfc:	0801ac94 	.word	0x0801ac94
 8012e00:	0801ac58 	.word	0x0801ac58

08012e04 <shell_nvm_init>:

// TODO: Remove only testing...
#include "drivers/devices/25lcxxxx/25lcxxxx/src/25lcxxxx.h"

static void shell_nvm_init(const char* pc_line)
{
 8012e04:	b580      	push	{r7, lr}
 8012e06:	b082      	sub	sp, #8
 8012e08:	af00      	add	r7, sp, #0
 8012e0a:	6078      	str	r0, [r7, #4]
	COM_DBG_PRINT( eCOM_DBG_CH_NONE, "NVM init..." );
 8012e0c:	490a      	ldr	r1, [pc, #40]	; (8012e38 <shell_nvm_init+0x34>)
 8012e0e:	2000      	movs	r0, #0
 8012e10:	f7fe ff94 	bl	8011d3c <com_dbg_print>

	if ( e25LCXXXX_OK == _25lcxxxx_init())
 8012e14:	f7f9 fb86 	bl	800c524 <_25lcxxxx_init>
 8012e18:	4603      	mov	r3, r0
 8012e1a:	2b00      	cmp	r3, #0
 8012e1c:	d104      	bne.n	8012e28 <shell_nvm_init+0x24>
	{
		COM_DBG_PRINT( eCOM_DBG_CH_NONE, "Init success!" );
 8012e1e:	4907      	ldr	r1, [pc, #28]	; (8012e3c <shell_nvm_init+0x38>)
 8012e20:	2000      	movs	r0, #0
 8012e22:	f7fe ff8b 	bl	8011d3c <com_dbg_print>
	}
	else
	{
		COM_DBG_PRINT( eCOM_DBG_CH_NONE, "Init failed!" );
	}
}
 8012e26:	e003      	b.n	8012e30 <shell_nvm_init+0x2c>
		COM_DBG_PRINT( eCOM_DBG_CH_NONE, "Init failed!" );
 8012e28:	4905      	ldr	r1, [pc, #20]	; (8012e40 <shell_nvm_init+0x3c>)
 8012e2a:	2000      	movs	r0, #0
 8012e2c:	f7fe ff86 	bl	8011d3c <com_dbg_print>
}
 8012e30:	bf00      	nop
 8012e32:	3708      	adds	r7, #8
 8012e34:	46bd      	mov	sp, r7
 8012e36:	bd80      	pop	{r7, pc}
 8012e38:	0801acac 	.word	0x0801acac
 8012e3c:	0801acb8 	.word	0x0801acb8
 8012e40:	0801acc8 	.word	0x0801acc8

08012e44 <shell_nvm_deinit>:

static void shell_nvm_deinit(const char* pc_line)
{
 8012e44:	b580      	push	{r7, lr}
 8012e46:	b082      	sub	sp, #8
 8012e48:	af00      	add	r7, sp, #0
 8012e4a:	6078      	str	r0, [r7, #4]
	COM_DBG_PRINT( eCOM_DBG_CH_NONE, "NVM deinit..." );
 8012e4c:	490a      	ldr	r1, [pc, #40]	; (8012e78 <shell_nvm_deinit+0x34>)
 8012e4e:	2000      	movs	r0, #0
 8012e50:	f7fe ff74 	bl	8011d3c <com_dbg_print>

	if ( e25LCXXXX_OK == _25lcxxxx_deinit())
 8012e54:	f7f9 fba0 	bl	800c598 <_25lcxxxx_deinit>
 8012e58:	4603      	mov	r3, r0
 8012e5a:	2b00      	cmp	r3, #0
 8012e5c:	d104      	bne.n	8012e68 <shell_nvm_deinit+0x24>
	{
		COM_DBG_PRINT( eCOM_DBG_CH_NONE, "Init success!" );
 8012e5e:	4907      	ldr	r1, [pc, #28]	; (8012e7c <shell_nvm_deinit+0x38>)
 8012e60:	2000      	movs	r0, #0
 8012e62:	f7fe ff6b 	bl	8011d3c <com_dbg_print>
	}
	else
	{
		COM_DBG_PRINT( eCOM_DBG_CH_NONE, "Init failed!" );
	}
}
 8012e66:	e003      	b.n	8012e70 <shell_nvm_deinit+0x2c>
		COM_DBG_PRINT( eCOM_DBG_CH_NONE, "Init failed!" );
 8012e68:	4905      	ldr	r1, [pc, #20]	; (8012e80 <shell_nvm_deinit+0x3c>)
 8012e6a:	2000      	movs	r0, #0
 8012e6c:	f7fe ff66 	bl	8011d3c <com_dbg_print>
}
 8012e70:	bf00      	nop
 8012e72:	3708      	adds	r7, #8
 8012e74:	46bd      	mov	sp, r7
 8012e76:	bd80      	pop	{r7, pc}
 8012e78:	0801acd8 	.word	0x0801acd8
 8012e7c:	0801acb8 	.word	0x0801acb8
 8012e80:	0801acc8 	.word	0x0801acc8

08012e84 <shell_nvm_write>:

static void shell_nvm_write(const char* pc_line)
{
 8012e84:	b580      	push	{r7, lr}
 8012e86:	b08a      	sub	sp, #40	; 0x28
 8012e88:	af02      	add	r7, sp, #8
 8012e8a:	6078      	str	r0, [r7, #4]
	uint32_t 	addr 	= 0UL;
 8012e8c:	2300      	movs	r3, #0
 8012e8e:	613b      	str	r3, [r7, #16]
	uint32_t 	size 	= 0UL;
 8012e90:	2300      	movs	r3, #0
 8012e92:	60fb      	str	r3, [r7, #12]
	uint8_t * 	str 	= NULL;
 8012e94:	2300      	movs	r3, #0
 8012e96:	61bb      	str	r3, [r7, #24]

	int nrofpar = sscanf(pc_line,"%s%d%d", str, (int*) &addr, (int*) &size );
 8012e98:	f107 0210 	add.w	r2, r7, #16
 8012e9c:	f107 030c 	add.w	r3, r7, #12
 8012ea0:	9300      	str	r3, [sp, #0]
 8012ea2:	4613      	mov	r3, r2
 8012ea4:	69ba      	ldr	r2, [r7, #24]
 8012ea6:	4919      	ldr	r1, [pc, #100]	; (8012f0c <shell_nvm_write+0x88>)
 8012ea8:	6878      	ldr	r0, [r7, #4]
 8012eaa:	f003 f8a1 	bl	8015ff0 <siscanf>
 8012eae:	6178      	str	r0, [r7, #20]


	//size = addr - data;

	if ( nrofpar != 3 )
 8012eb0:	697b      	ldr	r3, [r7, #20]
 8012eb2:	2b03      	cmp	r3, #3
 8012eb4:	d003      	beq.n	8012ebe <shell_nvm_write+0x3a>
	{
		shell_write("ERROR,INVALID INPUT\r\n");
 8012eb6:	4816      	ldr	r0, [pc, #88]	; (8012f10 <shell_nvm_write+0x8c>)
 8012eb8:	f7fe ff92 	bl	8011de0 <shell_write>
 8012ebc:	e023      	b.n	8012f06 <shell_nvm_write+0x82>
		return;
	}

	else
	{
		COM_DBG_PRINT( eCOM_DBG_CH_NONE, "NVM write..." );
 8012ebe:	4915      	ldr	r1, [pc, #84]	; (8012f14 <shell_nvm_write+0x90>)
 8012ec0:	2000      	movs	r0, #0
 8012ec2:	f7fe ff3b 	bl	8011d3c <com_dbg_print>

		static uint8_t tx_data[128];
		for (uint8_t i = 0; i < size; i++)
 8012ec6:	2300      	movs	r3, #0
 8012ec8:	77fb      	strb	r3, [r7, #31]
 8012eca:	e006      	b.n	8012eda <shell_nvm_write+0x56>
		{
			tx_data[i] = i;
 8012ecc:	7ffb      	ldrb	r3, [r7, #31]
 8012ece:	4912      	ldr	r1, [pc, #72]	; (8012f18 <shell_nvm_write+0x94>)
 8012ed0:	7ffa      	ldrb	r2, [r7, #31]
 8012ed2:	54ca      	strb	r2, [r1, r3]
		for (uint8_t i = 0; i < size; i++)
 8012ed4:	7ffb      	ldrb	r3, [r7, #31]
 8012ed6:	3301      	adds	r3, #1
 8012ed8:	77fb      	strb	r3, [r7, #31]
 8012eda:	7ffa      	ldrb	r2, [r7, #31]
 8012edc:	68fb      	ldr	r3, [r7, #12]
 8012ede:	429a      	cmp	r2, r3
 8012ee0:	d3f4      	bcc.n	8012ecc <shell_nvm_write+0x48>
		}

		if ( e25LCXXXX_OK == _25lcxxxx_write( addr, size, (uint8_t*) &tx_data ))
 8012ee2:	693b      	ldr	r3, [r7, #16]
 8012ee4:	68f9      	ldr	r1, [r7, #12]
 8012ee6:	4a0c      	ldr	r2, [pc, #48]	; (8012f18 <shell_nvm_write+0x94>)
 8012ee8:	4618      	mov	r0, r3
 8012eea:	f7f9 fb93 	bl	800c614 <_25lcxxxx_write>
 8012eee:	4603      	mov	r3, r0
 8012ef0:	2b00      	cmp	r3, #0
 8012ef2:	d104      	bne.n	8012efe <shell_nvm_write+0x7a>
		{
			COM_DBG_PRINT( eCOM_DBG_CH_NONE, "Write success!" );
 8012ef4:	4909      	ldr	r1, [pc, #36]	; (8012f1c <shell_nvm_write+0x98>)
 8012ef6:	2000      	movs	r0, #0
 8012ef8:	f7fe ff20 	bl	8011d3c <com_dbg_print>
 8012efc:	e003      	b.n	8012f06 <shell_nvm_write+0x82>

		}
		else
		{
			COM_DBG_PRINT( eCOM_DBG_CH_NONE, "Write failed!" );
 8012efe:	4908      	ldr	r1, [pc, #32]	; (8012f20 <shell_nvm_write+0x9c>)
 8012f00:	2000      	movs	r0, #0
 8012f02:	f7fe ff1b 	bl	8011d3c <com_dbg_print>
		}
	}
}
 8012f06:	3720      	adds	r7, #32
 8012f08:	46bd      	mov	sp, r7
 8012f0a:	bd80      	pop	{r7, pc}
 8012f0c:	0801ace8 	.word	0x0801ace8
 8012f10:	0801ac08 	.word	0x0801ac08
 8012f14:	0801acf0 	.word	0x0801acf0
 8012f18:	200056b0 	.word	0x200056b0
 8012f1c:	0801ad00 	.word	0x0801ad00
 8012f20:	0801ad10 	.word	0x0801ad10

08012f24 <shell_nvm_read>:

static void shell_nvm_read(const char* pc_line)
{
 8012f24:	b580      	push	{r7, lr}
 8012f26:	b08a      	sub	sp, #40	; 0x28
 8012f28:	af02      	add	r7, sp, #8
 8012f2a:	6078      	str	r0, [r7, #4]
			uint32_t 	addr 			= 0UL;
 8012f2c:	2300      	movs	r3, #0
 8012f2e:	613b      	str	r3, [r7, #16]
			uint32_t 	size 			= 0UL;
 8012f30:	2300      	movs	r3, #0
 8012f32:	60fb      	str	r3, [r7, #12]
	static 	uint8_t 	rx_data[128] 	= { 0 };
			uint8_t * 	str				= NULL;
 8012f34:	2300      	movs	r3, #0
 8012f36:	61bb      	str	r3, [r7, #24]

	int nrofpar = sscanf(pc_line,"%s %d %d", str, (int*) &addr, (int*) &size);
 8012f38:	f107 0210 	add.w	r2, r7, #16
 8012f3c:	f107 030c 	add.w	r3, r7, #12
 8012f40:	9300      	str	r3, [sp, #0]
 8012f42:	4613      	mov	r3, r2
 8012f44:	69ba      	ldr	r2, [r7, #24]
 8012f46:	491c      	ldr	r1, [pc, #112]	; (8012fb8 <shell_nvm_read+0x94>)
 8012f48:	6878      	ldr	r0, [r7, #4]
 8012f4a:	f003 f851 	bl	8015ff0 <siscanf>
 8012f4e:	6178      	str	r0, [r7, #20]

	if ( nrofpar != 3)
 8012f50:	697b      	ldr	r3, [r7, #20]
 8012f52:	2b03      	cmp	r3, #3
 8012f54:	d003      	beq.n	8012f5e <shell_nvm_read+0x3a>
	{
		shell_write("ERROR,INVALID INPUT\r\n");
 8012f56:	4819      	ldr	r0, [pc, #100]	; (8012fbc <shell_nvm_read+0x98>)
 8012f58:	f7fe ff42 	bl	8011de0 <shell_write>
 8012f5c:	e029      	b.n	8012fb2 <shell_nvm_read+0x8e>
		return;
	}

	else
	{
		COM_DBG_PRINT( eCOM_DBG_CH_NONE, "NVM read..." );
 8012f5e:	4918      	ldr	r1, [pc, #96]	; (8012fc0 <shell_nvm_read+0x9c>)
 8012f60:	2000      	movs	r0, #0
 8012f62:	f7fe feeb 	bl	8011d3c <com_dbg_print>

		if ( e25LCXXXX_OK == _25lcxxxx_read( addr, size, (uint8_t*) &rx_data ))
 8012f66:	693b      	ldr	r3, [r7, #16]
 8012f68:	68f9      	ldr	r1, [r7, #12]
 8012f6a:	4a16      	ldr	r2, [pc, #88]	; (8012fc4 <shell_nvm_read+0xa0>)
 8012f6c:	4618      	mov	r0, r3
 8012f6e:	f7f9 fc07 	bl	800c780 <_25lcxxxx_read>
 8012f72:	4603      	mov	r3, r0
 8012f74:	2b00      	cmp	r3, #0
 8012f76:	d118      	bne.n	8012faa <shell_nvm_read+0x86>
		{
			COM_DBG_PRINT( eCOM_DBG_CH_NONE, "Read success!" );
 8012f78:	4913      	ldr	r1, [pc, #76]	; (8012fc8 <shell_nvm_read+0xa4>)
 8012f7a:	2000      	movs	r0, #0
 8012f7c:	f7fe fede 	bl	8011d3c <com_dbg_print>

			for (uint8_t i = 0; i < size; i++)
 8012f80:	2300      	movs	r3, #0
 8012f82:	77fb      	strb	r3, [r7, #31]
 8012f84:	e00c      	b.n	8012fa0 <shell_nvm_read+0x7c>
			{
				COM_DBG_PRINT( eCOM_DBG_CH_NONE, "Data[0x%X] = 0x%X", i + addr, rx_data[i] );
 8012f86:	7ffa      	ldrb	r2, [r7, #31]
 8012f88:	693b      	ldr	r3, [r7, #16]
 8012f8a:	441a      	add	r2, r3
 8012f8c:	7ffb      	ldrb	r3, [r7, #31]
 8012f8e:	490d      	ldr	r1, [pc, #52]	; (8012fc4 <shell_nvm_read+0xa0>)
 8012f90:	5ccb      	ldrb	r3, [r1, r3]
 8012f92:	490e      	ldr	r1, [pc, #56]	; (8012fcc <shell_nvm_read+0xa8>)
 8012f94:	2000      	movs	r0, #0
 8012f96:	f7fe fed1 	bl	8011d3c <com_dbg_print>
			for (uint8_t i = 0; i < size; i++)
 8012f9a:	7ffb      	ldrb	r3, [r7, #31]
 8012f9c:	3301      	adds	r3, #1
 8012f9e:	77fb      	strb	r3, [r7, #31]
 8012fa0:	7ffa      	ldrb	r2, [r7, #31]
 8012fa2:	68fb      	ldr	r3, [r7, #12]
 8012fa4:	429a      	cmp	r2, r3
 8012fa6:	d3ee      	bcc.n	8012f86 <shell_nvm_read+0x62>
 8012fa8:	e003      	b.n	8012fb2 <shell_nvm_read+0x8e>
			}
		}
		else
		{
			COM_DBG_PRINT( eCOM_DBG_CH_NONE, "Read failed!" );
 8012faa:	4909      	ldr	r1, [pc, #36]	; (8012fd0 <shell_nvm_read+0xac>)
 8012fac:	2000      	movs	r0, #0
 8012fae:	f7fe fec5 	bl	8011d3c <com_dbg_print>
		}
	}
}
 8012fb2:	3720      	adds	r7, #32
 8012fb4:	46bd      	mov	sp, r7
 8012fb6:	bd80      	pop	{r7, pc}
 8012fb8:	0801ad20 	.word	0x0801ad20
 8012fbc:	0801ac08 	.word	0x0801ac08
 8012fc0:	0801ad2c 	.word	0x0801ad2c
 8012fc4:	20005730 	.word	0x20005730
 8012fc8:	0801ad38 	.word	0x0801ad38
 8012fcc:	0801ad48 	.word	0x0801ad48
 8012fd0:	0801ad5c 	.word	0x0801ad5c

08012fd4 <filter_rc_init>:
* @param[in] 	init_value		- Initial value
* @return 		status			- Status of operation
*/
////////////////////////////////////////////////////////////////////////////////
filter_status_t filter_rc_init(p_filter_rc_t * p_filter_inst, const float32_t fc, const float32_t fs, const uint8_t order, const float32_t init_value)
{
 8012fd4:	b590      	push	{r4, r7, lr}
 8012fd6:	b089      	sub	sp, #36	; 0x24
 8012fd8:	af00      	add	r7, sp, #0
 8012fda:	6178      	str	r0, [r7, #20]
 8012fdc:	ed87 0a04 	vstr	s0, [r7, #16]
 8012fe0:	edc7 0a03 	vstr	s1, [r7, #12]
 8012fe4:	460b      	mov	r3, r1
 8012fe6:	ed87 1a01 	vstr	s2, [r7, #4]
 8012fea:	72fb      	strb	r3, [r7, #11]
	filter_status_t status = eFILTER_OK;
 8012fec:	2300      	movs	r3, #0
 8012fee:	77fb      	strb	r3, [r7, #31]
	uint8_t i;

	if (( NULL != p_filter_inst ) && ( order > 0UL ))
 8012ff0:	697b      	ldr	r3, [r7, #20]
 8012ff2:	2b00      	cmp	r3, #0
 8012ff4:	d049      	beq.n	801308a <filter_rc_init+0xb6>
 8012ff6:	7afb      	ldrb	r3, [r7, #11]
 8012ff8:	2b00      	cmp	r3, #0
 8012ffa:	d046      	beq.n	801308a <filter_rc_init+0xb6>
	{
		// Allocate space
		*p_filter_inst 			= malloc( sizeof( filter_rc_t ));
 8012ffc:	2010      	movs	r0, #16
 8012ffe:	f002 f83d 	bl	801507c <malloc>
 8013002:	4603      	mov	r3, r0
 8013004:	461a      	mov	r2, r3
 8013006:	697b      	ldr	r3, [r7, #20]
 8013008:	601a      	str	r2, [r3, #0]
		(*p_filter_inst)->p_y 	= malloc( order  * sizeof( float32_t ));
 801300a:	7afb      	ldrb	r3, [r7, #11]
 801300c:	009a      	lsls	r2, r3, #2
 801300e:	697b      	ldr	r3, [r7, #20]
 8013010:	681c      	ldr	r4, [r3, #0]
 8013012:	4610      	mov	r0, r2
 8013014:	f002 f832 	bl	801507c <malloc>
 8013018:	4603      	mov	r3, r0
 801301a:	6023      	str	r3, [r4, #0]

		// Check if allocation succeed
		if 	(	( NULL != *p_filter_inst )
 801301c:	697b      	ldr	r3, [r7, #20]
 801301e:	681b      	ldr	r3, [r3, #0]
 8013020:	2b00      	cmp	r3, #0
 8013022:	d02f      	beq.n	8013084 <filter_rc_init+0xb0>
			&& 	( NULL != (*p_filter_inst)->p_y ))
 8013024:	697b      	ldr	r3, [r7, #20]
 8013026:	681b      	ldr	r3, [r3, #0]
 8013028:	681b      	ldr	r3, [r3, #0]
 801302a:	2b00      	cmp	r3, #0
 801302c:	d02a      	beq.n	8013084 <filter_rc_init+0xb0>
		{
			// Calculate coefficient
			(*p_filter_inst)->alpha = filter_rc_calculate_alpha( fc, fs );
 801302e:	697b      	ldr	r3, [r7, #20]
 8013030:	681c      	ldr	r4, [r3, #0]
 8013032:	edd7 0a03 	vldr	s1, [r7, #12]
 8013036:	ed97 0a04 	vldr	s0, [r7, #16]
 801303a:	f000 f8a1 	bl	8013180 <filter_rc_calculate_alpha>
 801303e:	eef0 7a40 	vmov.f32	s15, s0
 8013042:	edc4 7a01 	vstr	s15, [r4, #4]

			// Store order & fc
			(*p_filter_inst)->order = order;
 8013046:	697b      	ldr	r3, [r7, #20]
 8013048:	681b      	ldr	r3, [r3, #0]
 801304a:	7afa      	ldrb	r2, [r7, #11]
 801304c:	731a      	strb	r2, [r3, #12]
			(*p_filter_inst)->fc = fc;
 801304e:	697b      	ldr	r3, [r7, #20]
 8013050:	681b      	ldr	r3, [r3, #0]
 8013052:	693a      	ldr	r2, [r7, #16]
 8013054:	609a      	str	r2, [r3, #8]

			// Initial value
			for ( i = 0; i < order; i++)
 8013056:	2300      	movs	r3, #0
 8013058:	77bb      	strb	r3, [r7, #30]
 801305a:	e00a      	b.n	8013072 <filter_rc_init+0x9e>
			{
				(*p_filter_inst)->p_y[i] = init_value;
 801305c:	697b      	ldr	r3, [r7, #20]
 801305e:	681b      	ldr	r3, [r3, #0]
 8013060:	681a      	ldr	r2, [r3, #0]
 8013062:	7fbb      	ldrb	r3, [r7, #30]
 8013064:	009b      	lsls	r3, r3, #2
 8013066:	4413      	add	r3, r2
 8013068:	687a      	ldr	r2, [r7, #4]
 801306a:	601a      	str	r2, [r3, #0]
			for ( i = 0; i < order; i++)
 801306c:	7fbb      	ldrb	r3, [r7, #30]
 801306e:	3301      	adds	r3, #1
 8013070:	77bb      	strb	r3, [r7, #30]
 8013072:	7fba      	ldrb	r2, [r7, #30]
 8013074:	7afb      	ldrb	r3, [r7, #11]
 8013076:	429a      	cmp	r2, r3
 8013078:	d3f0      	bcc.n	801305c <filter_rc_init+0x88>
			}

			// Init success
			(*p_filter_inst)->is_init = true;
 801307a:	697b      	ldr	r3, [r7, #20]
 801307c:	681b      	ldr	r3, [r3, #0]
 801307e:	2201      	movs	r2, #1
 8013080:	735a      	strb	r2, [r3, #13]
		if 	(	( NULL != *p_filter_inst )
 8013082:	e004      	b.n	801308e <filter_rc_init+0xba>
		}
		else
		{
			status = eFILTER_ERROR;
 8013084:	2301      	movs	r3, #1
 8013086:	77fb      	strb	r3, [r7, #31]
		if 	(	( NULL != *p_filter_inst )
 8013088:	e001      	b.n	801308e <filter_rc_init+0xba>
		}
	}
	else
	{
		status = eFILTER_ERROR;
 801308a:	2301      	movs	r3, #1
 801308c:	77fb      	strb	r3, [r7, #31]
	}

	return status;
 801308e:	7ffb      	ldrb	r3, [r7, #31]
}
 8013090:	4618      	mov	r0, r3
 8013092:	3724      	adds	r7, #36	; 0x24
 8013094:	46bd      	mov	sp, r7
 8013096:	bd90      	pop	{r4, r7, pc}

08013098 <filter_rc_update>:
* @param[in] 	x			- Input value
* @return 		y			- Output value
*/
////////////////////////////////////////////////////////////////////////////////
float32_t filter_rc_update(p_filter_rc_t filter_inst, const float32_t x)
{
 8013098:	b480      	push	{r7}
 801309a:	b085      	sub	sp, #20
 801309c:	af00      	add	r7, sp, #0
 801309e:	6078      	str	r0, [r7, #4]
 80130a0:	ed87 0a00 	vstr	s0, [r7]
	float32_t y = 0.0f;
 80130a4:	f04f 0300 	mov.w	r3, #0
 80130a8:	60fb      	str	r3, [r7, #12]
	uint8_t n;

	// Check for instance and success init
	if ( NULL != filter_inst )
 80130aa:	687b      	ldr	r3, [r7, #4]
 80130ac:	2b00      	cmp	r3, #0
 80130ae:	d05d      	beq.n	801316c <filter_rc_update+0xd4>
	{
		if ( true == filter_inst->is_init )
 80130b0:	687b      	ldr	r3, [r7, #4]
 80130b2:	7b5b      	ldrb	r3, [r3, #13]
 80130b4:	2b00      	cmp	r3, #0
 80130b6:	d059      	beq.n	801316c <filter_rc_update+0xd4>
		{
			for ( n = 0; n < filter_inst->order; n++)
 80130b8:	2300      	movs	r3, #0
 80130ba:	72fb      	strb	r3, [r7, #11]
 80130bc:	e045      	b.n	801314a <filter_rc_update+0xb2>
			{
				if ( 0 == n )
 80130be:	7afb      	ldrb	r3, [r7, #11]
 80130c0:	2b00      	cmp	r3, #0
 80130c2:	d117      	bne.n	80130f4 <filter_rc_update+0x5c>
				{
					filter_inst->p_y[0] = ( filter_inst->p_y[0] + ( filter_inst->alpha * ( x - filter_inst->p_y[0] )));
 80130c4:	687b      	ldr	r3, [r7, #4]
 80130c6:	681b      	ldr	r3, [r3, #0]
 80130c8:	ed93 7a00 	vldr	s14, [r3]
 80130cc:	687b      	ldr	r3, [r7, #4]
 80130ce:	edd3 6a01 	vldr	s13, [r3, #4]
 80130d2:	687b      	ldr	r3, [r7, #4]
 80130d4:	681b      	ldr	r3, [r3, #0]
 80130d6:	edd3 7a00 	vldr	s15, [r3]
 80130da:	ed97 6a00 	vldr	s12, [r7]
 80130de:	ee76 7a67 	vsub.f32	s15, s12, s15
 80130e2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80130e6:	687b      	ldr	r3, [r7, #4]
 80130e8:	681b      	ldr	r3, [r3, #0]
 80130ea:	ee77 7a27 	vadd.f32	s15, s14, s15
 80130ee:	edc3 7a00 	vstr	s15, [r3]
 80130f2:	e027      	b.n	8013144 <filter_rc_update+0xac>
				}
				else
				{
					filter_inst->p_y[n] = ( filter_inst->p_y[n] + ( filter_inst->alpha * ( filter_inst->p_y[n-1] - filter_inst->p_y[n] )));
 80130f4:	687b      	ldr	r3, [r7, #4]
 80130f6:	681a      	ldr	r2, [r3, #0]
 80130f8:	7afb      	ldrb	r3, [r7, #11]
 80130fa:	009b      	lsls	r3, r3, #2
 80130fc:	4413      	add	r3, r2
 80130fe:	ed93 7a00 	vldr	s14, [r3]
 8013102:	687b      	ldr	r3, [r7, #4]
 8013104:	edd3 6a01 	vldr	s13, [r3, #4]
 8013108:	687b      	ldr	r3, [r7, #4]
 801310a:	681a      	ldr	r2, [r3, #0]
 801310c:	7af9      	ldrb	r1, [r7, #11]
 801310e:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8013112:	440b      	add	r3, r1
 8013114:	009b      	lsls	r3, r3, #2
 8013116:	4413      	add	r3, r2
 8013118:	ed93 6a00 	vldr	s12, [r3]
 801311c:	687b      	ldr	r3, [r7, #4]
 801311e:	681a      	ldr	r2, [r3, #0]
 8013120:	7afb      	ldrb	r3, [r7, #11]
 8013122:	009b      	lsls	r3, r3, #2
 8013124:	4413      	add	r3, r2
 8013126:	edd3 7a00 	vldr	s15, [r3]
 801312a:	ee76 7a67 	vsub.f32	s15, s12, s15
 801312e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8013132:	687b      	ldr	r3, [r7, #4]
 8013134:	681a      	ldr	r2, [r3, #0]
 8013136:	7afb      	ldrb	r3, [r7, #11]
 8013138:	009b      	lsls	r3, r3, #2
 801313a:	4413      	add	r3, r2
 801313c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8013140:	edc3 7a00 	vstr	s15, [r3]
			for ( n = 0; n < filter_inst->order; n++)
 8013144:	7afb      	ldrb	r3, [r7, #11]
 8013146:	3301      	adds	r3, #1
 8013148:	72fb      	strb	r3, [r7, #11]
 801314a:	687b      	ldr	r3, [r7, #4]
 801314c:	7b1b      	ldrb	r3, [r3, #12]
 801314e:	7afa      	ldrb	r2, [r7, #11]
 8013150:	429a      	cmp	r2, r3
 8013152:	d3b4      	bcc.n	80130be <filter_rc_update+0x26>
				}
			}

			y = filter_inst->p_y[ filter_inst->order - 1U ];
 8013154:	687b      	ldr	r3, [r7, #4]
 8013156:	681a      	ldr	r2, [r3, #0]
 8013158:	687b      	ldr	r3, [r7, #4]
 801315a:	7b1b      	ldrb	r3, [r3, #12]
 801315c:	4619      	mov	r1, r3
 801315e:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8013162:	440b      	add	r3, r1
 8013164:	009b      	lsls	r3, r3, #2
 8013166:	4413      	add	r3, r2
 8013168:	681b      	ldr	r3, [r3, #0]
 801316a:	60fb      	str	r3, [r7, #12]
		}
	}

	return y;
 801316c:	68fb      	ldr	r3, [r7, #12]
 801316e:	ee07 3a90 	vmov	s15, r3
}
 8013172:	eeb0 0a67 	vmov.f32	s0, s15
 8013176:	3714      	adds	r7, #20
 8013178:	46bd      	mov	sp, r7
 801317a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801317e:	4770      	bx	lr

08013180 <filter_rc_calculate_alpha>:
* @param[in] 	fs		- Sample frequency
* @return 		alpha	- RC alpha
*/
////////////////////////////////////////////////////////////////////////////////
static float32_t filter_rc_calculate_alpha(const float32_t fc, const float32_t fs)
{
 8013180:	b5b0      	push	{r4, r5, r7, lr}
 8013182:	b084      	sub	sp, #16
 8013184:	af00      	add	r7, sp, #0
 8013186:	ed87 0a01 	vstr	s0, [r7, #4]
 801318a:	edc7 0a00 	vstr	s1, [r7]
	float32_t alpha = 0.0f;
 801318e:	f04f 0300 	mov.w	r3, #0
 8013192:	60fb      	str	r3, [r7, #12]

	// Check Nyquist/Shannon sampling theorem
	if ( fc < ( fs / 2.0f ))
 8013194:	ed97 7a00 	vldr	s14, [r7]
 8013198:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 801319c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80131a0:	ed97 7a01 	vldr	s14, [r7, #4]
 80131a4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80131a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80131ac:	d52a      	bpl.n	8013204 <filter_rc_calculate_alpha+0x84>
	{
		alpha = (float32_t) ( 1.0f / ( 1.0f + ( fs / ( M_TWOPI * fc ))));
 80131ae:	6838      	ldr	r0, [r7, #0]
 80131b0:	f7ed f9fa 	bl	80005a8 <__aeabi_f2d>
 80131b4:	4604      	mov	r4, r0
 80131b6:	460d      	mov	r5, r1
 80131b8:	6878      	ldr	r0, [r7, #4]
 80131ba:	f7ed f9f5 	bl	80005a8 <__aeabi_f2d>
 80131be:	a317      	add	r3, pc, #92	; (adr r3, 801321c <filter_rc_calculate_alpha+0x9c>)
 80131c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80131c4:	f7ed fa48 	bl	8000658 <__aeabi_dmul>
 80131c8:	4602      	mov	r2, r0
 80131ca:	460b      	mov	r3, r1
 80131cc:	4620      	mov	r0, r4
 80131ce:	4629      	mov	r1, r5
 80131d0:	f7ed fb6c 	bl	80008ac <__aeabi_ddiv>
 80131d4:	4602      	mov	r2, r0
 80131d6:	460b      	mov	r3, r1
 80131d8:	4610      	mov	r0, r2
 80131da:	4619      	mov	r1, r3
 80131dc:	f04f 0200 	mov.w	r2, #0
 80131e0:	4b0d      	ldr	r3, [pc, #52]	; (8013218 <filter_rc_calculate_alpha+0x98>)
 80131e2:	f7ed f883 	bl	80002ec <__adddf3>
 80131e6:	4602      	mov	r2, r0
 80131e8:	460b      	mov	r3, r1
 80131ea:	f04f 0000 	mov.w	r0, #0
 80131ee:	490a      	ldr	r1, [pc, #40]	; (8013218 <filter_rc_calculate_alpha+0x98>)
 80131f0:	f7ed fb5c 	bl	80008ac <__aeabi_ddiv>
 80131f4:	4602      	mov	r2, r0
 80131f6:	460b      	mov	r3, r1
 80131f8:	4610      	mov	r0, r2
 80131fa:	4619      	mov	r1, r3
 80131fc:	f7ed fd24 	bl	8000c48 <__aeabi_d2f>
 8013200:	4603      	mov	r3, r0
 8013202:	60fb      	str	r3, [r7, #12]
	}

	return alpha;
 8013204:	68fb      	ldr	r3, [r7, #12]
 8013206:	ee07 3a90 	vmov	s15, r3
}
 801320a:	eeb0 0a67 	vmov.f32	s0, s15
 801320e:	3710      	adds	r7, #16
 8013210:	46bd      	mov	sp, r7
 8013212:	bdb0      	pop	{r4, r5, r7, pc}
 8013214:	f3af 8000 	nop.w
 8013218:	3ff00000 	.word	0x3ff00000
 801321c:	54442d18 	.word	0x54442d18
 8013220:	401921fb 	.word	0x401921fb

08013224 <fifo_create>:
* @param[in]    number_of_elements 	- number of elements that buffer can hold
* @return       returns status of fifo_status_t
*/
////////////////////////////////////////////////////////////////////////////////
fifo_status_t fifo_create(fifo_t *const buffer, const uint8_t *const storage, uint16_t number_of_elements)	
{
 8013224:	b480      	push	{r7}
 8013226:	b087      	sub	sp, #28
 8013228:	af00      	add	r7, sp, #0
 801322a:	60f8      	str	r0, [r7, #12]
 801322c:	60b9      	str	r1, [r7, #8]
 801322e:	4613      	mov	r3, r2
 8013230:	80fb      	strh	r3, [r7, #6]
	fifo_status_t status = eFIFO_OK;
 8013232:	2300      	movs	r3, #0
 8013234:	75fb      	strb	r3, [r7, #23]
	
	// Check for valid buffer pointer
	if( buffer == NULL )
 8013236:	68fb      	ldr	r3, [r7, #12]
 8013238:	2b00      	cmp	r3, #0
 801323a:	d102      	bne.n	8013242 <fifo_create+0x1e>
	{
		status = eFIFO_POINTER_ERROR;
 801323c:	2304      	movs	r3, #4
 801323e:	75fb      	strb	r3, [r7, #23]
 8013240:	e013      	b.n	801326a <fifo_create+0x46>
	}
	else
	{	
		if( storage == NULL )
 8013242:	68bb      	ldr	r3, [r7, #8]
 8013244:	2b00      	cmp	r3, #0
 8013246:	d102      	bne.n	801324e <fifo_create+0x2a>
		{
			status = eFIFO_POINTER_ERROR;
 8013248:	2304      	movs	r3, #4
 801324a:	75fb      	strb	r3, [r7, #23]
 801324c:	e00d      	b.n	801326a <fifo_create+0x46>
		}
		else
		{
			buffer->p_data = (uint8_t*)storage;
 801324e:	68fb      	ldr	r3, [r7, #12]
 8013250:	68ba      	ldr	r2, [r7, #8]
 8013252:	609a      	str	r2, [r3, #8]
			// Initialize buffer input index
			buffer->head = 0;
 8013254:	68fb      	ldr	r3, [r7, #12]
 8013256:	2200      	movs	r2, #0
 8013258:	801a      	strh	r2, [r3, #0]
			
			// Initialize buffer output index
			buffer->tail = 0;
 801325a:	68fb      	ldr	r3, [r7, #12]
 801325c:	2200      	movs	r2, #0
 801325e:	805a      	strh	r2, [r3, #2]
			
			// Initialize buffer size
			buffer->number_of_elements = number_of_elements;	
 8013260:	68fb      	ldr	r3, [r7, #12]
 8013262:	88fa      	ldrh	r2, [r7, #6]
 8013264:	809a      	strh	r2, [r3, #4]
			
			status = eFIFO_OK;
 8013266:	2300      	movs	r3, #0
 8013268:	75fb      	strb	r3, [r7, #23]
		}
	}
	
	return status;
 801326a:	7dfb      	ldrb	r3, [r7, #23]
}
 801326c:	4618      	mov	r0, r3
 801326e:	371c      	adds	r7, #28
 8013270:	46bd      	mov	sp, r7
 8013272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013276:	4770      	bx	lr

08013278 <fifo_add>:
* @param[in]    data - value to add to buffer
* @return       returns status of fifo_status_t
*/
////////////////////////////////////////////////////////////////////////////////
fifo_status_t fifo_add(fifo_t *const buffer, const void *const data)
{
 8013278:	b480      	push	{r7}
 801327a:	b085      	sub	sp, #20
 801327c:	af00      	add	r7, sp, #0
 801327e:	6078      	str	r0, [r7, #4]
 8013280:	6039      	str	r1, [r7, #0]
	fifo_status_t status = eFIFO_OK;	
 8013282:	2300      	movs	r3, #0
 8013284:	73fb      	strb	r3, [r7, #15]
	uint16_t next_head;
	uint8_t *p_data_ptr;

	// Check for valid buffer pointer
	if( buffer == NULL )
 8013286:	687b      	ldr	r3, [r7, #4]
 8013288:	2b00      	cmp	r3, #0
 801328a:	d102      	bne.n	8013292 <fifo_add+0x1a>
	{
		status = eFIFO_POINTER_ERROR;
 801328c:	2304      	movs	r3, #4
 801328e:	73fb      	strb	r3, [r7, #15]
 8013290:	e021      	b.n	80132d6 <fifo_add+0x5e>
	}
	else
	{
		// next is where the head will point after write
		next_head = buffer->head +1;
 8013292:	687b      	ldr	r3, [r7, #4]
 8013294:	881b      	ldrh	r3, [r3, #0]
 8013296:	3301      	adds	r3, #1
 8013298:	81bb      	strh	r3, [r7, #12]
		
		if( next_head >= buffer->number_of_elements )
 801329a:	687b      	ldr	r3, [r7, #4]
 801329c:	889b      	ldrh	r3, [r3, #4]
 801329e:	89ba      	ldrh	r2, [r7, #12]
 80132a0:	429a      	cmp	r2, r3
 80132a2:	d301      	bcc.n	80132a8 <fifo_add+0x30>
		{
			next_head = 0;
 80132a4:	2300      	movs	r3, #0
 80132a6:	81bb      	strh	r3, [r7, #12]
		}
		
		// Does buffer has any space?
		if( next_head != buffer->tail )
 80132a8:	687b      	ldr	r3, [r7, #4]
 80132aa:	885b      	ldrh	r3, [r3, #2]
 80132ac:	89ba      	ldrh	r2, [r7, #12]
 80132ae:	429a      	cmp	r2, r3
 80132b0:	d00f      	beq.n	80132d2 <fifo_add+0x5a>
		{
			// Copy data to buffer
			p_data_ptr = &buffer->p_data[buffer->head];
 80132b2:	687b      	ldr	r3, [r7, #4]
 80132b4:	689b      	ldr	r3, [r3, #8]
 80132b6:	687a      	ldr	r2, [r7, #4]
 80132b8:	8812      	ldrh	r2, [r2, #0]
 80132ba:	4413      	add	r3, r2
 80132bc:	60bb      	str	r3, [r7, #8]
            *p_data_ptr = *((uint8_t*)data);
 80132be:	683b      	ldr	r3, [r7, #0]
 80132c0:	781a      	ldrb	r2, [r3, #0]
 80132c2:	68bb      	ldr	r3, [r7, #8]
 80132c4:	701a      	strb	r2, [r3, #0]
			
			// increment head
			buffer->head = next_head;
 80132c6:	687b      	ldr	r3, [r7, #4]
 80132c8:	89ba      	ldrh	r2, [r7, #12]
 80132ca:	801a      	strh	r2, [r3, #0]
			
			status = eFIFO_OK;
 80132cc:	2300      	movs	r3, #0
 80132ce:	73fb      	strb	r3, [r7, #15]
 80132d0:	e001      	b.n	80132d6 <fifo_add+0x5e>
		}
		// fifo buffer is full
		else
		{
            status = eFIFO_FULL;
 80132d2:	2301      	movs	r3, #1
 80132d4:	73fb      	strb	r3, [r7, #15]
		}
	}
	
	return status;
 80132d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80132d8:	4618      	mov	r0, r3
 80132da:	3714      	adds	r7, #20
 80132dc:	46bd      	mov	sp, r7
 80132de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132e2:	4770      	bx	lr

080132e4 <fifo_get>:
* @param[in]    uint8_t * data - pointer where to return value
* @return       returns status of fifo_status_t 
*/
////////////////////////////////////////////////////////////////////////////////
fifo_status_t fifo_get(fifo_t *const buffer, void *const data)
{	
 80132e4:	b480      	push	{r7}
 80132e6:	b085      	sub	sp, #20
 80132e8:	af00      	add	r7, sp, #0
 80132ea:	6078      	str	r0, [r7, #4]
 80132ec:	6039      	str	r1, [r7, #0]
	fifo_status_t  status = eFIFO_OK;
 80132ee:	2300      	movs	r3, #0
 80132f0:	73fb      	strb	r3, [r7, #15]
	uint16_t next_tail;
	uint8_t *p_data_ptr;
	
	// Check for valid buffer and data pointer
	if( (buffer == NULL) || (data == NULL) )
 80132f2:	687b      	ldr	r3, [r7, #4]
 80132f4:	2b00      	cmp	r3, #0
 80132f6:	d002      	beq.n	80132fe <fifo_get+0x1a>
 80132f8:	683b      	ldr	r3, [r7, #0]
 80132fa:	2b00      	cmp	r3, #0
 80132fc:	d102      	bne.n	8013304 <fifo_get+0x20>
	{
		status = eFIFO_POINTER_ERROR;
 80132fe:	2304      	movs	r3, #4
 8013300:	73fb      	strb	r3, [r7, #15]
 8013302:	e022      	b.n	801334a <fifo_get+0x66>
	}
	else
	{
		// Is buffer empty?
		if(buffer->tail == buffer->head)
 8013304:	687b      	ldr	r3, [r7, #4]
 8013306:	885a      	ldrh	r2, [r3, #2]
 8013308:	687b      	ldr	r3, [r7, #4]
 801330a:	881b      	ldrh	r3, [r3, #0]
 801330c:	429a      	cmp	r2, r3
 801330e:	d102      	bne.n	8013316 <fifo_get+0x32>
		{
			status = eFIFO_EMPTY;
 8013310:	2302      	movs	r3, #2
 8013312:	73fb      	strb	r3, [r7, #15]
 8013314:	e019      	b.n	801334a <fifo_get+0x66>
		}	
		else
		{
			// next is where tail will point to after this read.
			next_tail = buffer->tail + 1;
 8013316:	687b      	ldr	r3, [r7, #4]
 8013318:	885b      	ldrh	r3, [r3, #2]
 801331a:	3301      	adds	r3, #1
 801331c:	81bb      	strh	r3, [r7, #12]
			
			if( next_tail >= buffer->number_of_elements )
 801331e:	687b      	ldr	r3, [r7, #4]
 8013320:	889b      	ldrh	r3, [r3, #4]
 8013322:	89ba      	ldrh	r2, [r7, #12]
 8013324:	429a      	cmp	r2, r3
 8013326:	d301      	bcc.n	801332c <fifo_get+0x48>
			{
				next_tail = 0;
 8013328:	2300      	movs	r3, #0
 801332a:	81bb      	strh	r3, [r7, #12]
			}
			
			// Copy data from buffer
			p_data_ptr = &buffer->p_data[buffer->tail];
 801332c:	687b      	ldr	r3, [r7, #4]
 801332e:	689b      	ldr	r3, [r3, #8]
 8013330:	687a      	ldr	r2, [r7, #4]
 8013332:	8852      	ldrh	r2, [r2, #2]
 8013334:	4413      	add	r3, r2
 8013336:	60bb      	str	r3, [r7, #8]
            *(uint8_t*)data = *p_data_ptr;
 8013338:	68bb      	ldr	r3, [r7, #8]
 801333a:	781a      	ldrb	r2, [r3, #0]
 801333c:	683b      	ldr	r3, [r7, #0]
 801333e:	701a      	strb	r2, [r3, #0]
			
			buffer->tail = next_tail;
 8013340:	687b      	ldr	r3, [r7, #4]
 8013342:	89ba      	ldrh	r2, [r7, #12]
 8013344:	805a      	strh	r2, [r3, #2]
			
			status = eFIFO_OK;
 8013346:	2300      	movs	r3, #0
 8013348:	73fb      	strb	r3, [r7, #15]
		}
	}
	
	return status;
 801334a:	7bfb      	ldrb	r3, [r7, #15]
}
 801334c:	4618      	mov	r0, r3
 801334e:	3714      	adds	r7, #20
 8013350:	46bd      	mov	sp, r7
 8013352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013356:	4770      	bx	lr

08013358 <strlen_safe>:
* @param[in] 	uint16_t u16_max_size - maximum number of characters to read
* @return 		uint16_t length of string or 0 if NULL not found
*/
////////////////////////////////////////////////////////////////////////////////
uint16_t strlen_safe(const char* pc_string, const uint16_t u16_max_size)
{
 8013358:	b480      	push	{r7}
 801335a:	b085      	sub	sp, #20
 801335c:	af00      	add	r7, sp, #0
 801335e:	6078      	str	r0, [r7, #4]
 8013360:	460b      	mov	r3, r1
 8013362:	807b      	strh	r3, [r7, #2]
	uint16_t i;
	uint8_t  found_null = 0;
 8013364:	2300      	movs	r3, #0
 8013366:	737b      	strb	r3, [r7, #13]

	for (i = 0; i < u16_max_size; i++)
 8013368:	2300      	movs	r3, #0
 801336a:	81fb      	strh	r3, [r7, #14]
 801336c:	e00b      	b.n	8013386 <strlen_safe+0x2e>
	{
		if (pc_string[i] == '\0')
 801336e:	89fb      	ldrh	r3, [r7, #14]
 8013370:	687a      	ldr	r2, [r7, #4]
 8013372:	4413      	add	r3, r2
 8013374:	781b      	ldrb	r3, [r3, #0]
 8013376:	2b00      	cmp	r3, #0
 8013378:	d102      	bne.n	8013380 <strlen_safe+0x28>
		{
			found_null = 1;
 801337a:	2301      	movs	r3, #1
 801337c:	737b      	strb	r3, [r7, #13]
			break;
 801337e:	e006      	b.n	801338e <strlen_safe+0x36>
	for (i = 0; i < u16_max_size; i++)
 8013380:	89fb      	ldrh	r3, [r7, #14]
 8013382:	3301      	adds	r3, #1
 8013384:	81fb      	strh	r3, [r7, #14]
 8013386:	89fa      	ldrh	r2, [r7, #14]
 8013388:	887b      	ldrh	r3, [r7, #2]
 801338a:	429a      	cmp	r2, r3
 801338c:	d3ef      	bcc.n	801336e <strlen_safe+0x16>
		}
	}

	if (found_null)
 801338e:	7b7b      	ldrb	r3, [r7, #13]
 8013390:	2b00      	cmp	r3, #0
 8013392:	d003      	beq.n	801339c <strlen_safe+0x44>
	{
		i++;	// Add NULL
 8013394:	89fb      	ldrh	r3, [r7, #14]
 8013396:	3301      	adds	r3, #1
 8013398:	81fb      	strh	r3, [r7, #14]
 801339a:	e001      	b.n	80133a0 <strlen_safe+0x48>
	}
	else
	{
		i = 0;
 801339c:	2300      	movs	r3, #0
 801339e:	81fb      	strh	r3, [r7, #14]
	}

	return i;
 80133a0:	89fb      	ldrh	r3, [r7, #14]
}
 80133a2:	4618      	mov	r0, r3
 80133a4:	3714      	adds	r7, #20
 80133a6:	46bd      	mov	sp, r7
 80133a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133ac:	4770      	bx	lr

080133ae <strchr_safe>:
* @param[in] 	uint16_t u16_max_size - maximum number of characters to search
* @return 		char* pointer to located character or NULL if not found
*/
////////////////////////////////////////////////////////////////////////////////
char* strchr_safe(const char* pc_string, char c, const uint16_t u16_max_size)
{
 80133ae:	b480      	push	{r7}
 80133b0:	b085      	sub	sp, #20
 80133b2:	af00      	add	r7, sp, #0
 80133b4:	6078      	str	r0, [r7, #4]
 80133b6:	460b      	mov	r3, r1
 80133b8:	70fb      	strb	r3, [r7, #3]
 80133ba:	4613      	mov	r3, r2
 80133bc:	803b      	strh	r3, [r7, #0]
	uint16_t i;
	char*	 pc = NULL;
 80133be:	2300      	movs	r3, #0
 80133c0:	60bb      	str	r3, [r7, #8]

	for (i = 0; i < u16_max_size; i++)
 80133c2:	2300      	movs	r3, #0
 80133c4:	81fb      	strh	r3, [r7, #14]
 80133c6:	e014      	b.n	80133f2 <strchr_safe+0x44>
	{
		if (pc_string[i] == '\0')
 80133c8:	89fb      	ldrh	r3, [r7, #14]
 80133ca:	687a      	ldr	r2, [r7, #4]
 80133cc:	4413      	add	r3, r2
 80133ce:	781b      	ldrb	r3, [r3, #0]
 80133d0:	2b00      	cmp	r3, #0
 80133d2:	d013      	beq.n	80133fc <strchr_safe+0x4e>
		{
			break;
		}
		else if (pc_string[i] == c)
 80133d4:	89fb      	ldrh	r3, [r7, #14]
 80133d6:	687a      	ldr	r2, [r7, #4]
 80133d8:	4413      	add	r3, r2
 80133da:	781b      	ldrb	r3, [r3, #0]
 80133dc:	78fa      	ldrb	r2, [r7, #3]
 80133de:	429a      	cmp	r2, r3
 80133e0:	d104      	bne.n	80133ec <strchr_safe+0x3e>
		{
			pc = (char*)(pc_string + i);
 80133e2:	89fb      	ldrh	r3, [r7, #14]
 80133e4:	687a      	ldr	r2, [r7, #4]
 80133e6:	4413      	add	r3, r2
 80133e8:	60bb      	str	r3, [r7, #8]
			break;
 80133ea:	e008      	b.n	80133fe <strchr_safe+0x50>
	for (i = 0; i < u16_max_size; i++)
 80133ec:	89fb      	ldrh	r3, [r7, #14]
 80133ee:	3301      	adds	r3, #1
 80133f0:	81fb      	strh	r3, [r7, #14]
 80133f2:	89fa      	ldrh	r2, [r7, #14]
 80133f4:	883b      	ldrh	r3, [r7, #0]
 80133f6:	429a      	cmp	r2, r3
 80133f8:	d3e6      	bcc.n	80133c8 <strchr_safe+0x1a>
 80133fa:	e000      	b.n	80133fe <strchr_safe+0x50>
			break;
 80133fc:	bf00      	nop
		{
			// Goto next char
		}
	}

	return pc;
 80133fe:	68bb      	ldr	r3, [r7, #8]
}
 8013400:	4618      	mov	r0, r3
 8013402:	3714      	adds	r7, #20
 8013404:	46bd      	mov	sp, r7
 8013406:	f85d 7b04 	ldr.w	r7, [sp], #4
 801340a:	4770      	bx	lr

0801340c <nvm_init>:
*
* @return 	status - Status of initialization
*/
////////////////////////////////////////////////////////////////////////////////
nvm_status_t nvm_init(void)
{
 801340c:	b580      	push	{r7, lr}
 801340e:	b082      	sub	sp, #8
 8013410:	af00      	add	r7, sp, #0
	nvm_status_t 	status 	= eNVM_OK;
 8013412:	2300      	movs	r3, #0
 8013414:	71fb      	strb	r3, [r7, #7]
	uint8_t			reg_num	= 0U;
 8013416:	2300      	movs	r3, #0
 8013418:	71bb      	strb	r3, [r7, #6]

	// Get table configuration
	gp_nvm_regions = nvm_cfg_get_regions();
 801341a:	f000 f945 	bl	80136a8 <nvm_cfg_get_regions>
 801341e:	4603      	mov	r3, r0
 8013420:	4a22      	ldr	r2, [pc, #136]	; (80134ac <nvm_init+0xa0>)
 8013422:	6013      	str	r3, [r2, #0]
	NVM_ASSERT( NULL != gp_nvm_regions );
 8013424:	4b21      	ldr	r3, [pc, #132]	; (80134ac <nvm_init+0xa0>)
 8013426:	681b      	ldr	r3, [r3, #0]
 8013428:	2b00      	cmp	r3, #0
 801342a:	d101      	bne.n	8013430 <nvm_init+0x24>
 801342c:	f001 fdde 	bl	8014fec <project_config_assert_fail>

	// Low level driver init
	for ( reg_num = 0; reg_num < eNVM_REGION_NUM_OF; reg_num++ )
 8013430:	2300      	movs	r3, #0
 8013432:	71bb      	strb	r3, [r7, #6]
 8013434:	e023      	b.n	801347e <nvm_init+0x72>
	{
		if ( NULL != gp_nvm_regions[reg_num].p_driver->pf_nvm_init )
 8013436:	4b1d      	ldr	r3, [pc, #116]	; (80134ac <nvm_init+0xa0>)
 8013438:	681a      	ldr	r2, [r3, #0]
 801343a:	79bb      	ldrb	r3, [r7, #6]
 801343c:	011b      	lsls	r3, r3, #4
 801343e:	4413      	add	r3, r2
 8013440:	68db      	ldr	r3, [r3, #12]
 8013442:	681b      	ldr	r3, [r3, #0]
 8013444:	2b00      	cmp	r3, #0
 8013446:	d017      	beq.n	8013478 <nvm_init+0x6c>
		{
			status |= gp_nvm_regions[reg_num].p_driver->pf_nvm_init();
 8013448:	4b18      	ldr	r3, [pc, #96]	; (80134ac <nvm_init+0xa0>)
 801344a:	681a      	ldr	r2, [r3, #0]
 801344c:	79bb      	ldrb	r3, [r7, #6]
 801344e:	011b      	lsls	r3, r3, #4
 8013450:	4413      	add	r3, r2
 8013452:	68db      	ldr	r3, [r3, #12]
 8013454:	681b      	ldr	r3, [r3, #0]
 8013456:	4798      	blx	r3
 8013458:	4603      	mov	r3, r0
 801345a:	461a      	mov	r2, r3
 801345c:	79fb      	ldrb	r3, [r7, #7]
 801345e:	4313      	orrs	r3, r2
 8013460:	71fb      	strb	r3, [r7, #7]

			NVM_DBG_PRINT( "NVM: Region <%s> initialize with status: %d", gp_nvm_regions[reg_num].name, status );
 8013462:	4b12      	ldr	r3, [pc, #72]	; (80134ac <nvm_init+0xa0>)
 8013464:	681a      	ldr	r2, [r3, #0]
 8013466:	79bb      	ldrb	r3, [r7, #6]
 8013468:	011b      	lsls	r3, r3, #4
 801346a:	4413      	add	r3, r2
 801346c:	681a      	ldr	r2, [r3, #0]
 801346e:	79fb      	ldrb	r3, [r7, #7]
 8013470:	490f      	ldr	r1, [pc, #60]	; (80134b0 <nvm_init+0xa4>)
 8013472:	2000      	movs	r0, #0
 8013474:	f7fe fc62 	bl	8011d3c <com_dbg_print>
	for ( reg_num = 0; reg_num < eNVM_REGION_NUM_OF; reg_num++ )
 8013478:	79bb      	ldrb	r3, [r7, #6]
 801347a:	3301      	adds	r3, #1
 801347c:	71bb      	strb	r3, [r7, #6]
 801347e:	79bb      	ldrb	r3, [r7, #6]
 8013480:	2b00      	cmp	r3, #0
 8013482:	d0d8      	beq.n	8013436 <nvm_init+0x2a>
		}
	}

	// Init NVM interface
	status |= nvm_if_init();
 8013484:	f000 f91a 	bl	80136bc <nvm_if_init>
 8013488:	4603      	mov	r3, r0
 801348a:	461a      	mov	r2, r3
 801348c:	79fb      	ldrb	r3, [r7, #7]
 801348e:	4313      	orrs	r3, r2
 8013490:	71fb      	strb	r3, [r7, #7]

	NVM_ASSERT( eNVM_OK == status );
 8013492:	79fb      	ldrb	r3, [r7, #7]
 8013494:	2b00      	cmp	r3, #0
 8013496:	d001      	beq.n	801349c <nvm_init+0x90>
 8013498:	f001 fda8 	bl	8014fec <project_config_assert_fail>

	// Init done
	gb_is_init = true;
 801349c:	4b05      	ldr	r3, [pc, #20]	; (80134b4 <nvm_init+0xa8>)
 801349e:	2201      	movs	r2, #1
 80134a0:	701a      	strb	r2, [r3, #0]

	return status;
 80134a2:	79fb      	ldrb	r3, [r7, #7]
}
 80134a4:	4618      	mov	r0, r3
 80134a6:	3708      	adds	r7, #8
 80134a8:	46bd      	mov	sp, r7
 80134aa:	bd80      	pop	{r7, pc}
 80134ac:	200057b4 	.word	0x200057b4
 80134b0:	0801ad6c 	.word	0x0801ad6c
 80134b4:	200057b0 	.word	0x200057b0

080134b8 <nvm_is_init>:
*
* @return 	gb_is_init - Initialization flag
*/
////////////////////////////////////////////////////////////////////////////////
bool nvm_is_init(void)
{
 80134b8:	b480      	push	{r7}
 80134ba:	af00      	add	r7, sp, #0
	return gb_is_init;
 80134bc:	4b03      	ldr	r3, [pc, #12]	; (80134cc <nvm_is_init+0x14>)
 80134be:	781b      	ldrb	r3, [r3, #0]
}
 80134c0:	4618      	mov	r0, r3
 80134c2:	46bd      	mov	sp, r7
 80134c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134c8:	4770      	bx	lr
 80134ca:	bf00      	nop
 80134cc:	200057b0 	.word	0x200057b0

080134d0 <nvm_write>:
* @param[in]	p_data	- Pointer to written data
* @return 		status	- Status of operation
*/
////////////////////////////////////////////////////////////////////////////////
nvm_status_t nvm_write(const nvm_region_name_t region, const uint32_t addr, const uint32_t size, const uint8_t * const p_data)
{
 80134d0:	b580      	push	{r7, lr}
 80134d2:	b086      	sub	sp, #24
 80134d4:	af00      	add	r7, sp, #0
 80134d6:	60b9      	str	r1, [r7, #8]
 80134d8:	607a      	str	r2, [r7, #4]
 80134da:	603b      	str	r3, [r7, #0]
 80134dc:	4603      	mov	r3, r0
 80134de:	73fb      	strb	r3, [r7, #15]
	nvm_status_t status = eNVM_OK;
 80134e0:	2300      	movs	r3, #0
 80134e2:	75fb      	strb	r3, [r7, #23]

	// Is init
	NVM_ASSERT( true == gb_is_init );
 80134e4:	4b33      	ldr	r3, [pc, #204]	; (80135b4 <nvm_write+0xe4>)
 80134e6:	781b      	ldrb	r3, [r3, #0]
 80134e8:	f083 0301 	eor.w	r3, r3, #1
 80134ec:	b2db      	uxtb	r3, r3
 80134ee:	2b00      	cmp	r3, #0
 80134f0:	d001      	beq.n	80134f6 <nvm_write+0x26>
 80134f2:	f001 fd7b 	bl	8014fec <project_config_assert_fail>

	// Check inputs
	NVM_ASSERT( region < eNVM_REGION_NUM_OF );
 80134f6:	7bfb      	ldrb	r3, [r7, #15]
 80134f8:	2b00      	cmp	r3, #0
 80134fa:	d001      	beq.n	8013500 <nvm_write+0x30>
 80134fc:	f001 fd76 	bl	8014fec <project_config_assert_fail>
	NVM_ASSERT(		(( addr + gp_nvm_regions[region].start_addr ) < ( gp_nvm_regions[region].start_addr + gp_nvm_regions[region].size ))
 8013500:	4b2d      	ldr	r3, [pc, #180]	; (80135b8 <nvm_write+0xe8>)
 8013502:	681a      	ldr	r2, [r3, #0]
 8013504:	7bfb      	ldrb	r3, [r7, #15]
 8013506:	011b      	lsls	r3, r3, #4
 8013508:	4413      	add	r3, r2
 801350a:	685a      	ldr	r2, [r3, #4]
 801350c:	68bb      	ldr	r3, [r7, #8]
 801350e:	441a      	add	r2, r3
 8013510:	4b29      	ldr	r3, [pc, #164]	; (80135b8 <nvm_write+0xe8>)
 8013512:	6819      	ldr	r1, [r3, #0]
 8013514:	7bfb      	ldrb	r3, [r7, #15]
 8013516:	011b      	lsls	r3, r3, #4
 8013518:	440b      	add	r3, r1
 801351a:	6859      	ldr	r1, [r3, #4]
 801351c:	4b26      	ldr	r3, [pc, #152]	; (80135b8 <nvm_write+0xe8>)
 801351e:	6818      	ldr	r0, [r3, #0]
 8013520:	7bfb      	ldrb	r3, [r7, #15]
 8013522:	011b      	lsls	r3, r3, #4
 8013524:	4403      	add	r3, r0
 8013526:	689b      	ldr	r3, [r3, #8]
 8013528:	440b      	add	r3, r1
 801352a:	429a      	cmp	r2, r3
 801352c:	d21a      	bcs.n	8013564 <nvm_write+0x94>
 801352e:	4b22      	ldr	r3, [pc, #136]	; (80135b8 <nvm_write+0xe8>)
 8013530:	681a      	ldr	r2, [r3, #0]
 8013532:	7bfb      	ldrb	r3, [r7, #15]
 8013534:	011b      	lsls	r3, r3, #4
 8013536:	4413      	add	r3, r2
 8013538:	685a      	ldr	r2, [r3, #4]
 801353a:	68bb      	ldr	r3, [r7, #8]
 801353c:	441a      	add	r2, r3
 801353e:	687b      	ldr	r3, [r7, #4]
 8013540:	441a      	add	r2, r3
 8013542:	4b1d      	ldr	r3, [pc, #116]	; (80135b8 <nvm_write+0xe8>)
 8013544:	6819      	ldr	r1, [r3, #0]
 8013546:	7bfb      	ldrb	r3, [r7, #15]
 8013548:	011b      	lsls	r3, r3, #4
 801354a:	440b      	add	r3, r1
 801354c:	6859      	ldr	r1, [r3, #4]
 801354e:	68bb      	ldr	r3, [r7, #8]
 8013550:	4419      	add	r1, r3
 8013552:	4b19      	ldr	r3, [pc, #100]	; (80135b8 <nvm_write+0xe8>)
 8013554:	6818      	ldr	r0, [r3, #0]
 8013556:	7bfb      	ldrb	r3, [r7, #15]
 8013558:	011b      	lsls	r3, r3, #4
 801355a:	4403      	add	r3, r0
 801355c:	689b      	ldr	r3, [r3, #8]
 801355e:	440b      	add	r3, r1
 8013560:	429a      	cmp	r2, r3
 8013562:	d301      	bcc.n	8013568 <nvm_write+0x98>
 8013564:	f001 fd42 	bl	8014fec <project_config_assert_fail>
				&& 	(( addr + gp_nvm_regions[region].start_addr + size ) < ( addr + gp_nvm_regions[region].start_addr + gp_nvm_regions[region].size )));

	#if ( 1 == NVM_CFG_MUTEX_EN )
		if ( eNVM_OK == nvm_if_aquire_mutex())
 8013568:	f000 f8c2 	bl	80136f0 <nvm_if_aquire_mutex>
 801356c:	4603      	mov	r3, r0
 801356e:	2b00      	cmp	r3, #0
 8013570:	d119      	bne.n	80135a6 <nvm_write+0xd6>
		{
	#endif
			// Write
			if ( eNVM_OK != gp_nvm_regions[region].p_driver->pf_nvm_write( gp_nvm_regions[region].start_addr + addr, size, p_data ))
 8013572:	4b11      	ldr	r3, [pc, #68]	; (80135b8 <nvm_write+0xe8>)
 8013574:	681a      	ldr	r2, [r3, #0]
 8013576:	7bfb      	ldrb	r3, [r7, #15]
 8013578:	011b      	lsls	r3, r3, #4
 801357a:	4413      	add	r3, r2
 801357c:	68db      	ldr	r3, [r3, #12]
 801357e:	685b      	ldr	r3, [r3, #4]
 8013580:	4a0d      	ldr	r2, [pc, #52]	; (80135b8 <nvm_write+0xe8>)
 8013582:	6811      	ldr	r1, [r2, #0]
 8013584:	7bfa      	ldrb	r2, [r7, #15]
 8013586:	0112      	lsls	r2, r2, #4
 8013588:	440a      	add	r2, r1
 801358a:	6851      	ldr	r1, [r2, #4]
 801358c:	68ba      	ldr	r2, [r7, #8]
 801358e:	1888      	adds	r0, r1, r2
 8013590:	683a      	ldr	r2, [r7, #0]
 8013592:	6879      	ldr	r1, [r7, #4]
 8013594:	4798      	blx	r3
 8013596:	4603      	mov	r3, r0
 8013598:	2b00      	cmp	r3, #0
 801359a:	d001      	beq.n	80135a0 <nvm_write+0xd0>
			{
				status = eNVM_ERROR;
 801359c:	2301      	movs	r3, #1
 801359e:	75fb      	strb	r3, [r7, #23]
			}

	#if ( 1 == NVM_CFG_MUTEX_EN )
			nvm_if_release_mutex();
 80135a0:	f000 f8be 	bl	8013720 <nvm_if_release_mutex>
 80135a4:	e001      	b.n	80135aa <nvm_write+0xda>
		}

		// Mutex not acquire
		else
		{
			status = eNVM_ERROR;
 80135a6:	2301      	movs	r3, #1
 80135a8:	75fb      	strb	r3, [r7, #23]
		}
	#endif

	return status;
 80135aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80135ac:	4618      	mov	r0, r3
 80135ae:	3718      	adds	r7, #24
 80135b0:	46bd      	mov	sp, r7
 80135b2:	bd80      	pop	{r7, pc}
 80135b4:	200057b0 	.word	0x200057b0
 80135b8:	200057b4 	.word	0x200057b4

080135bc <nvm_read>:
* @param[in]	p_data	- Pointer to read data
* @return 		status	- Status of operation
*/
////////////////////////////////////////////////////////////////////////////////
nvm_status_t nvm_read(const nvm_region_name_t region, const uint32_t addr, const uint32_t size, uint8_t * const p_data)
{
 80135bc:	b580      	push	{r7, lr}
 80135be:	b086      	sub	sp, #24
 80135c0:	af00      	add	r7, sp, #0
 80135c2:	60b9      	str	r1, [r7, #8]
 80135c4:	607a      	str	r2, [r7, #4]
 80135c6:	603b      	str	r3, [r7, #0]
 80135c8:	4603      	mov	r3, r0
 80135ca:	73fb      	strb	r3, [r7, #15]
	nvm_status_t status = eNVM_OK;
 80135cc:	2300      	movs	r3, #0
 80135ce:	75fb      	strb	r3, [r7, #23]

	// Is init
	NVM_ASSERT( true == gb_is_init );
 80135d0:	4b33      	ldr	r3, [pc, #204]	; (80136a0 <nvm_read+0xe4>)
 80135d2:	781b      	ldrb	r3, [r3, #0]
 80135d4:	f083 0301 	eor.w	r3, r3, #1
 80135d8:	b2db      	uxtb	r3, r3
 80135da:	2b00      	cmp	r3, #0
 80135dc:	d001      	beq.n	80135e2 <nvm_read+0x26>
 80135de:	f001 fd05 	bl	8014fec <project_config_assert_fail>

	// Check inputs
	NVM_ASSERT( region < eNVM_REGION_NUM_OF );
 80135e2:	7bfb      	ldrb	r3, [r7, #15]
 80135e4:	2b00      	cmp	r3, #0
 80135e6:	d001      	beq.n	80135ec <nvm_read+0x30>
 80135e8:	f001 fd00 	bl	8014fec <project_config_assert_fail>
	NVM_ASSERT(		(( addr + gp_nvm_regions[region].start_addr ) < ( gp_nvm_regions[region].start_addr + gp_nvm_regions[region].size ))
 80135ec:	4b2d      	ldr	r3, [pc, #180]	; (80136a4 <nvm_read+0xe8>)
 80135ee:	681a      	ldr	r2, [r3, #0]
 80135f0:	7bfb      	ldrb	r3, [r7, #15]
 80135f2:	011b      	lsls	r3, r3, #4
 80135f4:	4413      	add	r3, r2
 80135f6:	685a      	ldr	r2, [r3, #4]
 80135f8:	68bb      	ldr	r3, [r7, #8]
 80135fa:	441a      	add	r2, r3
 80135fc:	4b29      	ldr	r3, [pc, #164]	; (80136a4 <nvm_read+0xe8>)
 80135fe:	6819      	ldr	r1, [r3, #0]
 8013600:	7bfb      	ldrb	r3, [r7, #15]
 8013602:	011b      	lsls	r3, r3, #4
 8013604:	440b      	add	r3, r1
 8013606:	6859      	ldr	r1, [r3, #4]
 8013608:	4b26      	ldr	r3, [pc, #152]	; (80136a4 <nvm_read+0xe8>)
 801360a:	6818      	ldr	r0, [r3, #0]
 801360c:	7bfb      	ldrb	r3, [r7, #15]
 801360e:	011b      	lsls	r3, r3, #4
 8013610:	4403      	add	r3, r0
 8013612:	689b      	ldr	r3, [r3, #8]
 8013614:	440b      	add	r3, r1
 8013616:	429a      	cmp	r2, r3
 8013618:	d21a      	bcs.n	8013650 <nvm_read+0x94>
 801361a:	4b22      	ldr	r3, [pc, #136]	; (80136a4 <nvm_read+0xe8>)
 801361c:	681a      	ldr	r2, [r3, #0]
 801361e:	7bfb      	ldrb	r3, [r7, #15]
 8013620:	011b      	lsls	r3, r3, #4
 8013622:	4413      	add	r3, r2
 8013624:	685a      	ldr	r2, [r3, #4]
 8013626:	68bb      	ldr	r3, [r7, #8]
 8013628:	441a      	add	r2, r3
 801362a:	687b      	ldr	r3, [r7, #4]
 801362c:	441a      	add	r2, r3
 801362e:	4b1d      	ldr	r3, [pc, #116]	; (80136a4 <nvm_read+0xe8>)
 8013630:	6819      	ldr	r1, [r3, #0]
 8013632:	7bfb      	ldrb	r3, [r7, #15]
 8013634:	011b      	lsls	r3, r3, #4
 8013636:	440b      	add	r3, r1
 8013638:	6859      	ldr	r1, [r3, #4]
 801363a:	68bb      	ldr	r3, [r7, #8]
 801363c:	4419      	add	r1, r3
 801363e:	4b19      	ldr	r3, [pc, #100]	; (80136a4 <nvm_read+0xe8>)
 8013640:	6818      	ldr	r0, [r3, #0]
 8013642:	7bfb      	ldrb	r3, [r7, #15]
 8013644:	011b      	lsls	r3, r3, #4
 8013646:	4403      	add	r3, r0
 8013648:	689b      	ldr	r3, [r3, #8]
 801364a:	440b      	add	r3, r1
 801364c:	429a      	cmp	r2, r3
 801364e:	d301      	bcc.n	8013654 <nvm_read+0x98>
 8013650:	f001 fccc 	bl	8014fec <project_config_assert_fail>
				&& 	(( addr + gp_nvm_regions[region].start_addr + size ) < ( addr + gp_nvm_regions[region].start_addr + gp_nvm_regions[region].size )));

	#if ( 1 == NVM_CFG_MUTEX_EN )
		if ( eNVM_OK == nvm_if_aquire_mutex())
 8013654:	f000 f84c 	bl	80136f0 <nvm_if_aquire_mutex>
 8013658:	4603      	mov	r3, r0
 801365a:	2b00      	cmp	r3, #0
 801365c:	d119      	bne.n	8013692 <nvm_read+0xd6>
		{
	#endif
			// Read
			if ( eNVM_OK != gp_nvm_regions[region].p_driver->pf_nvm_read( gp_nvm_regions[region].start_addr + addr, size, p_data ))
 801365e:	4b11      	ldr	r3, [pc, #68]	; (80136a4 <nvm_read+0xe8>)
 8013660:	681a      	ldr	r2, [r3, #0]
 8013662:	7bfb      	ldrb	r3, [r7, #15]
 8013664:	011b      	lsls	r3, r3, #4
 8013666:	4413      	add	r3, r2
 8013668:	68db      	ldr	r3, [r3, #12]
 801366a:	689b      	ldr	r3, [r3, #8]
 801366c:	4a0d      	ldr	r2, [pc, #52]	; (80136a4 <nvm_read+0xe8>)
 801366e:	6811      	ldr	r1, [r2, #0]
 8013670:	7bfa      	ldrb	r2, [r7, #15]
 8013672:	0112      	lsls	r2, r2, #4
 8013674:	440a      	add	r2, r1
 8013676:	6851      	ldr	r1, [r2, #4]
 8013678:	68ba      	ldr	r2, [r7, #8]
 801367a:	1888      	adds	r0, r1, r2
 801367c:	683a      	ldr	r2, [r7, #0]
 801367e:	6879      	ldr	r1, [r7, #4]
 8013680:	4798      	blx	r3
 8013682:	4603      	mov	r3, r0
 8013684:	2b00      	cmp	r3, #0
 8013686:	d001      	beq.n	801368c <nvm_read+0xd0>
			{
				status = eNVM_ERROR;
 8013688:	2301      	movs	r3, #1
 801368a:	75fb      	strb	r3, [r7, #23]
			}

	#if ( 1 == NVM_CFG_MUTEX_EN )
			nvm_if_release_mutex();
 801368c:	f000 f848 	bl	8013720 <nvm_if_release_mutex>
 8013690:	e001      	b.n	8013696 <nvm_read+0xda>
		}

		// Mutex not acquire
		else
		{
			status = eNVM_ERROR;
 8013692:	2301      	movs	r3, #1
 8013694:	75fb      	strb	r3, [r7, #23]
		}
	#endif

	return status;
 8013696:	7dfb      	ldrb	r3, [r7, #23]
}
 8013698:	4618      	mov	r0, r3
 801369a:	3718      	adds	r7, #24
 801369c:	46bd      	mov	sp, r7
 801369e:	bd80      	pop	{r7, pc}
 80136a0:	200057b0 	.word	0x200057b0
 80136a4:	200057b4 	.word	0x200057b4

080136a8 <nvm_cfg_get_regions>:
*
* @return	Pointer to NVM configuration table
*/
////////////////////////////////////////////////////////////////////////////////
const void * nvm_cfg_get_regions(void)
{
 80136a8:	b480      	push	{r7}
 80136aa:	af00      	add	r7, sp, #0
	return (const nvm_region_t*) &g_nvm_region;
 80136ac:	4b02      	ldr	r3, [pc, #8]	; (80136b8 <nvm_cfg_get_regions+0x10>)
}
 80136ae:	4618      	mov	r0, r3
 80136b0:	46bd      	mov	sp, r7
 80136b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80136b6:	4770      	bx	lr
 80136b8:	0801f2e0 	.word	0x0801f2e0

080136bc <nvm_if_init>:
*
* @return 		status - Status of initialization
*/
////////////////////////////////////////////////////////////////////////////////
nvm_status_t nvm_if_init(void)
{
 80136bc:	b580      	push	{r7, lr}
 80136be:	b082      	sub	sp, #8
 80136c0:	af00      	add	r7, sp, #0
	nvm_status_t status = eNVM_OK;
 80136c2:	2300      	movs	r3, #0
 80136c4:	71fb      	strb	r3, [r7, #7]

	// USER CODE BEGIN...

	// Create mutex
	g_nvm_mutex_id = osMutexNew( &g_nvm_mutex_attr );
 80136c6:	4808      	ldr	r0, [pc, #32]	; (80136e8 <nvm_if_init+0x2c>)
 80136c8:	f7f3 fda8 	bl	800721c <osMutexNew>
 80136cc:	4603      	mov	r3, r0
 80136ce:	4a07      	ldr	r2, [pc, #28]	; (80136ec <nvm_if_init+0x30>)
 80136d0:	6013      	str	r3, [r2, #0]

	if ( NULL == g_nvm_mutex_id )
 80136d2:	4b06      	ldr	r3, [pc, #24]	; (80136ec <nvm_if_init+0x30>)
 80136d4:	681b      	ldr	r3, [r3, #0]
 80136d6:	2b00      	cmp	r3, #0
 80136d8:	d101      	bne.n	80136de <nvm_if_init+0x22>
	{
		status = eNVM_ERROR;
 80136da:	2301      	movs	r3, #1
 80136dc:	71fb      	strb	r3, [r7, #7]
	}

	// USER CODE END...


	return status;
 80136de:	79fb      	ldrb	r3, [r7, #7]
}
 80136e0:	4618      	mov	r0, r3
 80136e2:	3708      	adds	r7, #8
 80136e4:	46bd      	mov	sp, r7
 80136e6:	bd80      	pop	{r7, pc}
 80136e8:	0801f2f0 	.word	0x0801f2f0
 80136ec:	200057b8 	.word	0x200057b8

080136f0 <nvm_if_aquire_mutex>:
*
* @return 		status - Status of operation
*/
////////////////////////////////////////////////////////////////////////////////
nvm_status_t nvm_if_aquire_mutex(void)
{
 80136f0:	b580      	push	{r7, lr}
 80136f2:	b082      	sub	sp, #8
 80136f4:	af00      	add	r7, sp, #0
	nvm_status_t status = eNVM_OK;
 80136f6:	2300      	movs	r3, #0
 80136f8:	71fb      	strb	r3, [r7, #7]

	// USER CODE BEGIN...

	if ( osOK == osMutexAcquire( g_nvm_mutex_id, NVM_CFG_MUTEX_TIMEOUT_MS ))
 80136fa:	4b08      	ldr	r3, [pc, #32]	; (801371c <nvm_if_aquire_mutex+0x2c>)
 80136fc:	681b      	ldr	r3, [r3, #0]
 80136fe:	210a      	movs	r1, #10
 8013700:	4618      	mov	r0, r3
 8013702:	f7f3 fe25 	bl	8007350 <osMutexAcquire>
 8013706:	4603      	mov	r3, r0
 8013708:	2b00      	cmp	r3, #0
 801370a:	d001      	beq.n	8013710 <nvm_if_aquire_mutex+0x20>
	{
		// No action
	}
	else
	{
		status = eNVM_ERROR;
 801370c:	2301      	movs	r3, #1
 801370e:	71fb      	strb	r3, [r7, #7]
	}

	// USER CODE END...

	return status;
 8013710:	79fb      	ldrb	r3, [r7, #7]
}
 8013712:	4618      	mov	r0, r3
 8013714:	3708      	adds	r7, #8
 8013716:	46bd      	mov	sp, r7
 8013718:	bd80      	pop	{r7, pc}
 801371a:	bf00      	nop
 801371c:	200057b8 	.word	0x200057b8

08013720 <nvm_if_release_mutex>:
*
* @return 		status - Status of operation
*/
////////////////////////////////////////////////////////////////////////////////
nvm_status_t nvm_if_release_mutex(void)
{
 8013720:	b580      	push	{r7, lr}
 8013722:	b082      	sub	sp, #8
 8013724:	af00      	add	r7, sp, #0
	nvm_status_t status = eNVM_OK;
 8013726:	2300      	movs	r3, #0
 8013728:	71fb      	strb	r3, [r7, #7]

	// USER CODE BEGIN...

	osMutexRelease( g_nvm_mutex_id );
 801372a:	4b05      	ldr	r3, [pc, #20]	; (8013740 <nvm_if_release_mutex+0x20>)
 801372c:	681b      	ldr	r3, [r3, #0]
 801372e:	4618      	mov	r0, r3
 8013730:	f7f3 fe6c 	bl	800740c <osMutexRelease>

	// USER CODE END...

	return status;
 8013734:	79fb      	ldrb	r3, [r7, #7]
}
 8013736:	4618      	mov	r0, r3
 8013738:	3708      	adds	r7, #8
 801373a:	46bd      	mov	sp, r7
 801373c:	bd80      	pop	{r7, pc}
 801373e:	bf00      	nop
 8013740:	200057b8 	.word	0x200057b8

08013744 <par_cfg_get_table>:
*
* @return		pointer to configuration table
*/
////////////////////////////////////////////////////////////////////////////////
const void * par_cfg_get_table(void)
{
 8013744:	b480      	push	{r7}
 8013746:	af00      	add	r7, sp, #0
	return (const par_cfg_t*) &g_par_table;
 8013748:	4b02      	ldr	r3, [pc, #8]	; (8013754 <par_cfg_get_table+0x10>)
}
 801374a:	4618      	mov	r0, r3
 801374c:	46bd      	mov	sp, r7
 801374e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013752:	4770      	bx	lr
 8013754:	0801f300 	.word	0x0801f300

08013758 <par_if_init>:
*
* @return 		status - Status of initialization
*/
////////////////////////////////////////////////////////////////////////////////
par_status_t par_if_init(void)
{
 8013758:	b580      	push	{r7, lr}
 801375a:	b082      	sub	sp, #8
 801375c:	af00      	add	r7, sp, #0
	par_status_t status = ePAR_OK;
 801375e:	2300      	movs	r3, #0
 8013760:	71fb      	strb	r3, [r7, #7]

	// USER CODE BEGIN...

	// Create mutex
	g_par_mutex_id = osMutexNew( &g_par_mutex_attr );
 8013762:	4808      	ldr	r0, [pc, #32]	; (8013784 <par_if_init+0x2c>)
 8013764:	f7f3 fd5a 	bl	800721c <osMutexNew>
 8013768:	4603      	mov	r3, r0
 801376a:	4a07      	ldr	r2, [pc, #28]	; (8013788 <par_if_init+0x30>)
 801376c:	6013      	str	r3, [r2, #0]

	if ( NULL == g_par_mutex_id )
 801376e:	4b06      	ldr	r3, [pc, #24]	; (8013788 <par_if_init+0x30>)
 8013770:	681b      	ldr	r3, [r3, #0]
 8013772:	2b00      	cmp	r3, #0
 8013774:	d101      	bne.n	801377a <par_if_init+0x22>
	{
		status = ePAR_ERROR;
 8013776:	2304      	movs	r3, #4
 8013778:	71fb      	strb	r3, [r7, #7]
	}

	// USER CODE END...


	return status;
 801377a:	79fb      	ldrb	r3, [r7, #7]
}
 801377c:	4618      	mov	r0, r3
 801377e:	3708      	adds	r7, #8
 8013780:	46bd      	mov	sp, r7
 8013782:	bd80      	pop	{r7, pc}
 8013784:	0801f530 	.word	0x0801f530
 8013788:	200057bc 	.word	0x200057bc

0801378c <par_if_aquire_mutex>:
*
* @return 		status - Status of operation
*/
////////////////////////////////////////////////////////////////////////////////
par_status_t par_if_aquire_mutex(void)
{
 801378c:	b580      	push	{r7, lr}
 801378e:	b082      	sub	sp, #8
 8013790:	af00      	add	r7, sp, #0
	par_status_t status = ePAR_OK;
 8013792:	2300      	movs	r3, #0
 8013794:	71fb      	strb	r3, [r7, #7]

	// USER CODE BEGIN...

	if ( osOK == osMutexAcquire( g_par_mutex_id, PAR_CFG_MUTEX_TIMEOUT_MS ))
 8013796:	4b08      	ldr	r3, [pc, #32]	; (80137b8 <par_if_aquire_mutex+0x2c>)
 8013798:	681b      	ldr	r3, [r3, #0]
 801379a:	210a      	movs	r1, #10
 801379c:	4618      	mov	r0, r3
 801379e:	f7f3 fdd7 	bl	8007350 <osMutexAcquire>
 80137a2:	4603      	mov	r3, r0
 80137a4:	2b00      	cmp	r3, #0
 80137a6:	d001      	beq.n	80137ac <par_if_aquire_mutex+0x20>
	{
		// No action
	}
	else
	{
		status = ePAR_ERROR;
 80137a8:	2304      	movs	r3, #4
 80137aa:	71fb      	strb	r3, [r7, #7]
	}

	// USER CODE END...

	return status;
 80137ac:	79fb      	ldrb	r3, [r7, #7]
}
 80137ae:	4618      	mov	r0, r3
 80137b0:	3708      	adds	r7, #8
 80137b2:	46bd      	mov	sp, r7
 80137b4:	bd80      	pop	{r7, pc}
 80137b6:	bf00      	nop
 80137b8:	200057bc 	.word	0x200057bc

080137bc <par_if_release_mutex>:
*
* @return 		status - Status of operation
*/
////////////////////////////////////////////////////////////////////////////////
par_status_t par_if_release_mutex(void)
{
 80137bc:	b580      	push	{r7, lr}
 80137be:	b082      	sub	sp, #8
 80137c0:	af00      	add	r7, sp, #0
	par_status_t status = ePAR_OK;
 80137c2:	2300      	movs	r3, #0
 80137c4:	71fb      	strb	r3, [r7, #7]

	// USER CODE BEGIN...

	osMutexRelease( g_par_mutex_id );
 80137c6:	4b05      	ldr	r3, [pc, #20]	; (80137dc <par_if_release_mutex+0x20>)
 80137c8:	681b      	ldr	r3, [r3, #0]
 80137ca:	4618      	mov	r0, r3
 80137cc:	f7f3 fe1e 	bl	800740c <osMutexRelease>

	// USER CODE END...

	return status;
 80137d0:	79fb      	ldrb	r3, [r7, #7]
}
 80137d2:	4618      	mov	r0, r3
 80137d4:	3708      	adds	r7, #8
 80137d6:	46bd      	mov	sp, r7
 80137d8:	bd80      	pop	{r7, pc}
 80137da:	bf00      	nop
 80137dc:	200057bc 	.word	0x200057bc

080137e0 <par_init>:
*
* @return		status  - Status of initialization
*/
////////////////////////////////////////////////////////////////////////////////
par_status_t par_init(void)
{
 80137e0:	b580      	push	{r7, lr}
 80137e2:	b082      	sub	sp, #8
 80137e4:	af00      	add	r7, sp, #0
	par_status_t status = ePAR_OK;
 80137e6:	2300      	movs	r3, #0
 80137e8:	71fb      	strb	r3, [r7, #7]

	// Get parameter table
	gp_par_table = par_cfg_get_table();
 80137ea:	f7ff ffab 	bl	8013744 <par_cfg_get_table>
 80137ee:	4603      	mov	r3, r0
 80137f0:	4a1f      	ldr	r2, [pc, #124]	; (8013870 <par_init+0x90>)
 80137f2:	6013      	str	r3, [r2, #0]
	PAR_ASSERT( NULL != gp_par_table );
 80137f4:	4b1e      	ldr	r3, [pc, #120]	; (8013870 <par_init+0x90>)
 80137f6:	681b      	ldr	r3, [r3, #0]
 80137f8:	2b00      	cmp	r3, #0
 80137fa:	d101      	bne.n	8013800 <par_init+0x20>
 80137fc:	f001 fbf6 	bl	8014fec <project_config_assert_fail>

	// Check if par table is defined correctly
	status |= par_check_table_validy( gp_par_table );
 8013800:	4b1b      	ldr	r3, [pc, #108]	; (8013870 <par_init+0x90>)
 8013802:	681b      	ldr	r3, [r3, #0]
 8013804:	4618      	mov	r0, r3
 8013806:	f000 fbd9 	bl	8013fbc <par_check_table_validy>
 801380a:	4603      	mov	r3, r0
 801380c:	461a      	mov	r2, r3
 801380e:	79fb      	ldrb	r3, [r7, #7]
 8013810:	4313      	orrs	r3, r2
 8013812:	71fb      	strb	r3, [r7, #7]

	// Allocate space in RAM
	status |= par_allocate_ram_space( &gpu8_par_value );
 8013814:	4817      	ldr	r0, [pc, #92]	; (8013874 <par_init+0x94>)
 8013816:	f000 fb21 	bl	8013e5c <par_allocate_ram_space>
 801381a:	4603      	mov	r3, r0
 801381c:	461a      	mov	r2, r3
 801381e:	79fb      	ldrb	r3, [r7, #7]
 8013820:	4313      	orrs	r3, r2
 8013822:	71fb      	strb	r3, [r7, #7]
	PAR_ASSERT( NULL != gpu8_par_value );
 8013824:	4b13      	ldr	r3, [pc, #76]	; (8013874 <par_init+0x94>)
 8013826:	681b      	ldr	r3, [r3, #0]
 8013828:	2b00      	cmp	r3, #0
 801382a:	d101      	bne.n	8013830 <par_init+0x50>
 801382c:	f001 fbde 	bl	8014fec <project_config_assert_fail>

	// Initialize parameter interface
	status |= par_if_init();
 8013830:	f7ff ff92 	bl	8013758 <par_if_init>
 8013834:	4603      	mov	r3, r0
 8013836:	461a      	mov	r2, r3
 8013838:	79fb      	ldrb	r3, [r7, #7]
 801383a:	4313      	orrs	r3, r2
 801383c:	71fb      	strb	r3, [r7, #7]

	// Init succeed
	if ( ePAR_OK == status )
 801383e:	79fb      	ldrb	r3, [r7, #7]
 8013840:	2b00      	cmp	r3, #0
 8013842:	d102      	bne.n	801384a <par_init+0x6a>
	{
		gb_is_init = true;
 8013844:	4b0c      	ldr	r3, [pc, #48]	; (8013878 <par_init+0x98>)
 8013846:	2201      	movs	r2, #1
 8013848:	701a      	strb	r2, [r3, #0]
	}

	// Set all parameters to defualt
	par_set_all_to_default();
 801384a:	f000 f9cb 	bl	8013be4 <par_set_all_to_default>

	#if ( 1 == PAR_CFG_NVM_EN )

		// Init and load parameters from NVM
		status |= par_nvm_init();
 801384e:	f001 f909 	bl	8014a64 <par_nvm_init>
 8013852:	4603      	mov	r3, r0
 8013854:	461a      	mov	r2, r3
 8013856:	79fb      	ldrb	r3, [r7, #7]
 8013858:	4313      	orrs	r3, r2
 801385a:	71fb      	strb	r3, [r7, #7]

	#endif

	PAR_ASSERT( ePAR_OK == status );
 801385c:	79fb      	ldrb	r3, [r7, #7]
 801385e:	2b00      	cmp	r3, #0
 8013860:	d001      	beq.n	8013866 <par_init+0x86>
 8013862:	f001 fbc3 	bl	8014fec <project_config_assert_fail>

	return status;
 8013866:	79fb      	ldrb	r3, [r7, #7]
}
 8013868:	4618      	mov	r0, r3
 801386a:	3708      	adds	r7, #8
 801386c:	46bd      	mov	sp, r7
 801386e:	bd80      	pop	{r7, pc}
 8013870:	200057c0 	.word	0x200057c0
 8013874:	200057c8 	.word	0x200057c8
 8013878:	200057c4 	.word	0x200057c4

0801387c <par_is_init>:
*
* @return		is_init	- Status of initializatio
*/
////////////////////////////////////////////////////////////////////////////////
const bool par_is_init(void)
{
 801387c:	b480      	push	{r7}
 801387e:	af00      	add	r7, sp, #0
	return (const bool) gb_is_init;
 8013880:	4b03      	ldr	r3, [pc, #12]	; (8013890 <par_is_init+0x14>)
 8013882:	781b      	ldrb	r3, [r3, #0]
}
 8013884:	4618      	mov	r0, r3
 8013886:	46bd      	mov	sp, r7
 8013888:	f85d 7b04 	ldr.w	r7, [sp], #4
 801388c:	4770      	bx	lr
 801388e:	bf00      	nop
 8013890:	200057c4 	.word	0x200057c4

08013894 <par_get_num_by_id>:
* @param[in]	id 		- Parameter ID
* @return		par_num	- Parameter enumeration number
*/
////////////////////////////////////////////////////////////////////////////////
par_num_t par_get_num_by_id(const uint16_t id)
{
 8013894:	b580      	push	{r7, lr}
 8013896:	b084      	sub	sp, #16
 8013898:	af00      	add	r7, sp, #0
 801389a:	4603      	mov	r3, r0
 801389c:	80fb      	strh	r3, [r7, #6]
	uint16_t par_num = 0UL;
 801389e:	2300      	movs	r3, #0
 80138a0:	81fb      	strh	r3, [r7, #14]

	// Is init
	PAR_ASSERT( true == gb_is_init );
 80138a2:	4b15      	ldr	r3, [pc, #84]	; (80138f8 <par_get_num_by_id+0x64>)
 80138a4:	781b      	ldrb	r3, [r3, #0]
 80138a6:	f083 0301 	eor.w	r3, r3, #1
 80138aa:	b2db      	uxtb	r3, r3
 80138ac:	2b00      	cmp	r3, #0
 80138ae:	d001      	beq.n	80138b4 <par_get_num_by_id+0x20>
 80138b0:	f001 fb9c 	bl	8014fec <project_config_assert_fail>

	// TRICK: Loop one time more in order to catch invalid ID number!
	for ( par_num = 0; par_num < ( ePAR_NUM_OF + 1 ); par_num++ )
 80138b4:	2300      	movs	r3, #0
 80138b6:	81fb      	strh	r3, [r7, #14]
 80138b8:	e00e      	b.n	80138d8 <par_get_num_by_id+0x44>
	{
		if ( gp_par_table[par_num].id == id )
 80138ba:	4b10      	ldr	r3, [pc, #64]	; (80138fc <par_get_num_by_id+0x68>)
 80138bc:	6819      	ldr	r1, [r3, #0]
 80138be:	89fa      	ldrh	r2, [r7, #14]
 80138c0:	4613      	mov	r3, r2
 80138c2:	00db      	lsls	r3, r3, #3
 80138c4:	1a9b      	subs	r3, r3, r2
 80138c6:	009b      	lsls	r3, r3, #2
 80138c8:	440b      	add	r3, r1
 80138ca:	8a9b      	ldrh	r3, [r3, #20]
 80138cc:	88fa      	ldrh	r2, [r7, #6]
 80138ce:	429a      	cmp	r2, r3
 80138d0:	d006      	beq.n	80138e0 <par_get_num_by_id+0x4c>
	for ( par_num = 0; par_num < ( ePAR_NUM_OF + 1 ); par_num++ )
 80138d2:	89fb      	ldrh	r3, [r7, #14]
 80138d4:	3301      	adds	r3, #1
 80138d6:	81fb      	strh	r3, [r7, #14]
 80138d8:	89fb      	ldrh	r3, [r7, #14]
 80138da:	2b14      	cmp	r3, #20
 80138dc:	d9ed      	bls.n	80138ba <par_get_num_by_id+0x26>
 80138de:	e000      	b.n	80138e2 <par_get_num_by_id+0x4e>
		{
			break;
 80138e0:	bf00      	nop
		}
	}

	// Invalid ID request
	PAR_ASSERT( par_num < ePAR_NUM_OF );
 80138e2:	89fb      	ldrh	r3, [r7, #14]
 80138e4:	2b13      	cmp	r3, #19
 80138e6:	d901      	bls.n	80138ec <par_get_num_by_id+0x58>
 80138e8:	f001 fb80 	bl	8014fec <project_config_assert_fail>

	return par_num;
 80138ec:	89fb      	ldrh	r3, [r7, #14]
 80138ee:	b2db      	uxtb	r3, r3
}
 80138f0:	4618      	mov	r0, r3
 80138f2:	3710      	adds	r7, #16
 80138f4:	46bd      	mov	sp, r7
 80138f6:	bd80      	pop	{r7, pc}
 80138f8:	200057c4 	.word	0x200057c4
 80138fc:	200057c0 	.word	0x200057c0

08013900 <par_set>:
* @param[in]	p_val	- Pointer to value
* @return		status 	- Status of operation
*/
////////////////////////////////////////////////////////////////////////////////
par_status_t par_set(const par_num_t par_num, const void * p_val)
{
 8013900:	b580      	push	{r7, lr}
 8013902:	b084      	sub	sp, #16
 8013904:	af00      	add	r7, sp, #0
 8013906:	4603      	mov	r3, r0
 8013908:	6039      	str	r1, [r7, #0]
 801390a:	71fb      	strb	r3, [r7, #7]
	par_status_t status = ePAR_OK;
 801390c:	2300      	movs	r3, #0
 801390e:	73fb      	strb	r3, [r7, #15]

	// Is init
	PAR_ASSERT( true == gb_is_init );
 8013910:	4b43      	ldr	r3, [pc, #268]	; (8013a20 <par_set+0x120>)
 8013912:	781b      	ldrb	r3, [r3, #0]
 8013914:	f083 0301 	eor.w	r3, r3, #1
 8013918:	b2db      	uxtb	r3, r3
 801391a:	2b00      	cmp	r3, #0
 801391c:	d001      	beq.n	8013922 <par_set+0x22>
 801391e:	f001 fb65 	bl	8014fec <project_config_assert_fail>

	// Check input
	PAR_ASSERT( par_num < ePAR_NUM_OF );
 8013922:	79fb      	ldrb	r3, [r7, #7]
 8013924:	2b13      	cmp	r3, #19
 8013926:	d901      	bls.n	801392c <par_set+0x2c>
 8013928:	f001 fb60 	bl	8014fec <project_config_assert_fail>

	#if ( 1 == PAR_CFG_MUTEX_EN )
		if ( ePAR_OK == par_if_aquire_mutex())
 801392c:	f7ff ff2e 	bl	801378c <par_if_aquire_mutex>
 8013930:	4603      	mov	r3, r0
 8013932:	2b00      	cmp	r3, #0
 8013934:	d16c      	bne.n	8013a10 <par_set+0x110>
		{
	#endif
			switch ( gp_par_table[ par_num ].type )
 8013936:	4b3b      	ldr	r3, [pc, #236]	; (8013a24 <par_set+0x124>)
 8013938:	6819      	ldr	r1, [r3, #0]
 801393a:	79fa      	ldrb	r2, [r7, #7]
 801393c:	4613      	mov	r3, r2
 801393e:	00db      	lsls	r3, r3, #3
 8013940:	1a9b      	subs	r3, r3, r2
 8013942:	009b      	lsls	r3, r3, #2
 8013944:	440b      	add	r3, r1
 8013946:	7d9b      	ldrb	r3, [r3, #22]
 8013948:	2b06      	cmp	r3, #6
 801394a:	d85b      	bhi.n	8013a04 <par_set+0x104>
 801394c:	a201      	add	r2, pc, #4	; (adr r2, 8013954 <par_set+0x54>)
 801394e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013952:	bf00      	nop
 8013954:	08013971 	.word	0x08013971
 8013958:	0801399b 	.word	0x0801399b
 801395c:	080139c5 	.word	0x080139c5
 8013960:	08013985 	.word	0x08013985
 8013964:	080139af 	.word	0x080139af
 8013968:	080139d9 	.word	0x080139d9
 801396c:	080139ed 	.word	0x080139ed
			{
				case ePAR_TYPE_U8:
					status = par_set_u8( par_num, *(uint8_t*) p_val );
 8013970:	683b      	ldr	r3, [r7, #0]
 8013972:	781a      	ldrb	r2, [r3, #0]
 8013974:	79fb      	ldrb	r3, [r7, #7]
 8013976:	4611      	mov	r1, r2
 8013978:	4618      	mov	r0, r3
 801397a:	f000 fd99 	bl	80144b0 <par_set_u8>
 801397e:	4603      	mov	r3, r0
 8013980:	73fb      	strb	r3, [r7, #15]
					break;
 8013982:	e042      	b.n	8013a0a <par_set+0x10a>

				case ePAR_TYPE_I8:
					status = par_set_i8( par_num, *(int8_t*) p_val );
 8013984:	683b      	ldr	r3, [r7, #0]
 8013986:	f993 2000 	ldrsb.w	r2, [r3]
 801398a:	79fb      	ldrb	r3, [r7, #7]
 801398c:	4611      	mov	r1, r2
 801398e:	4618      	mov	r0, r3
 8013990:	f000 fdf4 	bl	801457c <par_set_i8>
 8013994:	4603      	mov	r3, r0
 8013996:	73fb      	strb	r3, [r7, #15]
					break;
 8013998:	e037      	b.n	8013a0a <par_set+0x10a>

				case ePAR_TYPE_U16:
					status = par_set_u16( par_num, *(uint16_t*) p_val );
 801399a:	683b      	ldr	r3, [r7, #0]
 801399c:	881a      	ldrh	r2, [r3, #0]
 801399e:	79fb      	ldrb	r3, [r7, #7]
 80139a0:	4611      	mov	r1, r2
 80139a2:	4618      	mov	r0, r3
 80139a4:	f000 fe56 	bl	8014654 <par_set_u16>
 80139a8:	4603      	mov	r3, r0
 80139aa:	73fb      	strb	r3, [r7, #15]
					break;
 80139ac:	e02d      	b.n	8013a0a <par_set+0x10a>

				case ePAR_TYPE_I16:
					status = par_set_i16( par_num, *(int16_t*) p_val );
 80139ae:	683b      	ldr	r3, [r7, #0]
 80139b0:	f9b3 2000 	ldrsh.w	r2, [r3]
 80139b4:	79fb      	ldrb	r3, [r7, #7]
 80139b6:	4611      	mov	r1, r2
 80139b8:	4618      	mov	r0, r3
 80139ba:	f000 feb1 	bl	8014720 <par_set_i16>
 80139be:	4603      	mov	r3, r0
 80139c0:	73fb      	strb	r3, [r7, #15]
					break;
 80139c2:	e022      	b.n	8013a0a <par_set+0x10a>

				case ePAR_TYPE_U32:
					status = par_set_u32( par_num, *(uint32_t*) p_val );
 80139c4:	683b      	ldr	r3, [r7, #0]
 80139c6:	681a      	ldr	r2, [r3, #0]
 80139c8:	79fb      	ldrb	r3, [r7, #7]
 80139ca:	4611      	mov	r1, r2
 80139cc:	4618      	mov	r0, r3
 80139ce:	f000 ff13 	bl	80147f8 <par_set_u32>
 80139d2:	4603      	mov	r3, r0
 80139d4:	73fb      	strb	r3, [r7, #15]
					break;
 80139d6:	e018      	b.n	8013a0a <par_set+0x10a>

				case ePAR_TYPE_I32:
					status = par_set_i32( par_num, *(int32_t*) p_val );
 80139d8:	683b      	ldr	r3, [r7, #0]
 80139da:	681a      	ldr	r2, [r3, #0]
 80139dc:	79fb      	ldrb	r3, [r7, #7]
 80139de:	4611      	mov	r1, r2
 80139e0:	4618      	mov	r0, r3
 80139e2:	f000 ff6d 	bl	80148c0 <par_set_i32>
 80139e6:	4603      	mov	r3, r0
 80139e8:	73fb      	strb	r3, [r7, #15]
					break;
 80139ea:	e00e      	b.n	8013a0a <par_set+0x10a>

				case ePAR_TYPE_F32:
					status = par_set_f32( par_num, *(float32_t*) p_val );
 80139ec:	683b      	ldr	r3, [r7, #0]
 80139ee:	edd3 7a00 	vldr	s15, [r3]
 80139f2:	79fb      	ldrb	r3, [r7, #7]
 80139f4:	eeb0 0a67 	vmov.f32	s0, s15
 80139f8:	4618      	mov	r0, r3
 80139fa:	f000 ffc5 	bl	8014988 <par_set_f32>
 80139fe:	4603      	mov	r3, r0
 8013a00:	73fb      	strb	r3, [r7, #15]
					break;
 8013a02:	e002      	b.n	8013a0a <par_set+0x10a>

				default:
					PAR_ASSERT( 0 );
 8013a04:	f001 faf2 	bl	8014fec <project_config_assert_fail>
					break;
 8013a08:	bf00      	nop
			}

	#if ( 1 == PAR_CFG_MUTEX_EN )
			par_if_release_mutex();
 8013a0a:	f7ff fed7 	bl	80137bc <par_if_release_mutex>
 8013a0e:	e001      	b.n	8013a14 <par_set+0x114>
		}

		// Mutex not acquire
		else
		{
			status = ePAR_ERROR;
 8013a10:	2304      	movs	r3, #4
 8013a12:	73fb      	strb	r3, [r7, #15]
		}
	#endif

	return status;
 8013a14:	7bfb      	ldrb	r3, [r7, #15]
}
 8013a16:	4618      	mov	r0, r3
 8013a18:	3710      	adds	r7, #16
 8013a1a:	46bd      	mov	sp, r7
 8013a1c:	bd80      	pop	{r7, pc}
 8013a1e:	bf00      	nop
 8013a20:	200057c4 	.word	0x200057c4
 8013a24:	200057c0 	.word	0x200057c0

08013a28 <par_get>:
* @param[out]	p_val	- Parameter value
* @return		status 	- Status of operation
*/
////////////////////////////////////////////////////////////////////////////////
par_status_t par_get(const par_num_t par_num, void * const p_val)
{
 8013a28:	b580      	push	{r7, lr}
 8013a2a:	b084      	sub	sp, #16
 8013a2c:	af00      	add	r7, sp, #0
 8013a2e:	4603      	mov	r3, r0
 8013a30:	6039      	str	r1, [r7, #0]
 8013a32:	71fb      	strb	r3, [r7, #7]
	par_status_t status = ePAR_OK;
 8013a34:	2300      	movs	r3, #0
 8013a36:	73fb      	strb	r3, [r7, #15]

	// Is init
	PAR_ASSERT( true == gb_is_init );
 8013a38:	4b45      	ldr	r3, [pc, #276]	; (8013b50 <par_get+0x128>)
 8013a3a:	781b      	ldrb	r3, [r3, #0]
 8013a3c:	f083 0301 	eor.w	r3, r3, #1
 8013a40:	b2db      	uxtb	r3, r3
 8013a42:	2b00      	cmp	r3, #0
 8013a44:	d001      	beq.n	8013a4a <par_get+0x22>
 8013a46:	f001 fad1 	bl	8014fec <project_config_assert_fail>

	// Check input
	PAR_ASSERT( par_num < ePAR_NUM_OF );
 8013a4a:	79fb      	ldrb	r3, [r7, #7]
 8013a4c:	2b13      	cmp	r3, #19
 8013a4e:	d901      	bls.n	8013a54 <par_get+0x2c>
 8013a50:	f001 facc 	bl	8014fec <project_config_assert_fail>

	#if ( 1 == PAR_CFG_MUTEX_EN )
		if ( ePAR_OK == par_if_aquire_mutex())
 8013a54:	f7ff fe9a 	bl	801378c <par_if_aquire_mutex>
 8013a58:	4603      	mov	r3, r0
 8013a5a:	2b00      	cmp	r3, #0
 8013a5c:	d171      	bne.n	8013b42 <par_get+0x11a>
		{
	#endif
			switch ( gp_par_table[par_num].type )
 8013a5e:	4b3d      	ldr	r3, [pc, #244]	; (8013b54 <par_get+0x12c>)
 8013a60:	6819      	ldr	r1, [r3, #0]
 8013a62:	79fa      	ldrb	r2, [r7, #7]
 8013a64:	4613      	mov	r3, r2
 8013a66:	00db      	lsls	r3, r3, #3
 8013a68:	1a9b      	subs	r3, r3, r2
 8013a6a:	009b      	lsls	r3, r3, #2
 8013a6c:	440b      	add	r3, r1
 8013a6e:	7d9b      	ldrb	r3, [r3, #22]
 8013a70:	2b06      	cmp	r3, #6
 8013a72:	d860      	bhi.n	8013b36 <par_get+0x10e>
 8013a74:	a201      	add	r2, pc, #4	; (adr r2, 8013a7c <par_get+0x54>)
 8013a76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013a7a:	bf00      	nop
 8013a7c:	08013a99 	.word	0x08013a99
 8013a80:	08013ac7 	.word	0x08013ac7
 8013a84:	08013af5 	.word	0x08013af5
 8013a88:	08013aaf 	.word	0x08013aaf
 8013a8c:	08013add 	.word	0x08013add
 8013a90:	08013b0b 	.word	0x08013b0b
 8013a94:	08013b21 	.word	0x08013b21
			{
				case ePAR_TYPE_U8:
					*(uint8_t*) p_val = *(uint8_t*)&gpu8_par_value[ gu32_par_addr_offset[par_num] ];
 8013a98:	4b2f      	ldr	r3, [pc, #188]	; (8013b58 <par_get+0x130>)
 8013a9a:	681a      	ldr	r2, [r3, #0]
 8013a9c:	79fb      	ldrb	r3, [r7, #7]
 8013a9e:	492f      	ldr	r1, [pc, #188]	; (8013b5c <par_get+0x134>)
 8013aa0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8013aa4:	4413      	add	r3, r2
 8013aa6:	781a      	ldrb	r2, [r3, #0]
 8013aa8:	683b      	ldr	r3, [r7, #0]
 8013aaa:	701a      	strb	r2, [r3, #0]
					break;
 8013aac:	e046      	b.n	8013b3c <par_get+0x114>

				case ePAR_TYPE_I8:
					*(int8_t*) p_val = *(int8_t*)&gpu8_par_value[ gu32_par_addr_offset[par_num] ];
 8013aae:	4b2a      	ldr	r3, [pc, #168]	; (8013b58 <par_get+0x130>)
 8013ab0:	681a      	ldr	r2, [r3, #0]
 8013ab2:	79fb      	ldrb	r3, [r7, #7]
 8013ab4:	4929      	ldr	r1, [pc, #164]	; (8013b5c <par_get+0x134>)
 8013ab6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8013aba:	4413      	add	r3, r2
 8013abc:	f993 2000 	ldrsb.w	r2, [r3]
 8013ac0:	683b      	ldr	r3, [r7, #0]
 8013ac2:	701a      	strb	r2, [r3, #0]
					break;
 8013ac4:	e03a      	b.n	8013b3c <par_get+0x114>

				case ePAR_TYPE_U16:
					*(uint16_t*) p_val = *(uint16_t*)&gpu8_par_value[ gu32_par_addr_offset[par_num] ];
 8013ac6:	4b24      	ldr	r3, [pc, #144]	; (8013b58 <par_get+0x130>)
 8013ac8:	681a      	ldr	r2, [r3, #0]
 8013aca:	79fb      	ldrb	r3, [r7, #7]
 8013acc:	4923      	ldr	r1, [pc, #140]	; (8013b5c <par_get+0x134>)
 8013ace:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8013ad2:	4413      	add	r3, r2
 8013ad4:	881a      	ldrh	r2, [r3, #0]
 8013ad6:	683b      	ldr	r3, [r7, #0]
 8013ad8:	801a      	strh	r2, [r3, #0]
					break;
 8013ada:	e02f      	b.n	8013b3c <par_get+0x114>

				case ePAR_TYPE_I16:
					*(int16_t*) p_val = *(int16_t*)&gpu8_par_value[ gu32_par_addr_offset[par_num] ];
 8013adc:	4b1e      	ldr	r3, [pc, #120]	; (8013b58 <par_get+0x130>)
 8013ade:	681a      	ldr	r2, [r3, #0]
 8013ae0:	79fb      	ldrb	r3, [r7, #7]
 8013ae2:	491e      	ldr	r1, [pc, #120]	; (8013b5c <par_get+0x134>)
 8013ae4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8013ae8:	4413      	add	r3, r2
 8013aea:	f9b3 2000 	ldrsh.w	r2, [r3]
 8013aee:	683b      	ldr	r3, [r7, #0]
 8013af0:	801a      	strh	r2, [r3, #0]
					break;
 8013af2:	e023      	b.n	8013b3c <par_get+0x114>

				case ePAR_TYPE_U32:
					*(uint32_t*) p_val = *(uint32_t*)&gpu8_par_value[ gu32_par_addr_offset[par_num] ];
 8013af4:	4b18      	ldr	r3, [pc, #96]	; (8013b58 <par_get+0x130>)
 8013af6:	681a      	ldr	r2, [r3, #0]
 8013af8:	79fb      	ldrb	r3, [r7, #7]
 8013afa:	4918      	ldr	r1, [pc, #96]	; (8013b5c <par_get+0x134>)
 8013afc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8013b00:	4413      	add	r3, r2
 8013b02:	681a      	ldr	r2, [r3, #0]
 8013b04:	683b      	ldr	r3, [r7, #0]
 8013b06:	601a      	str	r2, [r3, #0]
					break;
 8013b08:	e018      	b.n	8013b3c <par_get+0x114>

				case ePAR_TYPE_I32:
					*(int32_t*) p_val = *(int32_t*)&gpu8_par_value[ gu32_par_addr_offset[par_num] ];
 8013b0a:	4b13      	ldr	r3, [pc, #76]	; (8013b58 <par_get+0x130>)
 8013b0c:	681a      	ldr	r2, [r3, #0]
 8013b0e:	79fb      	ldrb	r3, [r7, #7]
 8013b10:	4912      	ldr	r1, [pc, #72]	; (8013b5c <par_get+0x134>)
 8013b12:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8013b16:	4413      	add	r3, r2
 8013b18:	681a      	ldr	r2, [r3, #0]
 8013b1a:	683b      	ldr	r3, [r7, #0]
 8013b1c:	601a      	str	r2, [r3, #0]
					break;
 8013b1e:	e00d      	b.n	8013b3c <par_get+0x114>

				case ePAR_TYPE_F32:
					*(float32_t*) p_val = *(float32_t*)&gpu8_par_value[ gu32_par_addr_offset[par_num] ];
 8013b20:	4b0d      	ldr	r3, [pc, #52]	; (8013b58 <par_get+0x130>)
 8013b22:	681a      	ldr	r2, [r3, #0]
 8013b24:	79fb      	ldrb	r3, [r7, #7]
 8013b26:	490d      	ldr	r1, [pc, #52]	; (8013b5c <par_get+0x134>)
 8013b28:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8013b2c:	4413      	add	r3, r2
 8013b2e:	681a      	ldr	r2, [r3, #0]
 8013b30:	683b      	ldr	r3, [r7, #0]
 8013b32:	601a      	str	r2, [r3, #0]
					break;
 8013b34:	e002      	b.n	8013b3c <par_get+0x114>

				default:
					PAR_ASSERT( 0 );
 8013b36:	f001 fa59 	bl	8014fec <project_config_assert_fail>
					break;
 8013b3a:	bf00      	nop
			}

	#if ( 1 == PAR_CFG_MUTEX_EN )
			par_if_release_mutex();
 8013b3c:	f7ff fe3e 	bl	80137bc <par_if_release_mutex>
 8013b40:	e001      	b.n	8013b46 <par_get+0x11e>
		}

		// Mutex not acquire
		else
		{
			status = ePAR_ERROR;
 8013b42:	2304      	movs	r3, #4
 8013b44:	73fb      	strb	r3, [r7, #15]
		}
	#endif

	return status;
 8013b46:	7bfb      	ldrb	r3, [r7, #15]
}
 8013b48:	4618      	mov	r0, r3
 8013b4a:	3710      	adds	r7, #16
 8013b4c:	46bd      	mov	sp, r7
 8013b4e:	bd80      	pop	{r7, pc}
 8013b50:	200057c4 	.word	0x200057c4
 8013b54:	200057c0 	.word	0x200057c0
 8013b58:	200057c8 	.word	0x200057c8
 8013b5c:	200057cc 	.word	0x200057cc

08013b60 <par_set_to_default>:
* @param[in]	par_num	- Parameter number (enumeration)
* @return		void
*/
////////////////////////////////////////////////////////////////////////////////
void par_set_to_default(const par_num_t par_num)
{
 8013b60:	b5b0      	push	{r4, r5, r7, lr}
 8013b62:	b084      	sub	sp, #16
 8013b64:	af00      	add	r7, sp, #0
 8013b66:	4603      	mov	r3, r0
 8013b68:	71fb      	strb	r3, [r7, #7]
	par_type_list_t	par_type = ePAR_TYPE_U8;
 8013b6a:	2300      	movs	r3, #0
 8013b6c:	73fb      	strb	r3, [r7, #15]

	// Is init
	PAR_ASSERT( true == gb_is_init );
 8013b6e:	4b19      	ldr	r3, [pc, #100]	; (8013bd4 <par_set_to_default+0x74>)
 8013b70:	781b      	ldrb	r3, [r3, #0]
 8013b72:	f083 0301 	eor.w	r3, r3, #1
 8013b76:	b2db      	uxtb	r3, r3
 8013b78:	2b00      	cmp	r3, #0
 8013b7a:	d001      	beq.n	8013b80 <par_set_to_default+0x20>
 8013b7c:	f001 fa36 	bl	8014fec <project_config_assert_fail>

	// Check input
	PAR_ASSERT( par_num < ePAR_NUM_OF );
 8013b80:	79fb      	ldrb	r3, [r7, #7]
 8013b82:	2b13      	cmp	r3, #19
 8013b84:	d901      	bls.n	8013b8a <par_set_to_default+0x2a>
 8013b86:	f001 fa31 	bl	8014fec <project_config_assert_fail>

	// Get par type
	par_type = par_get_data_type( par_num );
 8013b8a:	79fb      	ldrb	r3, [r7, #7]
 8013b8c:	4618      	mov	r0, r3
 8013b8e:	f000 f8cd 	bl	8013d2c <par_get_data_type>
 8013b92:	4603      	mov	r3, r0
 8013b94:	73fb      	strb	r3, [r7, #15]

	// Copy default value to live space
	memcpy( &gpu8_par_value[ gu32_par_addr_offset[par_num] ], &gp_par_table[par_num].def.u8, par_get_data_type_size( par_type ));
 8013b96:	4b10      	ldr	r3, [pc, #64]	; (8013bd8 <par_set_to_default+0x78>)
 8013b98:	681a      	ldr	r2, [r3, #0]
 8013b9a:	79fb      	ldrb	r3, [r7, #7]
 8013b9c:	490f      	ldr	r1, [pc, #60]	; (8013bdc <par_set_to_default+0x7c>)
 8013b9e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8013ba2:	18d4      	adds	r4, r2, r3
 8013ba4:	4b0e      	ldr	r3, [pc, #56]	; (8013be0 <par_set_to_default+0x80>)
 8013ba6:	6819      	ldr	r1, [r3, #0]
 8013ba8:	79fa      	ldrb	r2, [r7, #7]
 8013baa:	4613      	mov	r3, r2
 8013bac:	00db      	lsls	r3, r3, #3
 8013bae:	1a9b      	subs	r3, r3, r2
 8013bb0:	009b      	lsls	r3, r3, #2
 8013bb2:	440b      	add	r3, r1
 8013bb4:	f103 050c 	add.w	r5, r3, #12
 8013bb8:	7bfb      	ldrb	r3, [r7, #15]
 8013bba:	4618      	mov	r0, r3
 8013bbc:	f000 f9c4 	bl	8013f48 <par_get_data_type_size>
 8013bc0:	4603      	mov	r3, r0
 8013bc2:	461a      	mov	r2, r3
 8013bc4:	4629      	mov	r1, r5
 8013bc6:	4620      	mov	r0, r4
 8013bc8:	f001 fa6e 	bl	80150a8 <memcpy>
}
 8013bcc:	bf00      	nop
 8013bce:	3710      	adds	r7, #16
 8013bd0:	46bd      	mov	sp, r7
 8013bd2:	bdb0      	pop	{r4, r5, r7, pc}
 8013bd4:	200057c4 	.word	0x200057c4
 8013bd8:	200057c8 	.word	0x200057c8
 8013bdc:	200057cc 	.word	0x200057cc
 8013be0:	200057c0 	.word	0x200057c0

08013be4 <par_set_all_to_default>:
*
* @return	void
*/
////////////////////////////////////////////////////////////////////////////////
void par_set_all_to_default(void)
{
 8013be4:	b580      	push	{r7, lr}
 8013be6:	b082      	sub	sp, #8
 8013be8:	af00      	add	r7, sp, #0
	uint32_t par_num = 0UL;
 8013bea:	2300      	movs	r3, #0
 8013bec:	607b      	str	r3, [r7, #4]

	// Is init
	PAR_ASSERT( true == gb_is_init );
 8013bee:	4b0f      	ldr	r3, [pc, #60]	; (8013c2c <par_set_all_to_default+0x48>)
 8013bf0:	781b      	ldrb	r3, [r3, #0]
 8013bf2:	f083 0301 	eor.w	r3, r3, #1
 8013bf6:	b2db      	uxtb	r3, r3
 8013bf8:	2b00      	cmp	r3, #0
 8013bfa:	d001      	beq.n	8013c00 <par_set_all_to_default+0x1c>
 8013bfc:	f001 f9f6 	bl	8014fec <project_config_assert_fail>

	for ( par_num = 0; par_num < ePAR_NUM_OF; par_num++ )
 8013c00:	2300      	movs	r3, #0
 8013c02:	607b      	str	r3, [r7, #4]
 8013c04:	e007      	b.n	8013c16 <par_set_all_to_default+0x32>
	{
		par_set_to_default( par_num );
 8013c06:	687b      	ldr	r3, [r7, #4]
 8013c08:	b2db      	uxtb	r3, r3
 8013c0a:	4618      	mov	r0, r3
 8013c0c:	f7ff ffa8 	bl	8013b60 <par_set_to_default>
	for ( par_num = 0; par_num < ePAR_NUM_OF; par_num++ )
 8013c10:	687b      	ldr	r3, [r7, #4]
 8013c12:	3301      	adds	r3, #1
 8013c14:	607b      	str	r3, [r7, #4]
 8013c16:	687b      	ldr	r3, [r7, #4]
 8013c18:	2b13      	cmp	r3, #19
 8013c1a:	d9f4      	bls.n	8013c06 <par_set_all_to_default+0x22>
	}

	PAR_DBG_PRINT( "PAR: Setting all parameters to default" );
 8013c1c:	4904      	ldr	r1, [pc, #16]	; (8013c30 <par_set_all_to_default+0x4c>)
 8013c1e:	2000      	movs	r0, #0
 8013c20:	f7fe f88c 	bl	8011d3c <com_dbg_print>
}
 8013c24:	bf00      	nop
 8013c26:	3708      	adds	r7, #8
 8013c28:	46bd      	mov	sp, r7
 8013c2a:	bd80      	pop	{r7, pc}
 8013c2c:	200057c4 	.word	0x200057c4
 8013c30:	0801aedc 	.word	0x0801aedc

08013c34 <par_get_config>:
* @param[in]	p_par_cfg	- Pointer to parameter configurations
* @return		status 		- Status of operation
*/
////////////////////////////////////////////////////////////////////////////////
par_status_t par_get_config(const par_num_t par_num, par_cfg_t * const p_par_cfg)
{
 8013c34:	b5b0      	push	{r4, r5, r7, lr}
 8013c36:	b084      	sub	sp, #16
 8013c38:	af00      	add	r7, sp, #0
 8013c3a:	4603      	mov	r3, r0
 8013c3c:	6039      	str	r1, [r7, #0]
 8013c3e:	71fb      	strb	r3, [r7, #7]
	par_status_t status = ePAR_OK;
 8013c40:	2300      	movs	r3, #0
 8013c42:	73fb      	strb	r3, [r7, #15]

	// Check inputs
	PAR_ASSERT( NULL != p_par_cfg );
 8013c44:	683b      	ldr	r3, [r7, #0]
 8013c46:	2b00      	cmp	r3, #0
 8013c48:	d101      	bne.n	8013c4e <par_get_config+0x1a>
 8013c4a:	f001 f9cf 	bl	8014fec <project_config_assert_fail>
	PAR_ASSERT( par_num < ePAR_NUM_OF );
 8013c4e:	79fb      	ldrb	r3, [r7, #7]
 8013c50:	2b13      	cmp	r3, #19
 8013c52:	d901      	bls.n	8013c58 <par_get_config+0x24>
 8013c54:	f001 f9ca 	bl	8014fec <project_config_assert_fail>

	*p_par_cfg = gp_par_table[ par_num ];
 8013c58:	4b0a      	ldr	r3, [pc, #40]	; (8013c84 <par_get_config+0x50>)
 8013c5a:	6819      	ldr	r1, [r3, #0]
 8013c5c:	79fa      	ldrb	r2, [r7, #7]
 8013c5e:	4613      	mov	r3, r2
 8013c60:	00db      	lsls	r3, r3, #3
 8013c62:	1a9b      	subs	r3, r3, r2
 8013c64:	009b      	lsls	r3, r3, #2
 8013c66:	440b      	add	r3, r1
 8013c68:	683a      	ldr	r2, [r7, #0]
 8013c6a:	4614      	mov	r4, r2
 8013c6c:	461d      	mov	r5, r3
 8013c6e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013c70:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8013c72:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8013c76:	e884 0007 	stmia.w	r4, {r0, r1, r2}

	return status;
 8013c7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8013c7c:	4618      	mov	r0, r3
 8013c7e:	3710      	adds	r7, #16
 8013c80:	46bd      	mov	sp, r7
 8013c82:	bdb0      	pop	{r4, r5, r7, pc}
 8013c84:	200057c0 	.word	0x200057c0

08013c88 <par_get_id>:
* @param[in]	par_num	- Parameter number (enumeration)
* @return		id 		- Parameter ID
*/
////////////////////////////////////////////////////////////////////////////////
uint16_t par_get_id(const par_num_t par_num)
{
 8013c88:	b580      	push	{r7, lr}
 8013c8a:	b084      	sub	sp, #16
 8013c8c:	af00      	add	r7, sp, #0
 8013c8e:	4603      	mov	r3, r0
 8013c90:	71fb      	strb	r3, [r7, #7]
	uint16_t id = 0;
 8013c92:	2300      	movs	r3, #0
 8013c94:	81fb      	strh	r3, [r7, #14]

	// Is init
	PAR_ASSERT( true == gb_is_init );
 8013c96:	4b0e      	ldr	r3, [pc, #56]	; (8013cd0 <par_get_id+0x48>)
 8013c98:	781b      	ldrb	r3, [r3, #0]
 8013c9a:	f083 0301 	eor.w	r3, r3, #1
 8013c9e:	b2db      	uxtb	r3, r3
 8013ca0:	2b00      	cmp	r3, #0
 8013ca2:	d001      	beq.n	8013ca8 <par_get_id+0x20>
 8013ca4:	f001 f9a2 	bl	8014fec <project_config_assert_fail>

	// Check input
	PAR_ASSERT( par_num < ePAR_NUM_OF );
 8013ca8:	79fb      	ldrb	r3, [r7, #7]
 8013caa:	2b13      	cmp	r3, #19
 8013cac:	d901      	bls.n	8013cb2 <par_get_id+0x2a>
 8013cae:	f001 f99d 	bl	8014fec <project_config_assert_fail>

	// Get persistance
	id = gp_par_table[ par_num ].id;
 8013cb2:	4b08      	ldr	r3, [pc, #32]	; (8013cd4 <par_get_id+0x4c>)
 8013cb4:	6819      	ldr	r1, [r3, #0]
 8013cb6:	79fa      	ldrb	r2, [r7, #7]
 8013cb8:	4613      	mov	r3, r2
 8013cba:	00db      	lsls	r3, r3, #3
 8013cbc:	1a9b      	subs	r3, r3, r2
 8013cbe:	009b      	lsls	r3, r3, #2
 8013cc0:	440b      	add	r3, r1
 8013cc2:	8a9b      	ldrh	r3, [r3, #20]
 8013cc4:	81fb      	strh	r3, [r7, #14]

	return id;
 8013cc6:	89fb      	ldrh	r3, [r7, #14]
}
 8013cc8:	4618      	mov	r0, r3
 8013cca:	3710      	adds	r7, #16
 8013ccc:	46bd      	mov	sp, r7
 8013cce:	bd80      	pop	{r7, pc}
 8013cd0:	200057c4 	.word	0x200057c4
 8013cd4:	200057c0 	.word	0x200057c0

08013cd8 <par_get_name>:
* @param[in]	p_name 	- Name of parameter
* @return		void
*/
////////////////////////////////////////////////////////////////////////////////
void par_get_name(const par_num_t par_num, uint8_t * const p_name)
{
 8013cd8:	b580      	push	{r7, lr}
 8013cda:	b082      	sub	sp, #8
 8013cdc:	af00      	add	r7, sp, #0
 8013cde:	4603      	mov	r3, r0
 8013ce0:	6039      	str	r1, [r7, #0]
 8013ce2:	71fb      	strb	r3, [r7, #7]
	// Is init
	PAR_ASSERT( true == gb_is_init );
 8013ce4:	4b0f      	ldr	r3, [pc, #60]	; (8013d24 <par_get_name+0x4c>)
 8013ce6:	781b      	ldrb	r3, [r3, #0]
 8013ce8:	f083 0301 	eor.w	r3, r3, #1
 8013cec:	b2db      	uxtb	r3, r3
 8013cee:	2b00      	cmp	r3, #0
 8013cf0:	d001      	beq.n	8013cf6 <par_get_name+0x1e>
 8013cf2:	f001 f97b 	bl	8014fec <project_config_assert_fail>

	// Check input
	PAR_ASSERT( par_num < ePAR_NUM_OF );
 8013cf6:	79fb      	ldrb	r3, [r7, #7]
 8013cf8:	2b13      	cmp	r3, #19
 8013cfa:	d901      	bls.n	8013d00 <par_get_name+0x28>
 8013cfc:	f001 f976 	bl	8014fec <project_config_assert_fail>

	// Copy name
	strncpy((char*) p_name, gp_par_table[ par_num ].name, PAR_MAX_STRING_SIZE );
 8013d00:	4b09      	ldr	r3, [pc, #36]	; (8013d28 <par_get_name+0x50>)
 8013d02:	6819      	ldr	r1, [r3, #0]
 8013d04:	79fa      	ldrb	r2, [r7, #7]
 8013d06:	4613      	mov	r3, r2
 8013d08:	00db      	lsls	r3, r3, #3
 8013d0a:	1a9b      	subs	r3, r3, r2
 8013d0c:	009b      	lsls	r3, r3, #2
 8013d0e:	440b      	add	r3, r1
 8013d10:	681b      	ldr	r3, [r3, #0]
 8013d12:	2220      	movs	r2, #32
 8013d14:	4619      	mov	r1, r3
 8013d16:	6838      	ldr	r0, [r7, #0]
 8013d18:	f002 f9ed 	bl	80160f6 <strncpy>
}
 8013d1c:	bf00      	nop
 8013d1e:	3708      	adds	r7, #8
 8013d20:	46bd      	mov	sp, r7
 8013d22:	bd80      	pop	{r7, pc}
 8013d24:	200057c4 	.word	0x200057c4
 8013d28:	200057c0 	.word	0x200057c0

08013d2c <par_get_data_type>:
* @param[in]	par_num	- Parameter number (enumeration)
* @return		type 	- Data type of parameter
*/
////////////////////////////////////////////////////////////////////////////////
par_type_list_t	par_get_data_type(const par_num_t par_num)
{
 8013d2c:	b580      	push	{r7, lr}
 8013d2e:	b084      	sub	sp, #16
 8013d30:	af00      	add	r7, sp, #0
 8013d32:	4603      	mov	r3, r0
 8013d34:	71fb      	strb	r3, [r7, #7]
	par_type_list_t type = ePAR_TYPE_U8;
 8013d36:	2300      	movs	r3, #0
 8013d38:	73fb      	strb	r3, [r7, #15]

	// Is init
	PAR_ASSERT( true == gb_is_init );
 8013d3a:	4b0e      	ldr	r3, [pc, #56]	; (8013d74 <par_get_data_type+0x48>)
 8013d3c:	781b      	ldrb	r3, [r3, #0]
 8013d3e:	f083 0301 	eor.w	r3, r3, #1
 8013d42:	b2db      	uxtb	r3, r3
 8013d44:	2b00      	cmp	r3, #0
 8013d46:	d001      	beq.n	8013d4c <par_get_data_type+0x20>
 8013d48:	f001 f950 	bl	8014fec <project_config_assert_fail>

	// Check input
	PAR_ASSERT( par_num < ePAR_NUM_OF );
 8013d4c:	79fb      	ldrb	r3, [r7, #7]
 8013d4e:	2b13      	cmp	r3, #19
 8013d50:	d901      	bls.n	8013d56 <par_get_data_type+0x2a>
 8013d52:	f001 f94b 	bl	8014fec <project_config_assert_fail>

	// Get type
	type = gp_par_table[ par_num ].type;
 8013d56:	4b08      	ldr	r3, [pc, #32]	; (8013d78 <par_get_data_type+0x4c>)
 8013d58:	6819      	ldr	r1, [r3, #0]
 8013d5a:	79fa      	ldrb	r2, [r7, #7]
 8013d5c:	4613      	mov	r3, r2
 8013d5e:	00db      	lsls	r3, r3, #3
 8013d60:	1a9b      	subs	r3, r3, r2
 8013d62:	009b      	lsls	r3, r3, #2
 8013d64:	440b      	add	r3, r1
 8013d66:	7d9b      	ldrb	r3, [r3, #22]
 8013d68:	73fb      	strb	r3, [r7, #15]

	return type;
 8013d6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8013d6c:	4618      	mov	r0, r3
 8013d6e:	3710      	adds	r7, #16
 8013d70:	46bd      	mov	sp, r7
 8013d72:	bd80      	pop	{r7, pc}
 8013d74:	200057c4 	.word	0x200057c4
 8013d78:	200057c0 	.word	0x200057c0

08013d7c <par_get_access>:
* @param[in]	par_num	- Parameter number (enumeration)
* @return		access 	- Access type
*/
////////////////////////////////////////////////////////////////////////////////
par_io_acess_t par_get_access(const par_num_t par_num)
{
 8013d7c:	b580      	push	{r7, lr}
 8013d7e:	b084      	sub	sp, #16
 8013d80:	af00      	add	r7, sp, #0
 8013d82:	4603      	mov	r3, r0
 8013d84:	71fb      	strb	r3, [r7, #7]
	par_io_acess_t access = ePAR_ACCESS_RO;
 8013d86:	2300      	movs	r3, #0
 8013d88:	73fb      	strb	r3, [r7, #15]

	// Is init
	PAR_ASSERT( true == gb_is_init );
 8013d8a:	4b0e      	ldr	r3, [pc, #56]	; (8013dc4 <par_get_access+0x48>)
 8013d8c:	781b      	ldrb	r3, [r3, #0]
 8013d8e:	f083 0301 	eor.w	r3, r3, #1
 8013d92:	b2db      	uxtb	r3, r3
 8013d94:	2b00      	cmp	r3, #0
 8013d96:	d001      	beq.n	8013d9c <par_get_access+0x20>
 8013d98:	f001 f928 	bl	8014fec <project_config_assert_fail>

	// Check input
	PAR_ASSERT( par_num < ePAR_NUM_OF );
 8013d9c:	79fb      	ldrb	r3, [r7, #7]
 8013d9e:	2b13      	cmp	r3, #19
 8013da0:	d901      	bls.n	8013da6 <par_get_access+0x2a>
 8013da2:	f001 f923 	bl	8014fec <project_config_assert_fail>

	// Get access
	access = gp_par_table[ par_num ].access;
 8013da6:	4b08      	ldr	r3, [pc, #32]	; (8013dc8 <par_get_access+0x4c>)
 8013da8:	6819      	ldr	r1, [r3, #0]
 8013daa:	79fa      	ldrb	r2, [r7, #7]
 8013dac:	4613      	mov	r3, r2
 8013dae:	00db      	lsls	r3, r3, #3
 8013db0:	1a9b      	subs	r3, r3, r2
 8013db2:	009b      	lsls	r3, r3, #2
 8013db4:	440b      	add	r3, r1
 8013db6:	7ddb      	ldrb	r3, [r3, #23]
 8013db8:	73fb      	strb	r3, [r7, #15]

	return access;
 8013dba:	7bfb      	ldrb	r3, [r7, #15]
}
 8013dbc:	4618      	mov	r0, r3
 8013dbe:	3710      	adds	r7, #16
 8013dc0:	46bd      	mov	sp, r7
 8013dc2:	bd80      	pop	{r7, pc}
 8013dc4:	200057c4 	.word	0x200057c4
 8013dc8:	200057c0 	.word	0x200057c0

08013dcc <par_get_persistance>:
* @param[in]	par_num	- Parameter number (enumeration)
* @return		is_persistant 	- Persistence flag
*/
////////////////////////////////////////////////////////////////////////////////
bool par_get_persistance(const par_num_t par_num)
{
 8013dcc:	b580      	push	{r7, lr}
 8013dce:	b084      	sub	sp, #16
 8013dd0:	af00      	add	r7, sp, #0
 8013dd2:	4603      	mov	r3, r0
 8013dd4:	71fb      	strb	r3, [r7, #7]
	bool is_persistant = true;
 8013dd6:	2301      	movs	r3, #1
 8013dd8:	73fb      	strb	r3, [r7, #15]

	// Is init
	PAR_ASSERT( true == gb_is_init );
 8013dda:	4b0e      	ldr	r3, [pc, #56]	; (8013e14 <par_get_persistance+0x48>)
 8013ddc:	781b      	ldrb	r3, [r3, #0]
 8013dde:	f083 0301 	eor.w	r3, r3, #1
 8013de2:	b2db      	uxtb	r3, r3
 8013de4:	2b00      	cmp	r3, #0
 8013de6:	d001      	beq.n	8013dec <par_get_persistance+0x20>
 8013de8:	f001 f900 	bl	8014fec <project_config_assert_fail>

	// Check input
	PAR_ASSERT( par_num < ePAR_NUM_OF );
 8013dec:	79fb      	ldrb	r3, [r7, #7]
 8013dee:	2b13      	cmp	r3, #19
 8013df0:	d901      	bls.n	8013df6 <par_get_persistance+0x2a>
 8013df2:	f001 f8fb 	bl	8014fec <project_config_assert_fail>

	// Get persistance
	is_persistant = gp_par_table[ par_num ].persistant;
 8013df6:	4b08      	ldr	r3, [pc, #32]	; (8013e18 <par_get_persistance+0x4c>)
 8013df8:	6819      	ldr	r1, [r3, #0]
 8013dfa:	79fa      	ldrb	r2, [r7, #7]
 8013dfc:	4613      	mov	r3, r2
 8013dfe:	00db      	lsls	r3, r3, #3
 8013e00:	1a9b      	subs	r3, r3, r2
 8013e02:	009b      	lsls	r3, r3, #2
 8013e04:	440b      	add	r3, r1
 8013e06:	7e1b      	ldrb	r3, [r3, #24]
 8013e08:	73fb      	strb	r3, [r7, #15]

	return is_persistant;
 8013e0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8013e0c:	4618      	mov	r0, r3
 8013e0e:	3710      	adds	r7, #16
 8013e10:	46bd      	mov	sp, r7
 8013e12:	bd80      	pop	{r7, pc}
 8013e14:	200057c4 	.word	0x200057c4
 8013e18:	200057c0 	.word	0x200057c0

08013e1c <par_store_all_to_nvm>:
	*
	* @return		status 	- Status of operation
	*/
	////////////////////////////////////////////////////////////////////////////////
	par_status_t par_store_all_to_nvm(void)
	{
 8013e1c:	b580      	push	{r7, lr}
 8013e1e:	b082      	sub	sp, #8
 8013e20:	af00      	add	r7, sp, #0
		par_status_t 	status 	= ePAR_OK;
 8013e22:	2300      	movs	r3, #0
 8013e24:	71fb      	strb	r3, [r7, #7]

		status = par_nvm_write_all();
 8013e26:	f000 fed7 	bl	8014bd8 <par_nvm_write_all>
 8013e2a:	4603      	mov	r3, r0
 8013e2c:	71fb      	strb	r3, [r7, #7]

		return status;
 8013e2e:	79fb      	ldrb	r3, [r7, #7]
	}
 8013e30:	4618      	mov	r0, r3
 8013e32:	3708      	adds	r7, #8
 8013e34:	46bd      	mov	sp, r7
 8013e36:	bd80      	pop	{r7, pc}

08013e38 <par_store_to_nvm>:
	* @param[in]	par_num	- Parameter number (enumeration)
	* @return		status 	- Status of operation
	*/
	////////////////////////////////////////////////////////////////////////////////
	par_status_t par_store_to_nvm(const par_num_t par_num)
	{
 8013e38:	b580      	push	{r7, lr}
 8013e3a:	b084      	sub	sp, #16
 8013e3c:	af00      	add	r7, sp, #0
 8013e3e:	4603      	mov	r3, r0
 8013e40:	71fb      	strb	r3, [r7, #7]
		par_status_t status = ePAR_OK;
 8013e42:	2300      	movs	r3, #0
 8013e44:	73fb      	strb	r3, [r7, #15]

		status = par_nvm_write( par_num );
 8013e46:	79fb      	ldrb	r3, [r7, #7]
 8013e48:	4618      	mov	r0, r3
 8013e4a:	f000 fe67 	bl	8014b1c <par_nvm_write>
 8013e4e:	4603      	mov	r3, r0
 8013e50:	73fb      	strb	r3, [r7, #15]

		return status;
 8013e52:	7bfb      	ldrb	r3, [r7, #15]
	}
 8013e54:	4618      	mov	r0, r3
 8013e56:	3710      	adds	r7, #16
 8013e58:	46bd      	mov	sp, r7
 8013e5a:	bd80      	pop	{r7, pc}

08013e5c <par_allocate_ram_space>:
* @param[in]	pp_ram_space	- Pointer to pointer allocated space
* @return		status			- Status of operation
*/
////////////////////////////////////////////////////////////////////////////////
static par_status_t par_allocate_ram_space(uint8_t ** pp_ram_space)
{
 8013e5c:	b580      	push	{r7, lr}
 8013e5e:	b084      	sub	sp, #16
 8013e60:	af00      	add	r7, sp, #0
 8013e62:	6078      	str	r0, [r7, #4]
	par_status_t 	status 		= ePAR_OK;
 8013e64:	2300      	movs	r3, #0
 8013e66:	73fb      	strb	r3, [r7, #15]
	uint32_t		ram_size	= 0UL;
 8013e68:	2300      	movs	r3, #0
 8013e6a:	60bb      	str	r3, [r7, #8]

	// Calculate total size of RAM
	ram_size = par_calc_ram_usage();
 8013e6c:	f000 f814 	bl	8013e98 <par_calc_ram_usage>
 8013e70:	60b8      	str	r0, [r7, #8]

	// Allocate space in RAM
	*pp_ram_space = malloc( ram_size );
 8013e72:	68b8      	ldr	r0, [r7, #8]
 8013e74:	f001 f902 	bl	801507c <malloc>
 8013e78:	4603      	mov	r3, r0
 8013e7a:	461a      	mov	r2, r3
 8013e7c:	687b      	ldr	r3, [r7, #4]
 8013e7e:	601a      	str	r2, [r3, #0]
	PAR_ASSERT( NULL != *pp_ram_space );
 8013e80:	687b      	ldr	r3, [r7, #4]
 8013e82:	681b      	ldr	r3, [r3, #0]
 8013e84:	2b00      	cmp	r3, #0
 8013e86:	d101      	bne.n	8013e8c <par_allocate_ram_space+0x30>
 8013e88:	f001 f8b0 	bl	8014fec <project_config_assert_fail>

	return status;
 8013e8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8013e8e:	4618      	mov	r0, r3
 8013e90:	3710      	adds	r7, #16
 8013e92:	46bd      	mov	sp, r7
 8013e94:	bd80      	pop	{r7, pc}
	...

08013e98 <par_calc_ram_usage>:
*
* @return		total_size - Size of all parameters in bytes
*/
////////////////////////////////////////////////////////////////////////////////
static uint32_t par_calc_ram_usage(void)
{
 8013e98:	b580      	push	{r7, lr}
 8013e9a:	b08a      	sub	sp, #40	; 0x28
 8013e9c:	af00      	add	r7, sp, #0
	par_cfg_t 		par_cfg 	= { 0 };
 8013e9e:	1d3b      	adds	r3, r7, #4
 8013ea0:	2200      	movs	r2, #0
 8013ea2:	601a      	str	r2, [r3, #0]
 8013ea4:	605a      	str	r2, [r3, #4]
 8013ea6:	609a      	str	r2, [r3, #8]
 8013ea8:	60da      	str	r2, [r3, #12]
 8013eaa:	611a      	str	r2, [r3, #16]
 8013eac:	615a      	str	r2, [r3, #20]
 8013eae:	619a      	str	r2, [r3, #24]
	uint32_t 		par_num		= 0UL;
 8013eb0:	2300      	movs	r3, #0
 8013eb2:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t		total_size	= 0UL;
 8013eb4:	2300      	movs	r3, #0
 8013eb6:	623b      	str	r3, [r7, #32]

	// For every parameter
	for ( par_num = 0; par_num < ePAR_NUM_OF; par_num++ )
 8013eb8:	2300      	movs	r3, #0
 8013eba:	627b      	str	r3, [r7, #36]	; 0x24
 8013ebc:	e039      	b.n	8013f32 <par_calc_ram_usage+0x9a>
	{
		// Get parameter configs
		par_get_config( par_num, &par_cfg );
 8013ebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013ec0:	b2db      	uxtb	r3, r3
 8013ec2:	1d3a      	adds	r2, r7, #4
 8013ec4:	4611      	mov	r1, r2
 8013ec6:	4618      	mov	r0, r3
 8013ec8:	f7ff feb4 	bl	8013c34 <par_get_config>

        // Align addresses
        if	(	( par_cfg.type == ePAR_TYPE_U16 )
 8013ecc:	7ebb      	ldrb	r3, [r7, #26]
 8013ece:	2b01      	cmp	r3, #1
 8013ed0:	d006      	beq.n	8013ee0 <par_calc_ram_usage+0x48>
        	|| 	( par_cfg.type == ePAR_TYPE_I16 ))
 8013ed2:	7ebb      	ldrb	r3, [r7, #26]
 8013ed4:	2b04      	cmp	r3, #4
 8013ed6:	d109      	bne.n	8013eec <par_calc_ram_usage+0x54>
        {
        	// 2 bytes alignment
            while(( total_size % 2 ) != 0 )
 8013ed8:	e002      	b.n	8013ee0 <par_calc_ram_usage+0x48>
            {
            	total_size++;
 8013eda:	6a3b      	ldr	r3, [r7, #32]
 8013edc:	3301      	adds	r3, #1
 8013ede:	623b      	str	r3, [r7, #32]
            while(( total_size % 2 ) != 0 )
 8013ee0:	6a3b      	ldr	r3, [r7, #32]
 8013ee2:	f003 0301 	and.w	r3, r3, #1
 8013ee6:	2b00      	cmp	r3, #0
 8013ee8:	d1f7      	bne.n	8013eda <par_calc_ram_usage+0x42>
        if	(	( par_cfg.type == ePAR_TYPE_U16 )
 8013eea:	e011      	b.n	8013f10 <par_calc_ram_usage+0x78>
            }
        }

        else if (	( par_cfg.type == ePAR_TYPE_U32 )
 8013eec:	7ebb      	ldrb	r3, [r7, #26]
 8013eee:	2b02      	cmp	r3, #2
 8013ef0:	d009      	beq.n	8013f06 <par_calc_ram_usage+0x6e>
        		|| 	( par_cfg.type == ePAR_TYPE_I32 )
 8013ef2:	7ebb      	ldrb	r3, [r7, #26]
 8013ef4:	2b05      	cmp	r3, #5
 8013ef6:	d006      	beq.n	8013f06 <par_calc_ram_usage+0x6e>
				|| 	( par_cfg.type == ePAR_TYPE_F32 ))
 8013ef8:	7ebb      	ldrb	r3, [r7, #26]
 8013efa:	2b06      	cmp	r3, #6
 8013efc:	d108      	bne.n	8013f10 <par_calc_ram_usage+0x78>
        {
        	// 4 bytes alignment
            while(( total_size % 4 ) != 0 )
 8013efe:	e002      	b.n	8013f06 <par_calc_ram_usage+0x6e>
            {
            	total_size++;
 8013f00:	6a3b      	ldr	r3, [r7, #32]
 8013f02:	3301      	adds	r3, #1
 8013f04:	623b      	str	r3, [r7, #32]
            while(( total_size % 4 ) != 0 )
 8013f06:	6a3b      	ldr	r3, [r7, #32]
 8013f08:	f003 0303 	and.w	r3, r3, #3
 8013f0c:	2b00      	cmp	r3, #0
 8013f0e:	d1f7      	bne.n	8013f00 <par_calc_ram_usage+0x68>
        {
        	// No actions...
        }

        // Store par RAM address offset
        gu32_par_addr_offset[par_num] = total_size;
 8013f10:	490c      	ldr	r1, [pc, #48]	; (8013f44 <par_calc_ram_usage+0xac>)
 8013f12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013f14:	6a3a      	ldr	r2, [r7, #32]
 8013f16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        // Accumulate total RAM space
        total_size += par_get_data_type_size( par_cfg.type );
 8013f1a:	7ebb      	ldrb	r3, [r7, #26]
 8013f1c:	4618      	mov	r0, r3
 8013f1e:	f000 f813 	bl	8013f48 <par_get_data_type_size>
 8013f22:	4603      	mov	r3, r0
 8013f24:	461a      	mov	r2, r3
 8013f26:	6a3b      	ldr	r3, [r7, #32]
 8013f28:	4413      	add	r3, r2
 8013f2a:	623b      	str	r3, [r7, #32]
	for ( par_num = 0; par_num < ePAR_NUM_OF; par_num++ )
 8013f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013f2e:	3301      	adds	r3, #1
 8013f30:	627b      	str	r3, [r7, #36]	; 0x24
 8013f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013f34:	2b13      	cmp	r3, #19
 8013f36:	d9c2      	bls.n	8013ebe <par_calc_ram_usage+0x26>
	}

	return total_size;
 8013f38:	6a3b      	ldr	r3, [r7, #32]
}
 8013f3a:	4618      	mov	r0, r3
 8013f3c:	3728      	adds	r7, #40	; 0x28
 8013f3e:	46bd      	mov	sp, r7
 8013f40:	bd80      	pop	{r7, pc}
 8013f42:	bf00      	nop
 8013f44:	200057cc 	.word	0x200057cc

08013f48 <par_get_data_type_size>:
* @param[in]	par_type	- Data type of parameter
* @return		type_size	- Size of data type in bytes
*/
////////////////////////////////////////////////////////////////////////////////
static uint8_t par_get_data_type_size(const par_type_list_t par_type)
{
 8013f48:	b480      	push	{r7}
 8013f4a:	b085      	sub	sp, #20
 8013f4c:	af00      	add	r7, sp, #0
 8013f4e:	4603      	mov	r3, r0
 8013f50:	71fb      	strb	r3, [r7, #7]
	uint8_t type_size = 0U;
 8013f52:	2300      	movs	r3, #0
 8013f54:	73fb      	strb	r3, [r7, #15]

	switch ( par_type )
 8013f56:	79fb      	ldrb	r3, [r7, #7]
 8013f58:	2b06      	cmp	r3, #6
 8013f5a:	d826      	bhi.n	8013faa <par_get_data_type_size+0x62>
 8013f5c:	a201      	add	r2, pc, #4	; (adr r2, 8013f64 <par_get_data_type_size+0x1c>)
 8013f5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013f62:	bf00      	nop
 8013f64:	08013f81 	.word	0x08013f81
 8013f68:	08013f8d 	.word	0x08013f8d
 8013f6c:	08013f99 	.word	0x08013f99
 8013f70:	08013f87 	.word	0x08013f87
 8013f74:	08013f93 	.word	0x08013f93
 8013f78:	08013f9f 	.word	0x08013f9f
 8013f7c:	08013fa5 	.word	0x08013fa5
	{
		case ePAR_TYPE_U8:
			type_size = sizeof( uint8_t );
 8013f80:	2301      	movs	r3, #1
 8013f82:	73fb      	strb	r3, [r7, #15]
			break;
 8013f84:	e012      	b.n	8013fac <par_get_data_type_size+0x64>

		case ePAR_TYPE_I8:
			type_size = sizeof( int8_t );
 8013f86:	2301      	movs	r3, #1
 8013f88:	73fb      	strb	r3, [r7, #15]
			break;
 8013f8a:	e00f      	b.n	8013fac <par_get_data_type_size+0x64>

		case ePAR_TYPE_U16:
			type_size = sizeof( uint16_t );
 8013f8c:	2302      	movs	r3, #2
 8013f8e:	73fb      	strb	r3, [r7, #15]
			break;
 8013f90:	e00c      	b.n	8013fac <par_get_data_type_size+0x64>

		case ePAR_TYPE_I16:
			type_size = sizeof( int16_t );
 8013f92:	2302      	movs	r3, #2
 8013f94:	73fb      	strb	r3, [r7, #15]
			break;
 8013f96:	e009      	b.n	8013fac <par_get_data_type_size+0x64>

		case ePAR_TYPE_U32:
			type_size = sizeof( uint32_t );
 8013f98:	2304      	movs	r3, #4
 8013f9a:	73fb      	strb	r3, [r7, #15]
			break;
 8013f9c:	e006      	b.n	8013fac <par_get_data_type_size+0x64>

		case ePAR_TYPE_I32:
			type_size = sizeof( int32_t );
 8013f9e:	2304      	movs	r3, #4
 8013fa0:	73fb      	strb	r3, [r7, #15]
			break;
 8013fa2:	e003      	b.n	8013fac <par_get_data_type_size+0x64>

		case ePAR_TYPE_F32:
			type_size = sizeof( float32_t );
 8013fa4:	2304      	movs	r3, #4
 8013fa6:	73fb      	strb	r3, [r7, #15]
			break;
 8013fa8:	e000      	b.n	8013fac <par_get_data_type_size+0x64>

		default:
			// No actions...
			break;
 8013faa:	bf00      	nop
	}

	return type_size;
 8013fac:	7bfb      	ldrb	r3, [r7, #15]
}
 8013fae:	4618      	mov	r0, r3
 8013fb0:	3714      	adds	r7, #20
 8013fb2:	46bd      	mov	sp, r7
 8013fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013fb8:	4770      	bx	lr
 8013fba:	bf00      	nop

08013fbc <par_check_table_validy>:
* @param[in]	p_par_cfg	- Pointer to parameters table
* @return		status		- Status of operation
*/
////////////////////////////////////////////////////////////////////////////////
static par_status_t	par_check_table_validy(const par_cfg_t * const p_par_cfg)
{
 8013fbc:	b580      	push	{r7, lr}
 8013fbe:	b086      	sub	sp, #24
 8013fc0:	af00      	add	r7, sp, #0
 8013fc2:	6078      	str	r0, [r7, #4]
	par_status_t status = ePAR_OK;
 8013fc4:	2300      	movs	r3, #0
 8013fc6:	75fb      	strb	r3, [r7, #23]

	// For each parameter
	for ( uint32_t i = 0; i < ePAR_NUM_OF; i++ )
 8013fc8:	2300      	movs	r3, #0
 8013fca:	613b      	str	r3, [r7, #16]
 8013fcc:	e265      	b.n	801449a <par_check_table_validy+0x4de>
	{
		// Compare parameters IDs
		for ( uint32_t j = 0; j < ePAR_NUM_OF; j++ )
 8013fce:	2300      	movs	r3, #0
 8013fd0:	60fb      	str	r3, [r7, #12]
 8013fd2:	e026      	b.n	8014022 <par_check_table_validy+0x66>
		{
			if ( i != j )
 8013fd4:	693a      	ldr	r2, [r7, #16]
 8013fd6:	68fb      	ldr	r3, [r7, #12]
 8013fd8:	429a      	cmp	r2, r3
 8013fda:	d01f      	beq.n	801401c <par_check_table_validy+0x60>
			{
				// Check for two identical IDs
				if ( p_par_cfg[i].id == p_par_cfg[j].id )
 8013fdc:	693a      	ldr	r2, [r7, #16]
 8013fde:	4613      	mov	r3, r2
 8013fe0:	00db      	lsls	r3, r3, #3
 8013fe2:	1a9b      	subs	r3, r3, r2
 8013fe4:	009b      	lsls	r3, r3, #2
 8013fe6:	461a      	mov	r2, r3
 8013fe8:	687b      	ldr	r3, [r7, #4]
 8013fea:	4413      	add	r3, r2
 8013fec:	8a99      	ldrh	r1, [r3, #20]
 8013fee:	68fa      	ldr	r2, [r7, #12]
 8013ff0:	4613      	mov	r3, r2
 8013ff2:	00db      	lsls	r3, r3, #3
 8013ff4:	1a9b      	subs	r3, r3, r2
 8013ff6:	009b      	lsls	r3, r3, #2
 8013ff8:	461a      	mov	r2, r3
 8013ffa:	687b      	ldr	r3, [r7, #4]
 8013ffc:	4413      	add	r3, r2
 8013ffe:	8a9b      	ldrh	r3, [r3, #20]
 8014000:	4299      	cmp	r1, r3
 8014002:	d10b      	bne.n	801401c <par_check_table_validy+0x60>
				{
					status = ePAR_ERROR;
 8014004:	2304      	movs	r3, #4
 8014006:	75fb      	strb	r3, [r7, #23]
					PAR_DBG_PRINT( "Parameter table error: Duplicate ID!" );
 8014008:	4903      	ldr	r1, [pc, #12]	; (8014018 <par_check_table_validy+0x5c>)
 801400a:	2000      	movs	r0, #0
 801400c:	f7fd fe96 	bl	8011d3c <com_dbg_print>
					PAR_ASSERT( 0 );
 8014010:	f000 ffec 	bl	8014fec <project_config_assert_fail>
					break;
 8014014:	e008      	b.n	8014028 <par_check_table_validy+0x6c>
 8014016:	bf00      	nop
 8014018:	0801af04 	.word	0x0801af04
		for ( uint32_t j = 0; j < ePAR_NUM_OF; j++ )
 801401c:	68fb      	ldr	r3, [r7, #12]
 801401e:	3301      	adds	r3, #1
 8014020:	60fb      	str	r3, [r7, #12]
 8014022:	68fb      	ldr	r3, [r7, #12]
 8014024:	2b13      	cmp	r3, #19
 8014026:	d9d5      	bls.n	8013fd4 <par_check_table_validy+0x18>
				}
			}
		}

		if ( ePAR_OK != status )
 8014028:	7dfb      	ldrb	r3, [r7, #23]
 801402a:	2b00      	cmp	r3, #0
 801402c:	f040 823a 	bne.w	80144a4 <par_check_table_validy+0x4e8>
		 *
		 *	1. Check that MAX is larger than MIN
		 *	2. Check that DEF is equal or less than MAX
		 *	3. Check that DEF is equal or more than MIN
		 */
		PAR_ASSERT(( ePAR_TYPE_U8 == p_par_cfg[i].type ) 	? ((( p_par_cfg[i].min.u8 < p_par_cfg[i].max.u8 ) && ( p_par_cfg[i].def.u8 <= p_par_cfg[i].max.u8 )) && (  p_par_cfg[i].min.u8 <= p_par_cfg[i].def.u8 )) : ( 1 ));
 8014030:	693a      	ldr	r2, [r7, #16]
 8014032:	4613      	mov	r3, r2
 8014034:	00db      	lsls	r3, r3, #3
 8014036:	1a9b      	subs	r3, r3, r2
 8014038:	009b      	lsls	r3, r3, #2
 801403a:	461a      	mov	r2, r3
 801403c:	687b      	ldr	r3, [r7, #4]
 801403e:	4413      	add	r3, r2
 8014040:	7d9b      	ldrb	r3, [r3, #22]
 8014042:	2b00      	cmp	r3, #0
 8014044:	d13d      	bne.n	80140c2 <par_check_table_validy+0x106>
 8014046:	693a      	ldr	r2, [r7, #16]
 8014048:	4613      	mov	r3, r2
 801404a:	00db      	lsls	r3, r3, #3
 801404c:	1a9b      	subs	r3, r3, r2
 801404e:	009b      	lsls	r3, r3, #2
 8014050:	461a      	mov	r2, r3
 8014052:	687b      	ldr	r3, [r7, #4]
 8014054:	4413      	add	r3, r2
 8014056:	7919      	ldrb	r1, [r3, #4]
 8014058:	693a      	ldr	r2, [r7, #16]
 801405a:	4613      	mov	r3, r2
 801405c:	00db      	lsls	r3, r3, #3
 801405e:	1a9b      	subs	r3, r3, r2
 8014060:	009b      	lsls	r3, r3, #2
 8014062:	461a      	mov	r2, r3
 8014064:	687b      	ldr	r3, [r7, #4]
 8014066:	4413      	add	r3, r2
 8014068:	7a1b      	ldrb	r3, [r3, #8]
 801406a:	4299      	cmp	r1, r3
 801406c:	d227      	bcs.n	80140be <par_check_table_validy+0x102>
 801406e:	693a      	ldr	r2, [r7, #16]
 8014070:	4613      	mov	r3, r2
 8014072:	00db      	lsls	r3, r3, #3
 8014074:	1a9b      	subs	r3, r3, r2
 8014076:	009b      	lsls	r3, r3, #2
 8014078:	461a      	mov	r2, r3
 801407a:	687b      	ldr	r3, [r7, #4]
 801407c:	4413      	add	r3, r2
 801407e:	7b19      	ldrb	r1, [r3, #12]
 8014080:	693a      	ldr	r2, [r7, #16]
 8014082:	4613      	mov	r3, r2
 8014084:	00db      	lsls	r3, r3, #3
 8014086:	1a9b      	subs	r3, r3, r2
 8014088:	009b      	lsls	r3, r3, #2
 801408a:	461a      	mov	r2, r3
 801408c:	687b      	ldr	r3, [r7, #4]
 801408e:	4413      	add	r3, r2
 8014090:	7a1b      	ldrb	r3, [r3, #8]
 8014092:	4299      	cmp	r1, r3
 8014094:	d813      	bhi.n	80140be <par_check_table_validy+0x102>
 8014096:	693a      	ldr	r2, [r7, #16]
 8014098:	4613      	mov	r3, r2
 801409a:	00db      	lsls	r3, r3, #3
 801409c:	1a9b      	subs	r3, r3, r2
 801409e:	009b      	lsls	r3, r3, #2
 80140a0:	461a      	mov	r2, r3
 80140a2:	687b      	ldr	r3, [r7, #4]
 80140a4:	4413      	add	r3, r2
 80140a6:	7919      	ldrb	r1, [r3, #4]
 80140a8:	693a      	ldr	r2, [r7, #16]
 80140aa:	4613      	mov	r3, r2
 80140ac:	00db      	lsls	r3, r3, #3
 80140ae:	1a9b      	subs	r3, r3, r2
 80140b0:	009b      	lsls	r3, r3, #2
 80140b2:	461a      	mov	r2, r3
 80140b4:	687b      	ldr	r3, [r7, #4]
 80140b6:	4413      	add	r3, r2
 80140b8:	7b1b      	ldrb	r3, [r3, #12]
 80140ba:	4299      	cmp	r1, r3
 80140bc:	d901      	bls.n	80140c2 <par_check_table_validy+0x106>
 80140be:	f000 ff95 	bl	8014fec <project_config_assert_fail>
		PAR_ASSERT(( ePAR_TYPE_I8 == p_par_cfg[i].type ) 	? ((( p_par_cfg[i].min.i8 < p_par_cfg[i].max.i8 ) && ( p_par_cfg[i].def.i8 <= p_par_cfg[i].max.i8 )) && (  p_par_cfg[i].min.i8 <= p_par_cfg[i].def.i8 )) : ( 1 ));
 80140c2:	693a      	ldr	r2, [r7, #16]
 80140c4:	4613      	mov	r3, r2
 80140c6:	00db      	lsls	r3, r3, #3
 80140c8:	1a9b      	subs	r3, r3, r2
 80140ca:	009b      	lsls	r3, r3, #2
 80140cc:	461a      	mov	r2, r3
 80140ce:	687b      	ldr	r3, [r7, #4]
 80140d0:	4413      	add	r3, r2
 80140d2:	7d9b      	ldrb	r3, [r3, #22]
 80140d4:	2b03      	cmp	r3, #3
 80140d6:	d143      	bne.n	8014160 <par_check_table_validy+0x1a4>
 80140d8:	693a      	ldr	r2, [r7, #16]
 80140da:	4613      	mov	r3, r2
 80140dc:	00db      	lsls	r3, r3, #3
 80140de:	1a9b      	subs	r3, r3, r2
 80140e0:	009b      	lsls	r3, r3, #2
 80140e2:	461a      	mov	r2, r3
 80140e4:	687b      	ldr	r3, [r7, #4]
 80140e6:	4413      	add	r3, r2
 80140e8:	f993 1004 	ldrsb.w	r1, [r3, #4]
 80140ec:	693a      	ldr	r2, [r7, #16]
 80140ee:	4613      	mov	r3, r2
 80140f0:	00db      	lsls	r3, r3, #3
 80140f2:	1a9b      	subs	r3, r3, r2
 80140f4:	009b      	lsls	r3, r3, #2
 80140f6:	461a      	mov	r2, r3
 80140f8:	687b      	ldr	r3, [r7, #4]
 80140fa:	4413      	add	r3, r2
 80140fc:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8014100:	4299      	cmp	r1, r3
 8014102:	da2b      	bge.n	801415c <par_check_table_validy+0x1a0>
 8014104:	693a      	ldr	r2, [r7, #16]
 8014106:	4613      	mov	r3, r2
 8014108:	00db      	lsls	r3, r3, #3
 801410a:	1a9b      	subs	r3, r3, r2
 801410c:	009b      	lsls	r3, r3, #2
 801410e:	461a      	mov	r2, r3
 8014110:	687b      	ldr	r3, [r7, #4]
 8014112:	4413      	add	r3, r2
 8014114:	f993 100c 	ldrsb.w	r1, [r3, #12]
 8014118:	693a      	ldr	r2, [r7, #16]
 801411a:	4613      	mov	r3, r2
 801411c:	00db      	lsls	r3, r3, #3
 801411e:	1a9b      	subs	r3, r3, r2
 8014120:	009b      	lsls	r3, r3, #2
 8014122:	461a      	mov	r2, r3
 8014124:	687b      	ldr	r3, [r7, #4]
 8014126:	4413      	add	r3, r2
 8014128:	f993 3008 	ldrsb.w	r3, [r3, #8]
 801412c:	4299      	cmp	r1, r3
 801412e:	dc15      	bgt.n	801415c <par_check_table_validy+0x1a0>
 8014130:	693a      	ldr	r2, [r7, #16]
 8014132:	4613      	mov	r3, r2
 8014134:	00db      	lsls	r3, r3, #3
 8014136:	1a9b      	subs	r3, r3, r2
 8014138:	009b      	lsls	r3, r3, #2
 801413a:	461a      	mov	r2, r3
 801413c:	687b      	ldr	r3, [r7, #4]
 801413e:	4413      	add	r3, r2
 8014140:	f993 1004 	ldrsb.w	r1, [r3, #4]
 8014144:	693a      	ldr	r2, [r7, #16]
 8014146:	4613      	mov	r3, r2
 8014148:	00db      	lsls	r3, r3, #3
 801414a:	1a9b      	subs	r3, r3, r2
 801414c:	009b      	lsls	r3, r3, #2
 801414e:	461a      	mov	r2, r3
 8014150:	687b      	ldr	r3, [r7, #4]
 8014152:	4413      	add	r3, r2
 8014154:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8014158:	4299      	cmp	r1, r3
 801415a:	dd01      	ble.n	8014160 <par_check_table_validy+0x1a4>
 801415c:	f000 ff46 	bl	8014fec <project_config_assert_fail>
		PAR_ASSERT(( ePAR_TYPE_U16 == p_par_cfg[i].type ) 	? ((( p_par_cfg[i].min.u16 < p_par_cfg[i].max.u16 ) && ( p_par_cfg[i].def.u16 <= p_par_cfg[i].max.u16 )) && (  p_par_cfg[i].min.u16 <= p_par_cfg[i].def.u16 )) : ( 1 ));
 8014160:	693a      	ldr	r2, [r7, #16]
 8014162:	4613      	mov	r3, r2
 8014164:	00db      	lsls	r3, r3, #3
 8014166:	1a9b      	subs	r3, r3, r2
 8014168:	009b      	lsls	r3, r3, #2
 801416a:	461a      	mov	r2, r3
 801416c:	687b      	ldr	r3, [r7, #4]
 801416e:	4413      	add	r3, r2
 8014170:	7d9b      	ldrb	r3, [r3, #22]
 8014172:	2b01      	cmp	r3, #1
 8014174:	d13d      	bne.n	80141f2 <par_check_table_validy+0x236>
 8014176:	693a      	ldr	r2, [r7, #16]
 8014178:	4613      	mov	r3, r2
 801417a:	00db      	lsls	r3, r3, #3
 801417c:	1a9b      	subs	r3, r3, r2
 801417e:	009b      	lsls	r3, r3, #2
 8014180:	461a      	mov	r2, r3
 8014182:	687b      	ldr	r3, [r7, #4]
 8014184:	4413      	add	r3, r2
 8014186:	8899      	ldrh	r1, [r3, #4]
 8014188:	693a      	ldr	r2, [r7, #16]
 801418a:	4613      	mov	r3, r2
 801418c:	00db      	lsls	r3, r3, #3
 801418e:	1a9b      	subs	r3, r3, r2
 8014190:	009b      	lsls	r3, r3, #2
 8014192:	461a      	mov	r2, r3
 8014194:	687b      	ldr	r3, [r7, #4]
 8014196:	4413      	add	r3, r2
 8014198:	891b      	ldrh	r3, [r3, #8]
 801419a:	4299      	cmp	r1, r3
 801419c:	d227      	bcs.n	80141ee <par_check_table_validy+0x232>
 801419e:	693a      	ldr	r2, [r7, #16]
 80141a0:	4613      	mov	r3, r2
 80141a2:	00db      	lsls	r3, r3, #3
 80141a4:	1a9b      	subs	r3, r3, r2
 80141a6:	009b      	lsls	r3, r3, #2
 80141a8:	461a      	mov	r2, r3
 80141aa:	687b      	ldr	r3, [r7, #4]
 80141ac:	4413      	add	r3, r2
 80141ae:	8999      	ldrh	r1, [r3, #12]
 80141b0:	693a      	ldr	r2, [r7, #16]
 80141b2:	4613      	mov	r3, r2
 80141b4:	00db      	lsls	r3, r3, #3
 80141b6:	1a9b      	subs	r3, r3, r2
 80141b8:	009b      	lsls	r3, r3, #2
 80141ba:	461a      	mov	r2, r3
 80141bc:	687b      	ldr	r3, [r7, #4]
 80141be:	4413      	add	r3, r2
 80141c0:	891b      	ldrh	r3, [r3, #8]
 80141c2:	4299      	cmp	r1, r3
 80141c4:	d813      	bhi.n	80141ee <par_check_table_validy+0x232>
 80141c6:	693a      	ldr	r2, [r7, #16]
 80141c8:	4613      	mov	r3, r2
 80141ca:	00db      	lsls	r3, r3, #3
 80141cc:	1a9b      	subs	r3, r3, r2
 80141ce:	009b      	lsls	r3, r3, #2
 80141d0:	461a      	mov	r2, r3
 80141d2:	687b      	ldr	r3, [r7, #4]
 80141d4:	4413      	add	r3, r2
 80141d6:	8899      	ldrh	r1, [r3, #4]
 80141d8:	693a      	ldr	r2, [r7, #16]
 80141da:	4613      	mov	r3, r2
 80141dc:	00db      	lsls	r3, r3, #3
 80141de:	1a9b      	subs	r3, r3, r2
 80141e0:	009b      	lsls	r3, r3, #2
 80141e2:	461a      	mov	r2, r3
 80141e4:	687b      	ldr	r3, [r7, #4]
 80141e6:	4413      	add	r3, r2
 80141e8:	899b      	ldrh	r3, [r3, #12]
 80141ea:	4299      	cmp	r1, r3
 80141ec:	d901      	bls.n	80141f2 <par_check_table_validy+0x236>
 80141ee:	f000 fefd 	bl	8014fec <project_config_assert_fail>
		PAR_ASSERT(( ePAR_TYPE_I16 == p_par_cfg[i].type ) 	? ((( p_par_cfg[i].min.i16 < p_par_cfg[i].max.i16 ) && ( p_par_cfg[i].def.i16 <= p_par_cfg[i].max.i16 )) && (  p_par_cfg[i].min.i16 <= p_par_cfg[i].def.i16 )) : ( 1 ));
 80141f2:	693a      	ldr	r2, [r7, #16]
 80141f4:	4613      	mov	r3, r2
 80141f6:	00db      	lsls	r3, r3, #3
 80141f8:	1a9b      	subs	r3, r3, r2
 80141fa:	009b      	lsls	r3, r3, #2
 80141fc:	461a      	mov	r2, r3
 80141fe:	687b      	ldr	r3, [r7, #4]
 8014200:	4413      	add	r3, r2
 8014202:	7d9b      	ldrb	r3, [r3, #22]
 8014204:	2b04      	cmp	r3, #4
 8014206:	d143      	bne.n	8014290 <par_check_table_validy+0x2d4>
 8014208:	693a      	ldr	r2, [r7, #16]
 801420a:	4613      	mov	r3, r2
 801420c:	00db      	lsls	r3, r3, #3
 801420e:	1a9b      	subs	r3, r3, r2
 8014210:	009b      	lsls	r3, r3, #2
 8014212:	461a      	mov	r2, r3
 8014214:	687b      	ldr	r3, [r7, #4]
 8014216:	4413      	add	r3, r2
 8014218:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 801421c:	693a      	ldr	r2, [r7, #16]
 801421e:	4613      	mov	r3, r2
 8014220:	00db      	lsls	r3, r3, #3
 8014222:	1a9b      	subs	r3, r3, r2
 8014224:	009b      	lsls	r3, r3, #2
 8014226:	461a      	mov	r2, r3
 8014228:	687b      	ldr	r3, [r7, #4]
 801422a:	4413      	add	r3, r2
 801422c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8014230:	4299      	cmp	r1, r3
 8014232:	da2b      	bge.n	801428c <par_check_table_validy+0x2d0>
 8014234:	693a      	ldr	r2, [r7, #16]
 8014236:	4613      	mov	r3, r2
 8014238:	00db      	lsls	r3, r3, #3
 801423a:	1a9b      	subs	r3, r3, r2
 801423c:	009b      	lsls	r3, r3, #2
 801423e:	461a      	mov	r2, r3
 8014240:	687b      	ldr	r3, [r7, #4]
 8014242:	4413      	add	r3, r2
 8014244:	f9b3 100c 	ldrsh.w	r1, [r3, #12]
 8014248:	693a      	ldr	r2, [r7, #16]
 801424a:	4613      	mov	r3, r2
 801424c:	00db      	lsls	r3, r3, #3
 801424e:	1a9b      	subs	r3, r3, r2
 8014250:	009b      	lsls	r3, r3, #2
 8014252:	461a      	mov	r2, r3
 8014254:	687b      	ldr	r3, [r7, #4]
 8014256:	4413      	add	r3, r2
 8014258:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 801425c:	4299      	cmp	r1, r3
 801425e:	dc15      	bgt.n	801428c <par_check_table_validy+0x2d0>
 8014260:	693a      	ldr	r2, [r7, #16]
 8014262:	4613      	mov	r3, r2
 8014264:	00db      	lsls	r3, r3, #3
 8014266:	1a9b      	subs	r3, r3, r2
 8014268:	009b      	lsls	r3, r3, #2
 801426a:	461a      	mov	r2, r3
 801426c:	687b      	ldr	r3, [r7, #4]
 801426e:	4413      	add	r3, r2
 8014270:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 8014274:	693a      	ldr	r2, [r7, #16]
 8014276:	4613      	mov	r3, r2
 8014278:	00db      	lsls	r3, r3, #3
 801427a:	1a9b      	subs	r3, r3, r2
 801427c:	009b      	lsls	r3, r3, #2
 801427e:	461a      	mov	r2, r3
 8014280:	687b      	ldr	r3, [r7, #4]
 8014282:	4413      	add	r3, r2
 8014284:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8014288:	4299      	cmp	r1, r3
 801428a:	dd01      	ble.n	8014290 <par_check_table_validy+0x2d4>
 801428c:	f000 feae 	bl	8014fec <project_config_assert_fail>
		PAR_ASSERT(( ePAR_TYPE_U32 == p_par_cfg[i].type ) 	? ((( p_par_cfg[i].min.u32 < p_par_cfg[i].max.u32 ) && ( p_par_cfg[i].def.u32 <= p_par_cfg[i].max.u32 )) && (  p_par_cfg[i].min.u32 <= p_par_cfg[i].def.u32 )) : ( 1 ));
 8014290:	693a      	ldr	r2, [r7, #16]
 8014292:	4613      	mov	r3, r2
 8014294:	00db      	lsls	r3, r3, #3
 8014296:	1a9b      	subs	r3, r3, r2
 8014298:	009b      	lsls	r3, r3, #2
 801429a:	461a      	mov	r2, r3
 801429c:	687b      	ldr	r3, [r7, #4]
 801429e:	4413      	add	r3, r2
 80142a0:	7d9b      	ldrb	r3, [r3, #22]
 80142a2:	2b02      	cmp	r3, #2
 80142a4:	d13d      	bne.n	8014322 <par_check_table_validy+0x366>
 80142a6:	693a      	ldr	r2, [r7, #16]
 80142a8:	4613      	mov	r3, r2
 80142aa:	00db      	lsls	r3, r3, #3
 80142ac:	1a9b      	subs	r3, r3, r2
 80142ae:	009b      	lsls	r3, r3, #2
 80142b0:	461a      	mov	r2, r3
 80142b2:	687b      	ldr	r3, [r7, #4]
 80142b4:	4413      	add	r3, r2
 80142b6:	6859      	ldr	r1, [r3, #4]
 80142b8:	693a      	ldr	r2, [r7, #16]
 80142ba:	4613      	mov	r3, r2
 80142bc:	00db      	lsls	r3, r3, #3
 80142be:	1a9b      	subs	r3, r3, r2
 80142c0:	009b      	lsls	r3, r3, #2
 80142c2:	461a      	mov	r2, r3
 80142c4:	687b      	ldr	r3, [r7, #4]
 80142c6:	4413      	add	r3, r2
 80142c8:	689b      	ldr	r3, [r3, #8]
 80142ca:	4299      	cmp	r1, r3
 80142cc:	d227      	bcs.n	801431e <par_check_table_validy+0x362>
 80142ce:	693a      	ldr	r2, [r7, #16]
 80142d0:	4613      	mov	r3, r2
 80142d2:	00db      	lsls	r3, r3, #3
 80142d4:	1a9b      	subs	r3, r3, r2
 80142d6:	009b      	lsls	r3, r3, #2
 80142d8:	461a      	mov	r2, r3
 80142da:	687b      	ldr	r3, [r7, #4]
 80142dc:	4413      	add	r3, r2
 80142de:	68d9      	ldr	r1, [r3, #12]
 80142e0:	693a      	ldr	r2, [r7, #16]
 80142e2:	4613      	mov	r3, r2
 80142e4:	00db      	lsls	r3, r3, #3
 80142e6:	1a9b      	subs	r3, r3, r2
 80142e8:	009b      	lsls	r3, r3, #2
 80142ea:	461a      	mov	r2, r3
 80142ec:	687b      	ldr	r3, [r7, #4]
 80142ee:	4413      	add	r3, r2
 80142f0:	689b      	ldr	r3, [r3, #8]
 80142f2:	4299      	cmp	r1, r3
 80142f4:	d813      	bhi.n	801431e <par_check_table_validy+0x362>
 80142f6:	693a      	ldr	r2, [r7, #16]
 80142f8:	4613      	mov	r3, r2
 80142fa:	00db      	lsls	r3, r3, #3
 80142fc:	1a9b      	subs	r3, r3, r2
 80142fe:	009b      	lsls	r3, r3, #2
 8014300:	461a      	mov	r2, r3
 8014302:	687b      	ldr	r3, [r7, #4]
 8014304:	4413      	add	r3, r2
 8014306:	6859      	ldr	r1, [r3, #4]
 8014308:	693a      	ldr	r2, [r7, #16]
 801430a:	4613      	mov	r3, r2
 801430c:	00db      	lsls	r3, r3, #3
 801430e:	1a9b      	subs	r3, r3, r2
 8014310:	009b      	lsls	r3, r3, #2
 8014312:	461a      	mov	r2, r3
 8014314:	687b      	ldr	r3, [r7, #4]
 8014316:	4413      	add	r3, r2
 8014318:	68db      	ldr	r3, [r3, #12]
 801431a:	4299      	cmp	r1, r3
 801431c:	d901      	bls.n	8014322 <par_check_table_validy+0x366>
 801431e:	f000 fe65 	bl	8014fec <project_config_assert_fail>
		PAR_ASSERT(( ePAR_TYPE_I32 == p_par_cfg[i].type ) 	? ((( p_par_cfg[i].min.i32 < p_par_cfg[i].max.i32 ) && ( p_par_cfg[i].def.i32 <= p_par_cfg[i].max.i32 )) && (  p_par_cfg[i].min.i32 <= p_par_cfg[i].def.i32 )) : ( 1 ));
 8014322:	693a      	ldr	r2, [r7, #16]
 8014324:	4613      	mov	r3, r2
 8014326:	00db      	lsls	r3, r3, #3
 8014328:	1a9b      	subs	r3, r3, r2
 801432a:	009b      	lsls	r3, r3, #2
 801432c:	461a      	mov	r2, r3
 801432e:	687b      	ldr	r3, [r7, #4]
 8014330:	4413      	add	r3, r2
 8014332:	7d9b      	ldrb	r3, [r3, #22]
 8014334:	2b05      	cmp	r3, #5
 8014336:	d13d      	bne.n	80143b4 <par_check_table_validy+0x3f8>
 8014338:	693a      	ldr	r2, [r7, #16]
 801433a:	4613      	mov	r3, r2
 801433c:	00db      	lsls	r3, r3, #3
 801433e:	1a9b      	subs	r3, r3, r2
 8014340:	009b      	lsls	r3, r3, #2
 8014342:	461a      	mov	r2, r3
 8014344:	687b      	ldr	r3, [r7, #4]
 8014346:	4413      	add	r3, r2
 8014348:	6859      	ldr	r1, [r3, #4]
 801434a:	693a      	ldr	r2, [r7, #16]
 801434c:	4613      	mov	r3, r2
 801434e:	00db      	lsls	r3, r3, #3
 8014350:	1a9b      	subs	r3, r3, r2
 8014352:	009b      	lsls	r3, r3, #2
 8014354:	461a      	mov	r2, r3
 8014356:	687b      	ldr	r3, [r7, #4]
 8014358:	4413      	add	r3, r2
 801435a:	689b      	ldr	r3, [r3, #8]
 801435c:	4299      	cmp	r1, r3
 801435e:	da27      	bge.n	80143b0 <par_check_table_validy+0x3f4>
 8014360:	693a      	ldr	r2, [r7, #16]
 8014362:	4613      	mov	r3, r2
 8014364:	00db      	lsls	r3, r3, #3
 8014366:	1a9b      	subs	r3, r3, r2
 8014368:	009b      	lsls	r3, r3, #2
 801436a:	461a      	mov	r2, r3
 801436c:	687b      	ldr	r3, [r7, #4]
 801436e:	4413      	add	r3, r2
 8014370:	68d9      	ldr	r1, [r3, #12]
 8014372:	693a      	ldr	r2, [r7, #16]
 8014374:	4613      	mov	r3, r2
 8014376:	00db      	lsls	r3, r3, #3
 8014378:	1a9b      	subs	r3, r3, r2
 801437a:	009b      	lsls	r3, r3, #2
 801437c:	461a      	mov	r2, r3
 801437e:	687b      	ldr	r3, [r7, #4]
 8014380:	4413      	add	r3, r2
 8014382:	689b      	ldr	r3, [r3, #8]
 8014384:	4299      	cmp	r1, r3
 8014386:	dc13      	bgt.n	80143b0 <par_check_table_validy+0x3f4>
 8014388:	693a      	ldr	r2, [r7, #16]
 801438a:	4613      	mov	r3, r2
 801438c:	00db      	lsls	r3, r3, #3
 801438e:	1a9b      	subs	r3, r3, r2
 8014390:	009b      	lsls	r3, r3, #2
 8014392:	461a      	mov	r2, r3
 8014394:	687b      	ldr	r3, [r7, #4]
 8014396:	4413      	add	r3, r2
 8014398:	6859      	ldr	r1, [r3, #4]
 801439a:	693a      	ldr	r2, [r7, #16]
 801439c:	4613      	mov	r3, r2
 801439e:	00db      	lsls	r3, r3, #3
 80143a0:	1a9b      	subs	r3, r3, r2
 80143a2:	009b      	lsls	r3, r3, #2
 80143a4:	461a      	mov	r2, r3
 80143a6:	687b      	ldr	r3, [r7, #4]
 80143a8:	4413      	add	r3, r2
 80143aa:	68db      	ldr	r3, [r3, #12]
 80143ac:	4299      	cmp	r1, r3
 80143ae:	dd01      	ble.n	80143b4 <par_check_table_validy+0x3f8>
 80143b0:	f000 fe1c 	bl	8014fec <project_config_assert_fail>
		PAR_ASSERT(( ePAR_TYPE_F32 == p_par_cfg[i].type ) 	? ((( p_par_cfg[i].min.f32 < p_par_cfg[i].max.f32 ) && ( p_par_cfg[i].def.f32 <= p_par_cfg[i].max.f32 )) && (  p_par_cfg[i].min.f32 <= p_par_cfg[i].def.f32 )) : ( 1 ));
 80143b4:	693a      	ldr	r2, [r7, #16]
 80143b6:	4613      	mov	r3, r2
 80143b8:	00db      	lsls	r3, r3, #3
 80143ba:	1a9b      	subs	r3, r3, r2
 80143bc:	009b      	lsls	r3, r3, #2
 80143be:	461a      	mov	r2, r3
 80143c0:	687b      	ldr	r3, [r7, #4]
 80143c2:	4413      	add	r3, r2
 80143c4:	7d9b      	ldrb	r3, [r3, #22]
 80143c6:	2b06      	cmp	r3, #6
 80143c8:	d164      	bne.n	8014494 <par_check_table_validy+0x4d8>
 80143ca:	693a      	ldr	r2, [r7, #16]
 80143cc:	4613      	mov	r3, r2
 80143ce:	00db      	lsls	r3, r3, #3
 80143d0:	1a9b      	subs	r3, r3, r2
 80143d2:	009b      	lsls	r3, r3, #2
 80143d4:	461a      	mov	r2, r3
 80143d6:	687b      	ldr	r3, [r7, #4]
 80143d8:	4413      	add	r3, r2
 80143da:	ed93 7a01 	vldr	s14, [r3, #4]
 80143de:	693a      	ldr	r2, [r7, #16]
 80143e0:	4613      	mov	r3, r2
 80143e2:	00db      	lsls	r3, r3, #3
 80143e4:	1a9b      	subs	r3, r3, r2
 80143e6:	009b      	lsls	r3, r3, #2
 80143e8:	461a      	mov	r2, r3
 80143ea:	687b      	ldr	r3, [r7, #4]
 80143ec:	4413      	add	r3, r2
 80143ee:	edd3 7a02 	vldr	s15, [r3, #8]
 80143f2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80143f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80143fa:	bf4c      	ite	mi
 80143fc:	2301      	movmi	r3, #1
 80143fe:	2300      	movpl	r3, #0
 8014400:	b2db      	uxtb	r3, r3
 8014402:	f083 0301 	eor.w	r3, r3, #1
 8014406:	b2db      	uxtb	r3, r3
 8014408:	2b00      	cmp	r3, #0
 801440a:	d141      	bne.n	8014490 <par_check_table_validy+0x4d4>
 801440c:	693a      	ldr	r2, [r7, #16]
 801440e:	4613      	mov	r3, r2
 8014410:	00db      	lsls	r3, r3, #3
 8014412:	1a9b      	subs	r3, r3, r2
 8014414:	009b      	lsls	r3, r3, #2
 8014416:	461a      	mov	r2, r3
 8014418:	687b      	ldr	r3, [r7, #4]
 801441a:	4413      	add	r3, r2
 801441c:	ed93 7a03 	vldr	s14, [r3, #12]
 8014420:	693a      	ldr	r2, [r7, #16]
 8014422:	4613      	mov	r3, r2
 8014424:	00db      	lsls	r3, r3, #3
 8014426:	1a9b      	subs	r3, r3, r2
 8014428:	009b      	lsls	r3, r3, #2
 801442a:	461a      	mov	r2, r3
 801442c:	687b      	ldr	r3, [r7, #4]
 801442e:	4413      	add	r3, r2
 8014430:	edd3 7a02 	vldr	s15, [r3, #8]
 8014434:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8014438:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801443c:	bf94      	ite	ls
 801443e:	2301      	movls	r3, #1
 8014440:	2300      	movhi	r3, #0
 8014442:	b2db      	uxtb	r3, r3
 8014444:	f083 0301 	eor.w	r3, r3, #1
 8014448:	b2db      	uxtb	r3, r3
 801444a:	2b00      	cmp	r3, #0
 801444c:	d120      	bne.n	8014490 <par_check_table_validy+0x4d4>
 801444e:	693a      	ldr	r2, [r7, #16]
 8014450:	4613      	mov	r3, r2
 8014452:	00db      	lsls	r3, r3, #3
 8014454:	1a9b      	subs	r3, r3, r2
 8014456:	009b      	lsls	r3, r3, #2
 8014458:	461a      	mov	r2, r3
 801445a:	687b      	ldr	r3, [r7, #4]
 801445c:	4413      	add	r3, r2
 801445e:	ed93 7a01 	vldr	s14, [r3, #4]
 8014462:	693a      	ldr	r2, [r7, #16]
 8014464:	4613      	mov	r3, r2
 8014466:	00db      	lsls	r3, r3, #3
 8014468:	1a9b      	subs	r3, r3, r2
 801446a:	009b      	lsls	r3, r3, #2
 801446c:	461a      	mov	r2, r3
 801446e:	687b      	ldr	r3, [r7, #4]
 8014470:	4413      	add	r3, r2
 8014472:	edd3 7a03 	vldr	s15, [r3, #12]
 8014476:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801447a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801447e:	bf94      	ite	ls
 8014480:	2301      	movls	r3, #1
 8014482:	2300      	movhi	r3, #0
 8014484:	b2db      	uxtb	r3, r3
 8014486:	f083 0301 	eor.w	r3, r3, #1
 801448a:	b2db      	uxtb	r3, r3
 801448c:	2b00      	cmp	r3, #0
 801448e:	d001      	beq.n	8014494 <par_check_table_validy+0x4d8>
 8014490:	f000 fdac 	bl	8014fec <project_config_assert_fail>
	for ( uint32_t i = 0; i < ePAR_NUM_OF; i++ )
 8014494:	693b      	ldr	r3, [r7, #16]
 8014496:	3301      	adds	r3, #1
 8014498:	613b      	str	r3, [r7, #16]
 801449a:	693b      	ldr	r3, [r7, #16]
 801449c:	2b13      	cmp	r3, #19
 801449e:	f67f ad96 	bls.w	8013fce <par_check_table_validy+0x12>
 80144a2:	e000      	b.n	80144a6 <par_check_table_validy+0x4ea>
			break;
 80144a4:	bf00      	nop
	}

	return status;
 80144a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80144a8:	4618      	mov	r0, r3
 80144aa:	3718      	adds	r7, #24
 80144ac:	46bd      	mov	sp, r7
 80144ae:	bd80      	pop	{r7, pc}

080144b0 <par_set_u8>:
* @param[in]	u8_val	- Value of parameter
* @return		status	- Status of operation
*/
////////////////////////////////////////////////////////////////////////////////
static par_status_t par_set_u8(const par_num_t par_num, const uint8_t u8_val)
{
 80144b0:	b480      	push	{r7}
 80144b2:	b085      	sub	sp, #20
 80144b4:	af00      	add	r7, sp, #0
 80144b6:	4603      	mov	r3, r0
 80144b8:	460a      	mov	r2, r1
 80144ba:	71fb      	strb	r3, [r7, #7]
 80144bc:	4613      	mov	r3, r2
 80144be:	71bb      	strb	r3, [r7, #6]
	par_status_t status = ePAR_OK;
 80144c0:	2300      	movs	r3, #0
 80144c2:	73fb      	strb	r3, [r7, #15]

	if ( ePAR_OK == status )
 80144c4:	7bfb      	ldrb	r3, [r7, #15]
 80144c6:	2b00      	cmp	r3, #0
 80144c8:	d14a      	bne.n	8014560 <par_set_u8+0xb0>
	{
		if ( u8_val > ( gp_par_table[ par_num ].max.u8 ))
 80144ca:	4b29      	ldr	r3, [pc, #164]	; (8014570 <par_set_u8+0xc0>)
 80144cc:	6819      	ldr	r1, [r3, #0]
 80144ce:	79fa      	ldrb	r2, [r7, #7]
 80144d0:	4613      	mov	r3, r2
 80144d2:	00db      	lsls	r3, r3, #3
 80144d4:	1a9b      	subs	r3, r3, r2
 80144d6:	009b      	lsls	r3, r3, #2
 80144d8:	440b      	add	r3, r1
 80144da:	7a1b      	ldrb	r3, [r3, #8]
 80144dc:	79ba      	ldrb	r2, [r7, #6]
 80144de:	429a      	cmp	r2, r3
 80144e0:	d913      	bls.n	801450a <par_set_u8+0x5a>
		{
			*(uint8_t*)&gpu8_par_value[ gu32_par_addr_offset[par_num] ] = gp_par_table[ par_num ].max.u8;
 80144e2:	4b23      	ldr	r3, [pc, #140]	; (8014570 <par_set_u8+0xc0>)
 80144e4:	6819      	ldr	r1, [r3, #0]
 80144e6:	79fa      	ldrb	r2, [r7, #7]
 80144e8:	4613      	mov	r3, r2
 80144ea:	00db      	lsls	r3, r3, #3
 80144ec:	1a9b      	subs	r3, r3, r2
 80144ee:	009b      	lsls	r3, r3, #2
 80144f0:	18ca      	adds	r2, r1, r3
 80144f2:	4b20      	ldr	r3, [pc, #128]	; (8014574 <par_set_u8+0xc4>)
 80144f4:	6819      	ldr	r1, [r3, #0]
 80144f6:	79fb      	ldrb	r3, [r7, #7]
 80144f8:	481f      	ldr	r0, [pc, #124]	; (8014578 <par_set_u8+0xc8>)
 80144fa:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80144fe:	440b      	add	r3, r1
 8014500:	7a12      	ldrb	r2, [r2, #8]
 8014502:	701a      	strb	r2, [r3, #0]
			status = ePAR_WAR_LIM_TO_MAX;
 8014504:	2301      	movs	r3, #1
 8014506:	73fb      	strb	r3, [r7, #15]
 8014508:	e02a      	b.n	8014560 <par_set_u8+0xb0>
		}
		else if ( u8_val < ( gp_par_table[ par_num ].min.u8 ))
 801450a:	4b19      	ldr	r3, [pc, #100]	; (8014570 <par_set_u8+0xc0>)
 801450c:	6819      	ldr	r1, [r3, #0]
 801450e:	79fa      	ldrb	r2, [r7, #7]
 8014510:	4613      	mov	r3, r2
 8014512:	00db      	lsls	r3, r3, #3
 8014514:	1a9b      	subs	r3, r3, r2
 8014516:	009b      	lsls	r3, r3, #2
 8014518:	440b      	add	r3, r1
 801451a:	791b      	ldrb	r3, [r3, #4]
 801451c:	79ba      	ldrb	r2, [r7, #6]
 801451e:	429a      	cmp	r2, r3
 8014520:	d213      	bcs.n	801454a <par_set_u8+0x9a>
		{
			*(uint8_t*)&gpu8_par_value[ gu32_par_addr_offset[par_num] ] = gp_par_table[ par_num ].min.u8;
 8014522:	4b13      	ldr	r3, [pc, #76]	; (8014570 <par_set_u8+0xc0>)
 8014524:	6819      	ldr	r1, [r3, #0]
 8014526:	79fa      	ldrb	r2, [r7, #7]
 8014528:	4613      	mov	r3, r2
 801452a:	00db      	lsls	r3, r3, #3
 801452c:	1a9b      	subs	r3, r3, r2
 801452e:	009b      	lsls	r3, r3, #2
 8014530:	18ca      	adds	r2, r1, r3
 8014532:	4b10      	ldr	r3, [pc, #64]	; (8014574 <par_set_u8+0xc4>)
 8014534:	6819      	ldr	r1, [r3, #0]
 8014536:	79fb      	ldrb	r3, [r7, #7]
 8014538:	480f      	ldr	r0, [pc, #60]	; (8014578 <par_set_u8+0xc8>)
 801453a:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 801453e:	440b      	add	r3, r1
 8014540:	7912      	ldrb	r2, [r2, #4]
 8014542:	701a      	strb	r2, [r3, #0]
			status = ePAR_WAR_LIM_TO_MIN;
 8014544:	2302      	movs	r3, #2
 8014546:	73fb      	strb	r3, [r7, #15]
 8014548:	e00a      	b.n	8014560 <par_set_u8+0xb0>
		}
		else
		{
			*(uint8_t*)&gpu8_par_value[ gu32_par_addr_offset[par_num] ] = (uint8_t) ( u8_val );
 801454a:	4b0a      	ldr	r3, [pc, #40]	; (8014574 <par_set_u8+0xc4>)
 801454c:	681a      	ldr	r2, [r3, #0]
 801454e:	79fb      	ldrb	r3, [r7, #7]
 8014550:	4909      	ldr	r1, [pc, #36]	; (8014578 <par_set_u8+0xc8>)
 8014552:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8014556:	4413      	add	r3, r2
 8014558:	79ba      	ldrb	r2, [r7, #6]
 801455a:	701a      	strb	r2, [r3, #0]
			status = ePAR_OK;
 801455c:	2300      	movs	r3, #0
 801455e:	73fb      	strb	r3, [r7, #15]
		}
	}

	return status;
 8014560:	7bfb      	ldrb	r3, [r7, #15]
}
 8014562:	4618      	mov	r0, r3
 8014564:	3714      	adds	r7, #20
 8014566:	46bd      	mov	sp, r7
 8014568:	f85d 7b04 	ldr.w	r7, [sp], #4
 801456c:	4770      	bx	lr
 801456e:	bf00      	nop
 8014570:	200057c0 	.word	0x200057c0
 8014574:	200057c8 	.word	0x200057c8
 8014578:	200057cc 	.word	0x200057cc

0801457c <par_set_i8>:
* @param[in]	i8_val	- Value of parameter
* @return		status	- Status of operation
*/
////////////////////////////////////////////////////////////////////////////////
static par_status_t par_set_i8(const par_num_t par_num, const int8_t i8_val)
{
 801457c:	b480      	push	{r7}
 801457e:	b085      	sub	sp, #20
 8014580:	af00      	add	r7, sp, #0
 8014582:	4603      	mov	r3, r0
 8014584:	460a      	mov	r2, r1
 8014586:	71fb      	strb	r3, [r7, #7]
 8014588:	4613      	mov	r3, r2
 801458a:	71bb      	strb	r3, [r7, #6]
	par_status_t status = ePAR_OK;
 801458c:	2300      	movs	r3, #0
 801458e:	73fb      	strb	r3, [r7, #15]

	if ( ePAR_OK == status )
 8014590:	7bfb      	ldrb	r3, [r7, #15]
 8014592:	2b00      	cmp	r3, #0
 8014594:	d150      	bne.n	8014638 <par_set_i8+0xbc>
	{
		if ( i8_val > ( gp_par_table[ par_num ].max.i8 ))
 8014596:	4b2c      	ldr	r3, [pc, #176]	; (8014648 <par_set_i8+0xcc>)
 8014598:	6819      	ldr	r1, [r3, #0]
 801459a:	79fa      	ldrb	r2, [r7, #7]
 801459c:	4613      	mov	r3, r2
 801459e:	00db      	lsls	r3, r3, #3
 80145a0:	1a9b      	subs	r3, r3, r2
 80145a2:	009b      	lsls	r3, r3, #2
 80145a4:	440b      	add	r3, r1
 80145a6:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80145aa:	f997 2006 	ldrsb.w	r2, [r7, #6]
 80145ae:	429a      	cmp	r2, r3
 80145b0:	dd14      	ble.n	80145dc <par_set_i8+0x60>
		{
			*(int8_t*)&gpu8_par_value[ gu32_par_addr_offset[par_num] ] = gp_par_table[ par_num ].max.i8;
 80145b2:	4b25      	ldr	r3, [pc, #148]	; (8014648 <par_set_i8+0xcc>)
 80145b4:	6819      	ldr	r1, [r3, #0]
 80145b6:	79fa      	ldrb	r2, [r7, #7]
 80145b8:	4613      	mov	r3, r2
 80145ba:	00db      	lsls	r3, r3, #3
 80145bc:	1a9b      	subs	r3, r3, r2
 80145be:	009b      	lsls	r3, r3, #2
 80145c0:	18ca      	adds	r2, r1, r3
 80145c2:	4b22      	ldr	r3, [pc, #136]	; (801464c <par_set_i8+0xd0>)
 80145c4:	6819      	ldr	r1, [r3, #0]
 80145c6:	79fb      	ldrb	r3, [r7, #7]
 80145c8:	4821      	ldr	r0, [pc, #132]	; (8014650 <par_set_i8+0xd4>)
 80145ca:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80145ce:	440b      	add	r3, r1
 80145d0:	f992 2008 	ldrsb.w	r2, [r2, #8]
 80145d4:	701a      	strb	r2, [r3, #0]
			status = ePAR_WAR_LIM_TO_MAX;
 80145d6:	2301      	movs	r3, #1
 80145d8:	73fb      	strb	r3, [r7, #15]
 80145da:	e02d      	b.n	8014638 <par_set_i8+0xbc>
		}
		else if ( i8_val < ( gp_par_table[ par_num ].min.i8 ))
 80145dc:	4b1a      	ldr	r3, [pc, #104]	; (8014648 <par_set_i8+0xcc>)
 80145de:	6819      	ldr	r1, [r3, #0]
 80145e0:	79fa      	ldrb	r2, [r7, #7]
 80145e2:	4613      	mov	r3, r2
 80145e4:	00db      	lsls	r3, r3, #3
 80145e6:	1a9b      	subs	r3, r3, r2
 80145e8:	009b      	lsls	r3, r3, #2
 80145ea:	440b      	add	r3, r1
 80145ec:	f993 3004 	ldrsb.w	r3, [r3, #4]
 80145f0:	f997 2006 	ldrsb.w	r2, [r7, #6]
 80145f4:	429a      	cmp	r2, r3
 80145f6:	da14      	bge.n	8014622 <par_set_i8+0xa6>
		{
			*(int8_t*)&gpu8_par_value[ gu32_par_addr_offset[par_num] ] = gp_par_table[ par_num ].min.i8;
 80145f8:	4b13      	ldr	r3, [pc, #76]	; (8014648 <par_set_i8+0xcc>)
 80145fa:	6819      	ldr	r1, [r3, #0]
 80145fc:	79fa      	ldrb	r2, [r7, #7]
 80145fe:	4613      	mov	r3, r2
 8014600:	00db      	lsls	r3, r3, #3
 8014602:	1a9b      	subs	r3, r3, r2
 8014604:	009b      	lsls	r3, r3, #2
 8014606:	18ca      	adds	r2, r1, r3
 8014608:	4b10      	ldr	r3, [pc, #64]	; (801464c <par_set_i8+0xd0>)
 801460a:	6819      	ldr	r1, [r3, #0]
 801460c:	79fb      	ldrb	r3, [r7, #7]
 801460e:	4810      	ldr	r0, [pc, #64]	; (8014650 <par_set_i8+0xd4>)
 8014610:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8014614:	440b      	add	r3, r1
 8014616:	f992 2004 	ldrsb.w	r2, [r2, #4]
 801461a:	701a      	strb	r2, [r3, #0]
			status = ePAR_WAR_LIM_TO_MIN;
 801461c:	2302      	movs	r3, #2
 801461e:	73fb      	strb	r3, [r7, #15]
 8014620:	e00a      	b.n	8014638 <par_set_i8+0xbc>
		}
		else
		{
			*(int8_t*)&gpu8_par_value[ gu32_par_addr_offset[par_num] ] = (int8_t) ( i8_val );
 8014622:	4b0a      	ldr	r3, [pc, #40]	; (801464c <par_set_i8+0xd0>)
 8014624:	681a      	ldr	r2, [r3, #0]
 8014626:	79fb      	ldrb	r3, [r7, #7]
 8014628:	4909      	ldr	r1, [pc, #36]	; (8014650 <par_set_i8+0xd4>)
 801462a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 801462e:	4413      	add	r3, r2
 8014630:	79ba      	ldrb	r2, [r7, #6]
 8014632:	701a      	strb	r2, [r3, #0]
			status = ePAR_OK;
 8014634:	2300      	movs	r3, #0
 8014636:	73fb      	strb	r3, [r7, #15]
		}
	}

	return status;
 8014638:	7bfb      	ldrb	r3, [r7, #15]
}
 801463a:	4618      	mov	r0, r3
 801463c:	3714      	adds	r7, #20
 801463e:	46bd      	mov	sp, r7
 8014640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014644:	4770      	bx	lr
 8014646:	bf00      	nop
 8014648:	200057c0 	.word	0x200057c0
 801464c:	200057c8 	.word	0x200057c8
 8014650:	200057cc 	.word	0x200057cc

08014654 <par_set_u16>:
* @param[in]	u16_val	- Value of parameter
* @return		status	- Status of operation
*/
////////////////////////////////////////////////////////////////////////////////
static par_status_t par_set_u16(const par_num_t par_num, const uint16_t u16_val)
{
 8014654:	b480      	push	{r7}
 8014656:	b085      	sub	sp, #20
 8014658:	af00      	add	r7, sp, #0
 801465a:	4603      	mov	r3, r0
 801465c:	460a      	mov	r2, r1
 801465e:	71fb      	strb	r3, [r7, #7]
 8014660:	4613      	mov	r3, r2
 8014662:	80bb      	strh	r3, [r7, #4]
	par_status_t status = ePAR_OK;
 8014664:	2300      	movs	r3, #0
 8014666:	73fb      	strb	r3, [r7, #15]

	if ( ePAR_OK == status )
 8014668:	7bfb      	ldrb	r3, [r7, #15]
 801466a:	2b00      	cmp	r3, #0
 801466c:	d14a      	bne.n	8014704 <par_set_u16+0xb0>
	{
		if ( u16_val > ( gp_par_table[ par_num ].max.u16 ))
 801466e:	4b29      	ldr	r3, [pc, #164]	; (8014714 <par_set_u16+0xc0>)
 8014670:	6819      	ldr	r1, [r3, #0]
 8014672:	79fa      	ldrb	r2, [r7, #7]
 8014674:	4613      	mov	r3, r2
 8014676:	00db      	lsls	r3, r3, #3
 8014678:	1a9b      	subs	r3, r3, r2
 801467a:	009b      	lsls	r3, r3, #2
 801467c:	440b      	add	r3, r1
 801467e:	891b      	ldrh	r3, [r3, #8]
 8014680:	88ba      	ldrh	r2, [r7, #4]
 8014682:	429a      	cmp	r2, r3
 8014684:	d913      	bls.n	80146ae <par_set_u16+0x5a>
		{
			*(uint16_t*)&gpu8_par_value[ gu32_par_addr_offset[par_num] ] = gp_par_table[ par_num ].max.u16;
 8014686:	4b23      	ldr	r3, [pc, #140]	; (8014714 <par_set_u16+0xc0>)
 8014688:	6819      	ldr	r1, [r3, #0]
 801468a:	79fa      	ldrb	r2, [r7, #7]
 801468c:	4613      	mov	r3, r2
 801468e:	00db      	lsls	r3, r3, #3
 8014690:	1a9b      	subs	r3, r3, r2
 8014692:	009b      	lsls	r3, r3, #2
 8014694:	18ca      	adds	r2, r1, r3
 8014696:	4b20      	ldr	r3, [pc, #128]	; (8014718 <par_set_u16+0xc4>)
 8014698:	6819      	ldr	r1, [r3, #0]
 801469a:	79fb      	ldrb	r3, [r7, #7]
 801469c:	481f      	ldr	r0, [pc, #124]	; (801471c <par_set_u16+0xc8>)
 801469e:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80146a2:	440b      	add	r3, r1
 80146a4:	8912      	ldrh	r2, [r2, #8]
 80146a6:	801a      	strh	r2, [r3, #0]
			status = ePAR_WAR_LIM_TO_MAX;
 80146a8:	2301      	movs	r3, #1
 80146aa:	73fb      	strb	r3, [r7, #15]
 80146ac:	e02a      	b.n	8014704 <par_set_u16+0xb0>
		}
		else if ( u16_val < ( gp_par_table[ par_num ].min.u16 ))
 80146ae:	4b19      	ldr	r3, [pc, #100]	; (8014714 <par_set_u16+0xc0>)
 80146b0:	6819      	ldr	r1, [r3, #0]
 80146b2:	79fa      	ldrb	r2, [r7, #7]
 80146b4:	4613      	mov	r3, r2
 80146b6:	00db      	lsls	r3, r3, #3
 80146b8:	1a9b      	subs	r3, r3, r2
 80146ba:	009b      	lsls	r3, r3, #2
 80146bc:	440b      	add	r3, r1
 80146be:	889b      	ldrh	r3, [r3, #4]
 80146c0:	88ba      	ldrh	r2, [r7, #4]
 80146c2:	429a      	cmp	r2, r3
 80146c4:	d213      	bcs.n	80146ee <par_set_u16+0x9a>
		{
			*(uint16_t*)&gpu8_par_value[ gu32_par_addr_offset[par_num] ] = gp_par_table[ par_num ].min.u16;
 80146c6:	4b13      	ldr	r3, [pc, #76]	; (8014714 <par_set_u16+0xc0>)
 80146c8:	6819      	ldr	r1, [r3, #0]
 80146ca:	79fa      	ldrb	r2, [r7, #7]
 80146cc:	4613      	mov	r3, r2
 80146ce:	00db      	lsls	r3, r3, #3
 80146d0:	1a9b      	subs	r3, r3, r2
 80146d2:	009b      	lsls	r3, r3, #2
 80146d4:	18ca      	adds	r2, r1, r3
 80146d6:	4b10      	ldr	r3, [pc, #64]	; (8014718 <par_set_u16+0xc4>)
 80146d8:	6819      	ldr	r1, [r3, #0]
 80146da:	79fb      	ldrb	r3, [r7, #7]
 80146dc:	480f      	ldr	r0, [pc, #60]	; (801471c <par_set_u16+0xc8>)
 80146de:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80146e2:	440b      	add	r3, r1
 80146e4:	8892      	ldrh	r2, [r2, #4]
 80146e6:	801a      	strh	r2, [r3, #0]
			status = ePAR_WAR_LIM_TO_MIN;
 80146e8:	2302      	movs	r3, #2
 80146ea:	73fb      	strb	r3, [r7, #15]
 80146ec:	e00a      	b.n	8014704 <par_set_u16+0xb0>
		}
		else
		{
			*(uint16_t*)&gpu8_par_value[ gu32_par_addr_offset[par_num] ] = (uint16_t) ( u16_val );
 80146ee:	4b0a      	ldr	r3, [pc, #40]	; (8014718 <par_set_u16+0xc4>)
 80146f0:	681a      	ldr	r2, [r3, #0]
 80146f2:	79fb      	ldrb	r3, [r7, #7]
 80146f4:	4909      	ldr	r1, [pc, #36]	; (801471c <par_set_u16+0xc8>)
 80146f6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80146fa:	4413      	add	r3, r2
 80146fc:	88ba      	ldrh	r2, [r7, #4]
 80146fe:	801a      	strh	r2, [r3, #0]
			status = ePAR_OK;
 8014700:	2300      	movs	r3, #0
 8014702:	73fb      	strb	r3, [r7, #15]
		}
	}

	return status;
 8014704:	7bfb      	ldrb	r3, [r7, #15]
}
 8014706:	4618      	mov	r0, r3
 8014708:	3714      	adds	r7, #20
 801470a:	46bd      	mov	sp, r7
 801470c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014710:	4770      	bx	lr
 8014712:	bf00      	nop
 8014714:	200057c0 	.word	0x200057c0
 8014718:	200057c8 	.word	0x200057c8
 801471c:	200057cc 	.word	0x200057cc

08014720 <par_set_i16>:
* @param[in]	i16_val	- Value of parameter
* @return		status	- Status of operation
*/
////////////////////////////////////////////////////////////////////////////////
static par_status_t par_set_i16(const par_num_t par_num, const int16_t i16_val)
{
 8014720:	b480      	push	{r7}
 8014722:	b085      	sub	sp, #20
 8014724:	af00      	add	r7, sp, #0
 8014726:	4603      	mov	r3, r0
 8014728:	460a      	mov	r2, r1
 801472a:	71fb      	strb	r3, [r7, #7]
 801472c:	4613      	mov	r3, r2
 801472e:	80bb      	strh	r3, [r7, #4]
	par_status_t status = ePAR_OK;
 8014730:	2300      	movs	r3, #0
 8014732:	73fb      	strb	r3, [r7, #15]

	if ( ePAR_OK == status )
 8014734:	7bfb      	ldrb	r3, [r7, #15]
 8014736:	2b00      	cmp	r3, #0
 8014738:	d150      	bne.n	80147dc <par_set_i16+0xbc>
	{
		if ( i16_val > ( gp_par_table[ par_num ].max.i16 ))
 801473a:	4b2c      	ldr	r3, [pc, #176]	; (80147ec <par_set_i16+0xcc>)
 801473c:	6819      	ldr	r1, [r3, #0]
 801473e:	79fa      	ldrb	r2, [r7, #7]
 8014740:	4613      	mov	r3, r2
 8014742:	00db      	lsls	r3, r3, #3
 8014744:	1a9b      	subs	r3, r3, r2
 8014746:	009b      	lsls	r3, r3, #2
 8014748:	440b      	add	r3, r1
 801474a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 801474e:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8014752:	429a      	cmp	r2, r3
 8014754:	dd14      	ble.n	8014780 <par_set_i16+0x60>
		{
			*(int16_t*)&gpu8_par_value[ gu32_par_addr_offset[par_num] ] = gp_par_table[ par_num ].max.i16;
 8014756:	4b25      	ldr	r3, [pc, #148]	; (80147ec <par_set_i16+0xcc>)
 8014758:	6819      	ldr	r1, [r3, #0]
 801475a:	79fa      	ldrb	r2, [r7, #7]
 801475c:	4613      	mov	r3, r2
 801475e:	00db      	lsls	r3, r3, #3
 8014760:	1a9b      	subs	r3, r3, r2
 8014762:	009b      	lsls	r3, r3, #2
 8014764:	18ca      	adds	r2, r1, r3
 8014766:	4b22      	ldr	r3, [pc, #136]	; (80147f0 <par_set_i16+0xd0>)
 8014768:	6819      	ldr	r1, [r3, #0]
 801476a:	79fb      	ldrb	r3, [r7, #7]
 801476c:	4821      	ldr	r0, [pc, #132]	; (80147f4 <par_set_i16+0xd4>)
 801476e:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8014772:	440b      	add	r3, r1
 8014774:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8014778:	801a      	strh	r2, [r3, #0]
			status = ePAR_WAR_LIM_TO_MAX;
 801477a:	2301      	movs	r3, #1
 801477c:	73fb      	strb	r3, [r7, #15]
 801477e:	e02d      	b.n	80147dc <par_set_i16+0xbc>
		}
		else if ( i16_val < ( gp_par_table[ par_num ].min.i16 ))
 8014780:	4b1a      	ldr	r3, [pc, #104]	; (80147ec <par_set_i16+0xcc>)
 8014782:	6819      	ldr	r1, [r3, #0]
 8014784:	79fa      	ldrb	r2, [r7, #7]
 8014786:	4613      	mov	r3, r2
 8014788:	00db      	lsls	r3, r3, #3
 801478a:	1a9b      	subs	r3, r3, r2
 801478c:	009b      	lsls	r3, r3, #2
 801478e:	440b      	add	r3, r1
 8014790:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8014794:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8014798:	429a      	cmp	r2, r3
 801479a:	da14      	bge.n	80147c6 <par_set_i16+0xa6>
		{
			*(int16_t*)&gpu8_par_value[ gu32_par_addr_offset[par_num] ] = gp_par_table[ par_num ].min.i16;
 801479c:	4b13      	ldr	r3, [pc, #76]	; (80147ec <par_set_i16+0xcc>)
 801479e:	6819      	ldr	r1, [r3, #0]
 80147a0:	79fa      	ldrb	r2, [r7, #7]
 80147a2:	4613      	mov	r3, r2
 80147a4:	00db      	lsls	r3, r3, #3
 80147a6:	1a9b      	subs	r3, r3, r2
 80147a8:	009b      	lsls	r3, r3, #2
 80147aa:	18ca      	adds	r2, r1, r3
 80147ac:	4b10      	ldr	r3, [pc, #64]	; (80147f0 <par_set_i16+0xd0>)
 80147ae:	6819      	ldr	r1, [r3, #0]
 80147b0:	79fb      	ldrb	r3, [r7, #7]
 80147b2:	4810      	ldr	r0, [pc, #64]	; (80147f4 <par_set_i16+0xd4>)
 80147b4:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80147b8:	440b      	add	r3, r1
 80147ba:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 80147be:	801a      	strh	r2, [r3, #0]
			status = ePAR_WAR_LIM_TO_MIN;
 80147c0:	2302      	movs	r3, #2
 80147c2:	73fb      	strb	r3, [r7, #15]
 80147c4:	e00a      	b.n	80147dc <par_set_i16+0xbc>
		}
		else
		{
			*(int16_t*)&gpu8_par_value[ gu32_par_addr_offset[par_num] ] = (int16_t) ( i16_val );
 80147c6:	4b0a      	ldr	r3, [pc, #40]	; (80147f0 <par_set_i16+0xd0>)
 80147c8:	681a      	ldr	r2, [r3, #0]
 80147ca:	79fb      	ldrb	r3, [r7, #7]
 80147cc:	4909      	ldr	r1, [pc, #36]	; (80147f4 <par_set_i16+0xd4>)
 80147ce:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80147d2:	4413      	add	r3, r2
 80147d4:	88ba      	ldrh	r2, [r7, #4]
 80147d6:	801a      	strh	r2, [r3, #0]
			status = ePAR_OK;
 80147d8:	2300      	movs	r3, #0
 80147da:	73fb      	strb	r3, [r7, #15]
		}
	}

	return status;
 80147dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80147de:	4618      	mov	r0, r3
 80147e0:	3714      	adds	r7, #20
 80147e2:	46bd      	mov	sp, r7
 80147e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80147e8:	4770      	bx	lr
 80147ea:	bf00      	nop
 80147ec:	200057c0 	.word	0x200057c0
 80147f0:	200057c8 	.word	0x200057c8
 80147f4:	200057cc 	.word	0x200057cc

080147f8 <par_set_u32>:
* @param[in]	u32_val	- Value of parameter
* @return		status	- Status of operation
*/
////////////////////////////////////////////////////////////////////////////////
static par_status_t par_set_u32(const par_num_t par_num, const uint32_t u32_val)
{
 80147f8:	b480      	push	{r7}
 80147fa:	b085      	sub	sp, #20
 80147fc:	af00      	add	r7, sp, #0
 80147fe:	4603      	mov	r3, r0
 8014800:	6039      	str	r1, [r7, #0]
 8014802:	71fb      	strb	r3, [r7, #7]
	par_status_t status = ePAR_OK;
 8014804:	2300      	movs	r3, #0
 8014806:	73fb      	strb	r3, [r7, #15]

	if ( ePAR_OK == status )
 8014808:	7bfb      	ldrb	r3, [r7, #15]
 801480a:	2b00      	cmp	r3, #0
 801480c:	d14a      	bne.n	80148a4 <par_set_u32+0xac>
	{
		if ( u32_val > ( gp_par_table[ par_num ].max.u32 ))
 801480e:	4b29      	ldr	r3, [pc, #164]	; (80148b4 <par_set_u32+0xbc>)
 8014810:	6819      	ldr	r1, [r3, #0]
 8014812:	79fa      	ldrb	r2, [r7, #7]
 8014814:	4613      	mov	r3, r2
 8014816:	00db      	lsls	r3, r3, #3
 8014818:	1a9b      	subs	r3, r3, r2
 801481a:	009b      	lsls	r3, r3, #2
 801481c:	440b      	add	r3, r1
 801481e:	689b      	ldr	r3, [r3, #8]
 8014820:	683a      	ldr	r2, [r7, #0]
 8014822:	429a      	cmp	r2, r3
 8014824:	d913      	bls.n	801484e <par_set_u32+0x56>
		{
			*(uint32_t*)&gpu8_par_value[ gu32_par_addr_offset[par_num] ] = gp_par_table[ par_num ].max.u32;
 8014826:	4b23      	ldr	r3, [pc, #140]	; (80148b4 <par_set_u32+0xbc>)
 8014828:	6819      	ldr	r1, [r3, #0]
 801482a:	79fa      	ldrb	r2, [r7, #7]
 801482c:	4613      	mov	r3, r2
 801482e:	00db      	lsls	r3, r3, #3
 8014830:	1a9b      	subs	r3, r3, r2
 8014832:	009b      	lsls	r3, r3, #2
 8014834:	18ca      	adds	r2, r1, r3
 8014836:	4b20      	ldr	r3, [pc, #128]	; (80148b8 <par_set_u32+0xc0>)
 8014838:	6819      	ldr	r1, [r3, #0]
 801483a:	79fb      	ldrb	r3, [r7, #7]
 801483c:	481f      	ldr	r0, [pc, #124]	; (80148bc <par_set_u32+0xc4>)
 801483e:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8014842:	440b      	add	r3, r1
 8014844:	6892      	ldr	r2, [r2, #8]
 8014846:	601a      	str	r2, [r3, #0]
			status = ePAR_WAR_LIM_TO_MAX;
 8014848:	2301      	movs	r3, #1
 801484a:	73fb      	strb	r3, [r7, #15]
 801484c:	e02a      	b.n	80148a4 <par_set_u32+0xac>
		}
		else if ( u32_val < ( gp_par_table[ par_num ].min.u32 ))
 801484e:	4b19      	ldr	r3, [pc, #100]	; (80148b4 <par_set_u32+0xbc>)
 8014850:	6819      	ldr	r1, [r3, #0]
 8014852:	79fa      	ldrb	r2, [r7, #7]
 8014854:	4613      	mov	r3, r2
 8014856:	00db      	lsls	r3, r3, #3
 8014858:	1a9b      	subs	r3, r3, r2
 801485a:	009b      	lsls	r3, r3, #2
 801485c:	440b      	add	r3, r1
 801485e:	685b      	ldr	r3, [r3, #4]
 8014860:	683a      	ldr	r2, [r7, #0]
 8014862:	429a      	cmp	r2, r3
 8014864:	d213      	bcs.n	801488e <par_set_u32+0x96>
		{
			*(uint32_t*)&gpu8_par_value[ gu32_par_addr_offset[par_num] ] = gp_par_table[ par_num ].min.u32;
 8014866:	4b13      	ldr	r3, [pc, #76]	; (80148b4 <par_set_u32+0xbc>)
 8014868:	6819      	ldr	r1, [r3, #0]
 801486a:	79fa      	ldrb	r2, [r7, #7]
 801486c:	4613      	mov	r3, r2
 801486e:	00db      	lsls	r3, r3, #3
 8014870:	1a9b      	subs	r3, r3, r2
 8014872:	009b      	lsls	r3, r3, #2
 8014874:	18ca      	adds	r2, r1, r3
 8014876:	4b10      	ldr	r3, [pc, #64]	; (80148b8 <par_set_u32+0xc0>)
 8014878:	6819      	ldr	r1, [r3, #0]
 801487a:	79fb      	ldrb	r3, [r7, #7]
 801487c:	480f      	ldr	r0, [pc, #60]	; (80148bc <par_set_u32+0xc4>)
 801487e:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8014882:	440b      	add	r3, r1
 8014884:	6852      	ldr	r2, [r2, #4]
 8014886:	601a      	str	r2, [r3, #0]
			status = ePAR_WAR_LIM_TO_MIN;
 8014888:	2302      	movs	r3, #2
 801488a:	73fb      	strb	r3, [r7, #15]
 801488c:	e00a      	b.n	80148a4 <par_set_u32+0xac>
		}
		else
		{
			*(uint32_t*)&gpu8_par_value[ gu32_par_addr_offset[par_num] ] = (uint32_t) ( u32_val );
 801488e:	4b0a      	ldr	r3, [pc, #40]	; (80148b8 <par_set_u32+0xc0>)
 8014890:	681a      	ldr	r2, [r3, #0]
 8014892:	79fb      	ldrb	r3, [r7, #7]
 8014894:	4909      	ldr	r1, [pc, #36]	; (80148bc <par_set_u32+0xc4>)
 8014896:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 801489a:	4413      	add	r3, r2
 801489c:	683a      	ldr	r2, [r7, #0]
 801489e:	601a      	str	r2, [r3, #0]
			status = ePAR_OK;
 80148a0:	2300      	movs	r3, #0
 80148a2:	73fb      	strb	r3, [r7, #15]
		}
	}

	return status;
 80148a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80148a6:	4618      	mov	r0, r3
 80148a8:	3714      	adds	r7, #20
 80148aa:	46bd      	mov	sp, r7
 80148ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80148b0:	4770      	bx	lr
 80148b2:	bf00      	nop
 80148b4:	200057c0 	.word	0x200057c0
 80148b8:	200057c8 	.word	0x200057c8
 80148bc:	200057cc 	.word	0x200057cc

080148c0 <par_set_i32>:
* @param[in]	i32_val	- Value of parameter
* @return		status	- Status of operation
*/
////////////////////////////////////////////////////////////////////////////////
static par_status_t par_set_i32(const par_num_t par_num, const int32_t i32_val)
{
 80148c0:	b480      	push	{r7}
 80148c2:	b085      	sub	sp, #20
 80148c4:	af00      	add	r7, sp, #0
 80148c6:	4603      	mov	r3, r0
 80148c8:	6039      	str	r1, [r7, #0]
 80148ca:	71fb      	strb	r3, [r7, #7]
	par_status_t status = ePAR_OK;
 80148cc:	2300      	movs	r3, #0
 80148ce:	73fb      	strb	r3, [r7, #15]

	if ( ePAR_OK == status )
 80148d0:	7bfb      	ldrb	r3, [r7, #15]
 80148d2:	2b00      	cmp	r3, #0
 80148d4:	d14a      	bne.n	801496c <par_set_i32+0xac>
	{
		if ( i32_val > ( gp_par_table[ par_num ].max.i32 ))
 80148d6:	4b29      	ldr	r3, [pc, #164]	; (801497c <par_set_i32+0xbc>)
 80148d8:	6819      	ldr	r1, [r3, #0]
 80148da:	79fa      	ldrb	r2, [r7, #7]
 80148dc:	4613      	mov	r3, r2
 80148de:	00db      	lsls	r3, r3, #3
 80148e0:	1a9b      	subs	r3, r3, r2
 80148e2:	009b      	lsls	r3, r3, #2
 80148e4:	440b      	add	r3, r1
 80148e6:	689b      	ldr	r3, [r3, #8]
 80148e8:	683a      	ldr	r2, [r7, #0]
 80148ea:	429a      	cmp	r2, r3
 80148ec:	dd13      	ble.n	8014916 <par_set_i32+0x56>
		{
			*(int32_t*)&gpu8_par_value[ gu32_par_addr_offset[par_num] ] = gp_par_table[ par_num ].max.i32;
 80148ee:	4b23      	ldr	r3, [pc, #140]	; (801497c <par_set_i32+0xbc>)
 80148f0:	6819      	ldr	r1, [r3, #0]
 80148f2:	79fa      	ldrb	r2, [r7, #7]
 80148f4:	4613      	mov	r3, r2
 80148f6:	00db      	lsls	r3, r3, #3
 80148f8:	1a9b      	subs	r3, r3, r2
 80148fa:	009b      	lsls	r3, r3, #2
 80148fc:	18ca      	adds	r2, r1, r3
 80148fe:	4b20      	ldr	r3, [pc, #128]	; (8014980 <par_set_i32+0xc0>)
 8014900:	6819      	ldr	r1, [r3, #0]
 8014902:	79fb      	ldrb	r3, [r7, #7]
 8014904:	481f      	ldr	r0, [pc, #124]	; (8014984 <par_set_i32+0xc4>)
 8014906:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 801490a:	440b      	add	r3, r1
 801490c:	6892      	ldr	r2, [r2, #8]
 801490e:	601a      	str	r2, [r3, #0]
			status = ePAR_WAR_LIM_TO_MAX;
 8014910:	2301      	movs	r3, #1
 8014912:	73fb      	strb	r3, [r7, #15]
 8014914:	e02a      	b.n	801496c <par_set_i32+0xac>
		}
		else if ( i32_val < ( gp_par_table[ par_num ].min.i32 ))
 8014916:	4b19      	ldr	r3, [pc, #100]	; (801497c <par_set_i32+0xbc>)
 8014918:	6819      	ldr	r1, [r3, #0]
 801491a:	79fa      	ldrb	r2, [r7, #7]
 801491c:	4613      	mov	r3, r2
 801491e:	00db      	lsls	r3, r3, #3
 8014920:	1a9b      	subs	r3, r3, r2
 8014922:	009b      	lsls	r3, r3, #2
 8014924:	440b      	add	r3, r1
 8014926:	685b      	ldr	r3, [r3, #4]
 8014928:	683a      	ldr	r2, [r7, #0]
 801492a:	429a      	cmp	r2, r3
 801492c:	da13      	bge.n	8014956 <par_set_i32+0x96>
		{
			*(int32_t*)&gpu8_par_value[ gu32_par_addr_offset[par_num] ] = gp_par_table[ par_num ].min.i32;
 801492e:	4b13      	ldr	r3, [pc, #76]	; (801497c <par_set_i32+0xbc>)
 8014930:	6819      	ldr	r1, [r3, #0]
 8014932:	79fa      	ldrb	r2, [r7, #7]
 8014934:	4613      	mov	r3, r2
 8014936:	00db      	lsls	r3, r3, #3
 8014938:	1a9b      	subs	r3, r3, r2
 801493a:	009b      	lsls	r3, r3, #2
 801493c:	18ca      	adds	r2, r1, r3
 801493e:	4b10      	ldr	r3, [pc, #64]	; (8014980 <par_set_i32+0xc0>)
 8014940:	6819      	ldr	r1, [r3, #0]
 8014942:	79fb      	ldrb	r3, [r7, #7]
 8014944:	480f      	ldr	r0, [pc, #60]	; (8014984 <par_set_i32+0xc4>)
 8014946:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 801494a:	440b      	add	r3, r1
 801494c:	6852      	ldr	r2, [r2, #4]
 801494e:	601a      	str	r2, [r3, #0]
			status = ePAR_WAR_LIM_TO_MIN;
 8014950:	2302      	movs	r3, #2
 8014952:	73fb      	strb	r3, [r7, #15]
 8014954:	e00a      	b.n	801496c <par_set_i32+0xac>
		}
		else
		{
			*(int32_t*)&gpu8_par_value[ gu32_par_addr_offset[par_num] ] = (int32_t) ( i32_val );
 8014956:	4b0a      	ldr	r3, [pc, #40]	; (8014980 <par_set_i32+0xc0>)
 8014958:	681a      	ldr	r2, [r3, #0]
 801495a:	79fb      	ldrb	r3, [r7, #7]
 801495c:	4909      	ldr	r1, [pc, #36]	; (8014984 <par_set_i32+0xc4>)
 801495e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8014962:	4413      	add	r3, r2
 8014964:	683a      	ldr	r2, [r7, #0]
 8014966:	601a      	str	r2, [r3, #0]
			status = ePAR_OK;
 8014968:	2300      	movs	r3, #0
 801496a:	73fb      	strb	r3, [r7, #15]
		}
	}

	return status;
 801496c:	7bfb      	ldrb	r3, [r7, #15]
}
 801496e:	4618      	mov	r0, r3
 8014970:	3714      	adds	r7, #20
 8014972:	46bd      	mov	sp, r7
 8014974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014978:	4770      	bx	lr
 801497a:	bf00      	nop
 801497c:	200057c0 	.word	0x200057c0
 8014980:	200057c8 	.word	0x200057c8
 8014984:	200057cc 	.word	0x200057cc

08014988 <par_set_f32>:
* @param[in]	f32_val	- Value of parameter
* @return		status	- Status of operation
*/
////////////////////////////////////////////////////////////////////////////////
static par_status_t par_set_f32(const par_num_t par_num, const float32_t f32_val)
{
 8014988:	b480      	push	{r7}
 801498a:	b085      	sub	sp, #20
 801498c:	af00      	add	r7, sp, #0
 801498e:	4603      	mov	r3, r0
 8014990:	ed87 0a00 	vstr	s0, [r7]
 8014994:	71fb      	strb	r3, [r7, #7]
	par_status_t status = ePAR_OK;
 8014996:	2300      	movs	r3, #0
 8014998:	73fb      	strb	r3, [r7, #15]

	if ( ePAR_OK == status )
 801499a:	7bfb      	ldrb	r3, [r7, #15]
 801499c:	2b00      	cmp	r3, #0
 801499e:	d154      	bne.n	8014a4a <par_set_f32+0xc2>
	{
		if ( f32_val > ( gp_par_table[ par_num ].max.f32 ))
 80149a0:	4b2d      	ldr	r3, [pc, #180]	; (8014a58 <par_set_f32+0xd0>)
 80149a2:	6819      	ldr	r1, [r3, #0]
 80149a4:	79fa      	ldrb	r2, [r7, #7]
 80149a6:	4613      	mov	r3, r2
 80149a8:	00db      	lsls	r3, r3, #3
 80149aa:	1a9b      	subs	r3, r3, r2
 80149ac:	009b      	lsls	r3, r3, #2
 80149ae:	440b      	add	r3, r1
 80149b0:	edd3 7a02 	vldr	s15, [r3, #8]
 80149b4:	ed97 7a00 	vldr	s14, [r7]
 80149b8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80149bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80149c0:	dd13      	ble.n	80149ea <par_set_f32+0x62>
		{
			*(float32_t*)&gpu8_par_value[ gu32_par_addr_offset[par_num] ] = gp_par_table[ par_num ].max.f32;
 80149c2:	4b25      	ldr	r3, [pc, #148]	; (8014a58 <par_set_f32+0xd0>)
 80149c4:	6819      	ldr	r1, [r3, #0]
 80149c6:	79fa      	ldrb	r2, [r7, #7]
 80149c8:	4613      	mov	r3, r2
 80149ca:	00db      	lsls	r3, r3, #3
 80149cc:	1a9b      	subs	r3, r3, r2
 80149ce:	009b      	lsls	r3, r3, #2
 80149d0:	18ca      	adds	r2, r1, r3
 80149d2:	4b22      	ldr	r3, [pc, #136]	; (8014a5c <par_set_f32+0xd4>)
 80149d4:	6819      	ldr	r1, [r3, #0]
 80149d6:	79fb      	ldrb	r3, [r7, #7]
 80149d8:	4821      	ldr	r0, [pc, #132]	; (8014a60 <par_set_f32+0xd8>)
 80149da:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80149de:	440b      	add	r3, r1
 80149e0:	6892      	ldr	r2, [r2, #8]
 80149e2:	601a      	str	r2, [r3, #0]
			status = ePAR_WAR_LIM_TO_MAX;
 80149e4:	2301      	movs	r3, #1
 80149e6:	73fb      	strb	r3, [r7, #15]
 80149e8:	e02f      	b.n	8014a4a <par_set_f32+0xc2>
		}
		else if ( f32_val < ( gp_par_table[ par_num ].min.f32 ))
 80149ea:	4b1b      	ldr	r3, [pc, #108]	; (8014a58 <par_set_f32+0xd0>)
 80149ec:	6819      	ldr	r1, [r3, #0]
 80149ee:	79fa      	ldrb	r2, [r7, #7]
 80149f0:	4613      	mov	r3, r2
 80149f2:	00db      	lsls	r3, r3, #3
 80149f4:	1a9b      	subs	r3, r3, r2
 80149f6:	009b      	lsls	r3, r3, #2
 80149f8:	440b      	add	r3, r1
 80149fa:	edd3 7a01 	vldr	s15, [r3, #4]
 80149fe:	ed97 7a00 	vldr	s14, [r7]
 8014a02:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8014a06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014a0a:	d513      	bpl.n	8014a34 <par_set_f32+0xac>
		{
			*(float32_t*)&gpu8_par_value[ gu32_par_addr_offset[par_num] ] = gp_par_table[ par_num ].min.f32;
 8014a0c:	4b12      	ldr	r3, [pc, #72]	; (8014a58 <par_set_f32+0xd0>)
 8014a0e:	6819      	ldr	r1, [r3, #0]
 8014a10:	79fa      	ldrb	r2, [r7, #7]
 8014a12:	4613      	mov	r3, r2
 8014a14:	00db      	lsls	r3, r3, #3
 8014a16:	1a9b      	subs	r3, r3, r2
 8014a18:	009b      	lsls	r3, r3, #2
 8014a1a:	18ca      	adds	r2, r1, r3
 8014a1c:	4b0f      	ldr	r3, [pc, #60]	; (8014a5c <par_set_f32+0xd4>)
 8014a1e:	6819      	ldr	r1, [r3, #0]
 8014a20:	79fb      	ldrb	r3, [r7, #7]
 8014a22:	480f      	ldr	r0, [pc, #60]	; (8014a60 <par_set_f32+0xd8>)
 8014a24:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8014a28:	440b      	add	r3, r1
 8014a2a:	6852      	ldr	r2, [r2, #4]
 8014a2c:	601a      	str	r2, [r3, #0]
			status = ePAR_WAR_LIM_TO_MIN;
 8014a2e:	2302      	movs	r3, #2
 8014a30:	73fb      	strb	r3, [r7, #15]
 8014a32:	e00a      	b.n	8014a4a <par_set_f32+0xc2>
		}
		else
		{
			*(float32_t*)&gpu8_par_value[ gu32_par_addr_offset[par_num] ] = (float32_t) ( f32_val );
 8014a34:	4b09      	ldr	r3, [pc, #36]	; (8014a5c <par_set_f32+0xd4>)
 8014a36:	681a      	ldr	r2, [r3, #0]
 8014a38:	79fb      	ldrb	r3, [r7, #7]
 8014a3a:	4909      	ldr	r1, [pc, #36]	; (8014a60 <par_set_f32+0xd8>)
 8014a3c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8014a40:	4413      	add	r3, r2
 8014a42:	683a      	ldr	r2, [r7, #0]
 8014a44:	601a      	str	r2, [r3, #0]
			status = ePAR_OK;
 8014a46:	2300      	movs	r3, #0
 8014a48:	73fb      	strb	r3, [r7, #15]
		}
	}

	return status;
 8014a4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8014a4c:	4618      	mov	r0, r3
 8014a4e:	3714      	adds	r7, #20
 8014a50:	46bd      	mov	sp, r7
 8014a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a56:	4770      	bx	lr
 8014a58:	200057c0 	.word	0x200057c0
 8014a5c:	200057c8 	.word	0x200057c8
 8014a60:	200057cc 	.word	0x200057cc

08014a64 <par_nvm_init>:
	*
	* @return	status - Status of initialization
	*/
	////////////////////////////////////////////////////////////////////////////////
	par_status_t par_nvm_init(void)
	{
 8014a64:	b580      	push	{r7, lr}
 8014a66:	b082      	sub	sp, #8
 8014a68:	af00      	add	r7, sp, #0
		par_status_t 	status 			= ePAR_OK;
 8014a6a:	2300      	movs	r3, #0
 8014a6c:	71fb      	strb	r3, [r7, #7]
		uint32_t		num_of_per_par 	= 0UL;
 8014a6e:	2300      	movs	r3, #0
 8014a70:	603b      	str	r3, [r7, #0]
			par_if_calc_hash( par_cfg_get_table(), par_cfg_get_table_size(), (uint8_t*) &par_table_id );

		#endif

		// Pre-condition
		PAR_ASSERT( true == nvm_is_init());
 8014a72:	f7fe fd21 	bl	80134b8 <nvm_is_init>
 8014a76:	4603      	mov	r3, r0
 8014a78:	f083 0301 	eor.w	r3, r3, #1
 8014a7c:	b2db      	uxtb	r3, r3
 8014a7e:	2b00      	cmp	r3, #0
 8014a80:	d001      	beq.n	8014a86 <par_nvm_init+0x22>
 8014a82:	f000 fab3 	bl	8014fec <project_config_assert_fail>
		PAR_ASSERT( true == par_is_init());
 8014a86:	f7fe fef9 	bl	801387c <par_is_init>
 8014a8a:	4603      	mov	r3, r0
 8014a8c:	f083 0301 	eor.w	r3, r3, #1
 8014a90:	b2db      	uxtb	r3, r3
 8014a92:	2b00      	cmp	r3, #0
 8014a94:	d001      	beq.n	8014a9a <par_nvm_init+0x36>
 8014a96:	f000 faa9 	bl	8014fec <project_config_assert_fail>

		// Check NVM signature
		if ( ePAR_OK == par_nvm_check_signature())
 8014a9a:	f000 f941 	bl	8014d20 <par_nvm_check_signature>
 8014a9e:	4603      	mov	r3, r0
 8014aa0:	2b00      	cmp	r3, #0
 8014aa2:	d10b      	bne.n	8014abc <par_nvm_init+0x58>
		{
			PAR_DBG_PRINT( "PAR_NVM: Signature OK" );
 8014aa4:	491b      	ldr	r1, [pc, #108]	; (8014b14 <par_nvm_init+0xb0>)
 8014aa6:	2000      	movs	r0, #0
 8014aa8:	f7fd f948 	bl	8011d3c <com_dbg_print>
				}

			#else

				// Load all parameters from NVM
				status |= par_nvm_load_all();
 8014aac:	f000 fa2a 	bl	8014f04 <par_nvm_load_all>
 8014ab0:	4603      	mov	r3, r0
 8014ab2:	461a      	mov	r2, r3
 8014ab4:	79fb      	ldrb	r3, [r7, #7]
 8014ab6:	4313      	orrs	r3, r2
 8014ab8:	71fb      	strb	r3, [r7, #7]
 8014aba:	e021      	b.n	8014b00 <par_nvm_init+0x9c>
		}

		// No signature
		else
		{
			PAR_DBG_PRINT( "PAR_NVM: Signature missing" );
 8014abc:	4916      	ldr	r1, [pc, #88]	; (8014b18 <par_nvm_init+0xb4>)
 8014abe:	2000      	movs	r0, #0
 8014ac0:	f7fd f93c 	bl	8011d3c <com_dbg_print>

			// Set all parameters to default values
			par_set_all_to_default();
 8014ac4:	f7ff f88e 	bl	8013be4 <par_set_all_to_default>

			// Get how many persistant parameters there are
			num_of_per_par = par_nvm_calc_num_of_per_par();
 8014ac8:	f000 fa66 	bl	8014f98 <par_nvm_calc_num_of_per_par>
 8014acc:	6038      	str	r0, [r7, #0]

			if ( num_of_per_par > 0 )
 8014ace:	683b      	ldr	r3, [r7, #0]
 8014ad0:	2b00      	cmp	r3, #0
 8014ad2:	d015      	beq.n	8014b00 <par_nvm_init+0x9c>
				#if ( 1 == PAR_CFG_TABLE_ID_CHECK_EN )
					status |= par_nvm_write_table_id((uint8_t*) &par_table_id );
				#endif

				// Write header
				status |= par_nvm_write_header( num_of_per_par );
 8014ad4:	6838      	ldr	r0, [r7, #0]
 8014ad6:	f000 f99b 	bl	8014e10 <par_nvm_write_header>
 8014ada:	4603      	mov	r3, r0
 8014adc:	461a      	mov	r2, r3
 8014ade:	79fb      	ldrb	r3, [r7, #7]
 8014ae0:	4313      	orrs	r3, r2
 8014ae2:	71fb      	strb	r3, [r7, #7]

				// Write default values to NVM
				status |= par_store_all_to_nvm();
 8014ae4:	f7ff f99a 	bl	8013e1c <par_store_all_to_nvm>
 8014ae8:	4603      	mov	r3, r0
 8014aea:	461a      	mov	r2, r3
 8014aec:	79fb      	ldrb	r3, [r7, #7]
 8014aee:	4313      	orrs	r3, r2
 8014af0:	71fb      	strb	r3, [r7, #7]

				// Lastly write signature
				// NOTE: 	Safety aspect to write signature last. Signature presents some validation factor!
				//			Possible power lost during table ID or header write will not have any side effects!
				status |= par_nvm_write_signature();
 8014af2:	f000 f935 	bl	8014d60 <par_nvm_write_signature>
 8014af6:	4603      	mov	r3, r0
 8014af8:	461a      	mov	r2, r3
 8014afa:	79fb      	ldrb	r3, [r7, #7]
 8014afc:	4313      	orrs	r3, r2
 8014afe:	71fb      	strb	r3, [r7, #7]
			{
				// No actions..
			}
		}

		PAR_ASSERT( ePAR_OK == status );
 8014b00:	79fb      	ldrb	r3, [r7, #7]
 8014b02:	2b00      	cmp	r3, #0
 8014b04:	d001      	beq.n	8014b0a <par_nvm_init+0xa6>
 8014b06:	f000 fa71 	bl	8014fec <project_config_assert_fail>

		return status;
 8014b0a:	79fb      	ldrb	r3, [r7, #7]
	}
 8014b0c:	4618      	mov	r0, r3
 8014b0e:	3708      	adds	r7, #8
 8014b10:	46bd      	mov	sp, r7
 8014b12:	bd80      	pop	{r7, pc}
 8014b14:	0801af2c 	.word	0x0801af2c
 8014b18:	0801af44 	.word	0x0801af44

08014b1c <par_nvm_write>:
	* @param[in]	par_num	- Parameter enumeration number
	* @return		status 	- Status of operation
	*/
	////////////////////////////////////////////////////////////////////////////////
	par_status_t par_nvm_write(const par_num_t par_num)
	{
 8014b1c:	b580      	push	{r7, lr}
 8014b1e:	b086      	sub	sp, #24
 8014b20:	af00      	add	r7, sp, #0
 8014b22:	4603      	mov	r3, r0
 8014b24:	71fb      	strb	r3, [r7, #7]
		par_status_t 	status 		= ePAR_OK;
 8014b26:	2300      	movs	r3, #0
 8014b28:	75fb      	strb	r3, [r7, #23]
		par_nvm_obj_t	par_obj		= { .u = 0ULL };
 8014b2a:	f04f 0200 	mov.w	r2, #0
 8014b2e:	f04f 0300 	mov.w	r3, #0
 8014b32:	e9c7 2302 	strd	r2, r3, [r7, #8]
		uint32_t		par_addr	= 0UL;
 8014b36:	2300      	movs	r3, #0
 8014b38:	613b      	str	r3, [r7, #16]

		// Pre-condition
		PAR_ASSERT( true == nvm_is_init());
 8014b3a:	f7fe fcbd 	bl	80134b8 <nvm_is_init>
 8014b3e:	4603      	mov	r3, r0
 8014b40:	f083 0301 	eor.w	r3, r3, #1
 8014b44:	b2db      	uxtb	r3, r3
 8014b46:	2b00      	cmp	r3, #0
 8014b48:	d001      	beq.n	8014b4e <par_nvm_write+0x32>
 8014b4a:	f000 fa4f 	bl	8014fec <project_config_assert_fail>
		PAR_ASSERT( true == par_is_init());
 8014b4e:	f7fe fe95 	bl	801387c <par_is_init>
 8014b52:	4603      	mov	r3, r0
 8014b54:	f083 0301 	eor.w	r3, r3, #1
 8014b58:	b2db      	uxtb	r3, r3
 8014b5a:	2b00      	cmp	r3, #0
 8014b5c:	d001      	beq.n	8014b62 <par_nvm_write+0x46>
 8014b5e:	f000 fa45 	bl	8014fec <project_config_assert_fail>

		// Legal call
		PAR_ASSERT( par_num < ePAR_NUM_OF )
 8014b62:	79fb      	ldrb	r3, [r7, #7]
 8014b64:	2b13      	cmp	r3, #19
 8014b66:	d901      	bls.n	8014b6c <par_nvm_write+0x50>
 8014b68:	f000 fa40 	bl	8014fec <project_config_assert_fail>
		PAR_ASSERT( true == par_get_persistance( par_num ))
 8014b6c:	79fb      	ldrb	r3, [r7, #7]
 8014b6e:	4618      	mov	r0, r3
 8014b70:	f7ff f92c 	bl	8013dcc <par_get_persistance>
 8014b74:	4603      	mov	r3, r0
 8014b76:	f083 0301 	eor.w	r3, r3, #1
 8014b7a:	b2db      	uxtb	r3, r3
 8014b7c:	2b00      	cmp	r3, #0
 8014b7e:	d001      	beq.n	8014b84 <par_nvm_write+0x68>
 8014b80:	f000 fa34 	bl	8014fec <project_config_assert_fail>

		// Get current par value
		par_get( par_num, (uint32_t*) &par_obj.field.val );
 8014b84:	f107 0208 	add.w	r2, r7, #8
 8014b88:	79fb      	ldrb	r3, [r7, #7]
 8014b8a:	4611      	mov	r1, r2
 8014b8c:	4618      	mov	r0, r3
 8014b8e:	f7fe ff4b 	bl	8013a28 <par_get>

		// Get parameter ID
		par_obj.field.id = par_get_id( par_num );
 8014b92:	79fb      	ldrb	r3, [r7, #7]
 8014b94:	4618      	mov	r0, r3
 8014b96:	f7ff f877 	bl	8013c88 <par_get_id>
 8014b9a:	4603      	mov	r3, r0
 8014b9c:	81bb      	strh	r3, [r7, #12]

		// Calculate CRC
		par_obj.field.crc = par_nvm_calc_crc((uint8_t*) &par_obj.field.val, 6U );
 8014b9e:	f107 0308 	add.w	r3, r7, #8
 8014ba2:	2106      	movs	r1, #6
 8014ba4:	4618      	mov	r0, r3
 8014ba6:	f000 f962 	bl	8014e6e <par_nvm_calc_crc>
 8014baa:	4603      	mov	r3, r0
 8014bac:	81fb      	strh	r3, [r7, #14]

		// Calculate parameter NVM address
		par_addr = (uint32_t)( PAR_NVM_PAR_OBJ_ADDR_OFFSET + ( 8UL * par_obj.field.id ));
 8014bae:	89bb      	ldrh	r3, [r7, #12]
 8014bb0:	3320      	adds	r3, #32
 8014bb2:	00db      	lsls	r3, r3, #3
 8014bb4:	613b      	str	r3, [r7, #16]

		// Write to NVM
		if ( eNVM_OK != nvm_write( PAR_CFG_NVM_REGION, par_addr, sizeof( par_nvm_obj_t ), (const uint8_t*) &par_obj.u ))
 8014bb6:	f107 0308 	add.w	r3, r7, #8
 8014bba:	2208      	movs	r2, #8
 8014bbc:	6939      	ldr	r1, [r7, #16]
 8014bbe:	2000      	movs	r0, #0
 8014bc0:	f7fe fc86 	bl	80134d0 <nvm_write>
 8014bc4:	4603      	mov	r3, r0
 8014bc6:	2b00      	cmp	r3, #0
 8014bc8:	d001      	beq.n	8014bce <par_nvm_write+0xb2>
		{
			status = ePAR_ERROR_NVM;
 8014bca:	2308      	movs	r3, #8
 8014bcc:	75fb      	strb	r3, [r7, #23]
		}

		return status;
 8014bce:	7dfb      	ldrb	r3, [r7, #23]
	}
 8014bd0:	4618      	mov	r0, r3
 8014bd2:	3718      	adds	r7, #24
 8014bd4:	46bd      	mov	sp, r7
 8014bd6:	bd80      	pop	{r7, pc}

08014bd8 <par_nvm_write_all>:
	*
	* @return		status 	- Status of operation
	*/
	////////////////////////////////////////////////////////////////////////////////
	par_status_t par_nvm_write_all(void)
	{
 8014bd8:	b580      	push	{r7, lr}
 8014bda:	b084      	sub	sp, #16
 8014bdc:	af00      	add	r7, sp, #0
		par_status_t 	status 		= ePAR_OK;
 8014bde:	2300      	movs	r3, #0
 8014be0:	73fb      	strb	r3, [r7, #15]
		uint32_t		par_num 	= 0UL;
 8014be2:	2300      	movs	r3, #0
 8014be4:	60bb      	str	r3, [r7, #8]
		uint32_t		per_par_num	= 0UL;
 8014be6:	2300      	movs	r3, #0
 8014be8:	607b      	str	r3, [r7, #4]

		for ( par_num = 0UL; par_num < ePAR_NUM_OF; par_num++ )
 8014bea:	2300      	movs	r3, #0
 8014bec:	60bb      	str	r3, [r7, #8]
 8014bee:	e017      	b.n	8014c20 <par_nvm_write_all+0x48>
		{
			if ( true == par_get_persistance( par_num ))
 8014bf0:	68bb      	ldr	r3, [r7, #8]
 8014bf2:	b2db      	uxtb	r3, r3
 8014bf4:	4618      	mov	r0, r3
 8014bf6:	f7ff f8e9 	bl	8013dcc <par_get_persistance>
 8014bfa:	4603      	mov	r3, r0
 8014bfc:	2b00      	cmp	r3, #0
 8014bfe:	d00c      	beq.n	8014c1a <par_nvm_write_all+0x42>
			{
				status |= par_nvm_write( par_num );
 8014c00:	68bb      	ldr	r3, [r7, #8]
 8014c02:	b2db      	uxtb	r3, r3
 8014c04:	4618      	mov	r0, r3
 8014c06:	f7ff ff89 	bl	8014b1c <par_nvm_write>
 8014c0a:	4603      	mov	r3, r0
 8014c0c:	461a      	mov	r2, r3
 8014c0e:	7bfb      	ldrb	r3, [r7, #15]
 8014c10:	4313      	orrs	r3, r2
 8014c12:	73fb      	strb	r3, [r7, #15]
				per_par_num++;
 8014c14:	687b      	ldr	r3, [r7, #4]
 8014c16:	3301      	adds	r3, #1
 8014c18:	607b      	str	r3, [r7, #4]
		for ( par_num = 0UL; par_num < ePAR_NUM_OF; par_num++ )
 8014c1a:	68bb      	ldr	r3, [r7, #8]
 8014c1c:	3301      	adds	r3, #1
 8014c1e:	60bb      	str	r3, [r7, #8]
 8014c20:	68bb      	ldr	r3, [r7, #8]
 8014c22:	2b13      	cmp	r3, #19
 8014c24:	d9e4      	bls.n	8014bf0 <par_nvm_write_all+0x18>
			}
		}

		PAR_DBG_PRINT( "PAR_NVM: Storing %u persistent parameters to NVM. Status: %u", per_par_num, status );
 8014c26:	7bfb      	ldrb	r3, [r7, #15]
 8014c28:	687a      	ldr	r2, [r7, #4]
 8014c2a:	4904      	ldr	r1, [pc, #16]	; (8014c3c <par_nvm_write_all+0x64>)
 8014c2c:	2000      	movs	r0, #0
 8014c2e:	f7fd f885 	bl	8011d3c <com_dbg_print>

		return status;
 8014c32:	7bfb      	ldrb	r3, [r7, #15]
	}
 8014c34:	4618      	mov	r0, r3
 8014c36:	3710      	adds	r7, #16
 8014c38:	46bd      	mov	sp, r7
 8014c3a:	bd80      	pop	{r7, pc}
 8014c3c:	0801af60 	.word	0x0801af60

08014c40 <par_nvm_read>:
	* @param[in]	par_num	- Parameter enumeration number
	* @return		status 	- Status of operation
	*/
	////////////////////////////////////////////////////////////////////////////////
	static par_status_t par_nvm_read(const par_num_t par_num)
	{
 8014c40:	b580      	push	{r7, lr}
 8014c42:	b088      	sub	sp, #32
 8014c44:	af00      	add	r7, sp, #0
 8014c46:	4603      	mov	r3, r0
 8014c48:	71fb      	strb	r3, [r7, #7]
		par_status_t 	status 		= ePAR_OK;
 8014c4a:	2300      	movs	r3, #0
 8014c4c:	77fb      	strb	r3, [r7, #31]
		par_nvm_obj_t	par_obj		= { .u = 0ULL };
 8014c4e:	f04f 0200 	mov.w	r2, #0
 8014c52:	f04f 0300 	mov.w	r3, #0
 8014c56:	e9c7 2302 	strd	r2, r3, [r7, #8]
		uint32_t		par_addr	= 0UL;
 8014c5a:	2300      	movs	r3, #0
 8014c5c:	61bb      	str	r3, [r7, #24]
		uint32_t		calc_crc	= 0UL;
 8014c5e:	2300      	movs	r3, #0
 8014c60:	617b      	str	r3, [r7, #20]
		uint16_t		par_id		= 0UL;
 8014c62:	2300      	movs	r3, #0
 8014c64:	827b      	strh	r3, [r7, #18]

		// Pre-condition
		PAR_ASSERT( true == nvm_is_init());
 8014c66:	f7fe fc27 	bl	80134b8 <nvm_is_init>
 8014c6a:	4603      	mov	r3, r0
 8014c6c:	f083 0301 	eor.w	r3, r3, #1
 8014c70:	b2db      	uxtb	r3, r3
 8014c72:	2b00      	cmp	r3, #0
 8014c74:	d001      	beq.n	8014c7a <par_nvm_read+0x3a>
 8014c76:	f000 f9b9 	bl	8014fec <project_config_assert_fail>
		PAR_ASSERT( true == par_is_init());
 8014c7a:	f7fe fdff 	bl	801387c <par_is_init>
 8014c7e:	4603      	mov	r3, r0
 8014c80:	f083 0301 	eor.w	r3, r3, #1
 8014c84:	b2db      	uxtb	r3, r3
 8014c86:	2b00      	cmp	r3, #0
 8014c88:	d001      	beq.n	8014c8e <par_nvm_read+0x4e>
 8014c8a:	f000 f9af 	bl	8014fec <project_config_assert_fail>

		// Legal call
		PAR_ASSERT( par_num < ePAR_NUM_OF )
 8014c8e:	79fb      	ldrb	r3, [r7, #7]
 8014c90:	2b13      	cmp	r3, #19
 8014c92:	d901      	bls.n	8014c98 <par_nvm_read+0x58>
 8014c94:	f000 f9aa 	bl	8014fec <project_config_assert_fail>
		PAR_ASSERT( true == par_get_persistance( par_num ))
 8014c98:	79fb      	ldrb	r3, [r7, #7]
 8014c9a:	4618      	mov	r0, r3
 8014c9c:	f7ff f896 	bl	8013dcc <par_get_persistance>
 8014ca0:	4603      	mov	r3, r0
 8014ca2:	f083 0301 	eor.w	r3, r3, #1
 8014ca6:	b2db      	uxtb	r3, r3
 8014ca8:	2b00      	cmp	r3, #0
 8014caa:	d001      	beq.n	8014cb0 <par_nvm_read+0x70>
 8014cac:	f000 f99e 	bl	8014fec <project_config_assert_fail>

		// Get parameter ID
		par_id = par_get_id( par_num );
 8014cb0:	79fb      	ldrb	r3, [r7, #7]
 8014cb2:	4618      	mov	r0, r3
 8014cb4:	f7fe ffe8 	bl	8013c88 <par_get_id>
 8014cb8:	4603      	mov	r3, r0
 8014cba:	827b      	strh	r3, [r7, #18]

		// Calculate parameter NVM address
		par_addr = (uint32_t)( PAR_NVM_PAR_OBJ_ADDR_OFFSET + ( 8UL * par_id ));
 8014cbc:	8a7b      	ldrh	r3, [r7, #18]
 8014cbe:	3320      	adds	r3, #32
 8014cc0:	00db      	lsls	r3, r3, #3
 8014cc2:	61bb      	str	r3, [r7, #24]

		// Read from NVM
		if ( eNVM_OK != nvm_read( PAR_CFG_NVM_REGION, par_addr, sizeof( par_nvm_obj_t ), (uint8_t*) &par_obj.u ))
 8014cc4:	f107 0308 	add.w	r3, r7, #8
 8014cc8:	2208      	movs	r2, #8
 8014cca:	69b9      	ldr	r1, [r7, #24]
 8014ccc:	2000      	movs	r0, #0
 8014cce:	f7fe fc75 	bl	80135bc <nvm_read>
 8014cd2:	4603      	mov	r3, r0
 8014cd4:	2b00      	cmp	r3, #0
 8014cd6:	d002      	beq.n	8014cde <par_nvm_read+0x9e>
		{
			status = ePAR_ERROR_NVM;
 8014cd8:	2308      	movs	r3, #8
 8014cda:	77fb      	strb	r3, [r7, #31]
 8014cdc:	e01a      	b.n	8014d14 <par_nvm_read+0xd4>
		}
		else
		{
			// Calculate CRC
			calc_crc = par_nvm_calc_crc((uint8_t*) &par_obj.field.val, 6U );
 8014cde:	f107 0308 	add.w	r3, r7, #8
 8014ce2:	2106      	movs	r1, #6
 8014ce4:	4618      	mov	r0, r3
 8014ce6:	f000 f8c2 	bl	8014e6e <par_nvm_calc_crc>
 8014cea:	4603      	mov	r3, r0
 8014cec:	617b      	str	r3, [r7, #20]

			// Validate CRC
			if ( calc_crc == par_obj.field.crc )
 8014cee:	89fb      	ldrh	r3, [r7, #14]
 8014cf0:	461a      	mov	r2, r3
 8014cf2:	697b      	ldr	r3, [r7, #20]
 8014cf4:	4293      	cmp	r3, r2
 8014cf6:	d107      	bne.n	8014d08 <par_nvm_read+0xc8>
			{
				par_set( par_num, (uint32_t*) &par_obj.field.val );
 8014cf8:	f107 0208 	add.w	r2, r7, #8
 8014cfc:	79fb      	ldrb	r3, [r7, #7]
 8014cfe:	4611      	mov	r1, r2
 8014d00:	4618      	mov	r0, r3
 8014d02:	f7fe fdfd 	bl	8013900 <par_set>
 8014d06:	e005      	b.n	8014d14 <par_nvm_read+0xd4>
			}

			// CRC corrupt
			else
			{
				par_set_to_default( par_num );
 8014d08:	79fb      	ldrb	r3, [r7, #7]
 8014d0a:	4618      	mov	r0, r3
 8014d0c:	f7fe ff28 	bl	8013b60 <par_set_to_default>
				status = ePAR_ERROR_NVM;
 8014d10:	2308      	movs	r3, #8
 8014d12:	77fb      	strb	r3, [r7, #31]
			}
		}

		return status;
 8014d14:	7ffb      	ldrb	r3, [r7, #31]
	}
 8014d16:	4618      	mov	r0, r3
 8014d18:	3720      	adds	r7, #32
 8014d1a:	46bd      	mov	sp, r7
 8014d1c:	bd80      	pop	{r7, pc}
	...

08014d20 <par_nvm_check_signature>:
	*
	* @return		status 	- Status of operation
	*/
	////////////////////////////////////////////////////////////////////////////////
	static par_status_t	par_nvm_check_signature(void)
	{
 8014d20:	b580      	push	{r7, lr}
 8014d22:	b082      	sub	sp, #8
 8014d24:	af00      	add	r7, sp, #0
		par_status_t 	status 	= ePAR_OK;
 8014d26:	2300      	movs	r3, #0
 8014d28:	71fb      	strb	r3, [r7, #7]
		uint32_t 		sign	= 0UL;
 8014d2a:	2300      	movs	r3, #0
 8014d2c:	603b      	str	r3, [r7, #0]

		if ( eNVM_OK != nvm_read( PAR_CFG_NVM_REGION, PAR_NVM_SIGNATURE_ADDR_OFFSET, 4U, (uint8_t*) &sign ))
 8014d2e:	463b      	mov	r3, r7
 8014d30:	2204      	movs	r2, #4
 8014d32:	2100      	movs	r1, #0
 8014d34:	2000      	movs	r0, #0
 8014d36:	f7fe fc41 	bl	80135bc <nvm_read>
 8014d3a:	4603      	mov	r3, r0
 8014d3c:	2b00      	cmp	r3, #0
 8014d3e:	d002      	beq.n	8014d46 <par_nvm_check_signature+0x26>
		{
			status = ePAR_ERROR_NVM;
 8014d40:	2308      	movs	r3, #8
 8014d42:	71fb      	strb	r3, [r7, #7]
 8014d44:	e005      	b.n	8014d52 <par_nvm_check_signature+0x32>
		}
		else
		{
			if ( PAR_NVM_SIGNATURE != sign )
 8014d46:	683b      	ldr	r3, [r7, #0]
 8014d48:	4a04      	ldr	r2, [pc, #16]	; (8014d5c <par_nvm_check_signature+0x3c>)
 8014d4a:	4293      	cmp	r3, r2
 8014d4c:	d001      	beq.n	8014d52 <par_nvm_check_signature+0x32>
			{
				status = ePAR_ERROR;
 8014d4e:	2304      	movs	r3, #4
 8014d50:	71fb      	strb	r3, [r7, #7]
			}
		}

		return status;
 8014d52:	79fb      	ldrb	r3, [r7, #7]
	}
 8014d54:	4618      	mov	r0, r3
 8014d56:	3708      	adds	r7, #8
 8014d58:	46bd      	mov	sp, r7
 8014d5a:	bd80      	pop	{r7, pc}
 8014d5c:	ff00aa55 	.word	0xff00aa55

08014d60 <par_nvm_write_signature>:
	*
	* @return		status 	- Status of operation
	*/
	////////////////////////////////////////////////////////////////////////////////
	static par_status_t	par_nvm_write_signature(void)
	{
 8014d60:	b580      	push	{r7, lr}
 8014d62:	b082      	sub	sp, #8
 8014d64:	af00      	add	r7, sp, #0
		par_status_t 	status 	= ePAR_OK;
 8014d66:	2300      	movs	r3, #0
 8014d68:	71fb      	strb	r3, [r7, #7]
		uint32_t 		sign	= PAR_NVM_SIGNATURE;
 8014d6a:	4b07      	ldr	r3, [pc, #28]	; (8014d88 <par_nvm_write_signature+0x28>)
 8014d6c:	603b      	str	r3, [r7, #0]

		status = nvm_write( PAR_CFG_NVM_REGION, PAR_NVM_SIGNATURE_ADDR_OFFSET, 4U, (uint8_t*) &sign );
 8014d6e:	463b      	mov	r3, r7
 8014d70:	2204      	movs	r2, #4
 8014d72:	2100      	movs	r1, #0
 8014d74:	2000      	movs	r0, #0
 8014d76:	f7fe fbab 	bl	80134d0 <nvm_write>
 8014d7a:	4603      	mov	r3, r0
 8014d7c:	71fb      	strb	r3, [r7, #7]

		return status;
 8014d7e:	79fb      	ldrb	r3, [r7, #7]
	}
 8014d80:	4618      	mov	r0, r3
 8014d82:	3708      	adds	r7, #8
 8014d84:	46bd      	mov	sp, r7
 8014d86:	bd80      	pop	{r7, pc}
 8014d88:	ff00aa55 	.word	0xff00aa55

08014d8c <par_nvm_read_header>:
	* @param[in]	p_num_of_par	- Pointer to number of stored parameters in NVM
	* @return		status 			- Status of operation
	*/
	////////////////////////////////////////////////////////////////////////////////
	static par_status_t par_nvm_read_header(uint32_t * const p_num_of_par)
	{
 8014d8c:	b580      	push	{r7, lr}
 8014d8e:	b086      	sub	sp, #24
 8014d90:	af00      	add	r7, sp, #0
 8014d92:	6078      	str	r0, [r7, #4]
		par_status_t 	status 		= ePAR_OK;
 8014d94:	2300      	movs	r3, #0
 8014d96:	75fb      	strb	r3, [r7, #23]
		par_nvm_obj_t	par_obj		= { .u = 0ULL };
 8014d98:	f04f 0200 	mov.w	r2, #0
 8014d9c:	f04f 0300 	mov.w	r3, #0
 8014da0:	e9c7 2302 	strd	r2, r3, [r7, #8]
		uint32_t		calc_crc	= 0UL;
 8014da4:	2300      	movs	r3, #0
 8014da6:	613b      	str	r3, [r7, #16]

		// Pre-condition
		PAR_ASSERT( true == nvm_is_init());
 8014da8:	f7fe fb86 	bl	80134b8 <nvm_is_init>
 8014dac:	4603      	mov	r3, r0
 8014dae:	f083 0301 	eor.w	r3, r3, #1
 8014db2:	b2db      	uxtb	r3, r3
 8014db4:	2b00      	cmp	r3, #0
 8014db6:	d001      	beq.n	8014dbc <par_nvm_read_header+0x30>
 8014db8:	f000 f918 	bl	8014fec <project_config_assert_fail>

		// Check inputs
		PAR_ASSERT( NULL != p_num_of_par );
 8014dbc:	687b      	ldr	r3, [r7, #4]
 8014dbe:	2b00      	cmp	r3, #0
 8014dc0:	d101      	bne.n	8014dc6 <par_nvm_read_header+0x3a>
 8014dc2:	f000 f913 	bl	8014fec <project_config_assert_fail>

		if ( eNVM_OK != nvm_read( PAR_CFG_NVM_REGION, PAR_NVM_HEADER_ADDR_OFFSET, sizeof( par_nvm_obj_t ), (uint8_t*) &par_obj.u ))
 8014dc6:	f107 0308 	add.w	r3, r7, #8
 8014dca:	2208      	movs	r2, #8
 8014dcc:	2104      	movs	r1, #4
 8014dce:	2000      	movs	r0, #0
 8014dd0:	f7fe fbf4 	bl	80135bc <nvm_read>
 8014dd4:	4603      	mov	r3, r0
 8014dd6:	2b00      	cmp	r3, #0
 8014dd8:	d002      	beq.n	8014de0 <par_nvm_read_header+0x54>
		{
			status = ePAR_ERROR_NVM;
 8014dda:	2308      	movs	r3, #8
 8014ddc:	75fb      	strb	r3, [r7, #23]
 8014dde:	e012      	b.n	8014e06 <par_nvm_read_header+0x7a>
		}
		else
		{
			// Calculate CRC
			calc_crc = par_nvm_calc_crc((uint8_t*) &par_obj.field.val, 4U );
 8014de0:	f107 0308 	add.w	r3, r7, #8
 8014de4:	2104      	movs	r1, #4
 8014de6:	4618      	mov	r0, r3
 8014de8:	f000 f841 	bl	8014e6e <par_nvm_calc_crc>
 8014dec:	4603      	mov	r3, r0
 8014dee:	613b      	str	r3, [r7, #16]

			// Validate CRC
			if ( calc_crc == par_obj.field.crc )
 8014df0:	89fb      	ldrh	r3, [r7, #14]
 8014df2:	461a      	mov	r2, r3
 8014df4:	693b      	ldr	r3, [r7, #16]
 8014df6:	4293      	cmp	r3, r2
 8014df8:	d103      	bne.n	8014e02 <par_nvm_read_header+0x76>
			{
				*p_num_of_par = par_obj.field.val;
 8014dfa:	68ba      	ldr	r2, [r7, #8]
 8014dfc:	687b      	ldr	r3, [r7, #4]
 8014dfe:	601a      	str	r2, [r3, #0]
 8014e00:	e001      	b.n	8014e06 <par_nvm_read_header+0x7a>
			}

			// CRC corrupt
			else
			{
				status = ePAR_ERROR_NVM;
 8014e02:	2308      	movs	r3, #8
 8014e04:	75fb      	strb	r3, [r7, #23]
			}
		}

		return status;
 8014e06:	7dfb      	ldrb	r3, [r7, #23]
	}
 8014e08:	4618      	mov	r0, r3
 8014e0a:	3718      	adds	r7, #24
 8014e0c:	46bd      	mov	sp, r7
 8014e0e:	bd80      	pop	{r7, pc}

08014e10 <par_nvm_write_header>:
	* @param[in]	num_of_par	- Number of persistant parameters that are stored in NVM
	* @return		status 		- Status of operation
	*/
	////////////////////////////////////////////////////////////////////////////////
	static par_status_t	par_nvm_write_header(const uint32_t num_of_par)
	{
 8014e10:	b580      	push	{r7, lr}
 8014e12:	b086      	sub	sp, #24
 8014e14:	af00      	add	r7, sp, #0
 8014e16:	6078      	str	r0, [r7, #4]
		par_status_t 	status 	= ePAR_OK;
 8014e18:	2300      	movs	r3, #0
 8014e1a:	75fb      	strb	r3, [r7, #23]
		par_nvm_obj_t	par_obj	= { .field.val = num_of_par, .field.id = 0U, .field.crc = 0U };
 8014e1c:	687b      	ldr	r3, [r7, #4]
 8014e1e:	60bb      	str	r3, [r7, #8]
 8014e20:	2300      	movs	r3, #0
 8014e22:	81bb      	strh	r3, [r7, #12]
 8014e24:	2300      	movs	r3, #0
 8014e26:	81fb      	strh	r3, [r7, #14]

		// Pre-condition
		PAR_ASSERT( true == nvm_is_init());
 8014e28:	f7fe fb46 	bl	80134b8 <nvm_is_init>
 8014e2c:	4603      	mov	r3, r0
 8014e2e:	f083 0301 	eor.w	r3, r3, #1
 8014e32:	b2db      	uxtb	r3, r3
 8014e34:	2b00      	cmp	r3, #0
 8014e36:	d001      	beq.n	8014e3c <par_nvm_write_header+0x2c>
 8014e38:	f000 f8d8 	bl	8014fec <project_config_assert_fail>

		// Calculate CRC
		par_obj.field.crc = par_nvm_calc_crc((uint8_t*) &par_obj.field.val, 4U );
 8014e3c:	f107 0308 	add.w	r3, r7, #8
 8014e40:	2104      	movs	r1, #4
 8014e42:	4618      	mov	r0, r3
 8014e44:	f000 f813 	bl	8014e6e <par_nvm_calc_crc>
 8014e48:	4603      	mov	r3, r0
 8014e4a:	81fb      	strh	r3, [r7, #14]

		// Write to NVM
		if ( eNVM_OK != nvm_write( PAR_CFG_NVM_REGION, PAR_NVM_HEADER_ADDR_OFFSET, sizeof( par_nvm_obj_t ), (const uint8_t*) &par_obj.u ))
 8014e4c:	f107 0308 	add.w	r3, r7, #8
 8014e50:	2208      	movs	r2, #8
 8014e52:	2104      	movs	r1, #4
 8014e54:	2000      	movs	r0, #0
 8014e56:	f7fe fb3b 	bl	80134d0 <nvm_write>
 8014e5a:	4603      	mov	r3, r0
 8014e5c:	2b00      	cmp	r3, #0
 8014e5e:	d001      	beq.n	8014e64 <par_nvm_write_header+0x54>
		{
			status = ePAR_ERROR_NVM;
 8014e60:	2308      	movs	r3, #8
 8014e62:	75fb      	strb	r3, [r7, #23]
		}

		return status;
 8014e64:	7dfb      	ldrb	r3, [r7, #23]
	}
 8014e66:	4618      	mov	r0, r3
 8014e68:	3718      	adds	r7, #24
 8014e6a:	46bd      	mov	sp, r7
 8014e6c:	bd80      	pop	{r7, pc}

08014e6e <par_nvm_calc_crc>:
	* @param[in]	size	- Size of data to calc crc
	* @return		crc16	- Calculated CRC
	*/
	////////////////////////////////////////////////////////////////////////////////
	static uint16_t par_nvm_calc_crc(const uint8_t * const p_data, const uint8_t size)
	{
 8014e6e:	b580      	push	{r7, lr}
 8014e70:	b084      	sub	sp, #16
 8014e72:	af00      	add	r7, sp, #0
 8014e74:	6078      	str	r0, [r7, #4]
 8014e76:	460b      	mov	r3, r1
 8014e78:	70fb      	strb	r3, [r7, #3]
		const 	uint16_t poly 	= 0x1021U;	// CRC-16-CCITT
 8014e7a:	f241 0321 	movw	r3, #4129	; 0x1021
 8014e7e:	817b      	strh	r3, [r7, #10]
		const 	uint16_t seed 	= 0x1234U;	// Custom seed
 8014e80:	f241 2334 	movw	r3, #4660	; 0x1234
 8014e84:	813b      	strh	r3, [r7, #8]
				uint16_t crc16 	= seed;
 8014e86:	893b      	ldrh	r3, [r7, #8]
 8014e88:	81fb      	strh	r3, [r7, #14]

		// Check input
		PAR_ASSERT( NULL != p_data );
 8014e8a:	687b      	ldr	r3, [r7, #4]
 8014e8c:	2b00      	cmp	r3, #0
 8014e8e:	d101      	bne.n	8014e94 <par_nvm_calc_crc+0x26>
 8014e90:	f000 f8ac 	bl	8014fec <project_config_assert_fail>
		PAR_ASSERT( size > 0 );
 8014e94:	78fb      	ldrb	r3, [r7, #3]
 8014e96:	2b00      	cmp	r3, #0
 8014e98:	d101      	bne.n	8014e9e <par_nvm_calc_crc+0x30>
 8014e9a:	f000 f8a7 	bl	8014fec <project_config_assert_fail>

	    for (uint8_t i = 0; i < size; i++)
 8014e9e:	2300      	movs	r3, #0
 8014ea0:	737b      	strb	r3, [r7, #13]
 8014ea2:	e026      	b.n	8014ef2 <par_nvm_calc_crc+0x84>
	    {
	    	crc16 = ( crc16 ^ ( p_data[i] << 8U ));
 8014ea4:	7b7b      	ldrb	r3, [r7, #13]
 8014ea6:	687a      	ldr	r2, [r7, #4]
 8014ea8:	4413      	add	r3, r2
 8014eaa:	781b      	ldrb	r3, [r3, #0]
 8014eac:	021b      	lsls	r3, r3, #8
 8014eae:	b21a      	sxth	r2, r3
 8014eb0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8014eb4:	4053      	eors	r3, r2
 8014eb6:	b21b      	sxth	r3, r3
 8014eb8:	81fb      	strh	r3, [r7, #14]

	        for (uint8_t j = 0U; j < 8U; j++)
 8014eba:	2300      	movs	r3, #0
 8014ebc:	733b      	strb	r3, [r7, #12]
 8014ebe:	e012      	b.n	8014ee6 <par_nvm_calc_crc+0x78>
	        {
	        	if (crc16 & 0x8000)
 8014ec0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8014ec4:	2b00      	cmp	r3, #0
 8014ec6:	da08      	bge.n	8014eda <par_nvm_calc_crc+0x6c>
	        	{
	        		crc16 = (( crc16 << 1U ) ^ poly );
 8014ec8:	89fb      	ldrh	r3, [r7, #14]
 8014eca:	005b      	lsls	r3, r3, #1
 8014ecc:	b21a      	sxth	r2, r3
 8014ece:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8014ed2:	4053      	eors	r3, r2
 8014ed4:	b21b      	sxth	r3, r3
 8014ed6:	81fb      	strh	r3, [r7, #14]
 8014ed8:	e002      	b.n	8014ee0 <par_nvm_calc_crc+0x72>
	            }
	        	else
	            {
	        		crc16 = ( crc16 << 1U );
 8014eda:	89fb      	ldrh	r3, [r7, #14]
 8014edc:	005b      	lsls	r3, r3, #1
 8014ede:	81fb      	strh	r3, [r7, #14]
	        for (uint8_t j = 0U; j < 8U; j++)
 8014ee0:	7b3b      	ldrb	r3, [r7, #12]
 8014ee2:	3301      	adds	r3, #1
 8014ee4:	733b      	strb	r3, [r7, #12]
 8014ee6:	7b3b      	ldrb	r3, [r7, #12]
 8014ee8:	2b07      	cmp	r3, #7
 8014eea:	d9e9      	bls.n	8014ec0 <par_nvm_calc_crc+0x52>
	    for (uint8_t i = 0; i < size; i++)
 8014eec:	7b7b      	ldrb	r3, [r7, #13]
 8014eee:	3301      	adds	r3, #1
 8014ef0:	737b      	strb	r3, [r7, #13]
 8014ef2:	7b7a      	ldrb	r2, [r7, #13]
 8014ef4:	78fb      	ldrb	r3, [r7, #3]
 8014ef6:	429a      	cmp	r2, r3
 8014ef8:	d3d4      	bcc.n	8014ea4 <par_nvm_calc_crc+0x36>
	            }
	        }
	    }

		return crc16;
 8014efa:	89fb      	ldrh	r3, [r7, #14]
	}
 8014efc:	4618      	mov	r0, r3
 8014efe:	3710      	adds	r7, #16
 8014f00:	46bd      	mov	sp, r7
 8014f02:	bd80      	pop	{r7, pc}

08014f04 <par_nvm_load_all>:
	*
	* @return		status 		- Status of operation
	*/
	////////////////////////////////////////////////////////////////////////////////
	static par_status_t par_nvm_load_all(void)
	{
 8014f04:	b580      	push	{r7, lr}
 8014f06:	b086      	sub	sp, #24
 8014f08:	af02      	add	r7, sp, #8
		par_status_t 	status 			= ePAR_OK;
 8014f0a:	2300      	movs	r3, #0
 8014f0c:	73fb      	strb	r3, [r7, #15]
		uint32_t 		par_num 		= 0UL;
 8014f0e:	2300      	movs	r3, #0
 8014f10:	60bb      	str	r3, [r7, #8]
		uint32_t		stored_par_num	= 0UL;
 8014f12:	2300      	movs	r3, #0
 8014f14:	603b      	str	r3, [r7, #0]
		uint32_t		loaded_par_num	= 0UL;
 8014f16:	2300      	movs	r3, #0
 8014f18:	607b      	str	r3, [r7, #4]

		// Get number of stored parameters
		if ( ePAR_OK == par_nvm_read_header( &stored_par_num ))			// TODO: FIx this !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
 8014f1a:	463b      	mov	r3, r7
 8014f1c:	4618      	mov	r0, r3
 8014f1e:	f7ff ff35 	bl	8014d8c <par_nvm_read_header>
 8014f22:	4603      	mov	r3, r0
 8014f24:	2b00      	cmp	r3, #0
 8014f26:	d127      	bne.n	8014f78 <par_nvm_load_all+0x74>
		{
			// Loop thru par table
			for ( par_num = 0; par_num < ePAR_NUM_OF; par_num++ )
 8014f28:	2300      	movs	r3, #0
 8014f2a:	60bb      	str	r3, [r7, #8]
 8014f2c:	e017      	b.n	8014f5e <par_nvm_load_all+0x5a>
				// Read first "stored_par_num" number of parameters
				//if 	(	( true == par_get_persistance( par_num ))
				//	&& 	( par_num < stored_par_num ))

				// Load all persistant parameters
				if ( true == par_get_persistance( par_num ))
 8014f2e:	68bb      	ldr	r3, [r7, #8]
 8014f30:	b2db      	uxtb	r3, r3
 8014f32:	4618      	mov	r0, r3
 8014f34:	f7fe ff4a 	bl	8013dcc <par_get_persistance>
 8014f38:	4603      	mov	r3, r0
 8014f3a:	2b00      	cmp	r3, #0
 8014f3c:	d00c      	beq.n	8014f58 <par_nvm_load_all+0x54>
				{
						status |= par_nvm_read( par_num );
 8014f3e:	68bb      	ldr	r3, [r7, #8]
 8014f40:	b2db      	uxtb	r3, r3
 8014f42:	4618      	mov	r0, r3
 8014f44:	f7ff fe7c 	bl	8014c40 <par_nvm_read>
 8014f48:	4603      	mov	r3, r0
 8014f4a:	461a      	mov	r2, r3
 8014f4c:	7bfb      	ldrb	r3, [r7, #15]
 8014f4e:	4313      	orrs	r3, r2
 8014f50:	73fb      	strb	r3, [r7, #15]
						loaded_par_num++;
 8014f52:	687b      	ldr	r3, [r7, #4]
 8014f54:	3301      	adds	r3, #1
 8014f56:	607b      	str	r3, [r7, #4]
			for ( par_num = 0; par_num < ePAR_NUM_OF; par_num++ )
 8014f58:	68bb      	ldr	r3, [r7, #8]
 8014f5a:	3301      	adds	r3, #1
 8014f5c:	60bb      	str	r3, [r7, #8]
 8014f5e:	68bb      	ldr	r3, [r7, #8]
 8014f60:	2b13      	cmp	r3, #19
 8014f62:	d9e4      	bls.n	8014f2e <par_nvm_load_all+0x2a>
				}
			}

			PAR_DBG_PRINT( "PAR_NVM: Loading %u of %u stored parameters from NVM. Status: %u", loaded_par_num, stored_par_num, status );
 8014f64:	683a      	ldr	r2, [r7, #0]
 8014f66:	7bfb      	ldrb	r3, [r7, #15]
 8014f68:	9300      	str	r3, [sp, #0]
 8014f6a:	4613      	mov	r3, r2
 8014f6c:	687a      	ldr	r2, [r7, #4]
 8014f6e:	4908      	ldr	r1, [pc, #32]	; (8014f90 <par_nvm_load_all+0x8c>)
 8014f70:	2000      	movs	r0, #0
 8014f72:	f7fc fee3 	bl	8011d3c <com_dbg_print>
 8014f76:	e005      	b.n	8014f84 <par_nvm_load_all+0x80>
		}
		else
		{
			status = ePAR_ERROR_NVM;
 8014f78:	2308      	movs	r3, #8
 8014f7a:	73fb      	strb	r3, [r7, #15]

			PAR_DBG_PRINT( "PAR_NVM: Reading header error!" );
 8014f7c:	4905      	ldr	r1, [pc, #20]	; (8014f94 <par_nvm_load_all+0x90>)
 8014f7e:	2000      	movs	r0, #0
 8014f80:	f7fc fedc 	bl	8011d3c <com_dbg_print>
		}


		return status;
 8014f84:	7bfb      	ldrb	r3, [r7, #15]
	}
 8014f86:	4618      	mov	r0, r3
 8014f88:	3710      	adds	r7, #16
 8014f8a:	46bd      	mov	sp, r7
 8014f8c:	bd80      	pop	{r7, pc}
 8014f8e:	bf00      	nop
 8014f90:	0801afa0 	.word	0x0801afa0
 8014f94:	0801afe4 	.word	0x0801afe4

08014f98 <par_nvm_calc_num_of_per_par>:
	*
	* @return	num_of_per_par - Number of persistent parameters
	*/
	////////////////////////////////////////////////////////////////////////////////
	static uint32_t	par_nvm_calc_num_of_per_par(void)
	{
 8014f98:	b580      	push	{r7, lr}
 8014f9a:	b082      	sub	sp, #8
 8014f9c:	af00      	add	r7, sp, #0
		uint32_t num_of_per_par = 0UL;
 8014f9e:	2300      	movs	r3, #0
 8014fa0:	607b      	str	r3, [r7, #4]
		uint32_t par_num 		= 0UL;
 8014fa2:	2300      	movs	r3, #0
 8014fa4:	603b      	str	r3, [r7, #0]

		PAR_ASSERT( true == par_is_init());
 8014fa6:	f7fe fc69 	bl	801387c <par_is_init>
 8014faa:	4603      	mov	r3, r0
 8014fac:	f083 0301 	eor.w	r3, r3, #1
 8014fb0:	b2db      	uxtb	r3, r3
 8014fb2:	2b00      	cmp	r3, #0
 8014fb4:	d001      	beq.n	8014fba <par_nvm_calc_num_of_per_par+0x22>
 8014fb6:	f000 f819 	bl	8014fec <project_config_assert_fail>

		for ( par_num = 0; par_num < ePAR_NUM_OF; par_num++ )
 8014fba:	2300      	movs	r3, #0
 8014fbc:	603b      	str	r3, [r7, #0]
 8014fbe:	e00d      	b.n	8014fdc <par_nvm_calc_num_of_per_par+0x44>
		{
			if ( true == par_get_persistance( par_num ))
 8014fc0:	683b      	ldr	r3, [r7, #0]
 8014fc2:	b2db      	uxtb	r3, r3
 8014fc4:	4618      	mov	r0, r3
 8014fc6:	f7fe ff01 	bl	8013dcc <par_get_persistance>
 8014fca:	4603      	mov	r3, r0
 8014fcc:	2b00      	cmp	r3, #0
 8014fce:	d002      	beq.n	8014fd6 <par_nvm_calc_num_of_per_par+0x3e>
			{
				num_of_per_par++;
 8014fd0:	687b      	ldr	r3, [r7, #4]
 8014fd2:	3301      	adds	r3, #1
 8014fd4:	607b      	str	r3, [r7, #4]
		for ( par_num = 0; par_num < ePAR_NUM_OF; par_num++ )
 8014fd6:	683b      	ldr	r3, [r7, #0]
 8014fd8:	3301      	adds	r3, #1
 8014fda:	603b      	str	r3, [r7, #0]
 8014fdc:	683b      	ldr	r3, [r7, #0]
 8014fde:	2b13      	cmp	r3, #19
 8014fe0:	d9ee      	bls.n	8014fc0 <par_nvm_calc_num_of_per_par+0x28>
			}
		}

		return num_of_per_par;
 8014fe2:	687b      	ldr	r3, [r7, #4]
	}
 8014fe4:	4618      	mov	r0, r3
 8014fe6:	3708      	adds	r7, #8
 8014fe8:	46bd      	mov	sp, r7
 8014fea:	bd80      	pop	{r7, pc}

08014fec <project_config_assert_fail>:

////////////////////////////////////////////////////////////////////////////////
// Functions
////////////////////////////////////////////////////////////////////////////////
void project_config_assert_fail(void)
{
 8014fec:	b580      	push	{r7, lr}
 8014fee:	af00      	add	r7, sp, #0
	// Panic mode !!!
	while(1)
	{
		gpio_toggle( eGPIO_DEBUG_LED );
 8014ff0:	2016      	movs	r0, #22
 8014ff2:	f7fb fbcb 	bl	801078c <gpio_toggle>
		HAL_Delay( 100 );
 8014ff6:	2064      	movs	r0, #100	; 0x64
 8014ff8:	f7ec fc78 	bl	80018ec <HAL_Delay>
		gpio_toggle( eGPIO_DEBUG_LED );
 8014ffc:	e7f8      	b.n	8014ff0 <project_config_assert_fail+0x4>
	...

08015000 <sw_version_string>:
* @return     Pointer to string buffer with version information of the 
* latest software build.
*/
////////////////////////////////////////////////////////////////////////////////
const char* sw_version_string(void)
{
 8015000:	b480      	push	{r7}
 8015002:	af00      	add	r7, sp, #0
  return sw_version_str;
 8015004:	4b02      	ldr	r3, [pc, #8]	; (8015010 <sw_version_string+0x10>)
}
 8015006:	4618      	mov	r0, r3
 8015008:	46bd      	mov	sp, r7
 801500a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801500e:	4770      	bx	lr
 8015010:	0801f540 	.word	0x0801f540

08015014 <hw_version_string>:
* @return     Pointer to string buffer with version information of the
* latest software build.
*/
////////////////////////////////////////////////////////////////////////////////
const char* hw_version_string(void)
{
 8015014:	b480      	push	{r7}
 8015016:	af00      	add	r7, sp, #0
  return hw_version_str;
 8015018:	4b02      	ldr	r3, [pc, #8]	; (8015024 <hw_version_string+0x10>)
}
 801501a:	4618      	mov	r0, r3
 801501c:	46bd      	mov	sp, r7
 801501e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015022:	4770      	bx	lr
 8015024:	0801f574 	.word	0x0801f574

08015028 <__errno>:
 8015028:	4b01      	ldr	r3, [pc, #4]	; (8015030 <__errno+0x8>)
 801502a:	6818      	ldr	r0, [r3, #0]
 801502c:	4770      	bx	lr
 801502e:	bf00      	nop
 8015030:	20000154 	.word	0x20000154

08015034 <__libc_init_array>:
 8015034:	b570      	push	{r4, r5, r6, lr}
 8015036:	4d0d      	ldr	r5, [pc, #52]	; (801506c <__libc_init_array+0x38>)
 8015038:	4c0d      	ldr	r4, [pc, #52]	; (8015070 <__libc_init_array+0x3c>)
 801503a:	1b64      	subs	r4, r4, r5
 801503c:	10a4      	asrs	r4, r4, #2
 801503e:	2600      	movs	r6, #0
 8015040:	42a6      	cmp	r6, r4
 8015042:	d109      	bne.n	8015058 <__libc_init_array+0x24>
 8015044:	4d0b      	ldr	r5, [pc, #44]	; (8015074 <__libc_init_array+0x40>)
 8015046:	4c0c      	ldr	r4, [pc, #48]	; (8015078 <__libc_init_array+0x44>)
 8015048:	f005 f8f8 	bl	801a23c <_init>
 801504c:	1b64      	subs	r4, r4, r5
 801504e:	10a4      	asrs	r4, r4, #2
 8015050:	2600      	movs	r6, #0
 8015052:	42a6      	cmp	r6, r4
 8015054:	d105      	bne.n	8015062 <__libc_init_array+0x2e>
 8015056:	bd70      	pop	{r4, r5, r6, pc}
 8015058:	f855 3b04 	ldr.w	r3, [r5], #4
 801505c:	4798      	blx	r3
 801505e:	3601      	adds	r6, #1
 8015060:	e7ee      	b.n	8015040 <__libc_init_array+0xc>
 8015062:	f855 3b04 	ldr.w	r3, [r5], #4
 8015066:	4798      	blx	r3
 8015068:	3601      	adds	r6, #1
 801506a:	e7f2      	b.n	8015052 <__libc_init_array+0x1e>
 801506c:	0801fa5c 	.word	0x0801fa5c
 8015070:	0801fa5c 	.word	0x0801fa5c
 8015074:	0801fa5c 	.word	0x0801fa5c
 8015078:	0801fa60 	.word	0x0801fa60

0801507c <malloc>:
 801507c:	4b02      	ldr	r3, [pc, #8]	; (8015088 <malloc+0xc>)
 801507e:	4601      	mov	r1, r0
 8015080:	6818      	ldr	r0, [r3, #0]
 8015082:	f000 b877 	b.w	8015174 <_malloc_r>
 8015086:	bf00      	nop
 8015088:	20000154 	.word	0x20000154

0801508c <memcmp>:
 801508c:	b530      	push	{r4, r5, lr}
 801508e:	3901      	subs	r1, #1
 8015090:	2400      	movs	r4, #0
 8015092:	42a2      	cmp	r2, r4
 8015094:	d101      	bne.n	801509a <memcmp+0xe>
 8015096:	2000      	movs	r0, #0
 8015098:	e005      	b.n	80150a6 <memcmp+0x1a>
 801509a:	5d03      	ldrb	r3, [r0, r4]
 801509c:	3401      	adds	r4, #1
 801509e:	5d0d      	ldrb	r5, [r1, r4]
 80150a0:	42ab      	cmp	r3, r5
 80150a2:	d0f6      	beq.n	8015092 <memcmp+0x6>
 80150a4:	1b58      	subs	r0, r3, r5
 80150a6:	bd30      	pop	{r4, r5, pc}

080150a8 <memcpy>:
 80150a8:	440a      	add	r2, r1
 80150aa:	4291      	cmp	r1, r2
 80150ac:	f100 33ff 	add.w	r3, r0, #4294967295
 80150b0:	d100      	bne.n	80150b4 <memcpy+0xc>
 80150b2:	4770      	bx	lr
 80150b4:	b510      	push	{r4, lr}
 80150b6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80150ba:	f803 4f01 	strb.w	r4, [r3, #1]!
 80150be:	4291      	cmp	r1, r2
 80150c0:	d1f9      	bne.n	80150b6 <memcpy+0xe>
 80150c2:	bd10      	pop	{r4, pc}

080150c4 <memset>:
 80150c4:	4402      	add	r2, r0
 80150c6:	4603      	mov	r3, r0
 80150c8:	4293      	cmp	r3, r2
 80150ca:	d100      	bne.n	80150ce <memset+0xa>
 80150cc:	4770      	bx	lr
 80150ce:	f803 1b01 	strb.w	r1, [r3], #1
 80150d2:	e7f9      	b.n	80150c8 <memset+0x4>

080150d4 <_free_r>:
 80150d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80150d6:	2900      	cmp	r1, #0
 80150d8:	d048      	beq.n	801516c <_free_r+0x98>
 80150da:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80150de:	9001      	str	r0, [sp, #4]
 80150e0:	2b00      	cmp	r3, #0
 80150e2:	f1a1 0404 	sub.w	r4, r1, #4
 80150e6:	bfb8      	it	lt
 80150e8:	18e4      	addlt	r4, r4, r3
 80150ea:	f003 f91d 	bl	8018328 <__malloc_lock>
 80150ee:	4a20      	ldr	r2, [pc, #128]	; (8015170 <_free_r+0x9c>)
 80150f0:	9801      	ldr	r0, [sp, #4]
 80150f2:	6813      	ldr	r3, [r2, #0]
 80150f4:	4615      	mov	r5, r2
 80150f6:	b933      	cbnz	r3, 8015106 <_free_r+0x32>
 80150f8:	6063      	str	r3, [r4, #4]
 80150fa:	6014      	str	r4, [r2, #0]
 80150fc:	b003      	add	sp, #12
 80150fe:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8015102:	f003 b917 	b.w	8018334 <__malloc_unlock>
 8015106:	42a3      	cmp	r3, r4
 8015108:	d90b      	bls.n	8015122 <_free_r+0x4e>
 801510a:	6821      	ldr	r1, [r4, #0]
 801510c:	1862      	adds	r2, r4, r1
 801510e:	4293      	cmp	r3, r2
 8015110:	bf04      	itt	eq
 8015112:	681a      	ldreq	r2, [r3, #0]
 8015114:	685b      	ldreq	r3, [r3, #4]
 8015116:	6063      	str	r3, [r4, #4]
 8015118:	bf04      	itt	eq
 801511a:	1852      	addeq	r2, r2, r1
 801511c:	6022      	streq	r2, [r4, #0]
 801511e:	602c      	str	r4, [r5, #0]
 8015120:	e7ec      	b.n	80150fc <_free_r+0x28>
 8015122:	461a      	mov	r2, r3
 8015124:	685b      	ldr	r3, [r3, #4]
 8015126:	b10b      	cbz	r3, 801512c <_free_r+0x58>
 8015128:	42a3      	cmp	r3, r4
 801512a:	d9fa      	bls.n	8015122 <_free_r+0x4e>
 801512c:	6811      	ldr	r1, [r2, #0]
 801512e:	1855      	adds	r5, r2, r1
 8015130:	42a5      	cmp	r5, r4
 8015132:	d10b      	bne.n	801514c <_free_r+0x78>
 8015134:	6824      	ldr	r4, [r4, #0]
 8015136:	4421      	add	r1, r4
 8015138:	1854      	adds	r4, r2, r1
 801513a:	42a3      	cmp	r3, r4
 801513c:	6011      	str	r1, [r2, #0]
 801513e:	d1dd      	bne.n	80150fc <_free_r+0x28>
 8015140:	681c      	ldr	r4, [r3, #0]
 8015142:	685b      	ldr	r3, [r3, #4]
 8015144:	6053      	str	r3, [r2, #4]
 8015146:	4421      	add	r1, r4
 8015148:	6011      	str	r1, [r2, #0]
 801514a:	e7d7      	b.n	80150fc <_free_r+0x28>
 801514c:	d902      	bls.n	8015154 <_free_r+0x80>
 801514e:	230c      	movs	r3, #12
 8015150:	6003      	str	r3, [r0, #0]
 8015152:	e7d3      	b.n	80150fc <_free_r+0x28>
 8015154:	6825      	ldr	r5, [r4, #0]
 8015156:	1961      	adds	r1, r4, r5
 8015158:	428b      	cmp	r3, r1
 801515a:	bf04      	itt	eq
 801515c:	6819      	ldreq	r1, [r3, #0]
 801515e:	685b      	ldreq	r3, [r3, #4]
 8015160:	6063      	str	r3, [r4, #4]
 8015162:	bf04      	itt	eq
 8015164:	1949      	addeq	r1, r1, r5
 8015166:	6021      	streq	r1, [r4, #0]
 8015168:	6054      	str	r4, [r2, #4]
 801516a:	e7c7      	b.n	80150fc <_free_r+0x28>
 801516c:	b003      	add	sp, #12
 801516e:	bd30      	pop	{r4, r5, pc}
 8015170:	2000581c 	.word	0x2000581c

08015174 <_malloc_r>:
 8015174:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015176:	1ccd      	adds	r5, r1, #3
 8015178:	f025 0503 	bic.w	r5, r5, #3
 801517c:	3508      	adds	r5, #8
 801517e:	2d0c      	cmp	r5, #12
 8015180:	bf38      	it	cc
 8015182:	250c      	movcc	r5, #12
 8015184:	2d00      	cmp	r5, #0
 8015186:	4606      	mov	r6, r0
 8015188:	db01      	blt.n	801518e <_malloc_r+0x1a>
 801518a:	42a9      	cmp	r1, r5
 801518c:	d903      	bls.n	8015196 <_malloc_r+0x22>
 801518e:	230c      	movs	r3, #12
 8015190:	6033      	str	r3, [r6, #0]
 8015192:	2000      	movs	r0, #0
 8015194:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015196:	f003 f8c7 	bl	8018328 <__malloc_lock>
 801519a:	4921      	ldr	r1, [pc, #132]	; (8015220 <_malloc_r+0xac>)
 801519c:	680a      	ldr	r2, [r1, #0]
 801519e:	4614      	mov	r4, r2
 80151a0:	b99c      	cbnz	r4, 80151ca <_malloc_r+0x56>
 80151a2:	4f20      	ldr	r7, [pc, #128]	; (8015224 <_malloc_r+0xb0>)
 80151a4:	683b      	ldr	r3, [r7, #0]
 80151a6:	b923      	cbnz	r3, 80151b2 <_malloc_r+0x3e>
 80151a8:	4621      	mov	r1, r4
 80151aa:	4630      	mov	r0, r6
 80151ac:	f000 feb6 	bl	8015f1c <_sbrk_r>
 80151b0:	6038      	str	r0, [r7, #0]
 80151b2:	4629      	mov	r1, r5
 80151b4:	4630      	mov	r0, r6
 80151b6:	f000 feb1 	bl	8015f1c <_sbrk_r>
 80151ba:	1c43      	adds	r3, r0, #1
 80151bc:	d123      	bne.n	8015206 <_malloc_r+0x92>
 80151be:	230c      	movs	r3, #12
 80151c0:	6033      	str	r3, [r6, #0]
 80151c2:	4630      	mov	r0, r6
 80151c4:	f003 f8b6 	bl	8018334 <__malloc_unlock>
 80151c8:	e7e3      	b.n	8015192 <_malloc_r+0x1e>
 80151ca:	6823      	ldr	r3, [r4, #0]
 80151cc:	1b5b      	subs	r3, r3, r5
 80151ce:	d417      	bmi.n	8015200 <_malloc_r+0x8c>
 80151d0:	2b0b      	cmp	r3, #11
 80151d2:	d903      	bls.n	80151dc <_malloc_r+0x68>
 80151d4:	6023      	str	r3, [r4, #0]
 80151d6:	441c      	add	r4, r3
 80151d8:	6025      	str	r5, [r4, #0]
 80151da:	e004      	b.n	80151e6 <_malloc_r+0x72>
 80151dc:	6863      	ldr	r3, [r4, #4]
 80151de:	42a2      	cmp	r2, r4
 80151e0:	bf0c      	ite	eq
 80151e2:	600b      	streq	r3, [r1, #0]
 80151e4:	6053      	strne	r3, [r2, #4]
 80151e6:	4630      	mov	r0, r6
 80151e8:	f003 f8a4 	bl	8018334 <__malloc_unlock>
 80151ec:	f104 000b 	add.w	r0, r4, #11
 80151f0:	1d23      	adds	r3, r4, #4
 80151f2:	f020 0007 	bic.w	r0, r0, #7
 80151f6:	1ac2      	subs	r2, r0, r3
 80151f8:	d0cc      	beq.n	8015194 <_malloc_r+0x20>
 80151fa:	1a1b      	subs	r3, r3, r0
 80151fc:	50a3      	str	r3, [r4, r2]
 80151fe:	e7c9      	b.n	8015194 <_malloc_r+0x20>
 8015200:	4622      	mov	r2, r4
 8015202:	6864      	ldr	r4, [r4, #4]
 8015204:	e7cc      	b.n	80151a0 <_malloc_r+0x2c>
 8015206:	1cc4      	adds	r4, r0, #3
 8015208:	f024 0403 	bic.w	r4, r4, #3
 801520c:	42a0      	cmp	r0, r4
 801520e:	d0e3      	beq.n	80151d8 <_malloc_r+0x64>
 8015210:	1a21      	subs	r1, r4, r0
 8015212:	4630      	mov	r0, r6
 8015214:	f000 fe82 	bl	8015f1c <_sbrk_r>
 8015218:	3001      	adds	r0, #1
 801521a:	d1dd      	bne.n	80151d8 <_malloc_r+0x64>
 801521c:	e7cf      	b.n	80151be <_malloc_r+0x4a>
 801521e:	bf00      	nop
 8015220:	2000581c 	.word	0x2000581c
 8015224:	20005820 	.word	0x20005820

08015228 <__cvt>:
 8015228:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801522c:	ec55 4b10 	vmov	r4, r5, d0
 8015230:	2d00      	cmp	r5, #0
 8015232:	460e      	mov	r6, r1
 8015234:	4619      	mov	r1, r3
 8015236:	462b      	mov	r3, r5
 8015238:	bfbb      	ittet	lt
 801523a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 801523e:	461d      	movlt	r5, r3
 8015240:	2300      	movge	r3, #0
 8015242:	232d      	movlt	r3, #45	; 0x2d
 8015244:	700b      	strb	r3, [r1, #0]
 8015246:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015248:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 801524c:	4691      	mov	r9, r2
 801524e:	f023 0820 	bic.w	r8, r3, #32
 8015252:	bfbc      	itt	lt
 8015254:	4622      	movlt	r2, r4
 8015256:	4614      	movlt	r4, r2
 8015258:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 801525c:	d005      	beq.n	801526a <__cvt+0x42>
 801525e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8015262:	d100      	bne.n	8015266 <__cvt+0x3e>
 8015264:	3601      	adds	r6, #1
 8015266:	2102      	movs	r1, #2
 8015268:	e000      	b.n	801526c <__cvt+0x44>
 801526a:	2103      	movs	r1, #3
 801526c:	ab03      	add	r3, sp, #12
 801526e:	9301      	str	r3, [sp, #4]
 8015270:	ab02      	add	r3, sp, #8
 8015272:	9300      	str	r3, [sp, #0]
 8015274:	ec45 4b10 	vmov	d0, r4, r5
 8015278:	4653      	mov	r3, sl
 801527a:	4632      	mov	r2, r6
 801527c:	f001 fed0 	bl	8017020 <_dtoa_r>
 8015280:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8015284:	4607      	mov	r7, r0
 8015286:	d102      	bne.n	801528e <__cvt+0x66>
 8015288:	f019 0f01 	tst.w	r9, #1
 801528c:	d022      	beq.n	80152d4 <__cvt+0xac>
 801528e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8015292:	eb07 0906 	add.w	r9, r7, r6
 8015296:	d110      	bne.n	80152ba <__cvt+0x92>
 8015298:	783b      	ldrb	r3, [r7, #0]
 801529a:	2b30      	cmp	r3, #48	; 0x30
 801529c:	d10a      	bne.n	80152b4 <__cvt+0x8c>
 801529e:	2200      	movs	r2, #0
 80152a0:	2300      	movs	r3, #0
 80152a2:	4620      	mov	r0, r4
 80152a4:	4629      	mov	r1, r5
 80152a6:	f7eb fc3f 	bl	8000b28 <__aeabi_dcmpeq>
 80152aa:	b918      	cbnz	r0, 80152b4 <__cvt+0x8c>
 80152ac:	f1c6 0601 	rsb	r6, r6, #1
 80152b0:	f8ca 6000 	str.w	r6, [sl]
 80152b4:	f8da 3000 	ldr.w	r3, [sl]
 80152b8:	4499      	add	r9, r3
 80152ba:	2200      	movs	r2, #0
 80152bc:	2300      	movs	r3, #0
 80152be:	4620      	mov	r0, r4
 80152c0:	4629      	mov	r1, r5
 80152c2:	f7eb fc31 	bl	8000b28 <__aeabi_dcmpeq>
 80152c6:	b108      	cbz	r0, 80152cc <__cvt+0xa4>
 80152c8:	f8cd 900c 	str.w	r9, [sp, #12]
 80152cc:	2230      	movs	r2, #48	; 0x30
 80152ce:	9b03      	ldr	r3, [sp, #12]
 80152d0:	454b      	cmp	r3, r9
 80152d2:	d307      	bcc.n	80152e4 <__cvt+0xbc>
 80152d4:	9b03      	ldr	r3, [sp, #12]
 80152d6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80152d8:	1bdb      	subs	r3, r3, r7
 80152da:	4638      	mov	r0, r7
 80152dc:	6013      	str	r3, [r2, #0]
 80152de:	b004      	add	sp, #16
 80152e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80152e4:	1c59      	adds	r1, r3, #1
 80152e6:	9103      	str	r1, [sp, #12]
 80152e8:	701a      	strb	r2, [r3, #0]
 80152ea:	e7f0      	b.n	80152ce <__cvt+0xa6>

080152ec <__exponent>:
 80152ec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80152ee:	4603      	mov	r3, r0
 80152f0:	2900      	cmp	r1, #0
 80152f2:	bfb8      	it	lt
 80152f4:	4249      	neglt	r1, r1
 80152f6:	f803 2b02 	strb.w	r2, [r3], #2
 80152fa:	bfb4      	ite	lt
 80152fc:	222d      	movlt	r2, #45	; 0x2d
 80152fe:	222b      	movge	r2, #43	; 0x2b
 8015300:	2909      	cmp	r1, #9
 8015302:	7042      	strb	r2, [r0, #1]
 8015304:	dd2a      	ble.n	801535c <__exponent+0x70>
 8015306:	f10d 0407 	add.w	r4, sp, #7
 801530a:	46a4      	mov	ip, r4
 801530c:	270a      	movs	r7, #10
 801530e:	46a6      	mov	lr, r4
 8015310:	460a      	mov	r2, r1
 8015312:	fb91 f6f7 	sdiv	r6, r1, r7
 8015316:	fb07 1516 	mls	r5, r7, r6, r1
 801531a:	3530      	adds	r5, #48	; 0x30
 801531c:	2a63      	cmp	r2, #99	; 0x63
 801531e:	f104 34ff 	add.w	r4, r4, #4294967295
 8015322:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8015326:	4631      	mov	r1, r6
 8015328:	dcf1      	bgt.n	801530e <__exponent+0x22>
 801532a:	3130      	adds	r1, #48	; 0x30
 801532c:	f1ae 0502 	sub.w	r5, lr, #2
 8015330:	f804 1c01 	strb.w	r1, [r4, #-1]
 8015334:	1c44      	adds	r4, r0, #1
 8015336:	4629      	mov	r1, r5
 8015338:	4561      	cmp	r1, ip
 801533a:	d30a      	bcc.n	8015352 <__exponent+0x66>
 801533c:	f10d 0209 	add.w	r2, sp, #9
 8015340:	eba2 020e 	sub.w	r2, r2, lr
 8015344:	4565      	cmp	r5, ip
 8015346:	bf88      	it	hi
 8015348:	2200      	movhi	r2, #0
 801534a:	4413      	add	r3, r2
 801534c:	1a18      	subs	r0, r3, r0
 801534e:	b003      	add	sp, #12
 8015350:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015352:	f811 2b01 	ldrb.w	r2, [r1], #1
 8015356:	f804 2f01 	strb.w	r2, [r4, #1]!
 801535a:	e7ed      	b.n	8015338 <__exponent+0x4c>
 801535c:	2330      	movs	r3, #48	; 0x30
 801535e:	3130      	adds	r1, #48	; 0x30
 8015360:	7083      	strb	r3, [r0, #2]
 8015362:	70c1      	strb	r1, [r0, #3]
 8015364:	1d03      	adds	r3, r0, #4
 8015366:	e7f1      	b.n	801534c <__exponent+0x60>

08015368 <_printf_float>:
 8015368:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801536c:	ed2d 8b02 	vpush	{d8}
 8015370:	b08d      	sub	sp, #52	; 0x34
 8015372:	460c      	mov	r4, r1
 8015374:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8015378:	4616      	mov	r6, r2
 801537a:	461f      	mov	r7, r3
 801537c:	4605      	mov	r5, r0
 801537e:	f002 ffab 	bl	80182d8 <_localeconv_r>
 8015382:	f8d0 a000 	ldr.w	sl, [r0]
 8015386:	4650      	mov	r0, sl
 8015388:	f7ea ff4c 	bl	8000224 <strlen>
 801538c:	2300      	movs	r3, #0
 801538e:	930a      	str	r3, [sp, #40]	; 0x28
 8015390:	6823      	ldr	r3, [r4, #0]
 8015392:	9305      	str	r3, [sp, #20]
 8015394:	f8d8 3000 	ldr.w	r3, [r8]
 8015398:	f894 b018 	ldrb.w	fp, [r4, #24]
 801539c:	3307      	adds	r3, #7
 801539e:	f023 0307 	bic.w	r3, r3, #7
 80153a2:	f103 0208 	add.w	r2, r3, #8
 80153a6:	f8c8 2000 	str.w	r2, [r8]
 80153aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80153ae:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80153b2:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80153b6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80153ba:	9307      	str	r3, [sp, #28]
 80153bc:	f8cd 8018 	str.w	r8, [sp, #24]
 80153c0:	ee08 0a10 	vmov	s16, r0
 80153c4:	4b9f      	ldr	r3, [pc, #636]	; (8015644 <_printf_float+0x2dc>)
 80153c6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80153ca:	f04f 32ff 	mov.w	r2, #4294967295
 80153ce:	f7eb fbdd 	bl	8000b8c <__aeabi_dcmpun>
 80153d2:	bb88      	cbnz	r0, 8015438 <_printf_float+0xd0>
 80153d4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80153d8:	4b9a      	ldr	r3, [pc, #616]	; (8015644 <_printf_float+0x2dc>)
 80153da:	f04f 32ff 	mov.w	r2, #4294967295
 80153de:	f7eb fbb7 	bl	8000b50 <__aeabi_dcmple>
 80153e2:	bb48      	cbnz	r0, 8015438 <_printf_float+0xd0>
 80153e4:	2200      	movs	r2, #0
 80153e6:	2300      	movs	r3, #0
 80153e8:	4640      	mov	r0, r8
 80153ea:	4649      	mov	r1, r9
 80153ec:	f7eb fba6 	bl	8000b3c <__aeabi_dcmplt>
 80153f0:	b110      	cbz	r0, 80153f8 <_printf_float+0x90>
 80153f2:	232d      	movs	r3, #45	; 0x2d
 80153f4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80153f8:	4b93      	ldr	r3, [pc, #588]	; (8015648 <_printf_float+0x2e0>)
 80153fa:	4894      	ldr	r0, [pc, #592]	; (801564c <_printf_float+0x2e4>)
 80153fc:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8015400:	bf94      	ite	ls
 8015402:	4698      	movls	r8, r3
 8015404:	4680      	movhi	r8, r0
 8015406:	2303      	movs	r3, #3
 8015408:	6123      	str	r3, [r4, #16]
 801540a:	9b05      	ldr	r3, [sp, #20]
 801540c:	f023 0204 	bic.w	r2, r3, #4
 8015410:	6022      	str	r2, [r4, #0]
 8015412:	f04f 0900 	mov.w	r9, #0
 8015416:	9700      	str	r7, [sp, #0]
 8015418:	4633      	mov	r3, r6
 801541a:	aa0b      	add	r2, sp, #44	; 0x2c
 801541c:	4621      	mov	r1, r4
 801541e:	4628      	mov	r0, r5
 8015420:	f000 f9d8 	bl	80157d4 <_printf_common>
 8015424:	3001      	adds	r0, #1
 8015426:	f040 8090 	bne.w	801554a <_printf_float+0x1e2>
 801542a:	f04f 30ff 	mov.w	r0, #4294967295
 801542e:	b00d      	add	sp, #52	; 0x34
 8015430:	ecbd 8b02 	vpop	{d8}
 8015434:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015438:	4642      	mov	r2, r8
 801543a:	464b      	mov	r3, r9
 801543c:	4640      	mov	r0, r8
 801543e:	4649      	mov	r1, r9
 8015440:	f7eb fba4 	bl	8000b8c <__aeabi_dcmpun>
 8015444:	b140      	cbz	r0, 8015458 <_printf_float+0xf0>
 8015446:	464b      	mov	r3, r9
 8015448:	2b00      	cmp	r3, #0
 801544a:	bfbc      	itt	lt
 801544c:	232d      	movlt	r3, #45	; 0x2d
 801544e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8015452:	487f      	ldr	r0, [pc, #508]	; (8015650 <_printf_float+0x2e8>)
 8015454:	4b7f      	ldr	r3, [pc, #508]	; (8015654 <_printf_float+0x2ec>)
 8015456:	e7d1      	b.n	80153fc <_printf_float+0x94>
 8015458:	6863      	ldr	r3, [r4, #4]
 801545a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 801545e:	9206      	str	r2, [sp, #24]
 8015460:	1c5a      	adds	r2, r3, #1
 8015462:	d13f      	bne.n	80154e4 <_printf_float+0x17c>
 8015464:	2306      	movs	r3, #6
 8015466:	6063      	str	r3, [r4, #4]
 8015468:	9b05      	ldr	r3, [sp, #20]
 801546a:	6861      	ldr	r1, [r4, #4]
 801546c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8015470:	2300      	movs	r3, #0
 8015472:	9303      	str	r3, [sp, #12]
 8015474:	ab0a      	add	r3, sp, #40	; 0x28
 8015476:	e9cd b301 	strd	fp, r3, [sp, #4]
 801547a:	ab09      	add	r3, sp, #36	; 0x24
 801547c:	ec49 8b10 	vmov	d0, r8, r9
 8015480:	9300      	str	r3, [sp, #0]
 8015482:	6022      	str	r2, [r4, #0]
 8015484:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8015488:	4628      	mov	r0, r5
 801548a:	f7ff fecd 	bl	8015228 <__cvt>
 801548e:	9b06      	ldr	r3, [sp, #24]
 8015490:	9909      	ldr	r1, [sp, #36]	; 0x24
 8015492:	2b47      	cmp	r3, #71	; 0x47
 8015494:	4680      	mov	r8, r0
 8015496:	d108      	bne.n	80154aa <_printf_float+0x142>
 8015498:	1cc8      	adds	r0, r1, #3
 801549a:	db02      	blt.n	80154a2 <_printf_float+0x13a>
 801549c:	6863      	ldr	r3, [r4, #4]
 801549e:	4299      	cmp	r1, r3
 80154a0:	dd41      	ble.n	8015526 <_printf_float+0x1be>
 80154a2:	f1ab 0b02 	sub.w	fp, fp, #2
 80154a6:	fa5f fb8b 	uxtb.w	fp, fp
 80154aa:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80154ae:	d820      	bhi.n	80154f2 <_printf_float+0x18a>
 80154b0:	3901      	subs	r1, #1
 80154b2:	465a      	mov	r2, fp
 80154b4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80154b8:	9109      	str	r1, [sp, #36]	; 0x24
 80154ba:	f7ff ff17 	bl	80152ec <__exponent>
 80154be:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80154c0:	1813      	adds	r3, r2, r0
 80154c2:	2a01      	cmp	r2, #1
 80154c4:	4681      	mov	r9, r0
 80154c6:	6123      	str	r3, [r4, #16]
 80154c8:	dc02      	bgt.n	80154d0 <_printf_float+0x168>
 80154ca:	6822      	ldr	r2, [r4, #0]
 80154cc:	07d2      	lsls	r2, r2, #31
 80154ce:	d501      	bpl.n	80154d4 <_printf_float+0x16c>
 80154d0:	3301      	adds	r3, #1
 80154d2:	6123      	str	r3, [r4, #16]
 80154d4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80154d8:	2b00      	cmp	r3, #0
 80154da:	d09c      	beq.n	8015416 <_printf_float+0xae>
 80154dc:	232d      	movs	r3, #45	; 0x2d
 80154de:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80154e2:	e798      	b.n	8015416 <_printf_float+0xae>
 80154e4:	9a06      	ldr	r2, [sp, #24]
 80154e6:	2a47      	cmp	r2, #71	; 0x47
 80154e8:	d1be      	bne.n	8015468 <_printf_float+0x100>
 80154ea:	2b00      	cmp	r3, #0
 80154ec:	d1bc      	bne.n	8015468 <_printf_float+0x100>
 80154ee:	2301      	movs	r3, #1
 80154f0:	e7b9      	b.n	8015466 <_printf_float+0xfe>
 80154f2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80154f6:	d118      	bne.n	801552a <_printf_float+0x1c2>
 80154f8:	2900      	cmp	r1, #0
 80154fa:	6863      	ldr	r3, [r4, #4]
 80154fc:	dd0b      	ble.n	8015516 <_printf_float+0x1ae>
 80154fe:	6121      	str	r1, [r4, #16]
 8015500:	b913      	cbnz	r3, 8015508 <_printf_float+0x1a0>
 8015502:	6822      	ldr	r2, [r4, #0]
 8015504:	07d0      	lsls	r0, r2, #31
 8015506:	d502      	bpl.n	801550e <_printf_float+0x1a6>
 8015508:	3301      	adds	r3, #1
 801550a:	440b      	add	r3, r1
 801550c:	6123      	str	r3, [r4, #16]
 801550e:	65a1      	str	r1, [r4, #88]	; 0x58
 8015510:	f04f 0900 	mov.w	r9, #0
 8015514:	e7de      	b.n	80154d4 <_printf_float+0x16c>
 8015516:	b913      	cbnz	r3, 801551e <_printf_float+0x1b6>
 8015518:	6822      	ldr	r2, [r4, #0]
 801551a:	07d2      	lsls	r2, r2, #31
 801551c:	d501      	bpl.n	8015522 <_printf_float+0x1ba>
 801551e:	3302      	adds	r3, #2
 8015520:	e7f4      	b.n	801550c <_printf_float+0x1a4>
 8015522:	2301      	movs	r3, #1
 8015524:	e7f2      	b.n	801550c <_printf_float+0x1a4>
 8015526:	f04f 0b67 	mov.w	fp, #103	; 0x67
 801552a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801552c:	4299      	cmp	r1, r3
 801552e:	db05      	blt.n	801553c <_printf_float+0x1d4>
 8015530:	6823      	ldr	r3, [r4, #0]
 8015532:	6121      	str	r1, [r4, #16]
 8015534:	07d8      	lsls	r0, r3, #31
 8015536:	d5ea      	bpl.n	801550e <_printf_float+0x1a6>
 8015538:	1c4b      	adds	r3, r1, #1
 801553a:	e7e7      	b.n	801550c <_printf_float+0x1a4>
 801553c:	2900      	cmp	r1, #0
 801553e:	bfd4      	ite	le
 8015540:	f1c1 0202 	rsble	r2, r1, #2
 8015544:	2201      	movgt	r2, #1
 8015546:	4413      	add	r3, r2
 8015548:	e7e0      	b.n	801550c <_printf_float+0x1a4>
 801554a:	6823      	ldr	r3, [r4, #0]
 801554c:	055a      	lsls	r2, r3, #21
 801554e:	d407      	bmi.n	8015560 <_printf_float+0x1f8>
 8015550:	6923      	ldr	r3, [r4, #16]
 8015552:	4642      	mov	r2, r8
 8015554:	4631      	mov	r1, r6
 8015556:	4628      	mov	r0, r5
 8015558:	47b8      	blx	r7
 801555a:	3001      	adds	r0, #1
 801555c:	d12c      	bne.n	80155b8 <_printf_float+0x250>
 801555e:	e764      	b.n	801542a <_printf_float+0xc2>
 8015560:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8015564:	f240 80e0 	bls.w	8015728 <_printf_float+0x3c0>
 8015568:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801556c:	2200      	movs	r2, #0
 801556e:	2300      	movs	r3, #0
 8015570:	f7eb fada 	bl	8000b28 <__aeabi_dcmpeq>
 8015574:	2800      	cmp	r0, #0
 8015576:	d034      	beq.n	80155e2 <_printf_float+0x27a>
 8015578:	4a37      	ldr	r2, [pc, #220]	; (8015658 <_printf_float+0x2f0>)
 801557a:	2301      	movs	r3, #1
 801557c:	4631      	mov	r1, r6
 801557e:	4628      	mov	r0, r5
 8015580:	47b8      	blx	r7
 8015582:	3001      	adds	r0, #1
 8015584:	f43f af51 	beq.w	801542a <_printf_float+0xc2>
 8015588:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801558c:	429a      	cmp	r2, r3
 801558e:	db02      	blt.n	8015596 <_printf_float+0x22e>
 8015590:	6823      	ldr	r3, [r4, #0]
 8015592:	07d8      	lsls	r0, r3, #31
 8015594:	d510      	bpl.n	80155b8 <_printf_float+0x250>
 8015596:	ee18 3a10 	vmov	r3, s16
 801559a:	4652      	mov	r2, sl
 801559c:	4631      	mov	r1, r6
 801559e:	4628      	mov	r0, r5
 80155a0:	47b8      	blx	r7
 80155a2:	3001      	adds	r0, #1
 80155a4:	f43f af41 	beq.w	801542a <_printf_float+0xc2>
 80155a8:	f04f 0800 	mov.w	r8, #0
 80155ac:	f104 091a 	add.w	r9, r4, #26
 80155b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80155b2:	3b01      	subs	r3, #1
 80155b4:	4543      	cmp	r3, r8
 80155b6:	dc09      	bgt.n	80155cc <_printf_float+0x264>
 80155b8:	6823      	ldr	r3, [r4, #0]
 80155ba:	079b      	lsls	r3, r3, #30
 80155bc:	f100 8105 	bmi.w	80157ca <_printf_float+0x462>
 80155c0:	68e0      	ldr	r0, [r4, #12]
 80155c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80155c4:	4298      	cmp	r0, r3
 80155c6:	bfb8      	it	lt
 80155c8:	4618      	movlt	r0, r3
 80155ca:	e730      	b.n	801542e <_printf_float+0xc6>
 80155cc:	2301      	movs	r3, #1
 80155ce:	464a      	mov	r2, r9
 80155d0:	4631      	mov	r1, r6
 80155d2:	4628      	mov	r0, r5
 80155d4:	47b8      	blx	r7
 80155d6:	3001      	adds	r0, #1
 80155d8:	f43f af27 	beq.w	801542a <_printf_float+0xc2>
 80155dc:	f108 0801 	add.w	r8, r8, #1
 80155e0:	e7e6      	b.n	80155b0 <_printf_float+0x248>
 80155e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80155e4:	2b00      	cmp	r3, #0
 80155e6:	dc39      	bgt.n	801565c <_printf_float+0x2f4>
 80155e8:	4a1b      	ldr	r2, [pc, #108]	; (8015658 <_printf_float+0x2f0>)
 80155ea:	2301      	movs	r3, #1
 80155ec:	4631      	mov	r1, r6
 80155ee:	4628      	mov	r0, r5
 80155f0:	47b8      	blx	r7
 80155f2:	3001      	adds	r0, #1
 80155f4:	f43f af19 	beq.w	801542a <_printf_float+0xc2>
 80155f8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80155fc:	4313      	orrs	r3, r2
 80155fe:	d102      	bne.n	8015606 <_printf_float+0x29e>
 8015600:	6823      	ldr	r3, [r4, #0]
 8015602:	07d9      	lsls	r1, r3, #31
 8015604:	d5d8      	bpl.n	80155b8 <_printf_float+0x250>
 8015606:	ee18 3a10 	vmov	r3, s16
 801560a:	4652      	mov	r2, sl
 801560c:	4631      	mov	r1, r6
 801560e:	4628      	mov	r0, r5
 8015610:	47b8      	blx	r7
 8015612:	3001      	adds	r0, #1
 8015614:	f43f af09 	beq.w	801542a <_printf_float+0xc2>
 8015618:	f04f 0900 	mov.w	r9, #0
 801561c:	f104 0a1a 	add.w	sl, r4, #26
 8015620:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015622:	425b      	negs	r3, r3
 8015624:	454b      	cmp	r3, r9
 8015626:	dc01      	bgt.n	801562c <_printf_float+0x2c4>
 8015628:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801562a:	e792      	b.n	8015552 <_printf_float+0x1ea>
 801562c:	2301      	movs	r3, #1
 801562e:	4652      	mov	r2, sl
 8015630:	4631      	mov	r1, r6
 8015632:	4628      	mov	r0, r5
 8015634:	47b8      	blx	r7
 8015636:	3001      	adds	r0, #1
 8015638:	f43f aef7 	beq.w	801542a <_printf_float+0xc2>
 801563c:	f109 0901 	add.w	r9, r9, #1
 8015640:	e7ee      	b.n	8015620 <_printf_float+0x2b8>
 8015642:	bf00      	nop
 8015644:	7fefffff 	.word	0x7fefffff
 8015648:	0801f590 	.word	0x0801f590
 801564c:	0801f594 	.word	0x0801f594
 8015650:	0801f59c 	.word	0x0801f59c
 8015654:	0801f598 	.word	0x0801f598
 8015658:	0801f9a1 	.word	0x0801f9a1
 801565c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801565e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8015660:	429a      	cmp	r2, r3
 8015662:	bfa8      	it	ge
 8015664:	461a      	movge	r2, r3
 8015666:	2a00      	cmp	r2, #0
 8015668:	4691      	mov	r9, r2
 801566a:	dc37      	bgt.n	80156dc <_printf_float+0x374>
 801566c:	f04f 0b00 	mov.w	fp, #0
 8015670:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8015674:	f104 021a 	add.w	r2, r4, #26
 8015678:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801567a:	9305      	str	r3, [sp, #20]
 801567c:	eba3 0309 	sub.w	r3, r3, r9
 8015680:	455b      	cmp	r3, fp
 8015682:	dc33      	bgt.n	80156ec <_printf_float+0x384>
 8015684:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8015688:	429a      	cmp	r2, r3
 801568a:	db3b      	blt.n	8015704 <_printf_float+0x39c>
 801568c:	6823      	ldr	r3, [r4, #0]
 801568e:	07da      	lsls	r2, r3, #31
 8015690:	d438      	bmi.n	8015704 <_printf_float+0x39c>
 8015692:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015694:	9b05      	ldr	r3, [sp, #20]
 8015696:	9909      	ldr	r1, [sp, #36]	; 0x24
 8015698:	1ad3      	subs	r3, r2, r3
 801569a:	eba2 0901 	sub.w	r9, r2, r1
 801569e:	4599      	cmp	r9, r3
 80156a0:	bfa8      	it	ge
 80156a2:	4699      	movge	r9, r3
 80156a4:	f1b9 0f00 	cmp.w	r9, #0
 80156a8:	dc35      	bgt.n	8015716 <_printf_float+0x3ae>
 80156aa:	f04f 0800 	mov.w	r8, #0
 80156ae:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80156b2:	f104 0a1a 	add.w	sl, r4, #26
 80156b6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80156ba:	1a9b      	subs	r3, r3, r2
 80156bc:	eba3 0309 	sub.w	r3, r3, r9
 80156c0:	4543      	cmp	r3, r8
 80156c2:	f77f af79 	ble.w	80155b8 <_printf_float+0x250>
 80156c6:	2301      	movs	r3, #1
 80156c8:	4652      	mov	r2, sl
 80156ca:	4631      	mov	r1, r6
 80156cc:	4628      	mov	r0, r5
 80156ce:	47b8      	blx	r7
 80156d0:	3001      	adds	r0, #1
 80156d2:	f43f aeaa 	beq.w	801542a <_printf_float+0xc2>
 80156d6:	f108 0801 	add.w	r8, r8, #1
 80156da:	e7ec      	b.n	80156b6 <_printf_float+0x34e>
 80156dc:	4613      	mov	r3, r2
 80156de:	4631      	mov	r1, r6
 80156e0:	4642      	mov	r2, r8
 80156e2:	4628      	mov	r0, r5
 80156e4:	47b8      	blx	r7
 80156e6:	3001      	adds	r0, #1
 80156e8:	d1c0      	bne.n	801566c <_printf_float+0x304>
 80156ea:	e69e      	b.n	801542a <_printf_float+0xc2>
 80156ec:	2301      	movs	r3, #1
 80156ee:	4631      	mov	r1, r6
 80156f0:	4628      	mov	r0, r5
 80156f2:	9205      	str	r2, [sp, #20]
 80156f4:	47b8      	blx	r7
 80156f6:	3001      	adds	r0, #1
 80156f8:	f43f ae97 	beq.w	801542a <_printf_float+0xc2>
 80156fc:	9a05      	ldr	r2, [sp, #20]
 80156fe:	f10b 0b01 	add.w	fp, fp, #1
 8015702:	e7b9      	b.n	8015678 <_printf_float+0x310>
 8015704:	ee18 3a10 	vmov	r3, s16
 8015708:	4652      	mov	r2, sl
 801570a:	4631      	mov	r1, r6
 801570c:	4628      	mov	r0, r5
 801570e:	47b8      	blx	r7
 8015710:	3001      	adds	r0, #1
 8015712:	d1be      	bne.n	8015692 <_printf_float+0x32a>
 8015714:	e689      	b.n	801542a <_printf_float+0xc2>
 8015716:	9a05      	ldr	r2, [sp, #20]
 8015718:	464b      	mov	r3, r9
 801571a:	4442      	add	r2, r8
 801571c:	4631      	mov	r1, r6
 801571e:	4628      	mov	r0, r5
 8015720:	47b8      	blx	r7
 8015722:	3001      	adds	r0, #1
 8015724:	d1c1      	bne.n	80156aa <_printf_float+0x342>
 8015726:	e680      	b.n	801542a <_printf_float+0xc2>
 8015728:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801572a:	2a01      	cmp	r2, #1
 801572c:	dc01      	bgt.n	8015732 <_printf_float+0x3ca>
 801572e:	07db      	lsls	r3, r3, #31
 8015730:	d538      	bpl.n	80157a4 <_printf_float+0x43c>
 8015732:	2301      	movs	r3, #1
 8015734:	4642      	mov	r2, r8
 8015736:	4631      	mov	r1, r6
 8015738:	4628      	mov	r0, r5
 801573a:	47b8      	blx	r7
 801573c:	3001      	adds	r0, #1
 801573e:	f43f ae74 	beq.w	801542a <_printf_float+0xc2>
 8015742:	ee18 3a10 	vmov	r3, s16
 8015746:	4652      	mov	r2, sl
 8015748:	4631      	mov	r1, r6
 801574a:	4628      	mov	r0, r5
 801574c:	47b8      	blx	r7
 801574e:	3001      	adds	r0, #1
 8015750:	f43f ae6b 	beq.w	801542a <_printf_float+0xc2>
 8015754:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8015758:	2200      	movs	r2, #0
 801575a:	2300      	movs	r3, #0
 801575c:	f7eb f9e4 	bl	8000b28 <__aeabi_dcmpeq>
 8015760:	b9d8      	cbnz	r0, 801579a <_printf_float+0x432>
 8015762:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015764:	f108 0201 	add.w	r2, r8, #1
 8015768:	3b01      	subs	r3, #1
 801576a:	4631      	mov	r1, r6
 801576c:	4628      	mov	r0, r5
 801576e:	47b8      	blx	r7
 8015770:	3001      	adds	r0, #1
 8015772:	d10e      	bne.n	8015792 <_printf_float+0x42a>
 8015774:	e659      	b.n	801542a <_printf_float+0xc2>
 8015776:	2301      	movs	r3, #1
 8015778:	4652      	mov	r2, sl
 801577a:	4631      	mov	r1, r6
 801577c:	4628      	mov	r0, r5
 801577e:	47b8      	blx	r7
 8015780:	3001      	adds	r0, #1
 8015782:	f43f ae52 	beq.w	801542a <_printf_float+0xc2>
 8015786:	f108 0801 	add.w	r8, r8, #1
 801578a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801578c:	3b01      	subs	r3, #1
 801578e:	4543      	cmp	r3, r8
 8015790:	dcf1      	bgt.n	8015776 <_printf_float+0x40e>
 8015792:	464b      	mov	r3, r9
 8015794:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8015798:	e6dc      	b.n	8015554 <_printf_float+0x1ec>
 801579a:	f04f 0800 	mov.w	r8, #0
 801579e:	f104 0a1a 	add.w	sl, r4, #26
 80157a2:	e7f2      	b.n	801578a <_printf_float+0x422>
 80157a4:	2301      	movs	r3, #1
 80157a6:	4642      	mov	r2, r8
 80157a8:	e7df      	b.n	801576a <_printf_float+0x402>
 80157aa:	2301      	movs	r3, #1
 80157ac:	464a      	mov	r2, r9
 80157ae:	4631      	mov	r1, r6
 80157b0:	4628      	mov	r0, r5
 80157b2:	47b8      	blx	r7
 80157b4:	3001      	adds	r0, #1
 80157b6:	f43f ae38 	beq.w	801542a <_printf_float+0xc2>
 80157ba:	f108 0801 	add.w	r8, r8, #1
 80157be:	68e3      	ldr	r3, [r4, #12]
 80157c0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80157c2:	1a5b      	subs	r3, r3, r1
 80157c4:	4543      	cmp	r3, r8
 80157c6:	dcf0      	bgt.n	80157aa <_printf_float+0x442>
 80157c8:	e6fa      	b.n	80155c0 <_printf_float+0x258>
 80157ca:	f04f 0800 	mov.w	r8, #0
 80157ce:	f104 0919 	add.w	r9, r4, #25
 80157d2:	e7f4      	b.n	80157be <_printf_float+0x456>

080157d4 <_printf_common>:
 80157d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80157d8:	4616      	mov	r6, r2
 80157da:	4699      	mov	r9, r3
 80157dc:	688a      	ldr	r2, [r1, #8]
 80157de:	690b      	ldr	r3, [r1, #16]
 80157e0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80157e4:	4293      	cmp	r3, r2
 80157e6:	bfb8      	it	lt
 80157e8:	4613      	movlt	r3, r2
 80157ea:	6033      	str	r3, [r6, #0]
 80157ec:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80157f0:	4607      	mov	r7, r0
 80157f2:	460c      	mov	r4, r1
 80157f4:	b10a      	cbz	r2, 80157fa <_printf_common+0x26>
 80157f6:	3301      	adds	r3, #1
 80157f8:	6033      	str	r3, [r6, #0]
 80157fa:	6823      	ldr	r3, [r4, #0]
 80157fc:	0699      	lsls	r1, r3, #26
 80157fe:	bf42      	ittt	mi
 8015800:	6833      	ldrmi	r3, [r6, #0]
 8015802:	3302      	addmi	r3, #2
 8015804:	6033      	strmi	r3, [r6, #0]
 8015806:	6825      	ldr	r5, [r4, #0]
 8015808:	f015 0506 	ands.w	r5, r5, #6
 801580c:	d106      	bne.n	801581c <_printf_common+0x48>
 801580e:	f104 0a19 	add.w	sl, r4, #25
 8015812:	68e3      	ldr	r3, [r4, #12]
 8015814:	6832      	ldr	r2, [r6, #0]
 8015816:	1a9b      	subs	r3, r3, r2
 8015818:	42ab      	cmp	r3, r5
 801581a:	dc26      	bgt.n	801586a <_printf_common+0x96>
 801581c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8015820:	1e13      	subs	r3, r2, #0
 8015822:	6822      	ldr	r2, [r4, #0]
 8015824:	bf18      	it	ne
 8015826:	2301      	movne	r3, #1
 8015828:	0692      	lsls	r2, r2, #26
 801582a:	d42b      	bmi.n	8015884 <_printf_common+0xb0>
 801582c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8015830:	4649      	mov	r1, r9
 8015832:	4638      	mov	r0, r7
 8015834:	47c0      	blx	r8
 8015836:	3001      	adds	r0, #1
 8015838:	d01e      	beq.n	8015878 <_printf_common+0xa4>
 801583a:	6823      	ldr	r3, [r4, #0]
 801583c:	68e5      	ldr	r5, [r4, #12]
 801583e:	6832      	ldr	r2, [r6, #0]
 8015840:	f003 0306 	and.w	r3, r3, #6
 8015844:	2b04      	cmp	r3, #4
 8015846:	bf08      	it	eq
 8015848:	1aad      	subeq	r5, r5, r2
 801584a:	68a3      	ldr	r3, [r4, #8]
 801584c:	6922      	ldr	r2, [r4, #16]
 801584e:	bf0c      	ite	eq
 8015850:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8015854:	2500      	movne	r5, #0
 8015856:	4293      	cmp	r3, r2
 8015858:	bfc4      	itt	gt
 801585a:	1a9b      	subgt	r3, r3, r2
 801585c:	18ed      	addgt	r5, r5, r3
 801585e:	2600      	movs	r6, #0
 8015860:	341a      	adds	r4, #26
 8015862:	42b5      	cmp	r5, r6
 8015864:	d11a      	bne.n	801589c <_printf_common+0xc8>
 8015866:	2000      	movs	r0, #0
 8015868:	e008      	b.n	801587c <_printf_common+0xa8>
 801586a:	2301      	movs	r3, #1
 801586c:	4652      	mov	r2, sl
 801586e:	4649      	mov	r1, r9
 8015870:	4638      	mov	r0, r7
 8015872:	47c0      	blx	r8
 8015874:	3001      	adds	r0, #1
 8015876:	d103      	bne.n	8015880 <_printf_common+0xac>
 8015878:	f04f 30ff 	mov.w	r0, #4294967295
 801587c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015880:	3501      	adds	r5, #1
 8015882:	e7c6      	b.n	8015812 <_printf_common+0x3e>
 8015884:	18e1      	adds	r1, r4, r3
 8015886:	1c5a      	adds	r2, r3, #1
 8015888:	2030      	movs	r0, #48	; 0x30
 801588a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801588e:	4422      	add	r2, r4
 8015890:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8015894:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8015898:	3302      	adds	r3, #2
 801589a:	e7c7      	b.n	801582c <_printf_common+0x58>
 801589c:	2301      	movs	r3, #1
 801589e:	4622      	mov	r2, r4
 80158a0:	4649      	mov	r1, r9
 80158a2:	4638      	mov	r0, r7
 80158a4:	47c0      	blx	r8
 80158a6:	3001      	adds	r0, #1
 80158a8:	d0e6      	beq.n	8015878 <_printf_common+0xa4>
 80158aa:	3601      	adds	r6, #1
 80158ac:	e7d9      	b.n	8015862 <_printf_common+0x8e>
	...

080158b0 <_printf_i>:
 80158b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80158b4:	460c      	mov	r4, r1
 80158b6:	4691      	mov	r9, r2
 80158b8:	7e27      	ldrb	r7, [r4, #24]
 80158ba:	990c      	ldr	r1, [sp, #48]	; 0x30
 80158bc:	2f78      	cmp	r7, #120	; 0x78
 80158be:	4680      	mov	r8, r0
 80158c0:	469a      	mov	sl, r3
 80158c2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80158c6:	d807      	bhi.n	80158d8 <_printf_i+0x28>
 80158c8:	2f62      	cmp	r7, #98	; 0x62
 80158ca:	d80a      	bhi.n	80158e2 <_printf_i+0x32>
 80158cc:	2f00      	cmp	r7, #0
 80158ce:	f000 80d8 	beq.w	8015a82 <_printf_i+0x1d2>
 80158d2:	2f58      	cmp	r7, #88	; 0x58
 80158d4:	f000 80a3 	beq.w	8015a1e <_printf_i+0x16e>
 80158d8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80158dc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80158e0:	e03a      	b.n	8015958 <_printf_i+0xa8>
 80158e2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80158e6:	2b15      	cmp	r3, #21
 80158e8:	d8f6      	bhi.n	80158d8 <_printf_i+0x28>
 80158ea:	a001      	add	r0, pc, #4	; (adr r0, 80158f0 <_printf_i+0x40>)
 80158ec:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80158f0:	08015949 	.word	0x08015949
 80158f4:	0801595d 	.word	0x0801595d
 80158f8:	080158d9 	.word	0x080158d9
 80158fc:	080158d9 	.word	0x080158d9
 8015900:	080158d9 	.word	0x080158d9
 8015904:	080158d9 	.word	0x080158d9
 8015908:	0801595d 	.word	0x0801595d
 801590c:	080158d9 	.word	0x080158d9
 8015910:	080158d9 	.word	0x080158d9
 8015914:	080158d9 	.word	0x080158d9
 8015918:	080158d9 	.word	0x080158d9
 801591c:	08015a69 	.word	0x08015a69
 8015920:	0801598d 	.word	0x0801598d
 8015924:	08015a4b 	.word	0x08015a4b
 8015928:	080158d9 	.word	0x080158d9
 801592c:	080158d9 	.word	0x080158d9
 8015930:	08015a8b 	.word	0x08015a8b
 8015934:	080158d9 	.word	0x080158d9
 8015938:	0801598d 	.word	0x0801598d
 801593c:	080158d9 	.word	0x080158d9
 8015940:	080158d9 	.word	0x080158d9
 8015944:	08015a53 	.word	0x08015a53
 8015948:	680b      	ldr	r3, [r1, #0]
 801594a:	1d1a      	adds	r2, r3, #4
 801594c:	681b      	ldr	r3, [r3, #0]
 801594e:	600a      	str	r2, [r1, #0]
 8015950:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8015954:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8015958:	2301      	movs	r3, #1
 801595a:	e0a3      	b.n	8015aa4 <_printf_i+0x1f4>
 801595c:	6825      	ldr	r5, [r4, #0]
 801595e:	6808      	ldr	r0, [r1, #0]
 8015960:	062e      	lsls	r6, r5, #24
 8015962:	f100 0304 	add.w	r3, r0, #4
 8015966:	d50a      	bpl.n	801597e <_printf_i+0xce>
 8015968:	6805      	ldr	r5, [r0, #0]
 801596a:	600b      	str	r3, [r1, #0]
 801596c:	2d00      	cmp	r5, #0
 801596e:	da03      	bge.n	8015978 <_printf_i+0xc8>
 8015970:	232d      	movs	r3, #45	; 0x2d
 8015972:	426d      	negs	r5, r5
 8015974:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8015978:	485e      	ldr	r0, [pc, #376]	; (8015af4 <_printf_i+0x244>)
 801597a:	230a      	movs	r3, #10
 801597c:	e019      	b.n	80159b2 <_printf_i+0x102>
 801597e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8015982:	6805      	ldr	r5, [r0, #0]
 8015984:	600b      	str	r3, [r1, #0]
 8015986:	bf18      	it	ne
 8015988:	b22d      	sxthne	r5, r5
 801598a:	e7ef      	b.n	801596c <_printf_i+0xbc>
 801598c:	680b      	ldr	r3, [r1, #0]
 801598e:	6825      	ldr	r5, [r4, #0]
 8015990:	1d18      	adds	r0, r3, #4
 8015992:	6008      	str	r0, [r1, #0]
 8015994:	0628      	lsls	r0, r5, #24
 8015996:	d501      	bpl.n	801599c <_printf_i+0xec>
 8015998:	681d      	ldr	r5, [r3, #0]
 801599a:	e002      	b.n	80159a2 <_printf_i+0xf2>
 801599c:	0669      	lsls	r1, r5, #25
 801599e:	d5fb      	bpl.n	8015998 <_printf_i+0xe8>
 80159a0:	881d      	ldrh	r5, [r3, #0]
 80159a2:	4854      	ldr	r0, [pc, #336]	; (8015af4 <_printf_i+0x244>)
 80159a4:	2f6f      	cmp	r7, #111	; 0x6f
 80159a6:	bf0c      	ite	eq
 80159a8:	2308      	moveq	r3, #8
 80159aa:	230a      	movne	r3, #10
 80159ac:	2100      	movs	r1, #0
 80159ae:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80159b2:	6866      	ldr	r6, [r4, #4]
 80159b4:	60a6      	str	r6, [r4, #8]
 80159b6:	2e00      	cmp	r6, #0
 80159b8:	bfa2      	ittt	ge
 80159ba:	6821      	ldrge	r1, [r4, #0]
 80159bc:	f021 0104 	bicge.w	r1, r1, #4
 80159c0:	6021      	strge	r1, [r4, #0]
 80159c2:	b90d      	cbnz	r5, 80159c8 <_printf_i+0x118>
 80159c4:	2e00      	cmp	r6, #0
 80159c6:	d04d      	beq.n	8015a64 <_printf_i+0x1b4>
 80159c8:	4616      	mov	r6, r2
 80159ca:	fbb5 f1f3 	udiv	r1, r5, r3
 80159ce:	fb03 5711 	mls	r7, r3, r1, r5
 80159d2:	5dc7      	ldrb	r7, [r0, r7]
 80159d4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80159d8:	462f      	mov	r7, r5
 80159da:	42bb      	cmp	r3, r7
 80159dc:	460d      	mov	r5, r1
 80159de:	d9f4      	bls.n	80159ca <_printf_i+0x11a>
 80159e0:	2b08      	cmp	r3, #8
 80159e2:	d10b      	bne.n	80159fc <_printf_i+0x14c>
 80159e4:	6823      	ldr	r3, [r4, #0]
 80159e6:	07df      	lsls	r7, r3, #31
 80159e8:	d508      	bpl.n	80159fc <_printf_i+0x14c>
 80159ea:	6923      	ldr	r3, [r4, #16]
 80159ec:	6861      	ldr	r1, [r4, #4]
 80159ee:	4299      	cmp	r1, r3
 80159f0:	bfde      	ittt	le
 80159f2:	2330      	movle	r3, #48	; 0x30
 80159f4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80159f8:	f106 36ff 	addle.w	r6, r6, #4294967295
 80159fc:	1b92      	subs	r2, r2, r6
 80159fe:	6122      	str	r2, [r4, #16]
 8015a00:	f8cd a000 	str.w	sl, [sp]
 8015a04:	464b      	mov	r3, r9
 8015a06:	aa03      	add	r2, sp, #12
 8015a08:	4621      	mov	r1, r4
 8015a0a:	4640      	mov	r0, r8
 8015a0c:	f7ff fee2 	bl	80157d4 <_printf_common>
 8015a10:	3001      	adds	r0, #1
 8015a12:	d14c      	bne.n	8015aae <_printf_i+0x1fe>
 8015a14:	f04f 30ff 	mov.w	r0, #4294967295
 8015a18:	b004      	add	sp, #16
 8015a1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015a1e:	4835      	ldr	r0, [pc, #212]	; (8015af4 <_printf_i+0x244>)
 8015a20:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8015a24:	6823      	ldr	r3, [r4, #0]
 8015a26:	680e      	ldr	r6, [r1, #0]
 8015a28:	061f      	lsls	r7, r3, #24
 8015a2a:	f856 5b04 	ldr.w	r5, [r6], #4
 8015a2e:	600e      	str	r6, [r1, #0]
 8015a30:	d514      	bpl.n	8015a5c <_printf_i+0x1ac>
 8015a32:	07d9      	lsls	r1, r3, #31
 8015a34:	bf44      	itt	mi
 8015a36:	f043 0320 	orrmi.w	r3, r3, #32
 8015a3a:	6023      	strmi	r3, [r4, #0]
 8015a3c:	b91d      	cbnz	r5, 8015a46 <_printf_i+0x196>
 8015a3e:	6823      	ldr	r3, [r4, #0]
 8015a40:	f023 0320 	bic.w	r3, r3, #32
 8015a44:	6023      	str	r3, [r4, #0]
 8015a46:	2310      	movs	r3, #16
 8015a48:	e7b0      	b.n	80159ac <_printf_i+0xfc>
 8015a4a:	6823      	ldr	r3, [r4, #0]
 8015a4c:	f043 0320 	orr.w	r3, r3, #32
 8015a50:	6023      	str	r3, [r4, #0]
 8015a52:	2378      	movs	r3, #120	; 0x78
 8015a54:	4828      	ldr	r0, [pc, #160]	; (8015af8 <_printf_i+0x248>)
 8015a56:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8015a5a:	e7e3      	b.n	8015a24 <_printf_i+0x174>
 8015a5c:	065e      	lsls	r6, r3, #25
 8015a5e:	bf48      	it	mi
 8015a60:	b2ad      	uxthmi	r5, r5
 8015a62:	e7e6      	b.n	8015a32 <_printf_i+0x182>
 8015a64:	4616      	mov	r6, r2
 8015a66:	e7bb      	b.n	80159e0 <_printf_i+0x130>
 8015a68:	680b      	ldr	r3, [r1, #0]
 8015a6a:	6826      	ldr	r6, [r4, #0]
 8015a6c:	6960      	ldr	r0, [r4, #20]
 8015a6e:	1d1d      	adds	r5, r3, #4
 8015a70:	600d      	str	r5, [r1, #0]
 8015a72:	0635      	lsls	r5, r6, #24
 8015a74:	681b      	ldr	r3, [r3, #0]
 8015a76:	d501      	bpl.n	8015a7c <_printf_i+0x1cc>
 8015a78:	6018      	str	r0, [r3, #0]
 8015a7a:	e002      	b.n	8015a82 <_printf_i+0x1d2>
 8015a7c:	0671      	lsls	r1, r6, #25
 8015a7e:	d5fb      	bpl.n	8015a78 <_printf_i+0x1c8>
 8015a80:	8018      	strh	r0, [r3, #0]
 8015a82:	2300      	movs	r3, #0
 8015a84:	6123      	str	r3, [r4, #16]
 8015a86:	4616      	mov	r6, r2
 8015a88:	e7ba      	b.n	8015a00 <_printf_i+0x150>
 8015a8a:	680b      	ldr	r3, [r1, #0]
 8015a8c:	1d1a      	adds	r2, r3, #4
 8015a8e:	600a      	str	r2, [r1, #0]
 8015a90:	681e      	ldr	r6, [r3, #0]
 8015a92:	6862      	ldr	r2, [r4, #4]
 8015a94:	2100      	movs	r1, #0
 8015a96:	4630      	mov	r0, r6
 8015a98:	f7ea fbd2 	bl	8000240 <memchr>
 8015a9c:	b108      	cbz	r0, 8015aa2 <_printf_i+0x1f2>
 8015a9e:	1b80      	subs	r0, r0, r6
 8015aa0:	6060      	str	r0, [r4, #4]
 8015aa2:	6863      	ldr	r3, [r4, #4]
 8015aa4:	6123      	str	r3, [r4, #16]
 8015aa6:	2300      	movs	r3, #0
 8015aa8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8015aac:	e7a8      	b.n	8015a00 <_printf_i+0x150>
 8015aae:	6923      	ldr	r3, [r4, #16]
 8015ab0:	4632      	mov	r2, r6
 8015ab2:	4649      	mov	r1, r9
 8015ab4:	4640      	mov	r0, r8
 8015ab6:	47d0      	blx	sl
 8015ab8:	3001      	adds	r0, #1
 8015aba:	d0ab      	beq.n	8015a14 <_printf_i+0x164>
 8015abc:	6823      	ldr	r3, [r4, #0]
 8015abe:	079b      	lsls	r3, r3, #30
 8015ac0:	d413      	bmi.n	8015aea <_printf_i+0x23a>
 8015ac2:	68e0      	ldr	r0, [r4, #12]
 8015ac4:	9b03      	ldr	r3, [sp, #12]
 8015ac6:	4298      	cmp	r0, r3
 8015ac8:	bfb8      	it	lt
 8015aca:	4618      	movlt	r0, r3
 8015acc:	e7a4      	b.n	8015a18 <_printf_i+0x168>
 8015ace:	2301      	movs	r3, #1
 8015ad0:	4632      	mov	r2, r6
 8015ad2:	4649      	mov	r1, r9
 8015ad4:	4640      	mov	r0, r8
 8015ad6:	47d0      	blx	sl
 8015ad8:	3001      	adds	r0, #1
 8015ada:	d09b      	beq.n	8015a14 <_printf_i+0x164>
 8015adc:	3501      	adds	r5, #1
 8015ade:	68e3      	ldr	r3, [r4, #12]
 8015ae0:	9903      	ldr	r1, [sp, #12]
 8015ae2:	1a5b      	subs	r3, r3, r1
 8015ae4:	42ab      	cmp	r3, r5
 8015ae6:	dcf2      	bgt.n	8015ace <_printf_i+0x21e>
 8015ae8:	e7eb      	b.n	8015ac2 <_printf_i+0x212>
 8015aea:	2500      	movs	r5, #0
 8015aec:	f104 0619 	add.w	r6, r4, #25
 8015af0:	e7f5      	b.n	8015ade <_printf_i+0x22e>
 8015af2:	bf00      	nop
 8015af4:	0801f5a0 	.word	0x0801f5a0
 8015af8:	0801f5b1 	.word	0x0801f5b1

08015afc <_scanf_float>:
 8015afc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015b00:	b087      	sub	sp, #28
 8015b02:	4617      	mov	r7, r2
 8015b04:	9303      	str	r3, [sp, #12]
 8015b06:	688b      	ldr	r3, [r1, #8]
 8015b08:	1e5a      	subs	r2, r3, #1
 8015b0a:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8015b0e:	bf83      	ittte	hi
 8015b10:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8015b14:	195b      	addhi	r3, r3, r5
 8015b16:	9302      	strhi	r3, [sp, #8]
 8015b18:	2300      	movls	r3, #0
 8015b1a:	bf86      	itte	hi
 8015b1c:	f240 135d 	movwhi	r3, #349	; 0x15d
 8015b20:	608b      	strhi	r3, [r1, #8]
 8015b22:	9302      	strls	r3, [sp, #8]
 8015b24:	680b      	ldr	r3, [r1, #0]
 8015b26:	468b      	mov	fp, r1
 8015b28:	2500      	movs	r5, #0
 8015b2a:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8015b2e:	f84b 3b1c 	str.w	r3, [fp], #28
 8015b32:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8015b36:	4680      	mov	r8, r0
 8015b38:	460c      	mov	r4, r1
 8015b3a:	465e      	mov	r6, fp
 8015b3c:	46aa      	mov	sl, r5
 8015b3e:	46a9      	mov	r9, r5
 8015b40:	9501      	str	r5, [sp, #4]
 8015b42:	68a2      	ldr	r2, [r4, #8]
 8015b44:	b152      	cbz	r2, 8015b5c <_scanf_float+0x60>
 8015b46:	683b      	ldr	r3, [r7, #0]
 8015b48:	781b      	ldrb	r3, [r3, #0]
 8015b4a:	2b4e      	cmp	r3, #78	; 0x4e
 8015b4c:	d864      	bhi.n	8015c18 <_scanf_float+0x11c>
 8015b4e:	2b40      	cmp	r3, #64	; 0x40
 8015b50:	d83c      	bhi.n	8015bcc <_scanf_float+0xd0>
 8015b52:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8015b56:	b2c8      	uxtb	r0, r1
 8015b58:	280e      	cmp	r0, #14
 8015b5a:	d93a      	bls.n	8015bd2 <_scanf_float+0xd6>
 8015b5c:	f1b9 0f00 	cmp.w	r9, #0
 8015b60:	d003      	beq.n	8015b6a <_scanf_float+0x6e>
 8015b62:	6823      	ldr	r3, [r4, #0]
 8015b64:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8015b68:	6023      	str	r3, [r4, #0]
 8015b6a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8015b6e:	f1ba 0f01 	cmp.w	sl, #1
 8015b72:	f200 8113 	bhi.w	8015d9c <_scanf_float+0x2a0>
 8015b76:	455e      	cmp	r6, fp
 8015b78:	f200 8105 	bhi.w	8015d86 <_scanf_float+0x28a>
 8015b7c:	2501      	movs	r5, #1
 8015b7e:	4628      	mov	r0, r5
 8015b80:	b007      	add	sp, #28
 8015b82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015b86:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8015b8a:	2a0d      	cmp	r2, #13
 8015b8c:	d8e6      	bhi.n	8015b5c <_scanf_float+0x60>
 8015b8e:	a101      	add	r1, pc, #4	; (adr r1, 8015b94 <_scanf_float+0x98>)
 8015b90:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8015b94:	08015cd3 	.word	0x08015cd3
 8015b98:	08015b5d 	.word	0x08015b5d
 8015b9c:	08015b5d 	.word	0x08015b5d
 8015ba0:	08015b5d 	.word	0x08015b5d
 8015ba4:	08015d33 	.word	0x08015d33
 8015ba8:	08015d0b 	.word	0x08015d0b
 8015bac:	08015b5d 	.word	0x08015b5d
 8015bb0:	08015b5d 	.word	0x08015b5d
 8015bb4:	08015ce1 	.word	0x08015ce1
 8015bb8:	08015b5d 	.word	0x08015b5d
 8015bbc:	08015b5d 	.word	0x08015b5d
 8015bc0:	08015b5d 	.word	0x08015b5d
 8015bc4:	08015b5d 	.word	0x08015b5d
 8015bc8:	08015c99 	.word	0x08015c99
 8015bcc:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8015bd0:	e7db      	b.n	8015b8a <_scanf_float+0x8e>
 8015bd2:	290e      	cmp	r1, #14
 8015bd4:	d8c2      	bhi.n	8015b5c <_scanf_float+0x60>
 8015bd6:	a001      	add	r0, pc, #4	; (adr r0, 8015bdc <_scanf_float+0xe0>)
 8015bd8:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8015bdc:	08015c8b 	.word	0x08015c8b
 8015be0:	08015b5d 	.word	0x08015b5d
 8015be4:	08015c8b 	.word	0x08015c8b
 8015be8:	08015d1f 	.word	0x08015d1f
 8015bec:	08015b5d 	.word	0x08015b5d
 8015bf0:	08015c39 	.word	0x08015c39
 8015bf4:	08015c75 	.word	0x08015c75
 8015bf8:	08015c75 	.word	0x08015c75
 8015bfc:	08015c75 	.word	0x08015c75
 8015c00:	08015c75 	.word	0x08015c75
 8015c04:	08015c75 	.word	0x08015c75
 8015c08:	08015c75 	.word	0x08015c75
 8015c0c:	08015c75 	.word	0x08015c75
 8015c10:	08015c75 	.word	0x08015c75
 8015c14:	08015c75 	.word	0x08015c75
 8015c18:	2b6e      	cmp	r3, #110	; 0x6e
 8015c1a:	d809      	bhi.n	8015c30 <_scanf_float+0x134>
 8015c1c:	2b60      	cmp	r3, #96	; 0x60
 8015c1e:	d8b2      	bhi.n	8015b86 <_scanf_float+0x8a>
 8015c20:	2b54      	cmp	r3, #84	; 0x54
 8015c22:	d077      	beq.n	8015d14 <_scanf_float+0x218>
 8015c24:	2b59      	cmp	r3, #89	; 0x59
 8015c26:	d199      	bne.n	8015b5c <_scanf_float+0x60>
 8015c28:	2d07      	cmp	r5, #7
 8015c2a:	d197      	bne.n	8015b5c <_scanf_float+0x60>
 8015c2c:	2508      	movs	r5, #8
 8015c2e:	e029      	b.n	8015c84 <_scanf_float+0x188>
 8015c30:	2b74      	cmp	r3, #116	; 0x74
 8015c32:	d06f      	beq.n	8015d14 <_scanf_float+0x218>
 8015c34:	2b79      	cmp	r3, #121	; 0x79
 8015c36:	e7f6      	b.n	8015c26 <_scanf_float+0x12a>
 8015c38:	6821      	ldr	r1, [r4, #0]
 8015c3a:	05c8      	lsls	r0, r1, #23
 8015c3c:	d51a      	bpl.n	8015c74 <_scanf_float+0x178>
 8015c3e:	9b02      	ldr	r3, [sp, #8]
 8015c40:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8015c44:	6021      	str	r1, [r4, #0]
 8015c46:	f109 0901 	add.w	r9, r9, #1
 8015c4a:	b11b      	cbz	r3, 8015c54 <_scanf_float+0x158>
 8015c4c:	3b01      	subs	r3, #1
 8015c4e:	3201      	adds	r2, #1
 8015c50:	9302      	str	r3, [sp, #8]
 8015c52:	60a2      	str	r2, [r4, #8]
 8015c54:	68a3      	ldr	r3, [r4, #8]
 8015c56:	3b01      	subs	r3, #1
 8015c58:	60a3      	str	r3, [r4, #8]
 8015c5a:	6923      	ldr	r3, [r4, #16]
 8015c5c:	3301      	adds	r3, #1
 8015c5e:	6123      	str	r3, [r4, #16]
 8015c60:	687b      	ldr	r3, [r7, #4]
 8015c62:	3b01      	subs	r3, #1
 8015c64:	2b00      	cmp	r3, #0
 8015c66:	607b      	str	r3, [r7, #4]
 8015c68:	f340 8084 	ble.w	8015d74 <_scanf_float+0x278>
 8015c6c:	683b      	ldr	r3, [r7, #0]
 8015c6e:	3301      	adds	r3, #1
 8015c70:	603b      	str	r3, [r7, #0]
 8015c72:	e766      	b.n	8015b42 <_scanf_float+0x46>
 8015c74:	eb1a 0f05 	cmn.w	sl, r5
 8015c78:	f47f af70 	bne.w	8015b5c <_scanf_float+0x60>
 8015c7c:	6822      	ldr	r2, [r4, #0]
 8015c7e:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8015c82:	6022      	str	r2, [r4, #0]
 8015c84:	f806 3b01 	strb.w	r3, [r6], #1
 8015c88:	e7e4      	b.n	8015c54 <_scanf_float+0x158>
 8015c8a:	6822      	ldr	r2, [r4, #0]
 8015c8c:	0610      	lsls	r0, r2, #24
 8015c8e:	f57f af65 	bpl.w	8015b5c <_scanf_float+0x60>
 8015c92:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8015c96:	e7f4      	b.n	8015c82 <_scanf_float+0x186>
 8015c98:	f1ba 0f00 	cmp.w	sl, #0
 8015c9c:	d10e      	bne.n	8015cbc <_scanf_float+0x1c0>
 8015c9e:	f1b9 0f00 	cmp.w	r9, #0
 8015ca2:	d10e      	bne.n	8015cc2 <_scanf_float+0x1c6>
 8015ca4:	6822      	ldr	r2, [r4, #0]
 8015ca6:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8015caa:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8015cae:	d108      	bne.n	8015cc2 <_scanf_float+0x1c6>
 8015cb0:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8015cb4:	6022      	str	r2, [r4, #0]
 8015cb6:	f04f 0a01 	mov.w	sl, #1
 8015cba:	e7e3      	b.n	8015c84 <_scanf_float+0x188>
 8015cbc:	f1ba 0f02 	cmp.w	sl, #2
 8015cc0:	d055      	beq.n	8015d6e <_scanf_float+0x272>
 8015cc2:	2d01      	cmp	r5, #1
 8015cc4:	d002      	beq.n	8015ccc <_scanf_float+0x1d0>
 8015cc6:	2d04      	cmp	r5, #4
 8015cc8:	f47f af48 	bne.w	8015b5c <_scanf_float+0x60>
 8015ccc:	3501      	adds	r5, #1
 8015cce:	b2ed      	uxtb	r5, r5
 8015cd0:	e7d8      	b.n	8015c84 <_scanf_float+0x188>
 8015cd2:	f1ba 0f01 	cmp.w	sl, #1
 8015cd6:	f47f af41 	bne.w	8015b5c <_scanf_float+0x60>
 8015cda:	f04f 0a02 	mov.w	sl, #2
 8015cde:	e7d1      	b.n	8015c84 <_scanf_float+0x188>
 8015ce0:	b97d      	cbnz	r5, 8015d02 <_scanf_float+0x206>
 8015ce2:	f1b9 0f00 	cmp.w	r9, #0
 8015ce6:	f47f af3c 	bne.w	8015b62 <_scanf_float+0x66>
 8015cea:	6822      	ldr	r2, [r4, #0]
 8015cec:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8015cf0:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8015cf4:	f47f af39 	bne.w	8015b6a <_scanf_float+0x6e>
 8015cf8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8015cfc:	6022      	str	r2, [r4, #0]
 8015cfe:	2501      	movs	r5, #1
 8015d00:	e7c0      	b.n	8015c84 <_scanf_float+0x188>
 8015d02:	2d03      	cmp	r5, #3
 8015d04:	d0e2      	beq.n	8015ccc <_scanf_float+0x1d0>
 8015d06:	2d05      	cmp	r5, #5
 8015d08:	e7de      	b.n	8015cc8 <_scanf_float+0x1cc>
 8015d0a:	2d02      	cmp	r5, #2
 8015d0c:	f47f af26 	bne.w	8015b5c <_scanf_float+0x60>
 8015d10:	2503      	movs	r5, #3
 8015d12:	e7b7      	b.n	8015c84 <_scanf_float+0x188>
 8015d14:	2d06      	cmp	r5, #6
 8015d16:	f47f af21 	bne.w	8015b5c <_scanf_float+0x60>
 8015d1a:	2507      	movs	r5, #7
 8015d1c:	e7b2      	b.n	8015c84 <_scanf_float+0x188>
 8015d1e:	6822      	ldr	r2, [r4, #0]
 8015d20:	0591      	lsls	r1, r2, #22
 8015d22:	f57f af1b 	bpl.w	8015b5c <_scanf_float+0x60>
 8015d26:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8015d2a:	6022      	str	r2, [r4, #0]
 8015d2c:	f8cd 9004 	str.w	r9, [sp, #4]
 8015d30:	e7a8      	b.n	8015c84 <_scanf_float+0x188>
 8015d32:	6822      	ldr	r2, [r4, #0]
 8015d34:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8015d38:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8015d3c:	d006      	beq.n	8015d4c <_scanf_float+0x250>
 8015d3e:	0550      	lsls	r0, r2, #21
 8015d40:	f57f af0c 	bpl.w	8015b5c <_scanf_float+0x60>
 8015d44:	f1b9 0f00 	cmp.w	r9, #0
 8015d48:	f43f af0f 	beq.w	8015b6a <_scanf_float+0x6e>
 8015d4c:	0591      	lsls	r1, r2, #22
 8015d4e:	bf58      	it	pl
 8015d50:	9901      	ldrpl	r1, [sp, #4]
 8015d52:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8015d56:	bf58      	it	pl
 8015d58:	eba9 0101 	subpl.w	r1, r9, r1
 8015d5c:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8015d60:	bf58      	it	pl
 8015d62:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8015d66:	6022      	str	r2, [r4, #0]
 8015d68:	f04f 0900 	mov.w	r9, #0
 8015d6c:	e78a      	b.n	8015c84 <_scanf_float+0x188>
 8015d6e:	f04f 0a03 	mov.w	sl, #3
 8015d72:	e787      	b.n	8015c84 <_scanf_float+0x188>
 8015d74:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8015d78:	4639      	mov	r1, r7
 8015d7a:	4640      	mov	r0, r8
 8015d7c:	4798      	blx	r3
 8015d7e:	2800      	cmp	r0, #0
 8015d80:	f43f aedf 	beq.w	8015b42 <_scanf_float+0x46>
 8015d84:	e6ea      	b.n	8015b5c <_scanf_float+0x60>
 8015d86:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8015d8a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8015d8e:	463a      	mov	r2, r7
 8015d90:	4640      	mov	r0, r8
 8015d92:	4798      	blx	r3
 8015d94:	6923      	ldr	r3, [r4, #16]
 8015d96:	3b01      	subs	r3, #1
 8015d98:	6123      	str	r3, [r4, #16]
 8015d9a:	e6ec      	b.n	8015b76 <_scanf_float+0x7a>
 8015d9c:	1e6b      	subs	r3, r5, #1
 8015d9e:	2b06      	cmp	r3, #6
 8015da0:	d825      	bhi.n	8015dee <_scanf_float+0x2f2>
 8015da2:	2d02      	cmp	r5, #2
 8015da4:	d836      	bhi.n	8015e14 <_scanf_float+0x318>
 8015da6:	455e      	cmp	r6, fp
 8015da8:	f67f aee8 	bls.w	8015b7c <_scanf_float+0x80>
 8015dac:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8015db0:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8015db4:	463a      	mov	r2, r7
 8015db6:	4640      	mov	r0, r8
 8015db8:	4798      	blx	r3
 8015dba:	6923      	ldr	r3, [r4, #16]
 8015dbc:	3b01      	subs	r3, #1
 8015dbe:	6123      	str	r3, [r4, #16]
 8015dc0:	e7f1      	b.n	8015da6 <_scanf_float+0x2aa>
 8015dc2:	9802      	ldr	r0, [sp, #8]
 8015dc4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8015dc8:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8015dcc:	9002      	str	r0, [sp, #8]
 8015dce:	463a      	mov	r2, r7
 8015dd0:	4640      	mov	r0, r8
 8015dd2:	4798      	blx	r3
 8015dd4:	6923      	ldr	r3, [r4, #16]
 8015dd6:	3b01      	subs	r3, #1
 8015dd8:	6123      	str	r3, [r4, #16]
 8015dda:	f10a 3aff 	add.w	sl, sl, #4294967295
 8015dde:	fa5f fa8a 	uxtb.w	sl, sl
 8015de2:	f1ba 0f02 	cmp.w	sl, #2
 8015de6:	d1ec      	bne.n	8015dc2 <_scanf_float+0x2c6>
 8015de8:	3d03      	subs	r5, #3
 8015dea:	b2ed      	uxtb	r5, r5
 8015dec:	1b76      	subs	r6, r6, r5
 8015dee:	6823      	ldr	r3, [r4, #0]
 8015df0:	05da      	lsls	r2, r3, #23
 8015df2:	d52f      	bpl.n	8015e54 <_scanf_float+0x358>
 8015df4:	055b      	lsls	r3, r3, #21
 8015df6:	d510      	bpl.n	8015e1a <_scanf_float+0x31e>
 8015df8:	455e      	cmp	r6, fp
 8015dfa:	f67f aebf 	bls.w	8015b7c <_scanf_float+0x80>
 8015dfe:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8015e02:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8015e06:	463a      	mov	r2, r7
 8015e08:	4640      	mov	r0, r8
 8015e0a:	4798      	blx	r3
 8015e0c:	6923      	ldr	r3, [r4, #16]
 8015e0e:	3b01      	subs	r3, #1
 8015e10:	6123      	str	r3, [r4, #16]
 8015e12:	e7f1      	b.n	8015df8 <_scanf_float+0x2fc>
 8015e14:	46aa      	mov	sl, r5
 8015e16:	9602      	str	r6, [sp, #8]
 8015e18:	e7df      	b.n	8015dda <_scanf_float+0x2de>
 8015e1a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8015e1e:	6923      	ldr	r3, [r4, #16]
 8015e20:	2965      	cmp	r1, #101	; 0x65
 8015e22:	f103 33ff 	add.w	r3, r3, #4294967295
 8015e26:	f106 35ff 	add.w	r5, r6, #4294967295
 8015e2a:	6123      	str	r3, [r4, #16]
 8015e2c:	d00c      	beq.n	8015e48 <_scanf_float+0x34c>
 8015e2e:	2945      	cmp	r1, #69	; 0x45
 8015e30:	d00a      	beq.n	8015e48 <_scanf_float+0x34c>
 8015e32:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8015e36:	463a      	mov	r2, r7
 8015e38:	4640      	mov	r0, r8
 8015e3a:	4798      	blx	r3
 8015e3c:	6923      	ldr	r3, [r4, #16]
 8015e3e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8015e42:	3b01      	subs	r3, #1
 8015e44:	1eb5      	subs	r5, r6, #2
 8015e46:	6123      	str	r3, [r4, #16]
 8015e48:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8015e4c:	463a      	mov	r2, r7
 8015e4e:	4640      	mov	r0, r8
 8015e50:	4798      	blx	r3
 8015e52:	462e      	mov	r6, r5
 8015e54:	6825      	ldr	r5, [r4, #0]
 8015e56:	f015 0510 	ands.w	r5, r5, #16
 8015e5a:	d158      	bne.n	8015f0e <_scanf_float+0x412>
 8015e5c:	7035      	strb	r5, [r6, #0]
 8015e5e:	6823      	ldr	r3, [r4, #0]
 8015e60:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8015e64:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8015e68:	d11c      	bne.n	8015ea4 <_scanf_float+0x3a8>
 8015e6a:	9b01      	ldr	r3, [sp, #4]
 8015e6c:	454b      	cmp	r3, r9
 8015e6e:	eba3 0209 	sub.w	r2, r3, r9
 8015e72:	d124      	bne.n	8015ebe <_scanf_float+0x3c2>
 8015e74:	2200      	movs	r2, #0
 8015e76:	4659      	mov	r1, fp
 8015e78:	4640      	mov	r0, r8
 8015e7a:	f000 ff77 	bl	8016d6c <_strtod_r>
 8015e7e:	9b03      	ldr	r3, [sp, #12]
 8015e80:	6821      	ldr	r1, [r4, #0]
 8015e82:	681b      	ldr	r3, [r3, #0]
 8015e84:	f011 0f02 	tst.w	r1, #2
 8015e88:	ec57 6b10 	vmov	r6, r7, d0
 8015e8c:	f103 0204 	add.w	r2, r3, #4
 8015e90:	d020      	beq.n	8015ed4 <_scanf_float+0x3d8>
 8015e92:	9903      	ldr	r1, [sp, #12]
 8015e94:	600a      	str	r2, [r1, #0]
 8015e96:	681b      	ldr	r3, [r3, #0]
 8015e98:	e9c3 6700 	strd	r6, r7, [r3]
 8015e9c:	68e3      	ldr	r3, [r4, #12]
 8015e9e:	3301      	adds	r3, #1
 8015ea0:	60e3      	str	r3, [r4, #12]
 8015ea2:	e66c      	b.n	8015b7e <_scanf_float+0x82>
 8015ea4:	9b04      	ldr	r3, [sp, #16]
 8015ea6:	2b00      	cmp	r3, #0
 8015ea8:	d0e4      	beq.n	8015e74 <_scanf_float+0x378>
 8015eaa:	9905      	ldr	r1, [sp, #20]
 8015eac:	230a      	movs	r3, #10
 8015eae:	462a      	mov	r2, r5
 8015eb0:	3101      	adds	r1, #1
 8015eb2:	4640      	mov	r0, r8
 8015eb4:	f000 ffe4 	bl	8016e80 <_strtol_r>
 8015eb8:	9b04      	ldr	r3, [sp, #16]
 8015eba:	9e05      	ldr	r6, [sp, #20]
 8015ebc:	1ac2      	subs	r2, r0, r3
 8015ebe:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8015ec2:	429e      	cmp	r6, r3
 8015ec4:	bf28      	it	cs
 8015ec6:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8015eca:	4912      	ldr	r1, [pc, #72]	; (8015f14 <_scanf_float+0x418>)
 8015ecc:	4630      	mov	r0, r6
 8015ece:	f000 f86f 	bl	8015fb0 <siprintf>
 8015ed2:	e7cf      	b.n	8015e74 <_scanf_float+0x378>
 8015ed4:	f011 0f04 	tst.w	r1, #4
 8015ed8:	9903      	ldr	r1, [sp, #12]
 8015eda:	600a      	str	r2, [r1, #0]
 8015edc:	d1db      	bne.n	8015e96 <_scanf_float+0x39a>
 8015ede:	f8d3 8000 	ldr.w	r8, [r3]
 8015ee2:	ee10 2a10 	vmov	r2, s0
 8015ee6:	ee10 0a10 	vmov	r0, s0
 8015eea:	463b      	mov	r3, r7
 8015eec:	4639      	mov	r1, r7
 8015eee:	f7ea fe4d 	bl	8000b8c <__aeabi_dcmpun>
 8015ef2:	b128      	cbz	r0, 8015f00 <_scanf_float+0x404>
 8015ef4:	4808      	ldr	r0, [pc, #32]	; (8015f18 <_scanf_float+0x41c>)
 8015ef6:	f000 f821 	bl	8015f3c <nanf>
 8015efa:	ed88 0a00 	vstr	s0, [r8]
 8015efe:	e7cd      	b.n	8015e9c <_scanf_float+0x3a0>
 8015f00:	4630      	mov	r0, r6
 8015f02:	4639      	mov	r1, r7
 8015f04:	f7ea fea0 	bl	8000c48 <__aeabi_d2f>
 8015f08:	f8c8 0000 	str.w	r0, [r8]
 8015f0c:	e7c6      	b.n	8015e9c <_scanf_float+0x3a0>
 8015f0e:	2500      	movs	r5, #0
 8015f10:	e635      	b.n	8015b7e <_scanf_float+0x82>
 8015f12:	bf00      	nop
 8015f14:	0801f5c2 	.word	0x0801f5c2
 8015f18:	0801f9f3 	.word	0x0801f9f3

08015f1c <_sbrk_r>:
 8015f1c:	b538      	push	{r3, r4, r5, lr}
 8015f1e:	4d06      	ldr	r5, [pc, #24]	; (8015f38 <_sbrk_r+0x1c>)
 8015f20:	2300      	movs	r3, #0
 8015f22:	4604      	mov	r4, r0
 8015f24:	4608      	mov	r0, r1
 8015f26:	602b      	str	r3, [r5, #0]
 8015f28:	f7eb fbae 	bl	8001688 <_sbrk>
 8015f2c:	1c43      	adds	r3, r0, #1
 8015f2e:	d102      	bne.n	8015f36 <_sbrk_r+0x1a>
 8015f30:	682b      	ldr	r3, [r5, #0]
 8015f32:	b103      	cbz	r3, 8015f36 <_sbrk_r+0x1a>
 8015f34:	6023      	str	r3, [r4, #0]
 8015f36:	bd38      	pop	{r3, r4, r5, pc}
 8015f38:	20005868 	.word	0x20005868

08015f3c <nanf>:
 8015f3c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8015f44 <nanf+0x8>
 8015f40:	4770      	bx	lr
 8015f42:	bf00      	nop
 8015f44:	7fc00000 	.word	0x7fc00000

08015f48 <sniprintf>:
 8015f48:	b40c      	push	{r2, r3}
 8015f4a:	b530      	push	{r4, r5, lr}
 8015f4c:	4b17      	ldr	r3, [pc, #92]	; (8015fac <sniprintf+0x64>)
 8015f4e:	1e0c      	subs	r4, r1, #0
 8015f50:	681d      	ldr	r5, [r3, #0]
 8015f52:	b09d      	sub	sp, #116	; 0x74
 8015f54:	da08      	bge.n	8015f68 <sniprintf+0x20>
 8015f56:	238b      	movs	r3, #139	; 0x8b
 8015f58:	602b      	str	r3, [r5, #0]
 8015f5a:	f04f 30ff 	mov.w	r0, #4294967295
 8015f5e:	b01d      	add	sp, #116	; 0x74
 8015f60:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8015f64:	b002      	add	sp, #8
 8015f66:	4770      	bx	lr
 8015f68:	f44f 7302 	mov.w	r3, #520	; 0x208
 8015f6c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8015f70:	bf14      	ite	ne
 8015f72:	f104 33ff 	addne.w	r3, r4, #4294967295
 8015f76:	4623      	moveq	r3, r4
 8015f78:	9304      	str	r3, [sp, #16]
 8015f7a:	9307      	str	r3, [sp, #28]
 8015f7c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8015f80:	9002      	str	r0, [sp, #8]
 8015f82:	9006      	str	r0, [sp, #24]
 8015f84:	f8ad 3016 	strh.w	r3, [sp, #22]
 8015f88:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8015f8a:	ab21      	add	r3, sp, #132	; 0x84
 8015f8c:	a902      	add	r1, sp, #8
 8015f8e:	4628      	mov	r0, r5
 8015f90:	9301      	str	r3, [sp, #4]
 8015f92:	f002 fefb 	bl	8018d8c <_svfiprintf_r>
 8015f96:	1c43      	adds	r3, r0, #1
 8015f98:	bfbc      	itt	lt
 8015f9a:	238b      	movlt	r3, #139	; 0x8b
 8015f9c:	602b      	strlt	r3, [r5, #0]
 8015f9e:	2c00      	cmp	r4, #0
 8015fa0:	d0dd      	beq.n	8015f5e <sniprintf+0x16>
 8015fa2:	9b02      	ldr	r3, [sp, #8]
 8015fa4:	2200      	movs	r2, #0
 8015fa6:	701a      	strb	r2, [r3, #0]
 8015fa8:	e7d9      	b.n	8015f5e <sniprintf+0x16>
 8015faa:	bf00      	nop
 8015fac:	20000154 	.word	0x20000154

08015fb0 <siprintf>:
 8015fb0:	b40e      	push	{r1, r2, r3}
 8015fb2:	b500      	push	{lr}
 8015fb4:	b09c      	sub	sp, #112	; 0x70
 8015fb6:	ab1d      	add	r3, sp, #116	; 0x74
 8015fb8:	9002      	str	r0, [sp, #8]
 8015fba:	9006      	str	r0, [sp, #24]
 8015fbc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8015fc0:	4809      	ldr	r0, [pc, #36]	; (8015fe8 <siprintf+0x38>)
 8015fc2:	9107      	str	r1, [sp, #28]
 8015fc4:	9104      	str	r1, [sp, #16]
 8015fc6:	4909      	ldr	r1, [pc, #36]	; (8015fec <siprintf+0x3c>)
 8015fc8:	f853 2b04 	ldr.w	r2, [r3], #4
 8015fcc:	9105      	str	r1, [sp, #20]
 8015fce:	6800      	ldr	r0, [r0, #0]
 8015fd0:	9301      	str	r3, [sp, #4]
 8015fd2:	a902      	add	r1, sp, #8
 8015fd4:	f002 feda 	bl	8018d8c <_svfiprintf_r>
 8015fd8:	9b02      	ldr	r3, [sp, #8]
 8015fda:	2200      	movs	r2, #0
 8015fdc:	701a      	strb	r2, [r3, #0]
 8015fde:	b01c      	add	sp, #112	; 0x70
 8015fe0:	f85d eb04 	ldr.w	lr, [sp], #4
 8015fe4:	b003      	add	sp, #12
 8015fe6:	4770      	bx	lr
 8015fe8:	20000154 	.word	0x20000154
 8015fec:	ffff0208 	.word	0xffff0208

08015ff0 <siscanf>:
 8015ff0:	b40e      	push	{r1, r2, r3}
 8015ff2:	b510      	push	{r4, lr}
 8015ff4:	b09f      	sub	sp, #124	; 0x7c
 8015ff6:	ac21      	add	r4, sp, #132	; 0x84
 8015ff8:	f44f 7101 	mov.w	r1, #516	; 0x204
 8015ffc:	f854 2b04 	ldr.w	r2, [r4], #4
 8016000:	9201      	str	r2, [sp, #4]
 8016002:	f8ad 101c 	strh.w	r1, [sp, #28]
 8016006:	9004      	str	r0, [sp, #16]
 8016008:	9008      	str	r0, [sp, #32]
 801600a:	f7ea f90b 	bl	8000224 <strlen>
 801600e:	4b0c      	ldr	r3, [pc, #48]	; (8016040 <siscanf+0x50>)
 8016010:	9005      	str	r0, [sp, #20]
 8016012:	9009      	str	r0, [sp, #36]	; 0x24
 8016014:	930d      	str	r3, [sp, #52]	; 0x34
 8016016:	480b      	ldr	r0, [pc, #44]	; (8016044 <siscanf+0x54>)
 8016018:	9a01      	ldr	r2, [sp, #4]
 801601a:	6800      	ldr	r0, [r0, #0]
 801601c:	9403      	str	r4, [sp, #12]
 801601e:	2300      	movs	r3, #0
 8016020:	9311      	str	r3, [sp, #68]	; 0x44
 8016022:	9316      	str	r3, [sp, #88]	; 0x58
 8016024:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8016028:	f8ad 301e 	strh.w	r3, [sp, #30]
 801602c:	a904      	add	r1, sp, #16
 801602e:	4623      	mov	r3, r4
 8016030:	f003 f806 	bl	8019040 <__ssvfiscanf_r>
 8016034:	b01f      	add	sp, #124	; 0x7c
 8016036:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801603a:	b003      	add	sp, #12
 801603c:	4770      	bx	lr
 801603e:	bf00      	nop
 8016040:	0801606b 	.word	0x0801606b
 8016044:	20000154 	.word	0x20000154

08016048 <__sread>:
 8016048:	b510      	push	{r4, lr}
 801604a:	460c      	mov	r4, r1
 801604c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016050:	f003 faba 	bl	80195c8 <_read_r>
 8016054:	2800      	cmp	r0, #0
 8016056:	bfab      	itete	ge
 8016058:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801605a:	89a3      	ldrhlt	r3, [r4, #12]
 801605c:	181b      	addge	r3, r3, r0
 801605e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8016062:	bfac      	ite	ge
 8016064:	6563      	strge	r3, [r4, #84]	; 0x54
 8016066:	81a3      	strhlt	r3, [r4, #12]
 8016068:	bd10      	pop	{r4, pc}

0801606a <__seofread>:
 801606a:	2000      	movs	r0, #0
 801606c:	4770      	bx	lr

0801606e <__swrite>:
 801606e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016072:	461f      	mov	r7, r3
 8016074:	898b      	ldrh	r3, [r1, #12]
 8016076:	05db      	lsls	r3, r3, #23
 8016078:	4605      	mov	r5, r0
 801607a:	460c      	mov	r4, r1
 801607c:	4616      	mov	r6, r2
 801607e:	d505      	bpl.n	801608c <__swrite+0x1e>
 8016080:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016084:	2302      	movs	r3, #2
 8016086:	2200      	movs	r2, #0
 8016088:	f002 f92a 	bl	80182e0 <_lseek_r>
 801608c:	89a3      	ldrh	r3, [r4, #12]
 801608e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8016092:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8016096:	81a3      	strh	r3, [r4, #12]
 8016098:	4632      	mov	r2, r6
 801609a:	463b      	mov	r3, r7
 801609c:	4628      	mov	r0, r5
 801609e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80160a2:	f000 bf0f 	b.w	8016ec4 <_write_r>

080160a6 <__sseek>:
 80160a6:	b510      	push	{r4, lr}
 80160a8:	460c      	mov	r4, r1
 80160aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80160ae:	f002 f917 	bl	80182e0 <_lseek_r>
 80160b2:	1c43      	adds	r3, r0, #1
 80160b4:	89a3      	ldrh	r3, [r4, #12]
 80160b6:	bf15      	itete	ne
 80160b8:	6560      	strne	r0, [r4, #84]	; 0x54
 80160ba:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80160be:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80160c2:	81a3      	strheq	r3, [r4, #12]
 80160c4:	bf18      	it	ne
 80160c6:	81a3      	strhne	r3, [r4, #12]
 80160c8:	bd10      	pop	{r4, pc}

080160ca <__sclose>:
 80160ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80160ce:	f000 bf0b 	b.w	8016ee8 <_close_r>

080160d2 <strncmp>:
 80160d2:	b510      	push	{r4, lr}
 80160d4:	b16a      	cbz	r2, 80160f2 <strncmp+0x20>
 80160d6:	3901      	subs	r1, #1
 80160d8:	1884      	adds	r4, r0, r2
 80160da:	f810 3b01 	ldrb.w	r3, [r0], #1
 80160de:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80160e2:	4293      	cmp	r3, r2
 80160e4:	d103      	bne.n	80160ee <strncmp+0x1c>
 80160e6:	42a0      	cmp	r0, r4
 80160e8:	d001      	beq.n	80160ee <strncmp+0x1c>
 80160ea:	2b00      	cmp	r3, #0
 80160ec:	d1f5      	bne.n	80160da <strncmp+0x8>
 80160ee:	1a98      	subs	r0, r3, r2
 80160f0:	bd10      	pop	{r4, pc}
 80160f2:	4610      	mov	r0, r2
 80160f4:	e7fc      	b.n	80160f0 <strncmp+0x1e>

080160f6 <strncpy>:
 80160f6:	b510      	push	{r4, lr}
 80160f8:	3901      	subs	r1, #1
 80160fa:	4603      	mov	r3, r0
 80160fc:	b132      	cbz	r2, 801610c <strncpy+0x16>
 80160fe:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8016102:	f803 4b01 	strb.w	r4, [r3], #1
 8016106:	3a01      	subs	r2, #1
 8016108:	2c00      	cmp	r4, #0
 801610a:	d1f7      	bne.n	80160fc <strncpy+0x6>
 801610c:	441a      	add	r2, r3
 801610e:	2100      	movs	r1, #0
 8016110:	4293      	cmp	r3, r2
 8016112:	d100      	bne.n	8016116 <strncpy+0x20>
 8016114:	bd10      	pop	{r4, pc}
 8016116:	f803 1b01 	strb.w	r1, [r3], #1
 801611a:	e7f9      	b.n	8016110 <strncpy+0x1a>

0801611c <sulp>:
 801611c:	b570      	push	{r4, r5, r6, lr}
 801611e:	4604      	mov	r4, r0
 8016120:	460d      	mov	r5, r1
 8016122:	ec45 4b10 	vmov	d0, r4, r5
 8016126:	4616      	mov	r6, r2
 8016128:	f002 fc76 	bl	8018a18 <__ulp>
 801612c:	ec51 0b10 	vmov	r0, r1, d0
 8016130:	b17e      	cbz	r6, 8016152 <sulp+0x36>
 8016132:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8016136:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801613a:	2b00      	cmp	r3, #0
 801613c:	dd09      	ble.n	8016152 <sulp+0x36>
 801613e:	051b      	lsls	r3, r3, #20
 8016140:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8016144:	2400      	movs	r4, #0
 8016146:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 801614a:	4622      	mov	r2, r4
 801614c:	462b      	mov	r3, r5
 801614e:	f7ea fa83 	bl	8000658 <__aeabi_dmul>
 8016152:	bd70      	pop	{r4, r5, r6, pc}
 8016154:	0000      	movs	r0, r0
	...

08016158 <_strtod_l>:
 8016158:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801615c:	b0a3      	sub	sp, #140	; 0x8c
 801615e:	461f      	mov	r7, r3
 8016160:	2300      	movs	r3, #0
 8016162:	931e      	str	r3, [sp, #120]	; 0x78
 8016164:	4ba4      	ldr	r3, [pc, #656]	; (80163f8 <_strtod_l+0x2a0>)
 8016166:	9219      	str	r2, [sp, #100]	; 0x64
 8016168:	681b      	ldr	r3, [r3, #0]
 801616a:	9307      	str	r3, [sp, #28]
 801616c:	4604      	mov	r4, r0
 801616e:	4618      	mov	r0, r3
 8016170:	4688      	mov	r8, r1
 8016172:	f7ea f857 	bl	8000224 <strlen>
 8016176:	f04f 0a00 	mov.w	sl, #0
 801617a:	4605      	mov	r5, r0
 801617c:	f04f 0b00 	mov.w	fp, #0
 8016180:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8016184:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8016186:	781a      	ldrb	r2, [r3, #0]
 8016188:	2a2b      	cmp	r2, #43	; 0x2b
 801618a:	d04c      	beq.n	8016226 <_strtod_l+0xce>
 801618c:	d839      	bhi.n	8016202 <_strtod_l+0xaa>
 801618e:	2a0d      	cmp	r2, #13
 8016190:	d832      	bhi.n	80161f8 <_strtod_l+0xa0>
 8016192:	2a08      	cmp	r2, #8
 8016194:	d832      	bhi.n	80161fc <_strtod_l+0xa4>
 8016196:	2a00      	cmp	r2, #0
 8016198:	d03c      	beq.n	8016214 <_strtod_l+0xbc>
 801619a:	2300      	movs	r3, #0
 801619c:	930e      	str	r3, [sp, #56]	; 0x38
 801619e:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 80161a0:	7833      	ldrb	r3, [r6, #0]
 80161a2:	2b30      	cmp	r3, #48	; 0x30
 80161a4:	f040 80b4 	bne.w	8016310 <_strtod_l+0x1b8>
 80161a8:	7873      	ldrb	r3, [r6, #1]
 80161aa:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80161ae:	2b58      	cmp	r3, #88	; 0x58
 80161b0:	d16c      	bne.n	801628c <_strtod_l+0x134>
 80161b2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80161b4:	9301      	str	r3, [sp, #4]
 80161b6:	ab1e      	add	r3, sp, #120	; 0x78
 80161b8:	9702      	str	r7, [sp, #8]
 80161ba:	9300      	str	r3, [sp, #0]
 80161bc:	4a8f      	ldr	r2, [pc, #572]	; (80163fc <_strtod_l+0x2a4>)
 80161be:	ab1f      	add	r3, sp, #124	; 0x7c
 80161c0:	a91d      	add	r1, sp, #116	; 0x74
 80161c2:	4620      	mov	r0, r4
 80161c4:	f001 fd80 	bl	8017cc8 <__gethex>
 80161c8:	f010 0707 	ands.w	r7, r0, #7
 80161cc:	4605      	mov	r5, r0
 80161ce:	d005      	beq.n	80161dc <_strtod_l+0x84>
 80161d0:	2f06      	cmp	r7, #6
 80161d2:	d12a      	bne.n	801622a <_strtod_l+0xd2>
 80161d4:	3601      	adds	r6, #1
 80161d6:	2300      	movs	r3, #0
 80161d8:	961d      	str	r6, [sp, #116]	; 0x74
 80161da:	930e      	str	r3, [sp, #56]	; 0x38
 80161dc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80161de:	2b00      	cmp	r3, #0
 80161e0:	f040 8596 	bne.w	8016d10 <_strtod_l+0xbb8>
 80161e4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80161e6:	b1db      	cbz	r3, 8016220 <_strtod_l+0xc8>
 80161e8:	4652      	mov	r2, sl
 80161ea:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80161ee:	ec43 2b10 	vmov	d0, r2, r3
 80161f2:	b023      	add	sp, #140	; 0x8c
 80161f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80161f8:	2a20      	cmp	r2, #32
 80161fa:	d1ce      	bne.n	801619a <_strtod_l+0x42>
 80161fc:	3301      	adds	r3, #1
 80161fe:	931d      	str	r3, [sp, #116]	; 0x74
 8016200:	e7c0      	b.n	8016184 <_strtod_l+0x2c>
 8016202:	2a2d      	cmp	r2, #45	; 0x2d
 8016204:	d1c9      	bne.n	801619a <_strtod_l+0x42>
 8016206:	2201      	movs	r2, #1
 8016208:	920e      	str	r2, [sp, #56]	; 0x38
 801620a:	1c5a      	adds	r2, r3, #1
 801620c:	921d      	str	r2, [sp, #116]	; 0x74
 801620e:	785b      	ldrb	r3, [r3, #1]
 8016210:	2b00      	cmp	r3, #0
 8016212:	d1c4      	bne.n	801619e <_strtod_l+0x46>
 8016214:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8016216:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 801621a:	2b00      	cmp	r3, #0
 801621c:	f040 8576 	bne.w	8016d0c <_strtod_l+0xbb4>
 8016220:	4652      	mov	r2, sl
 8016222:	465b      	mov	r3, fp
 8016224:	e7e3      	b.n	80161ee <_strtod_l+0x96>
 8016226:	2200      	movs	r2, #0
 8016228:	e7ee      	b.n	8016208 <_strtod_l+0xb0>
 801622a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 801622c:	b13a      	cbz	r2, 801623e <_strtod_l+0xe6>
 801622e:	2135      	movs	r1, #53	; 0x35
 8016230:	a820      	add	r0, sp, #128	; 0x80
 8016232:	f002 fcfc 	bl	8018c2e <__copybits>
 8016236:	991e      	ldr	r1, [sp, #120]	; 0x78
 8016238:	4620      	mov	r0, r4
 801623a:	f002 f8c1 	bl	80183c0 <_Bfree>
 801623e:	3f01      	subs	r7, #1
 8016240:	2f05      	cmp	r7, #5
 8016242:	d807      	bhi.n	8016254 <_strtod_l+0xfc>
 8016244:	e8df f007 	tbb	[pc, r7]
 8016248:	1d180b0e 	.word	0x1d180b0e
 801624c:	030e      	.short	0x030e
 801624e:	f04f 0b00 	mov.w	fp, #0
 8016252:	46da      	mov	sl, fp
 8016254:	0728      	lsls	r0, r5, #28
 8016256:	d5c1      	bpl.n	80161dc <_strtod_l+0x84>
 8016258:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 801625c:	e7be      	b.n	80161dc <_strtod_l+0x84>
 801625e:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 8016262:	e7f7      	b.n	8016254 <_strtod_l+0xfc>
 8016264:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 8016268:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 801626a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 801626e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8016272:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8016276:	e7ed      	b.n	8016254 <_strtod_l+0xfc>
 8016278:	f8df b184 	ldr.w	fp, [pc, #388]	; 8016400 <_strtod_l+0x2a8>
 801627c:	f04f 0a00 	mov.w	sl, #0
 8016280:	e7e8      	b.n	8016254 <_strtod_l+0xfc>
 8016282:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8016286:	f04f 3aff 	mov.w	sl, #4294967295
 801628a:	e7e3      	b.n	8016254 <_strtod_l+0xfc>
 801628c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801628e:	1c5a      	adds	r2, r3, #1
 8016290:	921d      	str	r2, [sp, #116]	; 0x74
 8016292:	785b      	ldrb	r3, [r3, #1]
 8016294:	2b30      	cmp	r3, #48	; 0x30
 8016296:	d0f9      	beq.n	801628c <_strtod_l+0x134>
 8016298:	2b00      	cmp	r3, #0
 801629a:	d09f      	beq.n	80161dc <_strtod_l+0x84>
 801629c:	2301      	movs	r3, #1
 801629e:	f04f 0900 	mov.w	r9, #0
 80162a2:	9304      	str	r3, [sp, #16]
 80162a4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80162a6:	930a      	str	r3, [sp, #40]	; 0x28
 80162a8:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 80162ac:	464f      	mov	r7, r9
 80162ae:	220a      	movs	r2, #10
 80162b0:	981d      	ldr	r0, [sp, #116]	; 0x74
 80162b2:	7806      	ldrb	r6, [r0, #0]
 80162b4:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 80162b8:	b2d9      	uxtb	r1, r3
 80162ba:	2909      	cmp	r1, #9
 80162bc:	d92a      	bls.n	8016314 <_strtod_l+0x1bc>
 80162be:	9907      	ldr	r1, [sp, #28]
 80162c0:	462a      	mov	r2, r5
 80162c2:	f7ff ff06 	bl	80160d2 <strncmp>
 80162c6:	b398      	cbz	r0, 8016330 <_strtod_l+0x1d8>
 80162c8:	2000      	movs	r0, #0
 80162ca:	4633      	mov	r3, r6
 80162cc:	463d      	mov	r5, r7
 80162ce:	9007      	str	r0, [sp, #28]
 80162d0:	4602      	mov	r2, r0
 80162d2:	2b65      	cmp	r3, #101	; 0x65
 80162d4:	d001      	beq.n	80162da <_strtod_l+0x182>
 80162d6:	2b45      	cmp	r3, #69	; 0x45
 80162d8:	d118      	bne.n	801630c <_strtod_l+0x1b4>
 80162da:	b91d      	cbnz	r5, 80162e4 <_strtod_l+0x18c>
 80162dc:	9b04      	ldr	r3, [sp, #16]
 80162de:	4303      	orrs	r3, r0
 80162e0:	d098      	beq.n	8016214 <_strtod_l+0xbc>
 80162e2:	2500      	movs	r5, #0
 80162e4:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 80162e8:	f108 0301 	add.w	r3, r8, #1
 80162ec:	931d      	str	r3, [sp, #116]	; 0x74
 80162ee:	f898 3001 	ldrb.w	r3, [r8, #1]
 80162f2:	2b2b      	cmp	r3, #43	; 0x2b
 80162f4:	d075      	beq.n	80163e2 <_strtod_l+0x28a>
 80162f6:	2b2d      	cmp	r3, #45	; 0x2d
 80162f8:	d07b      	beq.n	80163f2 <_strtod_l+0x29a>
 80162fa:	f04f 0c00 	mov.w	ip, #0
 80162fe:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8016302:	2909      	cmp	r1, #9
 8016304:	f240 8082 	bls.w	801640c <_strtod_l+0x2b4>
 8016308:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 801630c:	2600      	movs	r6, #0
 801630e:	e09d      	b.n	801644c <_strtod_l+0x2f4>
 8016310:	2300      	movs	r3, #0
 8016312:	e7c4      	b.n	801629e <_strtod_l+0x146>
 8016314:	2f08      	cmp	r7, #8
 8016316:	bfd8      	it	le
 8016318:	9909      	ldrle	r1, [sp, #36]	; 0x24
 801631a:	f100 0001 	add.w	r0, r0, #1
 801631e:	bfda      	itte	le
 8016320:	fb02 3301 	mlale	r3, r2, r1, r3
 8016324:	9309      	strle	r3, [sp, #36]	; 0x24
 8016326:	fb02 3909 	mlagt	r9, r2, r9, r3
 801632a:	3701      	adds	r7, #1
 801632c:	901d      	str	r0, [sp, #116]	; 0x74
 801632e:	e7bf      	b.n	80162b0 <_strtod_l+0x158>
 8016330:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8016332:	195a      	adds	r2, r3, r5
 8016334:	921d      	str	r2, [sp, #116]	; 0x74
 8016336:	5d5b      	ldrb	r3, [r3, r5]
 8016338:	2f00      	cmp	r7, #0
 801633a:	d037      	beq.n	80163ac <_strtod_l+0x254>
 801633c:	9007      	str	r0, [sp, #28]
 801633e:	463d      	mov	r5, r7
 8016340:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8016344:	2a09      	cmp	r2, #9
 8016346:	d912      	bls.n	801636e <_strtod_l+0x216>
 8016348:	2201      	movs	r2, #1
 801634a:	e7c2      	b.n	80162d2 <_strtod_l+0x17a>
 801634c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801634e:	1c5a      	adds	r2, r3, #1
 8016350:	921d      	str	r2, [sp, #116]	; 0x74
 8016352:	785b      	ldrb	r3, [r3, #1]
 8016354:	3001      	adds	r0, #1
 8016356:	2b30      	cmp	r3, #48	; 0x30
 8016358:	d0f8      	beq.n	801634c <_strtod_l+0x1f4>
 801635a:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 801635e:	2a08      	cmp	r2, #8
 8016360:	f200 84db 	bhi.w	8016d1a <_strtod_l+0xbc2>
 8016364:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8016366:	9007      	str	r0, [sp, #28]
 8016368:	2000      	movs	r0, #0
 801636a:	920a      	str	r2, [sp, #40]	; 0x28
 801636c:	4605      	mov	r5, r0
 801636e:	3b30      	subs	r3, #48	; 0x30
 8016370:	f100 0201 	add.w	r2, r0, #1
 8016374:	d014      	beq.n	80163a0 <_strtod_l+0x248>
 8016376:	9907      	ldr	r1, [sp, #28]
 8016378:	4411      	add	r1, r2
 801637a:	9107      	str	r1, [sp, #28]
 801637c:	462a      	mov	r2, r5
 801637e:	eb00 0e05 	add.w	lr, r0, r5
 8016382:	210a      	movs	r1, #10
 8016384:	4572      	cmp	r2, lr
 8016386:	d113      	bne.n	80163b0 <_strtod_l+0x258>
 8016388:	182a      	adds	r2, r5, r0
 801638a:	2a08      	cmp	r2, #8
 801638c:	f105 0501 	add.w	r5, r5, #1
 8016390:	4405      	add	r5, r0
 8016392:	dc1c      	bgt.n	80163ce <_strtod_l+0x276>
 8016394:	9909      	ldr	r1, [sp, #36]	; 0x24
 8016396:	220a      	movs	r2, #10
 8016398:	fb02 3301 	mla	r3, r2, r1, r3
 801639c:	9309      	str	r3, [sp, #36]	; 0x24
 801639e:	2200      	movs	r2, #0
 80163a0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80163a2:	1c59      	adds	r1, r3, #1
 80163a4:	911d      	str	r1, [sp, #116]	; 0x74
 80163a6:	785b      	ldrb	r3, [r3, #1]
 80163a8:	4610      	mov	r0, r2
 80163aa:	e7c9      	b.n	8016340 <_strtod_l+0x1e8>
 80163ac:	4638      	mov	r0, r7
 80163ae:	e7d2      	b.n	8016356 <_strtod_l+0x1fe>
 80163b0:	2a08      	cmp	r2, #8
 80163b2:	dc04      	bgt.n	80163be <_strtod_l+0x266>
 80163b4:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80163b6:	434e      	muls	r6, r1
 80163b8:	9609      	str	r6, [sp, #36]	; 0x24
 80163ba:	3201      	adds	r2, #1
 80163bc:	e7e2      	b.n	8016384 <_strtod_l+0x22c>
 80163be:	f102 0c01 	add.w	ip, r2, #1
 80163c2:	f1bc 0f10 	cmp.w	ip, #16
 80163c6:	bfd8      	it	le
 80163c8:	fb01 f909 	mulle.w	r9, r1, r9
 80163cc:	e7f5      	b.n	80163ba <_strtod_l+0x262>
 80163ce:	2d10      	cmp	r5, #16
 80163d0:	bfdc      	itt	le
 80163d2:	220a      	movle	r2, #10
 80163d4:	fb02 3909 	mlale	r9, r2, r9, r3
 80163d8:	e7e1      	b.n	801639e <_strtod_l+0x246>
 80163da:	2300      	movs	r3, #0
 80163dc:	9307      	str	r3, [sp, #28]
 80163de:	2201      	movs	r2, #1
 80163e0:	e77c      	b.n	80162dc <_strtod_l+0x184>
 80163e2:	f04f 0c00 	mov.w	ip, #0
 80163e6:	f108 0302 	add.w	r3, r8, #2
 80163ea:	931d      	str	r3, [sp, #116]	; 0x74
 80163ec:	f898 3002 	ldrb.w	r3, [r8, #2]
 80163f0:	e785      	b.n	80162fe <_strtod_l+0x1a6>
 80163f2:	f04f 0c01 	mov.w	ip, #1
 80163f6:	e7f6      	b.n	80163e6 <_strtod_l+0x28e>
 80163f8:	0801f818 	.word	0x0801f818
 80163fc:	0801f5c8 	.word	0x0801f5c8
 8016400:	7ff00000 	.word	0x7ff00000
 8016404:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8016406:	1c59      	adds	r1, r3, #1
 8016408:	911d      	str	r1, [sp, #116]	; 0x74
 801640a:	785b      	ldrb	r3, [r3, #1]
 801640c:	2b30      	cmp	r3, #48	; 0x30
 801640e:	d0f9      	beq.n	8016404 <_strtod_l+0x2ac>
 8016410:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 8016414:	2908      	cmp	r1, #8
 8016416:	f63f af79 	bhi.w	801630c <_strtod_l+0x1b4>
 801641a:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 801641e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8016420:	9308      	str	r3, [sp, #32]
 8016422:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8016424:	1c59      	adds	r1, r3, #1
 8016426:	911d      	str	r1, [sp, #116]	; 0x74
 8016428:	785b      	ldrb	r3, [r3, #1]
 801642a:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 801642e:	2e09      	cmp	r6, #9
 8016430:	d937      	bls.n	80164a2 <_strtod_l+0x34a>
 8016432:	9e08      	ldr	r6, [sp, #32]
 8016434:	1b89      	subs	r1, r1, r6
 8016436:	2908      	cmp	r1, #8
 8016438:	f644 661f 	movw	r6, #19999	; 0x4e1f
 801643c:	dc02      	bgt.n	8016444 <_strtod_l+0x2ec>
 801643e:	4576      	cmp	r6, lr
 8016440:	bfa8      	it	ge
 8016442:	4676      	movge	r6, lr
 8016444:	f1bc 0f00 	cmp.w	ip, #0
 8016448:	d000      	beq.n	801644c <_strtod_l+0x2f4>
 801644a:	4276      	negs	r6, r6
 801644c:	2d00      	cmp	r5, #0
 801644e:	d14f      	bne.n	80164f0 <_strtod_l+0x398>
 8016450:	9904      	ldr	r1, [sp, #16]
 8016452:	4301      	orrs	r1, r0
 8016454:	f47f aec2 	bne.w	80161dc <_strtod_l+0x84>
 8016458:	2a00      	cmp	r2, #0
 801645a:	f47f aedb 	bne.w	8016214 <_strtod_l+0xbc>
 801645e:	2b69      	cmp	r3, #105	; 0x69
 8016460:	d027      	beq.n	80164b2 <_strtod_l+0x35a>
 8016462:	dc24      	bgt.n	80164ae <_strtod_l+0x356>
 8016464:	2b49      	cmp	r3, #73	; 0x49
 8016466:	d024      	beq.n	80164b2 <_strtod_l+0x35a>
 8016468:	2b4e      	cmp	r3, #78	; 0x4e
 801646a:	f47f aed3 	bne.w	8016214 <_strtod_l+0xbc>
 801646e:	499e      	ldr	r1, [pc, #632]	; (80166e8 <_strtod_l+0x590>)
 8016470:	a81d      	add	r0, sp, #116	; 0x74
 8016472:	f001 fe81 	bl	8018178 <__match>
 8016476:	2800      	cmp	r0, #0
 8016478:	f43f aecc 	beq.w	8016214 <_strtod_l+0xbc>
 801647c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801647e:	781b      	ldrb	r3, [r3, #0]
 8016480:	2b28      	cmp	r3, #40	; 0x28
 8016482:	d12d      	bne.n	80164e0 <_strtod_l+0x388>
 8016484:	4999      	ldr	r1, [pc, #612]	; (80166ec <_strtod_l+0x594>)
 8016486:	aa20      	add	r2, sp, #128	; 0x80
 8016488:	a81d      	add	r0, sp, #116	; 0x74
 801648a:	f001 fe89 	bl	80181a0 <__hexnan>
 801648e:	2805      	cmp	r0, #5
 8016490:	d126      	bne.n	80164e0 <_strtod_l+0x388>
 8016492:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8016494:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 8016498:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 801649c:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 80164a0:	e69c      	b.n	80161dc <_strtod_l+0x84>
 80164a2:	210a      	movs	r1, #10
 80164a4:	fb01 3e0e 	mla	lr, r1, lr, r3
 80164a8:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 80164ac:	e7b9      	b.n	8016422 <_strtod_l+0x2ca>
 80164ae:	2b6e      	cmp	r3, #110	; 0x6e
 80164b0:	e7db      	b.n	801646a <_strtod_l+0x312>
 80164b2:	498f      	ldr	r1, [pc, #572]	; (80166f0 <_strtod_l+0x598>)
 80164b4:	a81d      	add	r0, sp, #116	; 0x74
 80164b6:	f001 fe5f 	bl	8018178 <__match>
 80164ba:	2800      	cmp	r0, #0
 80164bc:	f43f aeaa 	beq.w	8016214 <_strtod_l+0xbc>
 80164c0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80164c2:	498c      	ldr	r1, [pc, #560]	; (80166f4 <_strtod_l+0x59c>)
 80164c4:	3b01      	subs	r3, #1
 80164c6:	a81d      	add	r0, sp, #116	; 0x74
 80164c8:	931d      	str	r3, [sp, #116]	; 0x74
 80164ca:	f001 fe55 	bl	8018178 <__match>
 80164ce:	b910      	cbnz	r0, 80164d6 <_strtod_l+0x37e>
 80164d0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80164d2:	3301      	adds	r3, #1
 80164d4:	931d      	str	r3, [sp, #116]	; 0x74
 80164d6:	f8df b22c 	ldr.w	fp, [pc, #556]	; 8016704 <_strtod_l+0x5ac>
 80164da:	f04f 0a00 	mov.w	sl, #0
 80164de:	e67d      	b.n	80161dc <_strtod_l+0x84>
 80164e0:	4885      	ldr	r0, [pc, #532]	; (80166f8 <_strtod_l+0x5a0>)
 80164e2:	f003 f885 	bl	80195f0 <nan>
 80164e6:	ed8d 0b04 	vstr	d0, [sp, #16]
 80164ea:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 80164ee:	e675      	b.n	80161dc <_strtod_l+0x84>
 80164f0:	9b07      	ldr	r3, [sp, #28]
 80164f2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80164f4:	1af3      	subs	r3, r6, r3
 80164f6:	2f00      	cmp	r7, #0
 80164f8:	bf08      	it	eq
 80164fa:	462f      	moveq	r7, r5
 80164fc:	2d10      	cmp	r5, #16
 80164fe:	9308      	str	r3, [sp, #32]
 8016500:	46a8      	mov	r8, r5
 8016502:	bfa8      	it	ge
 8016504:	f04f 0810 	movge.w	r8, #16
 8016508:	f7ea f82c 	bl	8000564 <__aeabi_ui2d>
 801650c:	2d09      	cmp	r5, #9
 801650e:	4682      	mov	sl, r0
 8016510:	468b      	mov	fp, r1
 8016512:	dd13      	ble.n	801653c <_strtod_l+0x3e4>
 8016514:	4b79      	ldr	r3, [pc, #484]	; (80166fc <_strtod_l+0x5a4>)
 8016516:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 801651a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 801651e:	f7ea f89b 	bl	8000658 <__aeabi_dmul>
 8016522:	4682      	mov	sl, r0
 8016524:	4648      	mov	r0, r9
 8016526:	468b      	mov	fp, r1
 8016528:	f7ea f81c 	bl	8000564 <__aeabi_ui2d>
 801652c:	4602      	mov	r2, r0
 801652e:	460b      	mov	r3, r1
 8016530:	4650      	mov	r0, sl
 8016532:	4659      	mov	r1, fp
 8016534:	f7e9 feda 	bl	80002ec <__adddf3>
 8016538:	4682      	mov	sl, r0
 801653a:	468b      	mov	fp, r1
 801653c:	2d0f      	cmp	r5, #15
 801653e:	dc38      	bgt.n	80165b2 <_strtod_l+0x45a>
 8016540:	9b08      	ldr	r3, [sp, #32]
 8016542:	2b00      	cmp	r3, #0
 8016544:	f43f ae4a 	beq.w	80161dc <_strtod_l+0x84>
 8016548:	dd24      	ble.n	8016594 <_strtod_l+0x43c>
 801654a:	2b16      	cmp	r3, #22
 801654c:	dc0b      	bgt.n	8016566 <_strtod_l+0x40e>
 801654e:	4d6b      	ldr	r5, [pc, #428]	; (80166fc <_strtod_l+0x5a4>)
 8016550:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 8016554:	e9d5 0100 	ldrd	r0, r1, [r5]
 8016558:	4652      	mov	r2, sl
 801655a:	465b      	mov	r3, fp
 801655c:	f7ea f87c 	bl	8000658 <__aeabi_dmul>
 8016560:	4682      	mov	sl, r0
 8016562:	468b      	mov	fp, r1
 8016564:	e63a      	b.n	80161dc <_strtod_l+0x84>
 8016566:	9a08      	ldr	r2, [sp, #32]
 8016568:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 801656c:	4293      	cmp	r3, r2
 801656e:	db20      	blt.n	80165b2 <_strtod_l+0x45a>
 8016570:	4c62      	ldr	r4, [pc, #392]	; (80166fc <_strtod_l+0x5a4>)
 8016572:	f1c5 050f 	rsb	r5, r5, #15
 8016576:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 801657a:	4652      	mov	r2, sl
 801657c:	465b      	mov	r3, fp
 801657e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016582:	f7ea f869 	bl	8000658 <__aeabi_dmul>
 8016586:	9b08      	ldr	r3, [sp, #32]
 8016588:	1b5d      	subs	r5, r3, r5
 801658a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 801658e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8016592:	e7e3      	b.n	801655c <_strtod_l+0x404>
 8016594:	9b08      	ldr	r3, [sp, #32]
 8016596:	3316      	adds	r3, #22
 8016598:	db0b      	blt.n	80165b2 <_strtod_l+0x45a>
 801659a:	9b07      	ldr	r3, [sp, #28]
 801659c:	4a57      	ldr	r2, [pc, #348]	; (80166fc <_strtod_l+0x5a4>)
 801659e:	1b9e      	subs	r6, r3, r6
 80165a0:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 80165a4:	e9d6 2300 	ldrd	r2, r3, [r6]
 80165a8:	4650      	mov	r0, sl
 80165aa:	4659      	mov	r1, fp
 80165ac:	f7ea f97e 	bl	80008ac <__aeabi_ddiv>
 80165b0:	e7d6      	b.n	8016560 <_strtod_l+0x408>
 80165b2:	9b08      	ldr	r3, [sp, #32]
 80165b4:	eba5 0808 	sub.w	r8, r5, r8
 80165b8:	4498      	add	r8, r3
 80165ba:	f1b8 0f00 	cmp.w	r8, #0
 80165be:	dd71      	ble.n	80166a4 <_strtod_l+0x54c>
 80165c0:	f018 030f 	ands.w	r3, r8, #15
 80165c4:	d00a      	beq.n	80165dc <_strtod_l+0x484>
 80165c6:	494d      	ldr	r1, [pc, #308]	; (80166fc <_strtod_l+0x5a4>)
 80165c8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80165cc:	4652      	mov	r2, sl
 80165ce:	465b      	mov	r3, fp
 80165d0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80165d4:	f7ea f840 	bl	8000658 <__aeabi_dmul>
 80165d8:	4682      	mov	sl, r0
 80165da:	468b      	mov	fp, r1
 80165dc:	f038 080f 	bics.w	r8, r8, #15
 80165e0:	d04d      	beq.n	801667e <_strtod_l+0x526>
 80165e2:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 80165e6:	dd22      	ble.n	801662e <_strtod_l+0x4d6>
 80165e8:	2500      	movs	r5, #0
 80165ea:	462e      	mov	r6, r5
 80165ec:	9509      	str	r5, [sp, #36]	; 0x24
 80165ee:	9507      	str	r5, [sp, #28]
 80165f0:	2322      	movs	r3, #34	; 0x22
 80165f2:	f8df b110 	ldr.w	fp, [pc, #272]	; 8016704 <_strtod_l+0x5ac>
 80165f6:	6023      	str	r3, [r4, #0]
 80165f8:	f04f 0a00 	mov.w	sl, #0
 80165fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80165fe:	2b00      	cmp	r3, #0
 8016600:	f43f adec 	beq.w	80161dc <_strtod_l+0x84>
 8016604:	991e      	ldr	r1, [sp, #120]	; 0x78
 8016606:	4620      	mov	r0, r4
 8016608:	f001 feda 	bl	80183c0 <_Bfree>
 801660c:	9907      	ldr	r1, [sp, #28]
 801660e:	4620      	mov	r0, r4
 8016610:	f001 fed6 	bl	80183c0 <_Bfree>
 8016614:	4631      	mov	r1, r6
 8016616:	4620      	mov	r0, r4
 8016618:	f001 fed2 	bl	80183c0 <_Bfree>
 801661c:	9909      	ldr	r1, [sp, #36]	; 0x24
 801661e:	4620      	mov	r0, r4
 8016620:	f001 fece 	bl	80183c0 <_Bfree>
 8016624:	4629      	mov	r1, r5
 8016626:	4620      	mov	r0, r4
 8016628:	f001 feca 	bl	80183c0 <_Bfree>
 801662c:	e5d6      	b.n	80161dc <_strtod_l+0x84>
 801662e:	2300      	movs	r3, #0
 8016630:	ea4f 1828 	mov.w	r8, r8, asr #4
 8016634:	4650      	mov	r0, sl
 8016636:	4659      	mov	r1, fp
 8016638:	4699      	mov	r9, r3
 801663a:	f1b8 0f01 	cmp.w	r8, #1
 801663e:	dc21      	bgt.n	8016684 <_strtod_l+0x52c>
 8016640:	b10b      	cbz	r3, 8016646 <_strtod_l+0x4ee>
 8016642:	4682      	mov	sl, r0
 8016644:	468b      	mov	fp, r1
 8016646:	4b2e      	ldr	r3, [pc, #184]	; (8016700 <_strtod_l+0x5a8>)
 8016648:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 801664c:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8016650:	4652      	mov	r2, sl
 8016652:	465b      	mov	r3, fp
 8016654:	e9d9 0100 	ldrd	r0, r1, [r9]
 8016658:	f7e9 fffe 	bl	8000658 <__aeabi_dmul>
 801665c:	4b29      	ldr	r3, [pc, #164]	; (8016704 <_strtod_l+0x5ac>)
 801665e:	460a      	mov	r2, r1
 8016660:	400b      	ands	r3, r1
 8016662:	4929      	ldr	r1, [pc, #164]	; (8016708 <_strtod_l+0x5b0>)
 8016664:	428b      	cmp	r3, r1
 8016666:	4682      	mov	sl, r0
 8016668:	d8be      	bhi.n	80165e8 <_strtod_l+0x490>
 801666a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 801666e:	428b      	cmp	r3, r1
 8016670:	bf86      	itte	hi
 8016672:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 801670c <_strtod_l+0x5b4>
 8016676:	f04f 3aff 	movhi.w	sl, #4294967295
 801667a:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 801667e:	2300      	movs	r3, #0
 8016680:	9304      	str	r3, [sp, #16]
 8016682:	e081      	b.n	8016788 <_strtod_l+0x630>
 8016684:	f018 0f01 	tst.w	r8, #1
 8016688:	d007      	beq.n	801669a <_strtod_l+0x542>
 801668a:	4b1d      	ldr	r3, [pc, #116]	; (8016700 <_strtod_l+0x5a8>)
 801668c:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8016690:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016694:	f7e9 ffe0 	bl	8000658 <__aeabi_dmul>
 8016698:	2301      	movs	r3, #1
 801669a:	f109 0901 	add.w	r9, r9, #1
 801669e:	ea4f 0868 	mov.w	r8, r8, asr #1
 80166a2:	e7ca      	b.n	801663a <_strtod_l+0x4e2>
 80166a4:	d0eb      	beq.n	801667e <_strtod_l+0x526>
 80166a6:	f1c8 0800 	rsb	r8, r8, #0
 80166aa:	f018 020f 	ands.w	r2, r8, #15
 80166ae:	d00a      	beq.n	80166c6 <_strtod_l+0x56e>
 80166b0:	4b12      	ldr	r3, [pc, #72]	; (80166fc <_strtod_l+0x5a4>)
 80166b2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80166b6:	4650      	mov	r0, sl
 80166b8:	4659      	mov	r1, fp
 80166ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80166be:	f7ea f8f5 	bl	80008ac <__aeabi_ddiv>
 80166c2:	4682      	mov	sl, r0
 80166c4:	468b      	mov	fp, r1
 80166c6:	ea5f 1828 	movs.w	r8, r8, asr #4
 80166ca:	d0d8      	beq.n	801667e <_strtod_l+0x526>
 80166cc:	f1b8 0f1f 	cmp.w	r8, #31
 80166d0:	dd1e      	ble.n	8016710 <_strtod_l+0x5b8>
 80166d2:	2500      	movs	r5, #0
 80166d4:	462e      	mov	r6, r5
 80166d6:	9509      	str	r5, [sp, #36]	; 0x24
 80166d8:	9507      	str	r5, [sp, #28]
 80166da:	2322      	movs	r3, #34	; 0x22
 80166dc:	f04f 0a00 	mov.w	sl, #0
 80166e0:	f04f 0b00 	mov.w	fp, #0
 80166e4:	6023      	str	r3, [r4, #0]
 80166e6:	e789      	b.n	80165fc <_strtod_l+0x4a4>
 80166e8:	0801f59d 	.word	0x0801f59d
 80166ec:	0801f5dc 	.word	0x0801f5dc
 80166f0:	0801f595 	.word	0x0801f595
 80166f4:	0801f71c 	.word	0x0801f71c
 80166f8:	0801f9f3 	.word	0x0801f9f3
 80166fc:	0801f8b8 	.word	0x0801f8b8
 8016700:	0801f890 	.word	0x0801f890
 8016704:	7ff00000 	.word	0x7ff00000
 8016708:	7ca00000 	.word	0x7ca00000
 801670c:	7fefffff 	.word	0x7fefffff
 8016710:	f018 0310 	ands.w	r3, r8, #16
 8016714:	bf18      	it	ne
 8016716:	236a      	movne	r3, #106	; 0x6a
 8016718:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 8016ad0 <_strtod_l+0x978>
 801671c:	9304      	str	r3, [sp, #16]
 801671e:	4650      	mov	r0, sl
 8016720:	4659      	mov	r1, fp
 8016722:	2300      	movs	r3, #0
 8016724:	f018 0f01 	tst.w	r8, #1
 8016728:	d004      	beq.n	8016734 <_strtod_l+0x5dc>
 801672a:	e9d9 2300 	ldrd	r2, r3, [r9]
 801672e:	f7e9 ff93 	bl	8000658 <__aeabi_dmul>
 8016732:	2301      	movs	r3, #1
 8016734:	ea5f 0868 	movs.w	r8, r8, asr #1
 8016738:	f109 0908 	add.w	r9, r9, #8
 801673c:	d1f2      	bne.n	8016724 <_strtod_l+0x5cc>
 801673e:	b10b      	cbz	r3, 8016744 <_strtod_l+0x5ec>
 8016740:	4682      	mov	sl, r0
 8016742:	468b      	mov	fp, r1
 8016744:	9b04      	ldr	r3, [sp, #16]
 8016746:	b1bb      	cbz	r3, 8016778 <_strtod_l+0x620>
 8016748:	f3cb 530a 	ubfx	r3, fp, #20, #11
 801674c:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8016750:	2b00      	cmp	r3, #0
 8016752:	4659      	mov	r1, fp
 8016754:	dd10      	ble.n	8016778 <_strtod_l+0x620>
 8016756:	2b1f      	cmp	r3, #31
 8016758:	f340 8128 	ble.w	80169ac <_strtod_l+0x854>
 801675c:	2b34      	cmp	r3, #52	; 0x34
 801675e:	bfde      	ittt	le
 8016760:	3b20      	suble	r3, #32
 8016762:	f04f 32ff 	movle.w	r2, #4294967295
 8016766:	fa02 f303 	lslle.w	r3, r2, r3
 801676a:	f04f 0a00 	mov.w	sl, #0
 801676e:	bfcc      	ite	gt
 8016770:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8016774:	ea03 0b01 	andle.w	fp, r3, r1
 8016778:	2200      	movs	r2, #0
 801677a:	2300      	movs	r3, #0
 801677c:	4650      	mov	r0, sl
 801677e:	4659      	mov	r1, fp
 8016780:	f7ea f9d2 	bl	8000b28 <__aeabi_dcmpeq>
 8016784:	2800      	cmp	r0, #0
 8016786:	d1a4      	bne.n	80166d2 <_strtod_l+0x57a>
 8016788:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801678a:	9300      	str	r3, [sp, #0]
 801678c:	990a      	ldr	r1, [sp, #40]	; 0x28
 801678e:	462b      	mov	r3, r5
 8016790:	463a      	mov	r2, r7
 8016792:	4620      	mov	r0, r4
 8016794:	f001 fe80 	bl	8018498 <__s2b>
 8016798:	9009      	str	r0, [sp, #36]	; 0x24
 801679a:	2800      	cmp	r0, #0
 801679c:	f43f af24 	beq.w	80165e8 <_strtod_l+0x490>
 80167a0:	9b07      	ldr	r3, [sp, #28]
 80167a2:	1b9e      	subs	r6, r3, r6
 80167a4:	9b08      	ldr	r3, [sp, #32]
 80167a6:	2b00      	cmp	r3, #0
 80167a8:	bfb4      	ite	lt
 80167aa:	4633      	movlt	r3, r6
 80167ac:	2300      	movge	r3, #0
 80167ae:	9310      	str	r3, [sp, #64]	; 0x40
 80167b0:	9b08      	ldr	r3, [sp, #32]
 80167b2:	2500      	movs	r5, #0
 80167b4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80167b8:	9318      	str	r3, [sp, #96]	; 0x60
 80167ba:	462e      	mov	r6, r5
 80167bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80167be:	4620      	mov	r0, r4
 80167c0:	6859      	ldr	r1, [r3, #4]
 80167c2:	f001 fdbd 	bl	8018340 <_Balloc>
 80167c6:	9007      	str	r0, [sp, #28]
 80167c8:	2800      	cmp	r0, #0
 80167ca:	f43f af11 	beq.w	80165f0 <_strtod_l+0x498>
 80167ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80167d0:	691a      	ldr	r2, [r3, #16]
 80167d2:	3202      	adds	r2, #2
 80167d4:	f103 010c 	add.w	r1, r3, #12
 80167d8:	0092      	lsls	r2, r2, #2
 80167da:	300c      	adds	r0, #12
 80167dc:	f7fe fc64 	bl	80150a8 <memcpy>
 80167e0:	ec4b ab10 	vmov	d0, sl, fp
 80167e4:	aa20      	add	r2, sp, #128	; 0x80
 80167e6:	a91f      	add	r1, sp, #124	; 0x7c
 80167e8:	4620      	mov	r0, r4
 80167ea:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 80167ee:	f002 f98f 	bl	8018b10 <__d2b>
 80167f2:	901e      	str	r0, [sp, #120]	; 0x78
 80167f4:	2800      	cmp	r0, #0
 80167f6:	f43f aefb 	beq.w	80165f0 <_strtod_l+0x498>
 80167fa:	2101      	movs	r1, #1
 80167fc:	4620      	mov	r0, r4
 80167fe:	f001 fee5 	bl	80185cc <__i2b>
 8016802:	4606      	mov	r6, r0
 8016804:	2800      	cmp	r0, #0
 8016806:	f43f aef3 	beq.w	80165f0 <_strtod_l+0x498>
 801680a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801680c:	9904      	ldr	r1, [sp, #16]
 801680e:	2b00      	cmp	r3, #0
 8016810:	bfab      	itete	ge
 8016812:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 8016814:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 8016816:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 8016818:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 801681c:	bfac      	ite	ge
 801681e:	eb03 0902 	addge.w	r9, r3, r2
 8016822:	1ad7      	sublt	r7, r2, r3
 8016824:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8016826:	eba3 0801 	sub.w	r8, r3, r1
 801682a:	4490      	add	r8, r2
 801682c:	4ba3      	ldr	r3, [pc, #652]	; (8016abc <_strtod_l+0x964>)
 801682e:	f108 38ff 	add.w	r8, r8, #4294967295
 8016832:	4598      	cmp	r8, r3
 8016834:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8016838:	f280 80cc 	bge.w	80169d4 <_strtod_l+0x87c>
 801683c:	eba3 0308 	sub.w	r3, r3, r8
 8016840:	2b1f      	cmp	r3, #31
 8016842:	eba2 0203 	sub.w	r2, r2, r3
 8016846:	f04f 0101 	mov.w	r1, #1
 801684a:	f300 80b6 	bgt.w	80169ba <_strtod_l+0x862>
 801684e:	fa01 f303 	lsl.w	r3, r1, r3
 8016852:	9311      	str	r3, [sp, #68]	; 0x44
 8016854:	2300      	movs	r3, #0
 8016856:	930c      	str	r3, [sp, #48]	; 0x30
 8016858:	eb09 0802 	add.w	r8, r9, r2
 801685c:	9b04      	ldr	r3, [sp, #16]
 801685e:	45c1      	cmp	r9, r8
 8016860:	4417      	add	r7, r2
 8016862:	441f      	add	r7, r3
 8016864:	464b      	mov	r3, r9
 8016866:	bfa8      	it	ge
 8016868:	4643      	movge	r3, r8
 801686a:	42bb      	cmp	r3, r7
 801686c:	bfa8      	it	ge
 801686e:	463b      	movge	r3, r7
 8016870:	2b00      	cmp	r3, #0
 8016872:	bfc2      	ittt	gt
 8016874:	eba8 0803 	subgt.w	r8, r8, r3
 8016878:	1aff      	subgt	r7, r7, r3
 801687a:	eba9 0903 	subgt.w	r9, r9, r3
 801687e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8016880:	2b00      	cmp	r3, #0
 8016882:	dd17      	ble.n	80168b4 <_strtod_l+0x75c>
 8016884:	4631      	mov	r1, r6
 8016886:	461a      	mov	r2, r3
 8016888:	4620      	mov	r0, r4
 801688a:	f001 ff5b 	bl	8018744 <__pow5mult>
 801688e:	4606      	mov	r6, r0
 8016890:	2800      	cmp	r0, #0
 8016892:	f43f aead 	beq.w	80165f0 <_strtod_l+0x498>
 8016896:	4601      	mov	r1, r0
 8016898:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 801689a:	4620      	mov	r0, r4
 801689c:	f001 feac 	bl	80185f8 <__multiply>
 80168a0:	900f      	str	r0, [sp, #60]	; 0x3c
 80168a2:	2800      	cmp	r0, #0
 80168a4:	f43f aea4 	beq.w	80165f0 <_strtod_l+0x498>
 80168a8:	991e      	ldr	r1, [sp, #120]	; 0x78
 80168aa:	4620      	mov	r0, r4
 80168ac:	f001 fd88 	bl	80183c0 <_Bfree>
 80168b0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80168b2:	931e      	str	r3, [sp, #120]	; 0x78
 80168b4:	f1b8 0f00 	cmp.w	r8, #0
 80168b8:	f300 8091 	bgt.w	80169de <_strtod_l+0x886>
 80168bc:	9b08      	ldr	r3, [sp, #32]
 80168be:	2b00      	cmp	r3, #0
 80168c0:	dd08      	ble.n	80168d4 <_strtod_l+0x77c>
 80168c2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80168c4:	9907      	ldr	r1, [sp, #28]
 80168c6:	4620      	mov	r0, r4
 80168c8:	f001 ff3c 	bl	8018744 <__pow5mult>
 80168cc:	9007      	str	r0, [sp, #28]
 80168ce:	2800      	cmp	r0, #0
 80168d0:	f43f ae8e 	beq.w	80165f0 <_strtod_l+0x498>
 80168d4:	2f00      	cmp	r7, #0
 80168d6:	dd08      	ble.n	80168ea <_strtod_l+0x792>
 80168d8:	9907      	ldr	r1, [sp, #28]
 80168da:	463a      	mov	r2, r7
 80168dc:	4620      	mov	r0, r4
 80168de:	f001 ff8b 	bl	80187f8 <__lshift>
 80168e2:	9007      	str	r0, [sp, #28]
 80168e4:	2800      	cmp	r0, #0
 80168e6:	f43f ae83 	beq.w	80165f0 <_strtod_l+0x498>
 80168ea:	f1b9 0f00 	cmp.w	r9, #0
 80168ee:	dd08      	ble.n	8016902 <_strtod_l+0x7aa>
 80168f0:	4631      	mov	r1, r6
 80168f2:	464a      	mov	r2, r9
 80168f4:	4620      	mov	r0, r4
 80168f6:	f001 ff7f 	bl	80187f8 <__lshift>
 80168fa:	4606      	mov	r6, r0
 80168fc:	2800      	cmp	r0, #0
 80168fe:	f43f ae77 	beq.w	80165f0 <_strtod_l+0x498>
 8016902:	9a07      	ldr	r2, [sp, #28]
 8016904:	991e      	ldr	r1, [sp, #120]	; 0x78
 8016906:	4620      	mov	r0, r4
 8016908:	f001 fffe 	bl	8018908 <__mdiff>
 801690c:	4605      	mov	r5, r0
 801690e:	2800      	cmp	r0, #0
 8016910:	f43f ae6e 	beq.w	80165f0 <_strtod_l+0x498>
 8016914:	68c3      	ldr	r3, [r0, #12]
 8016916:	930f      	str	r3, [sp, #60]	; 0x3c
 8016918:	2300      	movs	r3, #0
 801691a:	60c3      	str	r3, [r0, #12]
 801691c:	4631      	mov	r1, r6
 801691e:	f001 ffd7 	bl	80188d0 <__mcmp>
 8016922:	2800      	cmp	r0, #0
 8016924:	da65      	bge.n	80169f2 <_strtod_l+0x89a>
 8016926:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016928:	ea53 030a 	orrs.w	r3, r3, sl
 801692c:	f040 8087 	bne.w	8016a3e <_strtod_l+0x8e6>
 8016930:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8016934:	2b00      	cmp	r3, #0
 8016936:	f040 8082 	bne.w	8016a3e <_strtod_l+0x8e6>
 801693a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801693e:	0d1b      	lsrs	r3, r3, #20
 8016940:	051b      	lsls	r3, r3, #20
 8016942:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8016946:	d97a      	bls.n	8016a3e <_strtod_l+0x8e6>
 8016948:	696b      	ldr	r3, [r5, #20]
 801694a:	b913      	cbnz	r3, 8016952 <_strtod_l+0x7fa>
 801694c:	692b      	ldr	r3, [r5, #16]
 801694e:	2b01      	cmp	r3, #1
 8016950:	dd75      	ble.n	8016a3e <_strtod_l+0x8e6>
 8016952:	4629      	mov	r1, r5
 8016954:	2201      	movs	r2, #1
 8016956:	4620      	mov	r0, r4
 8016958:	f001 ff4e 	bl	80187f8 <__lshift>
 801695c:	4631      	mov	r1, r6
 801695e:	4605      	mov	r5, r0
 8016960:	f001 ffb6 	bl	80188d0 <__mcmp>
 8016964:	2800      	cmp	r0, #0
 8016966:	dd6a      	ble.n	8016a3e <_strtod_l+0x8e6>
 8016968:	9904      	ldr	r1, [sp, #16]
 801696a:	4a55      	ldr	r2, [pc, #340]	; (8016ac0 <_strtod_l+0x968>)
 801696c:	465b      	mov	r3, fp
 801696e:	2900      	cmp	r1, #0
 8016970:	f000 8085 	beq.w	8016a7e <_strtod_l+0x926>
 8016974:	ea02 010b 	and.w	r1, r2, fp
 8016978:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 801697c:	dc7f      	bgt.n	8016a7e <_strtod_l+0x926>
 801697e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8016982:	f77f aeaa 	ble.w	80166da <_strtod_l+0x582>
 8016986:	4a4f      	ldr	r2, [pc, #316]	; (8016ac4 <_strtod_l+0x96c>)
 8016988:	2300      	movs	r3, #0
 801698a:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 801698e:	4650      	mov	r0, sl
 8016990:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 8016994:	4659      	mov	r1, fp
 8016996:	f7e9 fe5f 	bl	8000658 <__aeabi_dmul>
 801699a:	460b      	mov	r3, r1
 801699c:	4303      	orrs	r3, r0
 801699e:	bf08      	it	eq
 80169a0:	2322      	moveq	r3, #34	; 0x22
 80169a2:	4682      	mov	sl, r0
 80169a4:	468b      	mov	fp, r1
 80169a6:	bf08      	it	eq
 80169a8:	6023      	streq	r3, [r4, #0]
 80169aa:	e62b      	b.n	8016604 <_strtod_l+0x4ac>
 80169ac:	f04f 32ff 	mov.w	r2, #4294967295
 80169b0:	fa02 f303 	lsl.w	r3, r2, r3
 80169b4:	ea03 0a0a 	and.w	sl, r3, sl
 80169b8:	e6de      	b.n	8016778 <_strtod_l+0x620>
 80169ba:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 80169be:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 80169c2:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 80169c6:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 80169ca:	fa01 f308 	lsl.w	r3, r1, r8
 80169ce:	930c      	str	r3, [sp, #48]	; 0x30
 80169d0:	9111      	str	r1, [sp, #68]	; 0x44
 80169d2:	e741      	b.n	8016858 <_strtod_l+0x700>
 80169d4:	2300      	movs	r3, #0
 80169d6:	930c      	str	r3, [sp, #48]	; 0x30
 80169d8:	2301      	movs	r3, #1
 80169da:	9311      	str	r3, [sp, #68]	; 0x44
 80169dc:	e73c      	b.n	8016858 <_strtod_l+0x700>
 80169de:	991e      	ldr	r1, [sp, #120]	; 0x78
 80169e0:	4642      	mov	r2, r8
 80169e2:	4620      	mov	r0, r4
 80169e4:	f001 ff08 	bl	80187f8 <__lshift>
 80169e8:	901e      	str	r0, [sp, #120]	; 0x78
 80169ea:	2800      	cmp	r0, #0
 80169ec:	f47f af66 	bne.w	80168bc <_strtod_l+0x764>
 80169f0:	e5fe      	b.n	80165f0 <_strtod_l+0x498>
 80169f2:	465f      	mov	r7, fp
 80169f4:	d16e      	bne.n	8016ad4 <_strtod_l+0x97c>
 80169f6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80169f8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80169fc:	b342      	cbz	r2, 8016a50 <_strtod_l+0x8f8>
 80169fe:	4a32      	ldr	r2, [pc, #200]	; (8016ac8 <_strtod_l+0x970>)
 8016a00:	4293      	cmp	r3, r2
 8016a02:	d128      	bne.n	8016a56 <_strtod_l+0x8fe>
 8016a04:	9b04      	ldr	r3, [sp, #16]
 8016a06:	4650      	mov	r0, sl
 8016a08:	b1eb      	cbz	r3, 8016a46 <_strtod_l+0x8ee>
 8016a0a:	4a2d      	ldr	r2, [pc, #180]	; (8016ac0 <_strtod_l+0x968>)
 8016a0c:	403a      	ands	r2, r7
 8016a0e:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8016a12:	f04f 31ff 	mov.w	r1, #4294967295
 8016a16:	d819      	bhi.n	8016a4c <_strtod_l+0x8f4>
 8016a18:	0d12      	lsrs	r2, r2, #20
 8016a1a:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8016a1e:	fa01 f303 	lsl.w	r3, r1, r3
 8016a22:	4298      	cmp	r0, r3
 8016a24:	d117      	bne.n	8016a56 <_strtod_l+0x8fe>
 8016a26:	4b29      	ldr	r3, [pc, #164]	; (8016acc <_strtod_l+0x974>)
 8016a28:	429f      	cmp	r7, r3
 8016a2a:	d102      	bne.n	8016a32 <_strtod_l+0x8da>
 8016a2c:	3001      	adds	r0, #1
 8016a2e:	f43f addf 	beq.w	80165f0 <_strtod_l+0x498>
 8016a32:	4b23      	ldr	r3, [pc, #140]	; (8016ac0 <_strtod_l+0x968>)
 8016a34:	403b      	ands	r3, r7
 8016a36:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8016a3a:	f04f 0a00 	mov.w	sl, #0
 8016a3e:	9b04      	ldr	r3, [sp, #16]
 8016a40:	2b00      	cmp	r3, #0
 8016a42:	d1a0      	bne.n	8016986 <_strtod_l+0x82e>
 8016a44:	e5de      	b.n	8016604 <_strtod_l+0x4ac>
 8016a46:	f04f 33ff 	mov.w	r3, #4294967295
 8016a4a:	e7ea      	b.n	8016a22 <_strtod_l+0x8ca>
 8016a4c:	460b      	mov	r3, r1
 8016a4e:	e7e8      	b.n	8016a22 <_strtod_l+0x8ca>
 8016a50:	ea53 030a 	orrs.w	r3, r3, sl
 8016a54:	d088      	beq.n	8016968 <_strtod_l+0x810>
 8016a56:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016a58:	b1db      	cbz	r3, 8016a92 <_strtod_l+0x93a>
 8016a5a:	423b      	tst	r3, r7
 8016a5c:	d0ef      	beq.n	8016a3e <_strtod_l+0x8e6>
 8016a5e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016a60:	9a04      	ldr	r2, [sp, #16]
 8016a62:	4650      	mov	r0, sl
 8016a64:	4659      	mov	r1, fp
 8016a66:	b1c3      	cbz	r3, 8016a9a <_strtod_l+0x942>
 8016a68:	f7ff fb58 	bl	801611c <sulp>
 8016a6c:	4602      	mov	r2, r0
 8016a6e:	460b      	mov	r3, r1
 8016a70:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8016a74:	f7e9 fc3a 	bl	80002ec <__adddf3>
 8016a78:	4682      	mov	sl, r0
 8016a7a:	468b      	mov	fp, r1
 8016a7c:	e7df      	b.n	8016a3e <_strtod_l+0x8e6>
 8016a7e:	4013      	ands	r3, r2
 8016a80:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8016a84:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8016a88:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8016a8c:	f04f 3aff 	mov.w	sl, #4294967295
 8016a90:	e7d5      	b.n	8016a3e <_strtod_l+0x8e6>
 8016a92:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8016a94:	ea13 0f0a 	tst.w	r3, sl
 8016a98:	e7e0      	b.n	8016a5c <_strtod_l+0x904>
 8016a9a:	f7ff fb3f 	bl	801611c <sulp>
 8016a9e:	4602      	mov	r2, r0
 8016aa0:	460b      	mov	r3, r1
 8016aa2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8016aa6:	f7e9 fc1f 	bl	80002e8 <__aeabi_dsub>
 8016aaa:	2200      	movs	r2, #0
 8016aac:	2300      	movs	r3, #0
 8016aae:	4682      	mov	sl, r0
 8016ab0:	468b      	mov	fp, r1
 8016ab2:	f7ea f839 	bl	8000b28 <__aeabi_dcmpeq>
 8016ab6:	2800      	cmp	r0, #0
 8016ab8:	d0c1      	beq.n	8016a3e <_strtod_l+0x8e6>
 8016aba:	e60e      	b.n	80166da <_strtod_l+0x582>
 8016abc:	fffffc02 	.word	0xfffffc02
 8016ac0:	7ff00000 	.word	0x7ff00000
 8016ac4:	39500000 	.word	0x39500000
 8016ac8:	000fffff 	.word	0x000fffff
 8016acc:	7fefffff 	.word	0x7fefffff
 8016ad0:	0801f5f0 	.word	0x0801f5f0
 8016ad4:	4631      	mov	r1, r6
 8016ad6:	4628      	mov	r0, r5
 8016ad8:	f002 f876 	bl	8018bc8 <__ratio>
 8016adc:	ec59 8b10 	vmov	r8, r9, d0
 8016ae0:	ee10 0a10 	vmov	r0, s0
 8016ae4:	2200      	movs	r2, #0
 8016ae6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8016aea:	4649      	mov	r1, r9
 8016aec:	f7ea f830 	bl	8000b50 <__aeabi_dcmple>
 8016af0:	2800      	cmp	r0, #0
 8016af2:	d07c      	beq.n	8016bee <_strtod_l+0xa96>
 8016af4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016af6:	2b00      	cmp	r3, #0
 8016af8:	d04c      	beq.n	8016b94 <_strtod_l+0xa3c>
 8016afa:	4b95      	ldr	r3, [pc, #596]	; (8016d50 <_strtod_l+0xbf8>)
 8016afc:	2200      	movs	r2, #0
 8016afe:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8016b02:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8016d50 <_strtod_l+0xbf8>
 8016b06:	f04f 0800 	mov.w	r8, #0
 8016b0a:	4b92      	ldr	r3, [pc, #584]	; (8016d54 <_strtod_l+0xbfc>)
 8016b0c:	403b      	ands	r3, r7
 8016b0e:	9311      	str	r3, [sp, #68]	; 0x44
 8016b10:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8016b12:	4b91      	ldr	r3, [pc, #580]	; (8016d58 <_strtod_l+0xc00>)
 8016b14:	429a      	cmp	r2, r3
 8016b16:	f040 80b2 	bne.w	8016c7e <_strtod_l+0xb26>
 8016b1a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8016b1e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8016b22:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8016b26:	ec4b ab10 	vmov	d0, sl, fp
 8016b2a:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 8016b2e:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8016b32:	f001 ff71 	bl	8018a18 <__ulp>
 8016b36:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8016b3a:	ec53 2b10 	vmov	r2, r3, d0
 8016b3e:	f7e9 fd8b 	bl	8000658 <__aeabi_dmul>
 8016b42:	4652      	mov	r2, sl
 8016b44:	465b      	mov	r3, fp
 8016b46:	f7e9 fbd1 	bl	80002ec <__adddf3>
 8016b4a:	460b      	mov	r3, r1
 8016b4c:	4981      	ldr	r1, [pc, #516]	; (8016d54 <_strtod_l+0xbfc>)
 8016b4e:	4a83      	ldr	r2, [pc, #524]	; (8016d5c <_strtod_l+0xc04>)
 8016b50:	4019      	ands	r1, r3
 8016b52:	4291      	cmp	r1, r2
 8016b54:	4682      	mov	sl, r0
 8016b56:	d95e      	bls.n	8016c16 <_strtod_l+0xabe>
 8016b58:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016b5a:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8016b5e:	4293      	cmp	r3, r2
 8016b60:	d103      	bne.n	8016b6a <_strtod_l+0xa12>
 8016b62:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016b64:	3301      	adds	r3, #1
 8016b66:	f43f ad43 	beq.w	80165f0 <_strtod_l+0x498>
 8016b6a:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 8016d68 <_strtod_l+0xc10>
 8016b6e:	f04f 3aff 	mov.w	sl, #4294967295
 8016b72:	991e      	ldr	r1, [sp, #120]	; 0x78
 8016b74:	4620      	mov	r0, r4
 8016b76:	f001 fc23 	bl	80183c0 <_Bfree>
 8016b7a:	9907      	ldr	r1, [sp, #28]
 8016b7c:	4620      	mov	r0, r4
 8016b7e:	f001 fc1f 	bl	80183c0 <_Bfree>
 8016b82:	4631      	mov	r1, r6
 8016b84:	4620      	mov	r0, r4
 8016b86:	f001 fc1b 	bl	80183c0 <_Bfree>
 8016b8a:	4629      	mov	r1, r5
 8016b8c:	4620      	mov	r0, r4
 8016b8e:	f001 fc17 	bl	80183c0 <_Bfree>
 8016b92:	e613      	b.n	80167bc <_strtod_l+0x664>
 8016b94:	f1ba 0f00 	cmp.w	sl, #0
 8016b98:	d11b      	bne.n	8016bd2 <_strtod_l+0xa7a>
 8016b9a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8016b9e:	b9f3      	cbnz	r3, 8016bde <_strtod_l+0xa86>
 8016ba0:	4b6b      	ldr	r3, [pc, #428]	; (8016d50 <_strtod_l+0xbf8>)
 8016ba2:	2200      	movs	r2, #0
 8016ba4:	4640      	mov	r0, r8
 8016ba6:	4649      	mov	r1, r9
 8016ba8:	f7e9 ffc8 	bl	8000b3c <__aeabi_dcmplt>
 8016bac:	b9d0      	cbnz	r0, 8016be4 <_strtod_l+0xa8c>
 8016bae:	4640      	mov	r0, r8
 8016bb0:	4649      	mov	r1, r9
 8016bb2:	4b6b      	ldr	r3, [pc, #428]	; (8016d60 <_strtod_l+0xc08>)
 8016bb4:	2200      	movs	r2, #0
 8016bb6:	f7e9 fd4f 	bl	8000658 <__aeabi_dmul>
 8016bba:	4680      	mov	r8, r0
 8016bbc:	4689      	mov	r9, r1
 8016bbe:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8016bc2:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 8016bc6:	931b      	str	r3, [sp, #108]	; 0x6c
 8016bc8:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 8016bcc:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8016bd0:	e79b      	b.n	8016b0a <_strtod_l+0x9b2>
 8016bd2:	f1ba 0f01 	cmp.w	sl, #1
 8016bd6:	d102      	bne.n	8016bde <_strtod_l+0xa86>
 8016bd8:	2f00      	cmp	r7, #0
 8016bda:	f43f ad7e 	beq.w	80166da <_strtod_l+0x582>
 8016bde:	4b61      	ldr	r3, [pc, #388]	; (8016d64 <_strtod_l+0xc0c>)
 8016be0:	2200      	movs	r2, #0
 8016be2:	e78c      	b.n	8016afe <_strtod_l+0x9a6>
 8016be4:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8016d60 <_strtod_l+0xc08>
 8016be8:	f04f 0800 	mov.w	r8, #0
 8016bec:	e7e7      	b.n	8016bbe <_strtod_l+0xa66>
 8016bee:	4b5c      	ldr	r3, [pc, #368]	; (8016d60 <_strtod_l+0xc08>)
 8016bf0:	4640      	mov	r0, r8
 8016bf2:	4649      	mov	r1, r9
 8016bf4:	2200      	movs	r2, #0
 8016bf6:	f7e9 fd2f 	bl	8000658 <__aeabi_dmul>
 8016bfa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016bfc:	4680      	mov	r8, r0
 8016bfe:	4689      	mov	r9, r1
 8016c00:	b933      	cbnz	r3, 8016c10 <_strtod_l+0xab8>
 8016c02:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8016c06:	9012      	str	r0, [sp, #72]	; 0x48
 8016c08:	9313      	str	r3, [sp, #76]	; 0x4c
 8016c0a:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8016c0e:	e7dd      	b.n	8016bcc <_strtod_l+0xa74>
 8016c10:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 8016c14:	e7f9      	b.n	8016c0a <_strtod_l+0xab2>
 8016c16:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8016c1a:	9b04      	ldr	r3, [sp, #16]
 8016c1c:	2b00      	cmp	r3, #0
 8016c1e:	d1a8      	bne.n	8016b72 <_strtod_l+0xa1a>
 8016c20:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8016c24:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8016c26:	0d1b      	lsrs	r3, r3, #20
 8016c28:	051b      	lsls	r3, r3, #20
 8016c2a:	429a      	cmp	r2, r3
 8016c2c:	d1a1      	bne.n	8016b72 <_strtod_l+0xa1a>
 8016c2e:	4640      	mov	r0, r8
 8016c30:	4649      	mov	r1, r9
 8016c32:	f7ea f8c1 	bl	8000db8 <__aeabi_d2lz>
 8016c36:	f7e9 fce1 	bl	80005fc <__aeabi_l2d>
 8016c3a:	4602      	mov	r2, r0
 8016c3c:	460b      	mov	r3, r1
 8016c3e:	4640      	mov	r0, r8
 8016c40:	4649      	mov	r1, r9
 8016c42:	f7e9 fb51 	bl	80002e8 <__aeabi_dsub>
 8016c46:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8016c48:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8016c4c:	ea43 030a 	orr.w	r3, r3, sl
 8016c50:	4313      	orrs	r3, r2
 8016c52:	4680      	mov	r8, r0
 8016c54:	4689      	mov	r9, r1
 8016c56:	d053      	beq.n	8016d00 <_strtod_l+0xba8>
 8016c58:	a335      	add	r3, pc, #212	; (adr r3, 8016d30 <_strtod_l+0xbd8>)
 8016c5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016c5e:	f7e9 ff6d 	bl	8000b3c <__aeabi_dcmplt>
 8016c62:	2800      	cmp	r0, #0
 8016c64:	f47f acce 	bne.w	8016604 <_strtod_l+0x4ac>
 8016c68:	a333      	add	r3, pc, #204	; (adr r3, 8016d38 <_strtod_l+0xbe0>)
 8016c6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016c6e:	4640      	mov	r0, r8
 8016c70:	4649      	mov	r1, r9
 8016c72:	f7e9 ff81 	bl	8000b78 <__aeabi_dcmpgt>
 8016c76:	2800      	cmp	r0, #0
 8016c78:	f43f af7b 	beq.w	8016b72 <_strtod_l+0xa1a>
 8016c7c:	e4c2      	b.n	8016604 <_strtod_l+0x4ac>
 8016c7e:	9b04      	ldr	r3, [sp, #16]
 8016c80:	b333      	cbz	r3, 8016cd0 <_strtod_l+0xb78>
 8016c82:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8016c84:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8016c88:	d822      	bhi.n	8016cd0 <_strtod_l+0xb78>
 8016c8a:	a32d      	add	r3, pc, #180	; (adr r3, 8016d40 <_strtod_l+0xbe8>)
 8016c8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016c90:	4640      	mov	r0, r8
 8016c92:	4649      	mov	r1, r9
 8016c94:	f7e9 ff5c 	bl	8000b50 <__aeabi_dcmple>
 8016c98:	b1a0      	cbz	r0, 8016cc4 <_strtod_l+0xb6c>
 8016c9a:	4649      	mov	r1, r9
 8016c9c:	4640      	mov	r0, r8
 8016c9e:	f7e9 ffb3 	bl	8000c08 <__aeabi_d2uiz>
 8016ca2:	2801      	cmp	r0, #1
 8016ca4:	bf38      	it	cc
 8016ca6:	2001      	movcc	r0, #1
 8016ca8:	f7e9 fc5c 	bl	8000564 <__aeabi_ui2d>
 8016cac:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016cae:	4680      	mov	r8, r0
 8016cb0:	4689      	mov	r9, r1
 8016cb2:	bb13      	cbnz	r3, 8016cfa <_strtod_l+0xba2>
 8016cb4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8016cb8:	9014      	str	r0, [sp, #80]	; 0x50
 8016cba:	9315      	str	r3, [sp, #84]	; 0x54
 8016cbc:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8016cc0:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8016cc4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016cc6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8016cc8:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8016ccc:	1a9b      	subs	r3, r3, r2
 8016cce:	930d      	str	r3, [sp, #52]	; 0x34
 8016cd0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8016cd4:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8016cd8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8016cdc:	f001 fe9c 	bl	8018a18 <__ulp>
 8016ce0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8016ce4:	ec53 2b10 	vmov	r2, r3, d0
 8016ce8:	f7e9 fcb6 	bl	8000658 <__aeabi_dmul>
 8016cec:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8016cf0:	f7e9 fafc 	bl	80002ec <__adddf3>
 8016cf4:	4682      	mov	sl, r0
 8016cf6:	468b      	mov	fp, r1
 8016cf8:	e78f      	b.n	8016c1a <_strtod_l+0xac2>
 8016cfa:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 8016cfe:	e7dd      	b.n	8016cbc <_strtod_l+0xb64>
 8016d00:	a311      	add	r3, pc, #68	; (adr r3, 8016d48 <_strtod_l+0xbf0>)
 8016d02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016d06:	f7e9 ff19 	bl	8000b3c <__aeabi_dcmplt>
 8016d0a:	e7b4      	b.n	8016c76 <_strtod_l+0xb1e>
 8016d0c:	2300      	movs	r3, #0
 8016d0e:	930e      	str	r3, [sp, #56]	; 0x38
 8016d10:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8016d12:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8016d14:	6013      	str	r3, [r2, #0]
 8016d16:	f7ff ba65 	b.w	80161e4 <_strtod_l+0x8c>
 8016d1a:	2b65      	cmp	r3, #101	; 0x65
 8016d1c:	f43f ab5d 	beq.w	80163da <_strtod_l+0x282>
 8016d20:	2b45      	cmp	r3, #69	; 0x45
 8016d22:	f43f ab5a 	beq.w	80163da <_strtod_l+0x282>
 8016d26:	2201      	movs	r2, #1
 8016d28:	f7ff bb92 	b.w	8016450 <_strtod_l+0x2f8>
 8016d2c:	f3af 8000 	nop.w
 8016d30:	94a03595 	.word	0x94a03595
 8016d34:	3fdfffff 	.word	0x3fdfffff
 8016d38:	35afe535 	.word	0x35afe535
 8016d3c:	3fe00000 	.word	0x3fe00000
 8016d40:	ffc00000 	.word	0xffc00000
 8016d44:	41dfffff 	.word	0x41dfffff
 8016d48:	94a03595 	.word	0x94a03595
 8016d4c:	3fcfffff 	.word	0x3fcfffff
 8016d50:	3ff00000 	.word	0x3ff00000
 8016d54:	7ff00000 	.word	0x7ff00000
 8016d58:	7fe00000 	.word	0x7fe00000
 8016d5c:	7c9fffff 	.word	0x7c9fffff
 8016d60:	3fe00000 	.word	0x3fe00000
 8016d64:	bff00000 	.word	0xbff00000
 8016d68:	7fefffff 	.word	0x7fefffff

08016d6c <_strtod_r>:
 8016d6c:	4b01      	ldr	r3, [pc, #4]	; (8016d74 <_strtod_r+0x8>)
 8016d6e:	f7ff b9f3 	b.w	8016158 <_strtod_l>
 8016d72:	bf00      	nop
 8016d74:	200001bc 	.word	0x200001bc

08016d78 <_strtol_l.isra.0>:
 8016d78:	2b01      	cmp	r3, #1
 8016d7a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016d7e:	d001      	beq.n	8016d84 <_strtol_l.isra.0+0xc>
 8016d80:	2b24      	cmp	r3, #36	; 0x24
 8016d82:	d906      	bls.n	8016d92 <_strtol_l.isra.0+0x1a>
 8016d84:	f7fe f950 	bl	8015028 <__errno>
 8016d88:	2316      	movs	r3, #22
 8016d8a:	6003      	str	r3, [r0, #0]
 8016d8c:	2000      	movs	r0, #0
 8016d8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016d92:	4f3a      	ldr	r7, [pc, #232]	; (8016e7c <_strtol_l.isra.0+0x104>)
 8016d94:	468e      	mov	lr, r1
 8016d96:	4676      	mov	r6, lr
 8016d98:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8016d9c:	5de5      	ldrb	r5, [r4, r7]
 8016d9e:	f015 0508 	ands.w	r5, r5, #8
 8016da2:	d1f8      	bne.n	8016d96 <_strtol_l.isra.0+0x1e>
 8016da4:	2c2d      	cmp	r4, #45	; 0x2d
 8016da6:	d134      	bne.n	8016e12 <_strtol_l.isra.0+0x9a>
 8016da8:	f89e 4000 	ldrb.w	r4, [lr]
 8016dac:	f04f 0801 	mov.w	r8, #1
 8016db0:	f106 0e02 	add.w	lr, r6, #2
 8016db4:	2b00      	cmp	r3, #0
 8016db6:	d05c      	beq.n	8016e72 <_strtol_l.isra.0+0xfa>
 8016db8:	2b10      	cmp	r3, #16
 8016dba:	d10c      	bne.n	8016dd6 <_strtol_l.isra.0+0x5e>
 8016dbc:	2c30      	cmp	r4, #48	; 0x30
 8016dbe:	d10a      	bne.n	8016dd6 <_strtol_l.isra.0+0x5e>
 8016dc0:	f89e 4000 	ldrb.w	r4, [lr]
 8016dc4:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8016dc8:	2c58      	cmp	r4, #88	; 0x58
 8016dca:	d14d      	bne.n	8016e68 <_strtol_l.isra.0+0xf0>
 8016dcc:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8016dd0:	2310      	movs	r3, #16
 8016dd2:	f10e 0e02 	add.w	lr, lr, #2
 8016dd6:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 8016dda:	f10c 3cff 	add.w	ip, ip, #4294967295
 8016dde:	2600      	movs	r6, #0
 8016de0:	fbbc f9f3 	udiv	r9, ip, r3
 8016de4:	4635      	mov	r5, r6
 8016de6:	fb03 ca19 	mls	sl, r3, r9, ip
 8016dea:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8016dee:	2f09      	cmp	r7, #9
 8016df0:	d818      	bhi.n	8016e24 <_strtol_l.isra.0+0xac>
 8016df2:	463c      	mov	r4, r7
 8016df4:	42a3      	cmp	r3, r4
 8016df6:	dd24      	ble.n	8016e42 <_strtol_l.isra.0+0xca>
 8016df8:	2e00      	cmp	r6, #0
 8016dfa:	db1f      	blt.n	8016e3c <_strtol_l.isra.0+0xc4>
 8016dfc:	45a9      	cmp	r9, r5
 8016dfe:	d31d      	bcc.n	8016e3c <_strtol_l.isra.0+0xc4>
 8016e00:	d101      	bne.n	8016e06 <_strtol_l.isra.0+0x8e>
 8016e02:	45a2      	cmp	sl, r4
 8016e04:	db1a      	blt.n	8016e3c <_strtol_l.isra.0+0xc4>
 8016e06:	fb05 4503 	mla	r5, r5, r3, r4
 8016e0a:	2601      	movs	r6, #1
 8016e0c:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8016e10:	e7eb      	b.n	8016dea <_strtol_l.isra.0+0x72>
 8016e12:	2c2b      	cmp	r4, #43	; 0x2b
 8016e14:	bf08      	it	eq
 8016e16:	f89e 4000 	ldrbeq.w	r4, [lr]
 8016e1a:	46a8      	mov	r8, r5
 8016e1c:	bf08      	it	eq
 8016e1e:	f106 0e02 	addeq.w	lr, r6, #2
 8016e22:	e7c7      	b.n	8016db4 <_strtol_l.isra.0+0x3c>
 8016e24:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8016e28:	2f19      	cmp	r7, #25
 8016e2a:	d801      	bhi.n	8016e30 <_strtol_l.isra.0+0xb8>
 8016e2c:	3c37      	subs	r4, #55	; 0x37
 8016e2e:	e7e1      	b.n	8016df4 <_strtol_l.isra.0+0x7c>
 8016e30:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8016e34:	2f19      	cmp	r7, #25
 8016e36:	d804      	bhi.n	8016e42 <_strtol_l.isra.0+0xca>
 8016e38:	3c57      	subs	r4, #87	; 0x57
 8016e3a:	e7db      	b.n	8016df4 <_strtol_l.isra.0+0x7c>
 8016e3c:	f04f 36ff 	mov.w	r6, #4294967295
 8016e40:	e7e4      	b.n	8016e0c <_strtol_l.isra.0+0x94>
 8016e42:	2e00      	cmp	r6, #0
 8016e44:	da05      	bge.n	8016e52 <_strtol_l.isra.0+0xda>
 8016e46:	2322      	movs	r3, #34	; 0x22
 8016e48:	6003      	str	r3, [r0, #0]
 8016e4a:	4665      	mov	r5, ip
 8016e4c:	b942      	cbnz	r2, 8016e60 <_strtol_l.isra.0+0xe8>
 8016e4e:	4628      	mov	r0, r5
 8016e50:	e79d      	b.n	8016d8e <_strtol_l.isra.0+0x16>
 8016e52:	f1b8 0f00 	cmp.w	r8, #0
 8016e56:	d000      	beq.n	8016e5a <_strtol_l.isra.0+0xe2>
 8016e58:	426d      	negs	r5, r5
 8016e5a:	2a00      	cmp	r2, #0
 8016e5c:	d0f7      	beq.n	8016e4e <_strtol_l.isra.0+0xd6>
 8016e5e:	b10e      	cbz	r6, 8016e64 <_strtol_l.isra.0+0xec>
 8016e60:	f10e 31ff 	add.w	r1, lr, #4294967295
 8016e64:	6011      	str	r1, [r2, #0]
 8016e66:	e7f2      	b.n	8016e4e <_strtol_l.isra.0+0xd6>
 8016e68:	2430      	movs	r4, #48	; 0x30
 8016e6a:	2b00      	cmp	r3, #0
 8016e6c:	d1b3      	bne.n	8016dd6 <_strtol_l.isra.0+0x5e>
 8016e6e:	2308      	movs	r3, #8
 8016e70:	e7b1      	b.n	8016dd6 <_strtol_l.isra.0+0x5e>
 8016e72:	2c30      	cmp	r4, #48	; 0x30
 8016e74:	d0a4      	beq.n	8016dc0 <_strtol_l.isra.0+0x48>
 8016e76:	230a      	movs	r3, #10
 8016e78:	e7ad      	b.n	8016dd6 <_strtol_l.isra.0+0x5e>
 8016e7a:	bf00      	nop
 8016e7c:	0801f619 	.word	0x0801f619

08016e80 <_strtol_r>:
 8016e80:	f7ff bf7a 	b.w	8016d78 <_strtol_l.isra.0>

08016e84 <_vsiprintf_r>:
 8016e84:	b500      	push	{lr}
 8016e86:	b09b      	sub	sp, #108	; 0x6c
 8016e88:	9100      	str	r1, [sp, #0]
 8016e8a:	9104      	str	r1, [sp, #16]
 8016e8c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8016e90:	9105      	str	r1, [sp, #20]
 8016e92:	9102      	str	r1, [sp, #8]
 8016e94:	4905      	ldr	r1, [pc, #20]	; (8016eac <_vsiprintf_r+0x28>)
 8016e96:	9103      	str	r1, [sp, #12]
 8016e98:	4669      	mov	r1, sp
 8016e9a:	f001 ff77 	bl	8018d8c <_svfiprintf_r>
 8016e9e:	9b00      	ldr	r3, [sp, #0]
 8016ea0:	2200      	movs	r2, #0
 8016ea2:	701a      	strb	r2, [r3, #0]
 8016ea4:	b01b      	add	sp, #108	; 0x6c
 8016ea6:	f85d fb04 	ldr.w	pc, [sp], #4
 8016eaa:	bf00      	nop
 8016eac:	ffff0208 	.word	0xffff0208

08016eb0 <vsiprintf>:
 8016eb0:	4613      	mov	r3, r2
 8016eb2:	460a      	mov	r2, r1
 8016eb4:	4601      	mov	r1, r0
 8016eb6:	4802      	ldr	r0, [pc, #8]	; (8016ec0 <vsiprintf+0x10>)
 8016eb8:	6800      	ldr	r0, [r0, #0]
 8016eba:	f7ff bfe3 	b.w	8016e84 <_vsiprintf_r>
 8016ebe:	bf00      	nop
 8016ec0:	20000154 	.word	0x20000154

08016ec4 <_write_r>:
 8016ec4:	b538      	push	{r3, r4, r5, lr}
 8016ec6:	4d07      	ldr	r5, [pc, #28]	; (8016ee4 <_write_r+0x20>)
 8016ec8:	4604      	mov	r4, r0
 8016eca:	4608      	mov	r0, r1
 8016ecc:	4611      	mov	r1, r2
 8016ece:	2200      	movs	r2, #0
 8016ed0:	602a      	str	r2, [r5, #0]
 8016ed2:	461a      	mov	r2, r3
 8016ed4:	f7ea fb88 	bl	80015e8 <_write>
 8016ed8:	1c43      	adds	r3, r0, #1
 8016eda:	d102      	bne.n	8016ee2 <_write_r+0x1e>
 8016edc:	682b      	ldr	r3, [r5, #0]
 8016ede:	b103      	cbz	r3, 8016ee2 <_write_r+0x1e>
 8016ee0:	6023      	str	r3, [r4, #0]
 8016ee2:	bd38      	pop	{r3, r4, r5, pc}
 8016ee4:	20005868 	.word	0x20005868

08016ee8 <_close_r>:
 8016ee8:	b538      	push	{r3, r4, r5, lr}
 8016eea:	4d06      	ldr	r5, [pc, #24]	; (8016f04 <_close_r+0x1c>)
 8016eec:	2300      	movs	r3, #0
 8016eee:	4604      	mov	r4, r0
 8016ef0:	4608      	mov	r0, r1
 8016ef2:	602b      	str	r3, [r5, #0]
 8016ef4:	f7ea fb94 	bl	8001620 <_close>
 8016ef8:	1c43      	adds	r3, r0, #1
 8016efa:	d102      	bne.n	8016f02 <_close_r+0x1a>
 8016efc:	682b      	ldr	r3, [r5, #0]
 8016efe:	b103      	cbz	r3, 8016f02 <_close_r+0x1a>
 8016f00:	6023      	str	r3, [r4, #0]
 8016f02:	bd38      	pop	{r3, r4, r5, pc}
 8016f04:	20005868 	.word	0x20005868

08016f08 <quorem>:
 8016f08:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016f0c:	6903      	ldr	r3, [r0, #16]
 8016f0e:	690c      	ldr	r4, [r1, #16]
 8016f10:	42a3      	cmp	r3, r4
 8016f12:	4607      	mov	r7, r0
 8016f14:	f2c0 8081 	blt.w	801701a <quorem+0x112>
 8016f18:	3c01      	subs	r4, #1
 8016f1a:	f101 0814 	add.w	r8, r1, #20
 8016f1e:	f100 0514 	add.w	r5, r0, #20
 8016f22:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8016f26:	9301      	str	r3, [sp, #4]
 8016f28:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8016f2c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8016f30:	3301      	adds	r3, #1
 8016f32:	429a      	cmp	r2, r3
 8016f34:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8016f38:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8016f3c:	fbb2 f6f3 	udiv	r6, r2, r3
 8016f40:	d331      	bcc.n	8016fa6 <quorem+0x9e>
 8016f42:	f04f 0e00 	mov.w	lr, #0
 8016f46:	4640      	mov	r0, r8
 8016f48:	46ac      	mov	ip, r5
 8016f4a:	46f2      	mov	sl, lr
 8016f4c:	f850 2b04 	ldr.w	r2, [r0], #4
 8016f50:	b293      	uxth	r3, r2
 8016f52:	fb06 e303 	mla	r3, r6, r3, lr
 8016f56:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8016f5a:	b29b      	uxth	r3, r3
 8016f5c:	ebaa 0303 	sub.w	r3, sl, r3
 8016f60:	0c12      	lsrs	r2, r2, #16
 8016f62:	f8dc a000 	ldr.w	sl, [ip]
 8016f66:	fb06 e202 	mla	r2, r6, r2, lr
 8016f6a:	fa13 f38a 	uxtah	r3, r3, sl
 8016f6e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8016f72:	fa1f fa82 	uxth.w	sl, r2
 8016f76:	f8dc 2000 	ldr.w	r2, [ip]
 8016f7a:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8016f7e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8016f82:	b29b      	uxth	r3, r3
 8016f84:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8016f88:	4581      	cmp	r9, r0
 8016f8a:	f84c 3b04 	str.w	r3, [ip], #4
 8016f8e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8016f92:	d2db      	bcs.n	8016f4c <quorem+0x44>
 8016f94:	f855 300b 	ldr.w	r3, [r5, fp]
 8016f98:	b92b      	cbnz	r3, 8016fa6 <quorem+0x9e>
 8016f9a:	9b01      	ldr	r3, [sp, #4]
 8016f9c:	3b04      	subs	r3, #4
 8016f9e:	429d      	cmp	r5, r3
 8016fa0:	461a      	mov	r2, r3
 8016fa2:	d32e      	bcc.n	8017002 <quorem+0xfa>
 8016fa4:	613c      	str	r4, [r7, #16]
 8016fa6:	4638      	mov	r0, r7
 8016fa8:	f001 fc92 	bl	80188d0 <__mcmp>
 8016fac:	2800      	cmp	r0, #0
 8016fae:	db24      	blt.n	8016ffa <quorem+0xf2>
 8016fb0:	3601      	adds	r6, #1
 8016fb2:	4628      	mov	r0, r5
 8016fb4:	f04f 0c00 	mov.w	ip, #0
 8016fb8:	f858 2b04 	ldr.w	r2, [r8], #4
 8016fbc:	f8d0 e000 	ldr.w	lr, [r0]
 8016fc0:	b293      	uxth	r3, r2
 8016fc2:	ebac 0303 	sub.w	r3, ip, r3
 8016fc6:	0c12      	lsrs	r2, r2, #16
 8016fc8:	fa13 f38e 	uxtah	r3, r3, lr
 8016fcc:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8016fd0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8016fd4:	b29b      	uxth	r3, r3
 8016fd6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8016fda:	45c1      	cmp	r9, r8
 8016fdc:	f840 3b04 	str.w	r3, [r0], #4
 8016fe0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8016fe4:	d2e8      	bcs.n	8016fb8 <quorem+0xb0>
 8016fe6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8016fea:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8016fee:	b922      	cbnz	r2, 8016ffa <quorem+0xf2>
 8016ff0:	3b04      	subs	r3, #4
 8016ff2:	429d      	cmp	r5, r3
 8016ff4:	461a      	mov	r2, r3
 8016ff6:	d30a      	bcc.n	801700e <quorem+0x106>
 8016ff8:	613c      	str	r4, [r7, #16]
 8016ffa:	4630      	mov	r0, r6
 8016ffc:	b003      	add	sp, #12
 8016ffe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017002:	6812      	ldr	r2, [r2, #0]
 8017004:	3b04      	subs	r3, #4
 8017006:	2a00      	cmp	r2, #0
 8017008:	d1cc      	bne.n	8016fa4 <quorem+0x9c>
 801700a:	3c01      	subs	r4, #1
 801700c:	e7c7      	b.n	8016f9e <quorem+0x96>
 801700e:	6812      	ldr	r2, [r2, #0]
 8017010:	3b04      	subs	r3, #4
 8017012:	2a00      	cmp	r2, #0
 8017014:	d1f0      	bne.n	8016ff8 <quorem+0xf0>
 8017016:	3c01      	subs	r4, #1
 8017018:	e7eb      	b.n	8016ff2 <quorem+0xea>
 801701a:	2000      	movs	r0, #0
 801701c:	e7ee      	b.n	8016ffc <quorem+0xf4>
	...

08017020 <_dtoa_r>:
 8017020:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017024:	ed2d 8b02 	vpush	{d8}
 8017028:	ec57 6b10 	vmov	r6, r7, d0
 801702c:	b095      	sub	sp, #84	; 0x54
 801702e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8017030:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8017034:	9105      	str	r1, [sp, #20]
 8017036:	e9cd 6702 	strd	r6, r7, [sp, #8]
 801703a:	4604      	mov	r4, r0
 801703c:	9209      	str	r2, [sp, #36]	; 0x24
 801703e:	930f      	str	r3, [sp, #60]	; 0x3c
 8017040:	b975      	cbnz	r5, 8017060 <_dtoa_r+0x40>
 8017042:	2010      	movs	r0, #16
 8017044:	f7fe f81a 	bl	801507c <malloc>
 8017048:	4602      	mov	r2, r0
 801704a:	6260      	str	r0, [r4, #36]	; 0x24
 801704c:	b920      	cbnz	r0, 8017058 <_dtoa_r+0x38>
 801704e:	4bb2      	ldr	r3, [pc, #712]	; (8017318 <_dtoa_r+0x2f8>)
 8017050:	21ea      	movs	r1, #234	; 0xea
 8017052:	48b2      	ldr	r0, [pc, #712]	; (801731c <_dtoa_r+0x2fc>)
 8017054:	f002 fbd4 	bl	8019800 <__assert_func>
 8017058:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801705c:	6005      	str	r5, [r0, #0]
 801705e:	60c5      	str	r5, [r0, #12]
 8017060:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8017062:	6819      	ldr	r1, [r3, #0]
 8017064:	b151      	cbz	r1, 801707c <_dtoa_r+0x5c>
 8017066:	685a      	ldr	r2, [r3, #4]
 8017068:	604a      	str	r2, [r1, #4]
 801706a:	2301      	movs	r3, #1
 801706c:	4093      	lsls	r3, r2
 801706e:	608b      	str	r3, [r1, #8]
 8017070:	4620      	mov	r0, r4
 8017072:	f001 f9a5 	bl	80183c0 <_Bfree>
 8017076:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8017078:	2200      	movs	r2, #0
 801707a:	601a      	str	r2, [r3, #0]
 801707c:	1e3b      	subs	r3, r7, #0
 801707e:	bfb9      	ittee	lt
 8017080:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8017084:	9303      	strlt	r3, [sp, #12]
 8017086:	2300      	movge	r3, #0
 8017088:	f8c8 3000 	strge.w	r3, [r8]
 801708c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8017090:	4ba3      	ldr	r3, [pc, #652]	; (8017320 <_dtoa_r+0x300>)
 8017092:	bfbc      	itt	lt
 8017094:	2201      	movlt	r2, #1
 8017096:	f8c8 2000 	strlt.w	r2, [r8]
 801709a:	ea33 0309 	bics.w	r3, r3, r9
 801709e:	d11b      	bne.n	80170d8 <_dtoa_r+0xb8>
 80170a0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80170a2:	f242 730f 	movw	r3, #9999	; 0x270f
 80170a6:	6013      	str	r3, [r2, #0]
 80170a8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80170ac:	4333      	orrs	r3, r6
 80170ae:	f000 857a 	beq.w	8017ba6 <_dtoa_r+0xb86>
 80170b2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80170b4:	b963      	cbnz	r3, 80170d0 <_dtoa_r+0xb0>
 80170b6:	4b9b      	ldr	r3, [pc, #620]	; (8017324 <_dtoa_r+0x304>)
 80170b8:	e024      	b.n	8017104 <_dtoa_r+0xe4>
 80170ba:	4b9b      	ldr	r3, [pc, #620]	; (8017328 <_dtoa_r+0x308>)
 80170bc:	9300      	str	r3, [sp, #0]
 80170be:	3308      	adds	r3, #8
 80170c0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80170c2:	6013      	str	r3, [r2, #0]
 80170c4:	9800      	ldr	r0, [sp, #0]
 80170c6:	b015      	add	sp, #84	; 0x54
 80170c8:	ecbd 8b02 	vpop	{d8}
 80170cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80170d0:	4b94      	ldr	r3, [pc, #592]	; (8017324 <_dtoa_r+0x304>)
 80170d2:	9300      	str	r3, [sp, #0]
 80170d4:	3303      	adds	r3, #3
 80170d6:	e7f3      	b.n	80170c0 <_dtoa_r+0xa0>
 80170d8:	ed9d 7b02 	vldr	d7, [sp, #8]
 80170dc:	2200      	movs	r2, #0
 80170de:	ec51 0b17 	vmov	r0, r1, d7
 80170e2:	2300      	movs	r3, #0
 80170e4:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 80170e8:	f7e9 fd1e 	bl	8000b28 <__aeabi_dcmpeq>
 80170ec:	4680      	mov	r8, r0
 80170ee:	b158      	cbz	r0, 8017108 <_dtoa_r+0xe8>
 80170f0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80170f2:	2301      	movs	r3, #1
 80170f4:	6013      	str	r3, [r2, #0]
 80170f6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80170f8:	2b00      	cmp	r3, #0
 80170fa:	f000 8551 	beq.w	8017ba0 <_dtoa_r+0xb80>
 80170fe:	488b      	ldr	r0, [pc, #556]	; (801732c <_dtoa_r+0x30c>)
 8017100:	6018      	str	r0, [r3, #0]
 8017102:	1e43      	subs	r3, r0, #1
 8017104:	9300      	str	r3, [sp, #0]
 8017106:	e7dd      	b.n	80170c4 <_dtoa_r+0xa4>
 8017108:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 801710c:	aa12      	add	r2, sp, #72	; 0x48
 801710e:	a913      	add	r1, sp, #76	; 0x4c
 8017110:	4620      	mov	r0, r4
 8017112:	f001 fcfd 	bl	8018b10 <__d2b>
 8017116:	f3c9 550a 	ubfx	r5, r9, #20, #11
 801711a:	4683      	mov	fp, r0
 801711c:	2d00      	cmp	r5, #0
 801711e:	d07c      	beq.n	801721a <_dtoa_r+0x1fa>
 8017120:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017122:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8017126:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801712a:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 801712e:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8017132:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8017136:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 801713a:	4b7d      	ldr	r3, [pc, #500]	; (8017330 <_dtoa_r+0x310>)
 801713c:	2200      	movs	r2, #0
 801713e:	4630      	mov	r0, r6
 8017140:	4639      	mov	r1, r7
 8017142:	f7e9 f8d1 	bl	80002e8 <__aeabi_dsub>
 8017146:	a36e      	add	r3, pc, #440	; (adr r3, 8017300 <_dtoa_r+0x2e0>)
 8017148:	e9d3 2300 	ldrd	r2, r3, [r3]
 801714c:	f7e9 fa84 	bl	8000658 <__aeabi_dmul>
 8017150:	a36d      	add	r3, pc, #436	; (adr r3, 8017308 <_dtoa_r+0x2e8>)
 8017152:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017156:	f7e9 f8c9 	bl	80002ec <__adddf3>
 801715a:	4606      	mov	r6, r0
 801715c:	4628      	mov	r0, r5
 801715e:	460f      	mov	r7, r1
 8017160:	f7e9 fa10 	bl	8000584 <__aeabi_i2d>
 8017164:	a36a      	add	r3, pc, #424	; (adr r3, 8017310 <_dtoa_r+0x2f0>)
 8017166:	e9d3 2300 	ldrd	r2, r3, [r3]
 801716a:	f7e9 fa75 	bl	8000658 <__aeabi_dmul>
 801716e:	4602      	mov	r2, r0
 8017170:	460b      	mov	r3, r1
 8017172:	4630      	mov	r0, r6
 8017174:	4639      	mov	r1, r7
 8017176:	f7e9 f8b9 	bl	80002ec <__adddf3>
 801717a:	4606      	mov	r6, r0
 801717c:	460f      	mov	r7, r1
 801717e:	f7e9 fd1b 	bl	8000bb8 <__aeabi_d2iz>
 8017182:	2200      	movs	r2, #0
 8017184:	4682      	mov	sl, r0
 8017186:	2300      	movs	r3, #0
 8017188:	4630      	mov	r0, r6
 801718a:	4639      	mov	r1, r7
 801718c:	f7e9 fcd6 	bl	8000b3c <__aeabi_dcmplt>
 8017190:	b148      	cbz	r0, 80171a6 <_dtoa_r+0x186>
 8017192:	4650      	mov	r0, sl
 8017194:	f7e9 f9f6 	bl	8000584 <__aeabi_i2d>
 8017198:	4632      	mov	r2, r6
 801719a:	463b      	mov	r3, r7
 801719c:	f7e9 fcc4 	bl	8000b28 <__aeabi_dcmpeq>
 80171a0:	b908      	cbnz	r0, 80171a6 <_dtoa_r+0x186>
 80171a2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80171a6:	f1ba 0f16 	cmp.w	sl, #22
 80171aa:	d854      	bhi.n	8017256 <_dtoa_r+0x236>
 80171ac:	4b61      	ldr	r3, [pc, #388]	; (8017334 <_dtoa_r+0x314>)
 80171ae:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80171b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80171b6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80171ba:	f7e9 fcbf 	bl	8000b3c <__aeabi_dcmplt>
 80171be:	2800      	cmp	r0, #0
 80171c0:	d04b      	beq.n	801725a <_dtoa_r+0x23a>
 80171c2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80171c6:	2300      	movs	r3, #0
 80171c8:	930e      	str	r3, [sp, #56]	; 0x38
 80171ca:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80171cc:	1b5d      	subs	r5, r3, r5
 80171ce:	1e6b      	subs	r3, r5, #1
 80171d0:	9304      	str	r3, [sp, #16]
 80171d2:	bf43      	ittte	mi
 80171d4:	2300      	movmi	r3, #0
 80171d6:	f1c5 0801 	rsbmi	r8, r5, #1
 80171da:	9304      	strmi	r3, [sp, #16]
 80171dc:	f04f 0800 	movpl.w	r8, #0
 80171e0:	f1ba 0f00 	cmp.w	sl, #0
 80171e4:	db3b      	blt.n	801725e <_dtoa_r+0x23e>
 80171e6:	9b04      	ldr	r3, [sp, #16]
 80171e8:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 80171ec:	4453      	add	r3, sl
 80171ee:	9304      	str	r3, [sp, #16]
 80171f0:	2300      	movs	r3, #0
 80171f2:	9306      	str	r3, [sp, #24]
 80171f4:	9b05      	ldr	r3, [sp, #20]
 80171f6:	2b09      	cmp	r3, #9
 80171f8:	d869      	bhi.n	80172ce <_dtoa_r+0x2ae>
 80171fa:	2b05      	cmp	r3, #5
 80171fc:	bfc4      	itt	gt
 80171fe:	3b04      	subgt	r3, #4
 8017200:	9305      	strgt	r3, [sp, #20]
 8017202:	9b05      	ldr	r3, [sp, #20]
 8017204:	f1a3 0302 	sub.w	r3, r3, #2
 8017208:	bfcc      	ite	gt
 801720a:	2500      	movgt	r5, #0
 801720c:	2501      	movle	r5, #1
 801720e:	2b03      	cmp	r3, #3
 8017210:	d869      	bhi.n	80172e6 <_dtoa_r+0x2c6>
 8017212:	e8df f003 	tbb	[pc, r3]
 8017216:	4e2c      	.short	0x4e2c
 8017218:	5a4c      	.short	0x5a4c
 801721a:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 801721e:	441d      	add	r5, r3
 8017220:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8017224:	2b20      	cmp	r3, #32
 8017226:	bfc1      	itttt	gt
 8017228:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 801722c:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8017230:	fa09 f303 	lslgt.w	r3, r9, r3
 8017234:	fa26 f000 	lsrgt.w	r0, r6, r0
 8017238:	bfda      	itte	le
 801723a:	f1c3 0320 	rsble	r3, r3, #32
 801723e:	fa06 f003 	lslle.w	r0, r6, r3
 8017242:	4318      	orrgt	r0, r3
 8017244:	f7e9 f98e 	bl	8000564 <__aeabi_ui2d>
 8017248:	2301      	movs	r3, #1
 801724a:	4606      	mov	r6, r0
 801724c:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8017250:	3d01      	subs	r5, #1
 8017252:	9310      	str	r3, [sp, #64]	; 0x40
 8017254:	e771      	b.n	801713a <_dtoa_r+0x11a>
 8017256:	2301      	movs	r3, #1
 8017258:	e7b6      	b.n	80171c8 <_dtoa_r+0x1a8>
 801725a:	900e      	str	r0, [sp, #56]	; 0x38
 801725c:	e7b5      	b.n	80171ca <_dtoa_r+0x1aa>
 801725e:	f1ca 0300 	rsb	r3, sl, #0
 8017262:	9306      	str	r3, [sp, #24]
 8017264:	2300      	movs	r3, #0
 8017266:	eba8 080a 	sub.w	r8, r8, sl
 801726a:	930d      	str	r3, [sp, #52]	; 0x34
 801726c:	e7c2      	b.n	80171f4 <_dtoa_r+0x1d4>
 801726e:	2300      	movs	r3, #0
 8017270:	9308      	str	r3, [sp, #32]
 8017272:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017274:	2b00      	cmp	r3, #0
 8017276:	dc39      	bgt.n	80172ec <_dtoa_r+0x2cc>
 8017278:	f04f 0901 	mov.w	r9, #1
 801727c:	f8cd 9004 	str.w	r9, [sp, #4]
 8017280:	464b      	mov	r3, r9
 8017282:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8017286:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8017288:	2200      	movs	r2, #0
 801728a:	6042      	str	r2, [r0, #4]
 801728c:	2204      	movs	r2, #4
 801728e:	f102 0614 	add.w	r6, r2, #20
 8017292:	429e      	cmp	r6, r3
 8017294:	6841      	ldr	r1, [r0, #4]
 8017296:	d92f      	bls.n	80172f8 <_dtoa_r+0x2d8>
 8017298:	4620      	mov	r0, r4
 801729a:	f001 f851 	bl	8018340 <_Balloc>
 801729e:	9000      	str	r0, [sp, #0]
 80172a0:	2800      	cmp	r0, #0
 80172a2:	d14b      	bne.n	801733c <_dtoa_r+0x31c>
 80172a4:	4b24      	ldr	r3, [pc, #144]	; (8017338 <_dtoa_r+0x318>)
 80172a6:	4602      	mov	r2, r0
 80172a8:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80172ac:	e6d1      	b.n	8017052 <_dtoa_r+0x32>
 80172ae:	2301      	movs	r3, #1
 80172b0:	e7de      	b.n	8017270 <_dtoa_r+0x250>
 80172b2:	2300      	movs	r3, #0
 80172b4:	9308      	str	r3, [sp, #32]
 80172b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80172b8:	eb0a 0903 	add.w	r9, sl, r3
 80172bc:	f109 0301 	add.w	r3, r9, #1
 80172c0:	2b01      	cmp	r3, #1
 80172c2:	9301      	str	r3, [sp, #4]
 80172c4:	bfb8      	it	lt
 80172c6:	2301      	movlt	r3, #1
 80172c8:	e7dd      	b.n	8017286 <_dtoa_r+0x266>
 80172ca:	2301      	movs	r3, #1
 80172cc:	e7f2      	b.n	80172b4 <_dtoa_r+0x294>
 80172ce:	2501      	movs	r5, #1
 80172d0:	2300      	movs	r3, #0
 80172d2:	9305      	str	r3, [sp, #20]
 80172d4:	9508      	str	r5, [sp, #32]
 80172d6:	f04f 39ff 	mov.w	r9, #4294967295
 80172da:	2200      	movs	r2, #0
 80172dc:	f8cd 9004 	str.w	r9, [sp, #4]
 80172e0:	2312      	movs	r3, #18
 80172e2:	9209      	str	r2, [sp, #36]	; 0x24
 80172e4:	e7cf      	b.n	8017286 <_dtoa_r+0x266>
 80172e6:	2301      	movs	r3, #1
 80172e8:	9308      	str	r3, [sp, #32]
 80172ea:	e7f4      	b.n	80172d6 <_dtoa_r+0x2b6>
 80172ec:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 80172f0:	f8cd 9004 	str.w	r9, [sp, #4]
 80172f4:	464b      	mov	r3, r9
 80172f6:	e7c6      	b.n	8017286 <_dtoa_r+0x266>
 80172f8:	3101      	adds	r1, #1
 80172fa:	6041      	str	r1, [r0, #4]
 80172fc:	0052      	lsls	r2, r2, #1
 80172fe:	e7c6      	b.n	801728e <_dtoa_r+0x26e>
 8017300:	636f4361 	.word	0x636f4361
 8017304:	3fd287a7 	.word	0x3fd287a7
 8017308:	8b60c8b3 	.word	0x8b60c8b3
 801730c:	3fc68a28 	.word	0x3fc68a28
 8017310:	509f79fb 	.word	0x509f79fb
 8017314:	3fd34413 	.word	0x3fd34413
 8017318:	0801f726 	.word	0x0801f726
 801731c:	0801f73d 	.word	0x0801f73d
 8017320:	7ff00000 	.word	0x7ff00000
 8017324:	0801f722 	.word	0x0801f722
 8017328:	0801f719 	.word	0x0801f719
 801732c:	0801f9a2 	.word	0x0801f9a2
 8017330:	3ff80000 	.word	0x3ff80000
 8017334:	0801f8b8 	.word	0x0801f8b8
 8017338:	0801f79c 	.word	0x0801f79c
 801733c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801733e:	9a00      	ldr	r2, [sp, #0]
 8017340:	601a      	str	r2, [r3, #0]
 8017342:	9b01      	ldr	r3, [sp, #4]
 8017344:	2b0e      	cmp	r3, #14
 8017346:	f200 80ad 	bhi.w	80174a4 <_dtoa_r+0x484>
 801734a:	2d00      	cmp	r5, #0
 801734c:	f000 80aa 	beq.w	80174a4 <_dtoa_r+0x484>
 8017350:	f1ba 0f00 	cmp.w	sl, #0
 8017354:	dd36      	ble.n	80173c4 <_dtoa_r+0x3a4>
 8017356:	4ac3      	ldr	r2, [pc, #780]	; (8017664 <_dtoa_r+0x644>)
 8017358:	f00a 030f 	and.w	r3, sl, #15
 801735c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8017360:	ed93 7b00 	vldr	d7, [r3]
 8017364:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8017368:	ea4f 172a 	mov.w	r7, sl, asr #4
 801736c:	eeb0 8a47 	vmov.f32	s16, s14
 8017370:	eef0 8a67 	vmov.f32	s17, s15
 8017374:	d016      	beq.n	80173a4 <_dtoa_r+0x384>
 8017376:	4bbc      	ldr	r3, [pc, #752]	; (8017668 <_dtoa_r+0x648>)
 8017378:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801737c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8017380:	f7e9 fa94 	bl	80008ac <__aeabi_ddiv>
 8017384:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8017388:	f007 070f 	and.w	r7, r7, #15
 801738c:	2503      	movs	r5, #3
 801738e:	4eb6      	ldr	r6, [pc, #728]	; (8017668 <_dtoa_r+0x648>)
 8017390:	b957      	cbnz	r7, 80173a8 <_dtoa_r+0x388>
 8017392:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8017396:	ec53 2b18 	vmov	r2, r3, d8
 801739a:	f7e9 fa87 	bl	80008ac <__aeabi_ddiv>
 801739e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80173a2:	e029      	b.n	80173f8 <_dtoa_r+0x3d8>
 80173a4:	2502      	movs	r5, #2
 80173a6:	e7f2      	b.n	801738e <_dtoa_r+0x36e>
 80173a8:	07f9      	lsls	r1, r7, #31
 80173aa:	d508      	bpl.n	80173be <_dtoa_r+0x39e>
 80173ac:	ec51 0b18 	vmov	r0, r1, d8
 80173b0:	e9d6 2300 	ldrd	r2, r3, [r6]
 80173b4:	f7e9 f950 	bl	8000658 <__aeabi_dmul>
 80173b8:	ec41 0b18 	vmov	d8, r0, r1
 80173bc:	3501      	adds	r5, #1
 80173be:	107f      	asrs	r7, r7, #1
 80173c0:	3608      	adds	r6, #8
 80173c2:	e7e5      	b.n	8017390 <_dtoa_r+0x370>
 80173c4:	f000 80a6 	beq.w	8017514 <_dtoa_r+0x4f4>
 80173c8:	f1ca 0600 	rsb	r6, sl, #0
 80173cc:	4ba5      	ldr	r3, [pc, #660]	; (8017664 <_dtoa_r+0x644>)
 80173ce:	4fa6      	ldr	r7, [pc, #664]	; (8017668 <_dtoa_r+0x648>)
 80173d0:	f006 020f 	and.w	r2, r6, #15
 80173d4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80173d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80173dc:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80173e0:	f7e9 f93a 	bl	8000658 <__aeabi_dmul>
 80173e4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80173e8:	1136      	asrs	r6, r6, #4
 80173ea:	2300      	movs	r3, #0
 80173ec:	2502      	movs	r5, #2
 80173ee:	2e00      	cmp	r6, #0
 80173f0:	f040 8085 	bne.w	80174fe <_dtoa_r+0x4de>
 80173f4:	2b00      	cmp	r3, #0
 80173f6:	d1d2      	bne.n	801739e <_dtoa_r+0x37e>
 80173f8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80173fa:	2b00      	cmp	r3, #0
 80173fc:	f000 808c 	beq.w	8017518 <_dtoa_r+0x4f8>
 8017400:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8017404:	4b99      	ldr	r3, [pc, #612]	; (801766c <_dtoa_r+0x64c>)
 8017406:	2200      	movs	r2, #0
 8017408:	4630      	mov	r0, r6
 801740a:	4639      	mov	r1, r7
 801740c:	f7e9 fb96 	bl	8000b3c <__aeabi_dcmplt>
 8017410:	2800      	cmp	r0, #0
 8017412:	f000 8081 	beq.w	8017518 <_dtoa_r+0x4f8>
 8017416:	9b01      	ldr	r3, [sp, #4]
 8017418:	2b00      	cmp	r3, #0
 801741a:	d07d      	beq.n	8017518 <_dtoa_r+0x4f8>
 801741c:	f1b9 0f00 	cmp.w	r9, #0
 8017420:	dd3c      	ble.n	801749c <_dtoa_r+0x47c>
 8017422:	f10a 33ff 	add.w	r3, sl, #4294967295
 8017426:	9307      	str	r3, [sp, #28]
 8017428:	2200      	movs	r2, #0
 801742a:	4b91      	ldr	r3, [pc, #580]	; (8017670 <_dtoa_r+0x650>)
 801742c:	4630      	mov	r0, r6
 801742e:	4639      	mov	r1, r7
 8017430:	f7e9 f912 	bl	8000658 <__aeabi_dmul>
 8017434:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8017438:	3501      	adds	r5, #1
 801743a:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 801743e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8017442:	4628      	mov	r0, r5
 8017444:	f7e9 f89e 	bl	8000584 <__aeabi_i2d>
 8017448:	4632      	mov	r2, r6
 801744a:	463b      	mov	r3, r7
 801744c:	f7e9 f904 	bl	8000658 <__aeabi_dmul>
 8017450:	4b88      	ldr	r3, [pc, #544]	; (8017674 <_dtoa_r+0x654>)
 8017452:	2200      	movs	r2, #0
 8017454:	f7e8 ff4a 	bl	80002ec <__adddf3>
 8017458:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 801745c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8017460:	9303      	str	r3, [sp, #12]
 8017462:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8017464:	2b00      	cmp	r3, #0
 8017466:	d15c      	bne.n	8017522 <_dtoa_r+0x502>
 8017468:	4b83      	ldr	r3, [pc, #524]	; (8017678 <_dtoa_r+0x658>)
 801746a:	2200      	movs	r2, #0
 801746c:	4630      	mov	r0, r6
 801746e:	4639      	mov	r1, r7
 8017470:	f7e8 ff3a 	bl	80002e8 <__aeabi_dsub>
 8017474:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8017478:	4606      	mov	r6, r0
 801747a:	460f      	mov	r7, r1
 801747c:	f7e9 fb7c 	bl	8000b78 <__aeabi_dcmpgt>
 8017480:	2800      	cmp	r0, #0
 8017482:	f040 8296 	bne.w	80179b2 <_dtoa_r+0x992>
 8017486:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 801748a:	4630      	mov	r0, r6
 801748c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8017490:	4639      	mov	r1, r7
 8017492:	f7e9 fb53 	bl	8000b3c <__aeabi_dcmplt>
 8017496:	2800      	cmp	r0, #0
 8017498:	f040 8288 	bne.w	80179ac <_dtoa_r+0x98c>
 801749c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80174a0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80174a4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80174a6:	2b00      	cmp	r3, #0
 80174a8:	f2c0 8158 	blt.w	801775c <_dtoa_r+0x73c>
 80174ac:	f1ba 0f0e 	cmp.w	sl, #14
 80174b0:	f300 8154 	bgt.w	801775c <_dtoa_r+0x73c>
 80174b4:	4b6b      	ldr	r3, [pc, #428]	; (8017664 <_dtoa_r+0x644>)
 80174b6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80174ba:	e9d3 8900 	ldrd	r8, r9, [r3]
 80174be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80174c0:	2b00      	cmp	r3, #0
 80174c2:	f280 80e3 	bge.w	801768c <_dtoa_r+0x66c>
 80174c6:	9b01      	ldr	r3, [sp, #4]
 80174c8:	2b00      	cmp	r3, #0
 80174ca:	f300 80df 	bgt.w	801768c <_dtoa_r+0x66c>
 80174ce:	f040 826d 	bne.w	80179ac <_dtoa_r+0x98c>
 80174d2:	4b69      	ldr	r3, [pc, #420]	; (8017678 <_dtoa_r+0x658>)
 80174d4:	2200      	movs	r2, #0
 80174d6:	4640      	mov	r0, r8
 80174d8:	4649      	mov	r1, r9
 80174da:	f7e9 f8bd 	bl	8000658 <__aeabi_dmul>
 80174de:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80174e2:	f7e9 fb3f 	bl	8000b64 <__aeabi_dcmpge>
 80174e6:	9e01      	ldr	r6, [sp, #4]
 80174e8:	4637      	mov	r7, r6
 80174ea:	2800      	cmp	r0, #0
 80174ec:	f040 8243 	bne.w	8017976 <_dtoa_r+0x956>
 80174f0:	9d00      	ldr	r5, [sp, #0]
 80174f2:	2331      	movs	r3, #49	; 0x31
 80174f4:	f805 3b01 	strb.w	r3, [r5], #1
 80174f8:	f10a 0a01 	add.w	sl, sl, #1
 80174fc:	e23f      	b.n	801797e <_dtoa_r+0x95e>
 80174fe:	07f2      	lsls	r2, r6, #31
 8017500:	d505      	bpl.n	801750e <_dtoa_r+0x4ee>
 8017502:	e9d7 2300 	ldrd	r2, r3, [r7]
 8017506:	f7e9 f8a7 	bl	8000658 <__aeabi_dmul>
 801750a:	3501      	adds	r5, #1
 801750c:	2301      	movs	r3, #1
 801750e:	1076      	asrs	r6, r6, #1
 8017510:	3708      	adds	r7, #8
 8017512:	e76c      	b.n	80173ee <_dtoa_r+0x3ce>
 8017514:	2502      	movs	r5, #2
 8017516:	e76f      	b.n	80173f8 <_dtoa_r+0x3d8>
 8017518:	9b01      	ldr	r3, [sp, #4]
 801751a:	f8cd a01c 	str.w	sl, [sp, #28]
 801751e:	930c      	str	r3, [sp, #48]	; 0x30
 8017520:	e78d      	b.n	801743e <_dtoa_r+0x41e>
 8017522:	9900      	ldr	r1, [sp, #0]
 8017524:	980c      	ldr	r0, [sp, #48]	; 0x30
 8017526:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8017528:	4b4e      	ldr	r3, [pc, #312]	; (8017664 <_dtoa_r+0x644>)
 801752a:	ed9d 7b02 	vldr	d7, [sp, #8]
 801752e:	4401      	add	r1, r0
 8017530:	9102      	str	r1, [sp, #8]
 8017532:	9908      	ldr	r1, [sp, #32]
 8017534:	eeb0 8a47 	vmov.f32	s16, s14
 8017538:	eef0 8a67 	vmov.f32	s17, s15
 801753c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8017540:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8017544:	2900      	cmp	r1, #0
 8017546:	d045      	beq.n	80175d4 <_dtoa_r+0x5b4>
 8017548:	494c      	ldr	r1, [pc, #304]	; (801767c <_dtoa_r+0x65c>)
 801754a:	2000      	movs	r0, #0
 801754c:	f7e9 f9ae 	bl	80008ac <__aeabi_ddiv>
 8017550:	ec53 2b18 	vmov	r2, r3, d8
 8017554:	f7e8 fec8 	bl	80002e8 <__aeabi_dsub>
 8017558:	9d00      	ldr	r5, [sp, #0]
 801755a:	ec41 0b18 	vmov	d8, r0, r1
 801755e:	4639      	mov	r1, r7
 8017560:	4630      	mov	r0, r6
 8017562:	f7e9 fb29 	bl	8000bb8 <__aeabi_d2iz>
 8017566:	900c      	str	r0, [sp, #48]	; 0x30
 8017568:	f7e9 f80c 	bl	8000584 <__aeabi_i2d>
 801756c:	4602      	mov	r2, r0
 801756e:	460b      	mov	r3, r1
 8017570:	4630      	mov	r0, r6
 8017572:	4639      	mov	r1, r7
 8017574:	f7e8 feb8 	bl	80002e8 <__aeabi_dsub>
 8017578:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801757a:	3330      	adds	r3, #48	; 0x30
 801757c:	f805 3b01 	strb.w	r3, [r5], #1
 8017580:	ec53 2b18 	vmov	r2, r3, d8
 8017584:	4606      	mov	r6, r0
 8017586:	460f      	mov	r7, r1
 8017588:	f7e9 fad8 	bl	8000b3c <__aeabi_dcmplt>
 801758c:	2800      	cmp	r0, #0
 801758e:	d165      	bne.n	801765c <_dtoa_r+0x63c>
 8017590:	4632      	mov	r2, r6
 8017592:	463b      	mov	r3, r7
 8017594:	4935      	ldr	r1, [pc, #212]	; (801766c <_dtoa_r+0x64c>)
 8017596:	2000      	movs	r0, #0
 8017598:	f7e8 fea6 	bl	80002e8 <__aeabi_dsub>
 801759c:	ec53 2b18 	vmov	r2, r3, d8
 80175a0:	f7e9 facc 	bl	8000b3c <__aeabi_dcmplt>
 80175a4:	2800      	cmp	r0, #0
 80175a6:	f040 80b9 	bne.w	801771c <_dtoa_r+0x6fc>
 80175aa:	9b02      	ldr	r3, [sp, #8]
 80175ac:	429d      	cmp	r5, r3
 80175ae:	f43f af75 	beq.w	801749c <_dtoa_r+0x47c>
 80175b2:	4b2f      	ldr	r3, [pc, #188]	; (8017670 <_dtoa_r+0x650>)
 80175b4:	ec51 0b18 	vmov	r0, r1, d8
 80175b8:	2200      	movs	r2, #0
 80175ba:	f7e9 f84d 	bl	8000658 <__aeabi_dmul>
 80175be:	4b2c      	ldr	r3, [pc, #176]	; (8017670 <_dtoa_r+0x650>)
 80175c0:	ec41 0b18 	vmov	d8, r0, r1
 80175c4:	2200      	movs	r2, #0
 80175c6:	4630      	mov	r0, r6
 80175c8:	4639      	mov	r1, r7
 80175ca:	f7e9 f845 	bl	8000658 <__aeabi_dmul>
 80175ce:	4606      	mov	r6, r0
 80175d0:	460f      	mov	r7, r1
 80175d2:	e7c4      	b.n	801755e <_dtoa_r+0x53e>
 80175d4:	ec51 0b17 	vmov	r0, r1, d7
 80175d8:	f7e9 f83e 	bl	8000658 <__aeabi_dmul>
 80175dc:	9b02      	ldr	r3, [sp, #8]
 80175de:	9d00      	ldr	r5, [sp, #0]
 80175e0:	930c      	str	r3, [sp, #48]	; 0x30
 80175e2:	ec41 0b18 	vmov	d8, r0, r1
 80175e6:	4639      	mov	r1, r7
 80175e8:	4630      	mov	r0, r6
 80175ea:	f7e9 fae5 	bl	8000bb8 <__aeabi_d2iz>
 80175ee:	9011      	str	r0, [sp, #68]	; 0x44
 80175f0:	f7e8 ffc8 	bl	8000584 <__aeabi_i2d>
 80175f4:	4602      	mov	r2, r0
 80175f6:	460b      	mov	r3, r1
 80175f8:	4630      	mov	r0, r6
 80175fa:	4639      	mov	r1, r7
 80175fc:	f7e8 fe74 	bl	80002e8 <__aeabi_dsub>
 8017600:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8017602:	3330      	adds	r3, #48	; 0x30
 8017604:	f805 3b01 	strb.w	r3, [r5], #1
 8017608:	9b02      	ldr	r3, [sp, #8]
 801760a:	429d      	cmp	r5, r3
 801760c:	4606      	mov	r6, r0
 801760e:	460f      	mov	r7, r1
 8017610:	f04f 0200 	mov.w	r2, #0
 8017614:	d134      	bne.n	8017680 <_dtoa_r+0x660>
 8017616:	4b19      	ldr	r3, [pc, #100]	; (801767c <_dtoa_r+0x65c>)
 8017618:	ec51 0b18 	vmov	r0, r1, d8
 801761c:	f7e8 fe66 	bl	80002ec <__adddf3>
 8017620:	4602      	mov	r2, r0
 8017622:	460b      	mov	r3, r1
 8017624:	4630      	mov	r0, r6
 8017626:	4639      	mov	r1, r7
 8017628:	f7e9 faa6 	bl	8000b78 <__aeabi_dcmpgt>
 801762c:	2800      	cmp	r0, #0
 801762e:	d175      	bne.n	801771c <_dtoa_r+0x6fc>
 8017630:	ec53 2b18 	vmov	r2, r3, d8
 8017634:	4911      	ldr	r1, [pc, #68]	; (801767c <_dtoa_r+0x65c>)
 8017636:	2000      	movs	r0, #0
 8017638:	f7e8 fe56 	bl	80002e8 <__aeabi_dsub>
 801763c:	4602      	mov	r2, r0
 801763e:	460b      	mov	r3, r1
 8017640:	4630      	mov	r0, r6
 8017642:	4639      	mov	r1, r7
 8017644:	f7e9 fa7a 	bl	8000b3c <__aeabi_dcmplt>
 8017648:	2800      	cmp	r0, #0
 801764a:	f43f af27 	beq.w	801749c <_dtoa_r+0x47c>
 801764e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8017650:	1e6b      	subs	r3, r5, #1
 8017652:	930c      	str	r3, [sp, #48]	; 0x30
 8017654:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8017658:	2b30      	cmp	r3, #48	; 0x30
 801765a:	d0f8      	beq.n	801764e <_dtoa_r+0x62e>
 801765c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8017660:	e04a      	b.n	80176f8 <_dtoa_r+0x6d8>
 8017662:	bf00      	nop
 8017664:	0801f8b8 	.word	0x0801f8b8
 8017668:	0801f890 	.word	0x0801f890
 801766c:	3ff00000 	.word	0x3ff00000
 8017670:	40240000 	.word	0x40240000
 8017674:	401c0000 	.word	0x401c0000
 8017678:	40140000 	.word	0x40140000
 801767c:	3fe00000 	.word	0x3fe00000
 8017680:	4baf      	ldr	r3, [pc, #700]	; (8017940 <_dtoa_r+0x920>)
 8017682:	f7e8 ffe9 	bl	8000658 <__aeabi_dmul>
 8017686:	4606      	mov	r6, r0
 8017688:	460f      	mov	r7, r1
 801768a:	e7ac      	b.n	80175e6 <_dtoa_r+0x5c6>
 801768c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8017690:	9d00      	ldr	r5, [sp, #0]
 8017692:	4642      	mov	r2, r8
 8017694:	464b      	mov	r3, r9
 8017696:	4630      	mov	r0, r6
 8017698:	4639      	mov	r1, r7
 801769a:	f7e9 f907 	bl	80008ac <__aeabi_ddiv>
 801769e:	f7e9 fa8b 	bl	8000bb8 <__aeabi_d2iz>
 80176a2:	9002      	str	r0, [sp, #8]
 80176a4:	f7e8 ff6e 	bl	8000584 <__aeabi_i2d>
 80176a8:	4642      	mov	r2, r8
 80176aa:	464b      	mov	r3, r9
 80176ac:	f7e8 ffd4 	bl	8000658 <__aeabi_dmul>
 80176b0:	4602      	mov	r2, r0
 80176b2:	460b      	mov	r3, r1
 80176b4:	4630      	mov	r0, r6
 80176b6:	4639      	mov	r1, r7
 80176b8:	f7e8 fe16 	bl	80002e8 <__aeabi_dsub>
 80176bc:	9e02      	ldr	r6, [sp, #8]
 80176be:	9f01      	ldr	r7, [sp, #4]
 80176c0:	3630      	adds	r6, #48	; 0x30
 80176c2:	f805 6b01 	strb.w	r6, [r5], #1
 80176c6:	9e00      	ldr	r6, [sp, #0]
 80176c8:	1bae      	subs	r6, r5, r6
 80176ca:	42b7      	cmp	r7, r6
 80176cc:	4602      	mov	r2, r0
 80176ce:	460b      	mov	r3, r1
 80176d0:	d137      	bne.n	8017742 <_dtoa_r+0x722>
 80176d2:	f7e8 fe0b 	bl	80002ec <__adddf3>
 80176d6:	4642      	mov	r2, r8
 80176d8:	464b      	mov	r3, r9
 80176da:	4606      	mov	r6, r0
 80176dc:	460f      	mov	r7, r1
 80176de:	f7e9 fa4b 	bl	8000b78 <__aeabi_dcmpgt>
 80176e2:	b9c8      	cbnz	r0, 8017718 <_dtoa_r+0x6f8>
 80176e4:	4642      	mov	r2, r8
 80176e6:	464b      	mov	r3, r9
 80176e8:	4630      	mov	r0, r6
 80176ea:	4639      	mov	r1, r7
 80176ec:	f7e9 fa1c 	bl	8000b28 <__aeabi_dcmpeq>
 80176f0:	b110      	cbz	r0, 80176f8 <_dtoa_r+0x6d8>
 80176f2:	9b02      	ldr	r3, [sp, #8]
 80176f4:	07d9      	lsls	r1, r3, #31
 80176f6:	d40f      	bmi.n	8017718 <_dtoa_r+0x6f8>
 80176f8:	4620      	mov	r0, r4
 80176fa:	4659      	mov	r1, fp
 80176fc:	f000 fe60 	bl	80183c0 <_Bfree>
 8017700:	2300      	movs	r3, #0
 8017702:	702b      	strb	r3, [r5, #0]
 8017704:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8017706:	f10a 0001 	add.w	r0, sl, #1
 801770a:	6018      	str	r0, [r3, #0]
 801770c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801770e:	2b00      	cmp	r3, #0
 8017710:	f43f acd8 	beq.w	80170c4 <_dtoa_r+0xa4>
 8017714:	601d      	str	r5, [r3, #0]
 8017716:	e4d5      	b.n	80170c4 <_dtoa_r+0xa4>
 8017718:	f8cd a01c 	str.w	sl, [sp, #28]
 801771c:	462b      	mov	r3, r5
 801771e:	461d      	mov	r5, r3
 8017720:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8017724:	2a39      	cmp	r2, #57	; 0x39
 8017726:	d108      	bne.n	801773a <_dtoa_r+0x71a>
 8017728:	9a00      	ldr	r2, [sp, #0]
 801772a:	429a      	cmp	r2, r3
 801772c:	d1f7      	bne.n	801771e <_dtoa_r+0x6fe>
 801772e:	9a07      	ldr	r2, [sp, #28]
 8017730:	9900      	ldr	r1, [sp, #0]
 8017732:	3201      	adds	r2, #1
 8017734:	9207      	str	r2, [sp, #28]
 8017736:	2230      	movs	r2, #48	; 0x30
 8017738:	700a      	strb	r2, [r1, #0]
 801773a:	781a      	ldrb	r2, [r3, #0]
 801773c:	3201      	adds	r2, #1
 801773e:	701a      	strb	r2, [r3, #0]
 8017740:	e78c      	b.n	801765c <_dtoa_r+0x63c>
 8017742:	4b7f      	ldr	r3, [pc, #508]	; (8017940 <_dtoa_r+0x920>)
 8017744:	2200      	movs	r2, #0
 8017746:	f7e8 ff87 	bl	8000658 <__aeabi_dmul>
 801774a:	2200      	movs	r2, #0
 801774c:	2300      	movs	r3, #0
 801774e:	4606      	mov	r6, r0
 8017750:	460f      	mov	r7, r1
 8017752:	f7e9 f9e9 	bl	8000b28 <__aeabi_dcmpeq>
 8017756:	2800      	cmp	r0, #0
 8017758:	d09b      	beq.n	8017692 <_dtoa_r+0x672>
 801775a:	e7cd      	b.n	80176f8 <_dtoa_r+0x6d8>
 801775c:	9a08      	ldr	r2, [sp, #32]
 801775e:	2a00      	cmp	r2, #0
 8017760:	f000 80c4 	beq.w	80178ec <_dtoa_r+0x8cc>
 8017764:	9a05      	ldr	r2, [sp, #20]
 8017766:	2a01      	cmp	r2, #1
 8017768:	f300 80a8 	bgt.w	80178bc <_dtoa_r+0x89c>
 801776c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801776e:	2a00      	cmp	r2, #0
 8017770:	f000 80a0 	beq.w	80178b4 <_dtoa_r+0x894>
 8017774:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8017778:	9e06      	ldr	r6, [sp, #24]
 801777a:	4645      	mov	r5, r8
 801777c:	9a04      	ldr	r2, [sp, #16]
 801777e:	2101      	movs	r1, #1
 8017780:	441a      	add	r2, r3
 8017782:	4620      	mov	r0, r4
 8017784:	4498      	add	r8, r3
 8017786:	9204      	str	r2, [sp, #16]
 8017788:	f000 ff20 	bl	80185cc <__i2b>
 801778c:	4607      	mov	r7, r0
 801778e:	2d00      	cmp	r5, #0
 8017790:	dd0b      	ble.n	80177aa <_dtoa_r+0x78a>
 8017792:	9b04      	ldr	r3, [sp, #16]
 8017794:	2b00      	cmp	r3, #0
 8017796:	dd08      	ble.n	80177aa <_dtoa_r+0x78a>
 8017798:	42ab      	cmp	r3, r5
 801779a:	9a04      	ldr	r2, [sp, #16]
 801779c:	bfa8      	it	ge
 801779e:	462b      	movge	r3, r5
 80177a0:	eba8 0803 	sub.w	r8, r8, r3
 80177a4:	1aed      	subs	r5, r5, r3
 80177a6:	1ad3      	subs	r3, r2, r3
 80177a8:	9304      	str	r3, [sp, #16]
 80177aa:	9b06      	ldr	r3, [sp, #24]
 80177ac:	b1fb      	cbz	r3, 80177ee <_dtoa_r+0x7ce>
 80177ae:	9b08      	ldr	r3, [sp, #32]
 80177b0:	2b00      	cmp	r3, #0
 80177b2:	f000 809f 	beq.w	80178f4 <_dtoa_r+0x8d4>
 80177b6:	2e00      	cmp	r6, #0
 80177b8:	dd11      	ble.n	80177de <_dtoa_r+0x7be>
 80177ba:	4639      	mov	r1, r7
 80177bc:	4632      	mov	r2, r6
 80177be:	4620      	mov	r0, r4
 80177c0:	f000 ffc0 	bl	8018744 <__pow5mult>
 80177c4:	465a      	mov	r2, fp
 80177c6:	4601      	mov	r1, r0
 80177c8:	4607      	mov	r7, r0
 80177ca:	4620      	mov	r0, r4
 80177cc:	f000 ff14 	bl	80185f8 <__multiply>
 80177d0:	4659      	mov	r1, fp
 80177d2:	9007      	str	r0, [sp, #28]
 80177d4:	4620      	mov	r0, r4
 80177d6:	f000 fdf3 	bl	80183c0 <_Bfree>
 80177da:	9b07      	ldr	r3, [sp, #28]
 80177dc:	469b      	mov	fp, r3
 80177de:	9b06      	ldr	r3, [sp, #24]
 80177e0:	1b9a      	subs	r2, r3, r6
 80177e2:	d004      	beq.n	80177ee <_dtoa_r+0x7ce>
 80177e4:	4659      	mov	r1, fp
 80177e6:	4620      	mov	r0, r4
 80177e8:	f000 ffac 	bl	8018744 <__pow5mult>
 80177ec:	4683      	mov	fp, r0
 80177ee:	2101      	movs	r1, #1
 80177f0:	4620      	mov	r0, r4
 80177f2:	f000 feeb 	bl	80185cc <__i2b>
 80177f6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80177f8:	2b00      	cmp	r3, #0
 80177fa:	4606      	mov	r6, r0
 80177fc:	dd7c      	ble.n	80178f8 <_dtoa_r+0x8d8>
 80177fe:	461a      	mov	r2, r3
 8017800:	4601      	mov	r1, r0
 8017802:	4620      	mov	r0, r4
 8017804:	f000 ff9e 	bl	8018744 <__pow5mult>
 8017808:	9b05      	ldr	r3, [sp, #20]
 801780a:	2b01      	cmp	r3, #1
 801780c:	4606      	mov	r6, r0
 801780e:	dd76      	ble.n	80178fe <_dtoa_r+0x8de>
 8017810:	2300      	movs	r3, #0
 8017812:	9306      	str	r3, [sp, #24]
 8017814:	6933      	ldr	r3, [r6, #16]
 8017816:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 801781a:	6918      	ldr	r0, [r3, #16]
 801781c:	f000 fe86 	bl	801852c <__hi0bits>
 8017820:	f1c0 0020 	rsb	r0, r0, #32
 8017824:	9b04      	ldr	r3, [sp, #16]
 8017826:	4418      	add	r0, r3
 8017828:	f010 001f 	ands.w	r0, r0, #31
 801782c:	f000 8086 	beq.w	801793c <_dtoa_r+0x91c>
 8017830:	f1c0 0320 	rsb	r3, r0, #32
 8017834:	2b04      	cmp	r3, #4
 8017836:	dd7f      	ble.n	8017938 <_dtoa_r+0x918>
 8017838:	f1c0 001c 	rsb	r0, r0, #28
 801783c:	9b04      	ldr	r3, [sp, #16]
 801783e:	4403      	add	r3, r0
 8017840:	4480      	add	r8, r0
 8017842:	4405      	add	r5, r0
 8017844:	9304      	str	r3, [sp, #16]
 8017846:	f1b8 0f00 	cmp.w	r8, #0
 801784a:	dd05      	ble.n	8017858 <_dtoa_r+0x838>
 801784c:	4659      	mov	r1, fp
 801784e:	4642      	mov	r2, r8
 8017850:	4620      	mov	r0, r4
 8017852:	f000 ffd1 	bl	80187f8 <__lshift>
 8017856:	4683      	mov	fp, r0
 8017858:	9b04      	ldr	r3, [sp, #16]
 801785a:	2b00      	cmp	r3, #0
 801785c:	dd05      	ble.n	801786a <_dtoa_r+0x84a>
 801785e:	4631      	mov	r1, r6
 8017860:	461a      	mov	r2, r3
 8017862:	4620      	mov	r0, r4
 8017864:	f000 ffc8 	bl	80187f8 <__lshift>
 8017868:	4606      	mov	r6, r0
 801786a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801786c:	2b00      	cmp	r3, #0
 801786e:	d069      	beq.n	8017944 <_dtoa_r+0x924>
 8017870:	4631      	mov	r1, r6
 8017872:	4658      	mov	r0, fp
 8017874:	f001 f82c 	bl	80188d0 <__mcmp>
 8017878:	2800      	cmp	r0, #0
 801787a:	da63      	bge.n	8017944 <_dtoa_r+0x924>
 801787c:	2300      	movs	r3, #0
 801787e:	4659      	mov	r1, fp
 8017880:	220a      	movs	r2, #10
 8017882:	4620      	mov	r0, r4
 8017884:	f000 fdbe 	bl	8018404 <__multadd>
 8017888:	9b08      	ldr	r3, [sp, #32]
 801788a:	f10a 3aff 	add.w	sl, sl, #4294967295
 801788e:	4683      	mov	fp, r0
 8017890:	2b00      	cmp	r3, #0
 8017892:	f000 818f 	beq.w	8017bb4 <_dtoa_r+0xb94>
 8017896:	4639      	mov	r1, r7
 8017898:	2300      	movs	r3, #0
 801789a:	220a      	movs	r2, #10
 801789c:	4620      	mov	r0, r4
 801789e:	f000 fdb1 	bl	8018404 <__multadd>
 80178a2:	f1b9 0f00 	cmp.w	r9, #0
 80178a6:	4607      	mov	r7, r0
 80178a8:	f300 808e 	bgt.w	80179c8 <_dtoa_r+0x9a8>
 80178ac:	9b05      	ldr	r3, [sp, #20]
 80178ae:	2b02      	cmp	r3, #2
 80178b0:	dc50      	bgt.n	8017954 <_dtoa_r+0x934>
 80178b2:	e089      	b.n	80179c8 <_dtoa_r+0x9a8>
 80178b4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80178b6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80178ba:	e75d      	b.n	8017778 <_dtoa_r+0x758>
 80178bc:	9b01      	ldr	r3, [sp, #4]
 80178be:	1e5e      	subs	r6, r3, #1
 80178c0:	9b06      	ldr	r3, [sp, #24]
 80178c2:	42b3      	cmp	r3, r6
 80178c4:	bfbf      	itttt	lt
 80178c6:	9b06      	ldrlt	r3, [sp, #24]
 80178c8:	9606      	strlt	r6, [sp, #24]
 80178ca:	1af2      	sublt	r2, r6, r3
 80178cc:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 80178ce:	bfb6      	itet	lt
 80178d0:	189b      	addlt	r3, r3, r2
 80178d2:	1b9e      	subge	r6, r3, r6
 80178d4:	930d      	strlt	r3, [sp, #52]	; 0x34
 80178d6:	9b01      	ldr	r3, [sp, #4]
 80178d8:	bfb8      	it	lt
 80178da:	2600      	movlt	r6, #0
 80178dc:	2b00      	cmp	r3, #0
 80178de:	bfb5      	itete	lt
 80178e0:	eba8 0503 	sublt.w	r5, r8, r3
 80178e4:	9b01      	ldrge	r3, [sp, #4]
 80178e6:	2300      	movlt	r3, #0
 80178e8:	4645      	movge	r5, r8
 80178ea:	e747      	b.n	801777c <_dtoa_r+0x75c>
 80178ec:	9e06      	ldr	r6, [sp, #24]
 80178ee:	9f08      	ldr	r7, [sp, #32]
 80178f0:	4645      	mov	r5, r8
 80178f2:	e74c      	b.n	801778e <_dtoa_r+0x76e>
 80178f4:	9a06      	ldr	r2, [sp, #24]
 80178f6:	e775      	b.n	80177e4 <_dtoa_r+0x7c4>
 80178f8:	9b05      	ldr	r3, [sp, #20]
 80178fa:	2b01      	cmp	r3, #1
 80178fc:	dc18      	bgt.n	8017930 <_dtoa_r+0x910>
 80178fe:	9b02      	ldr	r3, [sp, #8]
 8017900:	b9b3      	cbnz	r3, 8017930 <_dtoa_r+0x910>
 8017902:	9b03      	ldr	r3, [sp, #12]
 8017904:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8017908:	b9a3      	cbnz	r3, 8017934 <_dtoa_r+0x914>
 801790a:	9b03      	ldr	r3, [sp, #12]
 801790c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8017910:	0d1b      	lsrs	r3, r3, #20
 8017912:	051b      	lsls	r3, r3, #20
 8017914:	b12b      	cbz	r3, 8017922 <_dtoa_r+0x902>
 8017916:	9b04      	ldr	r3, [sp, #16]
 8017918:	3301      	adds	r3, #1
 801791a:	9304      	str	r3, [sp, #16]
 801791c:	f108 0801 	add.w	r8, r8, #1
 8017920:	2301      	movs	r3, #1
 8017922:	9306      	str	r3, [sp, #24]
 8017924:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8017926:	2b00      	cmp	r3, #0
 8017928:	f47f af74 	bne.w	8017814 <_dtoa_r+0x7f4>
 801792c:	2001      	movs	r0, #1
 801792e:	e779      	b.n	8017824 <_dtoa_r+0x804>
 8017930:	2300      	movs	r3, #0
 8017932:	e7f6      	b.n	8017922 <_dtoa_r+0x902>
 8017934:	9b02      	ldr	r3, [sp, #8]
 8017936:	e7f4      	b.n	8017922 <_dtoa_r+0x902>
 8017938:	d085      	beq.n	8017846 <_dtoa_r+0x826>
 801793a:	4618      	mov	r0, r3
 801793c:	301c      	adds	r0, #28
 801793e:	e77d      	b.n	801783c <_dtoa_r+0x81c>
 8017940:	40240000 	.word	0x40240000
 8017944:	9b01      	ldr	r3, [sp, #4]
 8017946:	2b00      	cmp	r3, #0
 8017948:	dc38      	bgt.n	80179bc <_dtoa_r+0x99c>
 801794a:	9b05      	ldr	r3, [sp, #20]
 801794c:	2b02      	cmp	r3, #2
 801794e:	dd35      	ble.n	80179bc <_dtoa_r+0x99c>
 8017950:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8017954:	f1b9 0f00 	cmp.w	r9, #0
 8017958:	d10d      	bne.n	8017976 <_dtoa_r+0x956>
 801795a:	4631      	mov	r1, r6
 801795c:	464b      	mov	r3, r9
 801795e:	2205      	movs	r2, #5
 8017960:	4620      	mov	r0, r4
 8017962:	f000 fd4f 	bl	8018404 <__multadd>
 8017966:	4601      	mov	r1, r0
 8017968:	4606      	mov	r6, r0
 801796a:	4658      	mov	r0, fp
 801796c:	f000 ffb0 	bl	80188d0 <__mcmp>
 8017970:	2800      	cmp	r0, #0
 8017972:	f73f adbd 	bgt.w	80174f0 <_dtoa_r+0x4d0>
 8017976:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017978:	9d00      	ldr	r5, [sp, #0]
 801797a:	ea6f 0a03 	mvn.w	sl, r3
 801797e:	f04f 0800 	mov.w	r8, #0
 8017982:	4631      	mov	r1, r6
 8017984:	4620      	mov	r0, r4
 8017986:	f000 fd1b 	bl	80183c0 <_Bfree>
 801798a:	2f00      	cmp	r7, #0
 801798c:	f43f aeb4 	beq.w	80176f8 <_dtoa_r+0x6d8>
 8017990:	f1b8 0f00 	cmp.w	r8, #0
 8017994:	d005      	beq.n	80179a2 <_dtoa_r+0x982>
 8017996:	45b8      	cmp	r8, r7
 8017998:	d003      	beq.n	80179a2 <_dtoa_r+0x982>
 801799a:	4641      	mov	r1, r8
 801799c:	4620      	mov	r0, r4
 801799e:	f000 fd0f 	bl	80183c0 <_Bfree>
 80179a2:	4639      	mov	r1, r7
 80179a4:	4620      	mov	r0, r4
 80179a6:	f000 fd0b 	bl	80183c0 <_Bfree>
 80179aa:	e6a5      	b.n	80176f8 <_dtoa_r+0x6d8>
 80179ac:	2600      	movs	r6, #0
 80179ae:	4637      	mov	r7, r6
 80179b0:	e7e1      	b.n	8017976 <_dtoa_r+0x956>
 80179b2:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80179b4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80179b8:	4637      	mov	r7, r6
 80179ba:	e599      	b.n	80174f0 <_dtoa_r+0x4d0>
 80179bc:	9b08      	ldr	r3, [sp, #32]
 80179be:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80179c2:	2b00      	cmp	r3, #0
 80179c4:	f000 80fd 	beq.w	8017bc2 <_dtoa_r+0xba2>
 80179c8:	2d00      	cmp	r5, #0
 80179ca:	dd05      	ble.n	80179d8 <_dtoa_r+0x9b8>
 80179cc:	4639      	mov	r1, r7
 80179ce:	462a      	mov	r2, r5
 80179d0:	4620      	mov	r0, r4
 80179d2:	f000 ff11 	bl	80187f8 <__lshift>
 80179d6:	4607      	mov	r7, r0
 80179d8:	9b06      	ldr	r3, [sp, #24]
 80179da:	2b00      	cmp	r3, #0
 80179dc:	d05c      	beq.n	8017a98 <_dtoa_r+0xa78>
 80179de:	6879      	ldr	r1, [r7, #4]
 80179e0:	4620      	mov	r0, r4
 80179e2:	f000 fcad 	bl	8018340 <_Balloc>
 80179e6:	4605      	mov	r5, r0
 80179e8:	b928      	cbnz	r0, 80179f6 <_dtoa_r+0x9d6>
 80179ea:	4b80      	ldr	r3, [pc, #512]	; (8017bec <_dtoa_r+0xbcc>)
 80179ec:	4602      	mov	r2, r0
 80179ee:	f240 21ea 	movw	r1, #746	; 0x2ea
 80179f2:	f7ff bb2e 	b.w	8017052 <_dtoa_r+0x32>
 80179f6:	693a      	ldr	r2, [r7, #16]
 80179f8:	3202      	adds	r2, #2
 80179fa:	0092      	lsls	r2, r2, #2
 80179fc:	f107 010c 	add.w	r1, r7, #12
 8017a00:	300c      	adds	r0, #12
 8017a02:	f7fd fb51 	bl	80150a8 <memcpy>
 8017a06:	2201      	movs	r2, #1
 8017a08:	4629      	mov	r1, r5
 8017a0a:	4620      	mov	r0, r4
 8017a0c:	f000 fef4 	bl	80187f8 <__lshift>
 8017a10:	9b00      	ldr	r3, [sp, #0]
 8017a12:	3301      	adds	r3, #1
 8017a14:	9301      	str	r3, [sp, #4]
 8017a16:	9b00      	ldr	r3, [sp, #0]
 8017a18:	444b      	add	r3, r9
 8017a1a:	9307      	str	r3, [sp, #28]
 8017a1c:	9b02      	ldr	r3, [sp, #8]
 8017a1e:	f003 0301 	and.w	r3, r3, #1
 8017a22:	46b8      	mov	r8, r7
 8017a24:	9306      	str	r3, [sp, #24]
 8017a26:	4607      	mov	r7, r0
 8017a28:	9b01      	ldr	r3, [sp, #4]
 8017a2a:	4631      	mov	r1, r6
 8017a2c:	3b01      	subs	r3, #1
 8017a2e:	4658      	mov	r0, fp
 8017a30:	9302      	str	r3, [sp, #8]
 8017a32:	f7ff fa69 	bl	8016f08 <quorem>
 8017a36:	4603      	mov	r3, r0
 8017a38:	3330      	adds	r3, #48	; 0x30
 8017a3a:	9004      	str	r0, [sp, #16]
 8017a3c:	4641      	mov	r1, r8
 8017a3e:	4658      	mov	r0, fp
 8017a40:	9308      	str	r3, [sp, #32]
 8017a42:	f000 ff45 	bl	80188d0 <__mcmp>
 8017a46:	463a      	mov	r2, r7
 8017a48:	4681      	mov	r9, r0
 8017a4a:	4631      	mov	r1, r6
 8017a4c:	4620      	mov	r0, r4
 8017a4e:	f000 ff5b 	bl	8018908 <__mdiff>
 8017a52:	68c2      	ldr	r2, [r0, #12]
 8017a54:	9b08      	ldr	r3, [sp, #32]
 8017a56:	4605      	mov	r5, r0
 8017a58:	bb02      	cbnz	r2, 8017a9c <_dtoa_r+0xa7c>
 8017a5a:	4601      	mov	r1, r0
 8017a5c:	4658      	mov	r0, fp
 8017a5e:	f000 ff37 	bl	80188d0 <__mcmp>
 8017a62:	9b08      	ldr	r3, [sp, #32]
 8017a64:	4602      	mov	r2, r0
 8017a66:	4629      	mov	r1, r5
 8017a68:	4620      	mov	r0, r4
 8017a6a:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8017a6e:	f000 fca7 	bl	80183c0 <_Bfree>
 8017a72:	9b05      	ldr	r3, [sp, #20]
 8017a74:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8017a76:	9d01      	ldr	r5, [sp, #4]
 8017a78:	ea43 0102 	orr.w	r1, r3, r2
 8017a7c:	9b06      	ldr	r3, [sp, #24]
 8017a7e:	430b      	orrs	r3, r1
 8017a80:	9b08      	ldr	r3, [sp, #32]
 8017a82:	d10d      	bne.n	8017aa0 <_dtoa_r+0xa80>
 8017a84:	2b39      	cmp	r3, #57	; 0x39
 8017a86:	d029      	beq.n	8017adc <_dtoa_r+0xabc>
 8017a88:	f1b9 0f00 	cmp.w	r9, #0
 8017a8c:	dd01      	ble.n	8017a92 <_dtoa_r+0xa72>
 8017a8e:	9b04      	ldr	r3, [sp, #16]
 8017a90:	3331      	adds	r3, #49	; 0x31
 8017a92:	9a02      	ldr	r2, [sp, #8]
 8017a94:	7013      	strb	r3, [r2, #0]
 8017a96:	e774      	b.n	8017982 <_dtoa_r+0x962>
 8017a98:	4638      	mov	r0, r7
 8017a9a:	e7b9      	b.n	8017a10 <_dtoa_r+0x9f0>
 8017a9c:	2201      	movs	r2, #1
 8017a9e:	e7e2      	b.n	8017a66 <_dtoa_r+0xa46>
 8017aa0:	f1b9 0f00 	cmp.w	r9, #0
 8017aa4:	db06      	blt.n	8017ab4 <_dtoa_r+0xa94>
 8017aa6:	9905      	ldr	r1, [sp, #20]
 8017aa8:	ea41 0909 	orr.w	r9, r1, r9
 8017aac:	9906      	ldr	r1, [sp, #24]
 8017aae:	ea59 0101 	orrs.w	r1, r9, r1
 8017ab2:	d120      	bne.n	8017af6 <_dtoa_r+0xad6>
 8017ab4:	2a00      	cmp	r2, #0
 8017ab6:	ddec      	ble.n	8017a92 <_dtoa_r+0xa72>
 8017ab8:	4659      	mov	r1, fp
 8017aba:	2201      	movs	r2, #1
 8017abc:	4620      	mov	r0, r4
 8017abe:	9301      	str	r3, [sp, #4]
 8017ac0:	f000 fe9a 	bl	80187f8 <__lshift>
 8017ac4:	4631      	mov	r1, r6
 8017ac6:	4683      	mov	fp, r0
 8017ac8:	f000 ff02 	bl	80188d0 <__mcmp>
 8017acc:	2800      	cmp	r0, #0
 8017ace:	9b01      	ldr	r3, [sp, #4]
 8017ad0:	dc02      	bgt.n	8017ad8 <_dtoa_r+0xab8>
 8017ad2:	d1de      	bne.n	8017a92 <_dtoa_r+0xa72>
 8017ad4:	07da      	lsls	r2, r3, #31
 8017ad6:	d5dc      	bpl.n	8017a92 <_dtoa_r+0xa72>
 8017ad8:	2b39      	cmp	r3, #57	; 0x39
 8017ada:	d1d8      	bne.n	8017a8e <_dtoa_r+0xa6e>
 8017adc:	9a02      	ldr	r2, [sp, #8]
 8017ade:	2339      	movs	r3, #57	; 0x39
 8017ae0:	7013      	strb	r3, [r2, #0]
 8017ae2:	462b      	mov	r3, r5
 8017ae4:	461d      	mov	r5, r3
 8017ae6:	3b01      	subs	r3, #1
 8017ae8:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8017aec:	2a39      	cmp	r2, #57	; 0x39
 8017aee:	d050      	beq.n	8017b92 <_dtoa_r+0xb72>
 8017af0:	3201      	adds	r2, #1
 8017af2:	701a      	strb	r2, [r3, #0]
 8017af4:	e745      	b.n	8017982 <_dtoa_r+0x962>
 8017af6:	2a00      	cmp	r2, #0
 8017af8:	dd03      	ble.n	8017b02 <_dtoa_r+0xae2>
 8017afa:	2b39      	cmp	r3, #57	; 0x39
 8017afc:	d0ee      	beq.n	8017adc <_dtoa_r+0xabc>
 8017afe:	3301      	adds	r3, #1
 8017b00:	e7c7      	b.n	8017a92 <_dtoa_r+0xa72>
 8017b02:	9a01      	ldr	r2, [sp, #4]
 8017b04:	9907      	ldr	r1, [sp, #28]
 8017b06:	f802 3c01 	strb.w	r3, [r2, #-1]
 8017b0a:	428a      	cmp	r2, r1
 8017b0c:	d02a      	beq.n	8017b64 <_dtoa_r+0xb44>
 8017b0e:	4659      	mov	r1, fp
 8017b10:	2300      	movs	r3, #0
 8017b12:	220a      	movs	r2, #10
 8017b14:	4620      	mov	r0, r4
 8017b16:	f000 fc75 	bl	8018404 <__multadd>
 8017b1a:	45b8      	cmp	r8, r7
 8017b1c:	4683      	mov	fp, r0
 8017b1e:	f04f 0300 	mov.w	r3, #0
 8017b22:	f04f 020a 	mov.w	r2, #10
 8017b26:	4641      	mov	r1, r8
 8017b28:	4620      	mov	r0, r4
 8017b2a:	d107      	bne.n	8017b3c <_dtoa_r+0xb1c>
 8017b2c:	f000 fc6a 	bl	8018404 <__multadd>
 8017b30:	4680      	mov	r8, r0
 8017b32:	4607      	mov	r7, r0
 8017b34:	9b01      	ldr	r3, [sp, #4]
 8017b36:	3301      	adds	r3, #1
 8017b38:	9301      	str	r3, [sp, #4]
 8017b3a:	e775      	b.n	8017a28 <_dtoa_r+0xa08>
 8017b3c:	f000 fc62 	bl	8018404 <__multadd>
 8017b40:	4639      	mov	r1, r7
 8017b42:	4680      	mov	r8, r0
 8017b44:	2300      	movs	r3, #0
 8017b46:	220a      	movs	r2, #10
 8017b48:	4620      	mov	r0, r4
 8017b4a:	f000 fc5b 	bl	8018404 <__multadd>
 8017b4e:	4607      	mov	r7, r0
 8017b50:	e7f0      	b.n	8017b34 <_dtoa_r+0xb14>
 8017b52:	f1b9 0f00 	cmp.w	r9, #0
 8017b56:	9a00      	ldr	r2, [sp, #0]
 8017b58:	bfcc      	ite	gt
 8017b5a:	464d      	movgt	r5, r9
 8017b5c:	2501      	movle	r5, #1
 8017b5e:	4415      	add	r5, r2
 8017b60:	f04f 0800 	mov.w	r8, #0
 8017b64:	4659      	mov	r1, fp
 8017b66:	2201      	movs	r2, #1
 8017b68:	4620      	mov	r0, r4
 8017b6a:	9301      	str	r3, [sp, #4]
 8017b6c:	f000 fe44 	bl	80187f8 <__lshift>
 8017b70:	4631      	mov	r1, r6
 8017b72:	4683      	mov	fp, r0
 8017b74:	f000 feac 	bl	80188d0 <__mcmp>
 8017b78:	2800      	cmp	r0, #0
 8017b7a:	dcb2      	bgt.n	8017ae2 <_dtoa_r+0xac2>
 8017b7c:	d102      	bne.n	8017b84 <_dtoa_r+0xb64>
 8017b7e:	9b01      	ldr	r3, [sp, #4]
 8017b80:	07db      	lsls	r3, r3, #31
 8017b82:	d4ae      	bmi.n	8017ae2 <_dtoa_r+0xac2>
 8017b84:	462b      	mov	r3, r5
 8017b86:	461d      	mov	r5, r3
 8017b88:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8017b8c:	2a30      	cmp	r2, #48	; 0x30
 8017b8e:	d0fa      	beq.n	8017b86 <_dtoa_r+0xb66>
 8017b90:	e6f7      	b.n	8017982 <_dtoa_r+0x962>
 8017b92:	9a00      	ldr	r2, [sp, #0]
 8017b94:	429a      	cmp	r2, r3
 8017b96:	d1a5      	bne.n	8017ae4 <_dtoa_r+0xac4>
 8017b98:	f10a 0a01 	add.w	sl, sl, #1
 8017b9c:	2331      	movs	r3, #49	; 0x31
 8017b9e:	e779      	b.n	8017a94 <_dtoa_r+0xa74>
 8017ba0:	4b13      	ldr	r3, [pc, #76]	; (8017bf0 <_dtoa_r+0xbd0>)
 8017ba2:	f7ff baaf 	b.w	8017104 <_dtoa_r+0xe4>
 8017ba6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8017ba8:	2b00      	cmp	r3, #0
 8017baa:	f47f aa86 	bne.w	80170ba <_dtoa_r+0x9a>
 8017bae:	4b11      	ldr	r3, [pc, #68]	; (8017bf4 <_dtoa_r+0xbd4>)
 8017bb0:	f7ff baa8 	b.w	8017104 <_dtoa_r+0xe4>
 8017bb4:	f1b9 0f00 	cmp.w	r9, #0
 8017bb8:	dc03      	bgt.n	8017bc2 <_dtoa_r+0xba2>
 8017bba:	9b05      	ldr	r3, [sp, #20]
 8017bbc:	2b02      	cmp	r3, #2
 8017bbe:	f73f aec9 	bgt.w	8017954 <_dtoa_r+0x934>
 8017bc2:	9d00      	ldr	r5, [sp, #0]
 8017bc4:	4631      	mov	r1, r6
 8017bc6:	4658      	mov	r0, fp
 8017bc8:	f7ff f99e 	bl	8016f08 <quorem>
 8017bcc:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8017bd0:	f805 3b01 	strb.w	r3, [r5], #1
 8017bd4:	9a00      	ldr	r2, [sp, #0]
 8017bd6:	1aaa      	subs	r2, r5, r2
 8017bd8:	4591      	cmp	r9, r2
 8017bda:	ddba      	ble.n	8017b52 <_dtoa_r+0xb32>
 8017bdc:	4659      	mov	r1, fp
 8017bde:	2300      	movs	r3, #0
 8017be0:	220a      	movs	r2, #10
 8017be2:	4620      	mov	r0, r4
 8017be4:	f000 fc0e 	bl	8018404 <__multadd>
 8017be8:	4683      	mov	fp, r0
 8017bea:	e7eb      	b.n	8017bc4 <_dtoa_r+0xba4>
 8017bec:	0801f79c 	.word	0x0801f79c
 8017bf0:	0801f9a1 	.word	0x0801f9a1
 8017bf4:	0801f719 	.word	0x0801f719

08017bf8 <rshift>:
 8017bf8:	6903      	ldr	r3, [r0, #16]
 8017bfa:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8017bfe:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017c02:	ea4f 1261 	mov.w	r2, r1, asr #5
 8017c06:	f100 0414 	add.w	r4, r0, #20
 8017c0a:	dd45      	ble.n	8017c98 <rshift+0xa0>
 8017c0c:	f011 011f 	ands.w	r1, r1, #31
 8017c10:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8017c14:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8017c18:	d10c      	bne.n	8017c34 <rshift+0x3c>
 8017c1a:	f100 0710 	add.w	r7, r0, #16
 8017c1e:	4629      	mov	r1, r5
 8017c20:	42b1      	cmp	r1, r6
 8017c22:	d334      	bcc.n	8017c8e <rshift+0x96>
 8017c24:	1a9b      	subs	r3, r3, r2
 8017c26:	009b      	lsls	r3, r3, #2
 8017c28:	1eea      	subs	r2, r5, #3
 8017c2a:	4296      	cmp	r6, r2
 8017c2c:	bf38      	it	cc
 8017c2e:	2300      	movcc	r3, #0
 8017c30:	4423      	add	r3, r4
 8017c32:	e015      	b.n	8017c60 <rshift+0x68>
 8017c34:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8017c38:	f1c1 0820 	rsb	r8, r1, #32
 8017c3c:	40cf      	lsrs	r7, r1
 8017c3e:	f105 0e04 	add.w	lr, r5, #4
 8017c42:	46a1      	mov	r9, r4
 8017c44:	4576      	cmp	r6, lr
 8017c46:	46f4      	mov	ip, lr
 8017c48:	d815      	bhi.n	8017c76 <rshift+0x7e>
 8017c4a:	1a9b      	subs	r3, r3, r2
 8017c4c:	009a      	lsls	r2, r3, #2
 8017c4e:	3a04      	subs	r2, #4
 8017c50:	3501      	adds	r5, #1
 8017c52:	42ae      	cmp	r6, r5
 8017c54:	bf38      	it	cc
 8017c56:	2200      	movcc	r2, #0
 8017c58:	18a3      	adds	r3, r4, r2
 8017c5a:	50a7      	str	r7, [r4, r2]
 8017c5c:	b107      	cbz	r7, 8017c60 <rshift+0x68>
 8017c5e:	3304      	adds	r3, #4
 8017c60:	1b1a      	subs	r2, r3, r4
 8017c62:	42a3      	cmp	r3, r4
 8017c64:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8017c68:	bf08      	it	eq
 8017c6a:	2300      	moveq	r3, #0
 8017c6c:	6102      	str	r2, [r0, #16]
 8017c6e:	bf08      	it	eq
 8017c70:	6143      	streq	r3, [r0, #20]
 8017c72:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017c76:	f8dc c000 	ldr.w	ip, [ip]
 8017c7a:	fa0c fc08 	lsl.w	ip, ip, r8
 8017c7e:	ea4c 0707 	orr.w	r7, ip, r7
 8017c82:	f849 7b04 	str.w	r7, [r9], #4
 8017c86:	f85e 7b04 	ldr.w	r7, [lr], #4
 8017c8a:	40cf      	lsrs	r7, r1
 8017c8c:	e7da      	b.n	8017c44 <rshift+0x4c>
 8017c8e:	f851 cb04 	ldr.w	ip, [r1], #4
 8017c92:	f847 cf04 	str.w	ip, [r7, #4]!
 8017c96:	e7c3      	b.n	8017c20 <rshift+0x28>
 8017c98:	4623      	mov	r3, r4
 8017c9a:	e7e1      	b.n	8017c60 <rshift+0x68>

08017c9c <__hexdig_fun>:
 8017c9c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8017ca0:	2b09      	cmp	r3, #9
 8017ca2:	d802      	bhi.n	8017caa <__hexdig_fun+0xe>
 8017ca4:	3820      	subs	r0, #32
 8017ca6:	b2c0      	uxtb	r0, r0
 8017ca8:	4770      	bx	lr
 8017caa:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8017cae:	2b05      	cmp	r3, #5
 8017cb0:	d801      	bhi.n	8017cb6 <__hexdig_fun+0x1a>
 8017cb2:	3847      	subs	r0, #71	; 0x47
 8017cb4:	e7f7      	b.n	8017ca6 <__hexdig_fun+0xa>
 8017cb6:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8017cba:	2b05      	cmp	r3, #5
 8017cbc:	d801      	bhi.n	8017cc2 <__hexdig_fun+0x26>
 8017cbe:	3827      	subs	r0, #39	; 0x27
 8017cc0:	e7f1      	b.n	8017ca6 <__hexdig_fun+0xa>
 8017cc2:	2000      	movs	r0, #0
 8017cc4:	4770      	bx	lr
	...

08017cc8 <__gethex>:
 8017cc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017ccc:	ed2d 8b02 	vpush	{d8}
 8017cd0:	b089      	sub	sp, #36	; 0x24
 8017cd2:	ee08 0a10 	vmov	s16, r0
 8017cd6:	9304      	str	r3, [sp, #16]
 8017cd8:	4bbc      	ldr	r3, [pc, #752]	; (8017fcc <__gethex+0x304>)
 8017cda:	681b      	ldr	r3, [r3, #0]
 8017cdc:	9301      	str	r3, [sp, #4]
 8017cde:	4618      	mov	r0, r3
 8017ce0:	468b      	mov	fp, r1
 8017ce2:	4690      	mov	r8, r2
 8017ce4:	f7e8 fa9e 	bl	8000224 <strlen>
 8017ce8:	9b01      	ldr	r3, [sp, #4]
 8017cea:	f8db 2000 	ldr.w	r2, [fp]
 8017cee:	4403      	add	r3, r0
 8017cf0:	4682      	mov	sl, r0
 8017cf2:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8017cf6:	9305      	str	r3, [sp, #20]
 8017cf8:	1c93      	adds	r3, r2, #2
 8017cfa:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8017cfe:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8017d02:	32fe      	adds	r2, #254	; 0xfe
 8017d04:	18d1      	adds	r1, r2, r3
 8017d06:	461f      	mov	r7, r3
 8017d08:	f813 0b01 	ldrb.w	r0, [r3], #1
 8017d0c:	9100      	str	r1, [sp, #0]
 8017d0e:	2830      	cmp	r0, #48	; 0x30
 8017d10:	d0f8      	beq.n	8017d04 <__gethex+0x3c>
 8017d12:	f7ff ffc3 	bl	8017c9c <__hexdig_fun>
 8017d16:	4604      	mov	r4, r0
 8017d18:	2800      	cmp	r0, #0
 8017d1a:	d13a      	bne.n	8017d92 <__gethex+0xca>
 8017d1c:	9901      	ldr	r1, [sp, #4]
 8017d1e:	4652      	mov	r2, sl
 8017d20:	4638      	mov	r0, r7
 8017d22:	f7fe f9d6 	bl	80160d2 <strncmp>
 8017d26:	4605      	mov	r5, r0
 8017d28:	2800      	cmp	r0, #0
 8017d2a:	d168      	bne.n	8017dfe <__gethex+0x136>
 8017d2c:	f817 000a 	ldrb.w	r0, [r7, sl]
 8017d30:	eb07 060a 	add.w	r6, r7, sl
 8017d34:	f7ff ffb2 	bl	8017c9c <__hexdig_fun>
 8017d38:	2800      	cmp	r0, #0
 8017d3a:	d062      	beq.n	8017e02 <__gethex+0x13a>
 8017d3c:	4633      	mov	r3, r6
 8017d3e:	7818      	ldrb	r0, [r3, #0]
 8017d40:	2830      	cmp	r0, #48	; 0x30
 8017d42:	461f      	mov	r7, r3
 8017d44:	f103 0301 	add.w	r3, r3, #1
 8017d48:	d0f9      	beq.n	8017d3e <__gethex+0x76>
 8017d4a:	f7ff ffa7 	bl	8017c9c <__hexdig_fun>
 8017d4e:	2301      	movs	r3, #1
 8017d50:	fab0 f480 	clz	r4, r0
 8017d54:	0964      	lsrs	r4, r4, #5
 8017d56:	4635      	mov	r5, r6
 8017d58:	9300      	str	r3, [sp, #0]
 8017d5a:	463a      	mov	r2, r7
 8017d5c:	4616      	mov	r6, r2
 8017d5e:	3201      	adds	r2, #1
 8017d60:	7830      	ldrb	r0, [r6, #0]
 8017d62:	f7ff ff9b 	bl	8017c9c <__hexdig_fun>
 8017d66:	2800      	cmp	r0, #0
 8017d68:	d1f8      	bne.n	8017d5c <__gethex+0x94>
 8017d6a:	9901      	ldr	r1, [sp, #4]
 8017d6c:	4652      	mov	r2, sl
 8017d6e:	4630      	mov	r0, r6
 8017d70:	f7fe f9af 	bl	80160d2 <strncmp>
 8017d74:	b980      	cbnz	r0, 8017d98 <__gethex+0xd0>
 8017d76:	b94d      	cbnz	r5, 8017d8c <__gethex+0xc4>
 8017d78:	eb06 050a 	add.w	r5, r6, sl
 8017d7c:	462a      	mov	r2, r5
 8017d7e:	4616      	mov	r6, r2
 8017d80:	3201      	adds	r2, #1
 8017d82:	7830      	ldrb	r0, [r6, #0]
 8017d84:	f7ff ff8a 	bl	8017c9c <__hexdig_fun>
 8017d88:	2800      	cmp	r0, #0
 8017d8a:	d1f8      	bne.n	8017d7e <__gethex+0xb6>
 8017d8c:	1bad      	subs	r5, r5, r6
 8017d8e:	00ad      	lsls	r5, r5, #2
 8017d90:	e004      	b.n	8017d9c <__gethex+0xd4>
 8017d92:	2400      	movs	r4, #0
 8017d94:	4625      	mov	r5, r4
 8017d96:	e7e0      	b.n	8017d5a <__gethex+0x92>
 8017d98:	2d00      	cmp	r5, #0
 8017d9a:	d1f7      	bne.n	8017d8c <__gethex+0xc4>
 8017d9c:	7833      	ldrb	r3, [r6, #0]
 8017d9e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8017da2:	2b50      	cmp	r3, #80	; 0x50
 8017da4:	d13b      	bne.n	8017e1e <__gethex+0x156>
 8017da6:	7873      	ldrb	r3, [r6, #1]
 8017da8:	2b2b      	cmp	r3, #43	; 0x2b
 8017daa:	d02c      	beq.n	8017e06 <__gethex+0x13e>
 8017dac:	2b2d      	cmp	r3, #45	; 0x2d
 8017dae:	d02e      	beq.n	8017e0e <__gethex+0x146>
 8017db0:	1c71      	adds	r1, r6, #1
 8017db2:	f04f 0900 	mov.w	r9, #0
 8017db6:	7808      	ldrb	r0, [r1, #0]
 8017db8:	f7ff ff70 	bl	8017c9c <__hexdig_fun>
 8017dbc:	1e43      	subs	r3, r0, #1
 8017dbe:	b2db      	uxtb	r3, r3
 8017dc0:	2b18      	cmp	r3, #24
 8017dc2:	d82c      	bhi.n	8017e1e <__gethex+0x156>
 8017dc4:	f1a0 0210 	sub.w	r2, r0, #16
 8017dc8:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8017dcc:	f7ff ff66 	bl	8017c9c <__hexdig_fun>
 8017dd0:	1e43      	subs	r3, r0, #1
 8017dd2:	b2db      	uxtb	r3, r3
 8017dd4:	2b18      	cmp	r3, #24
 8017dd6:	d91d      	bls.n	8017e14 <__gethex+0x14c>
 8017dd8:	f1b9 0f00 	cmp.w	r9, #0
 8017ddc:	d000      	beq.n	8017de0 <__gethex+0x118>
 8017dde:	4252      	negs	r2, r2
 8017de0:	4415      	add	r5, r2
 8017de2:	f8cb 1000 	str.w	r1, [fp]
 8017de6:	b1e4      	cbz	r4, 8017e22 <__gethex+0x15a>
 8017de8:	9b00      	ldr	r3, [sp, #0]
 8017dea:	2b00      	cmp	r3, #0
 8017dec:	bf14      	ite	ne
 8017dee:	2700      	movne	r7, #0
 8017df0:	2706      	moveq	r7, #6
 8017df2:	4638      	mov	r0, r7
 8017df4:	b009      	add	sp, #36	; 0x24
 8017df6:	ecbd 8b02 	vpop	{d8}
 8017dfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017dfe:	463e      	mov	r6, r7
 8017e00:	4625      	mov	r5, r4
 8017e02:	2401      	movs	r4, #1
 8017e04:	e7ca      	b.n	8017d9c <__gethex+0xd4>
 8017e06:	f04f 0900 	mov.w	r9, #0
 8017e0a:	1cb1      	adds	r1, r6, #2
 8017e0c:	e7d3      	b.n	8017db6 <__gethex+0xee>
 8017e0e:	f04f 0901 	mov.w	r9, #1
 8017e12:	e7fa      	b.n	8017e0a <__gethex+0x142>
 8017e14:	230a      	movs	r3, #10
 8017e16:	fb03 0202 	mla	r2, r3, r2, r0
 8017e1a:	3a10      	subs	r2, #16
 8017e1c:	e7d4      	b.n	8017dc8 <__gethex+0x100>
 8017e1e:	4631      	mov	r1, r6
 8017e20:	e7df      	b.n	8017de2 <__gethex+0x11a>
 8017e22:	1bf3      	subs	r3, r6, r7
 8017e24:	3b01      	subs	r3, #1
 8017e26:	4621      	mov	r1, r4
 8017e28:	2b07      	cmp	r3, #7
 8017e2a:	dc0b      	bgt.n	8017e44 <__gethex+0x17c>
 8017e2c:	ee18 0a10 	vmov	r0, s16
 8017e30:	f000 fa86 	bl	8018340 <_Balloc>
 8017e34:	4604      	mov	r4, r0
 8017e36:	b940      	cbnz	r0, 8017e4a <__gethex+0x182>
 8017e38:	4b65      	ldr	r3, [pc, #404]	; (8017fd0 <__gethex+0x308>)
 8017e3a:	4602      	mov	r2, r0
 8017e3c:	21de      	movs	r1, #222	; 0xde
 8017e3e:	4865      	ldr	r0, [pc, #404]	; (8017fd4 <__gethex+0x30c>)
 8017e40:	f001 fcde 	bl	8019800 <__assert_func>
 8017e44:	3101      	adds	r1, #1
 8017e46:	105b      	asrs	r3, r3, #1
 8017e48:	e7ee      	b.n	8017e28 <__gethex+0x160>
 8017e4a:	f100 0914 	add.w	r9, r0, #20
 8017e4e:	f04f 0b00 	mov.w	fp, #0
 8017e52:	f1ca 0301 	rsb	r3, sl, #1
 8017e56:	f8cd 9008 	str.w	r9, [sp, #8]
 8017e5a:	f8cd b000 	str.w	fp, [sp]
 8017e5e:	9306      	str	r3, [sp, #24]
 8017e60:	42b7      	cmp	r7, r6
 8017e62:	d340      	bcc.n	8017ee6 <__gethex+0x21e>
 8017e64:	9802      	ldr	r0, [sp, #8]
 8017e66:	9b00      	ldr	r3, [sp, #0]
 8017e68:	f840 3b04 	str.w	r3, [r0], #4
 8017e6c:	eba0 0009 	sub.w	r0, r0, r9
 8017e70:	1080      	asrs	r0, r0, #2
 8017e72:	0146      	lsls	r6, r0, #5
 8017e74:	6120      	str	r0, [r4, #16]
 8017e76:	4618      	mov	r0, r3
 8017e78:	f000 fb58 	bl	801852c <__hi0bits>
 8017e7c:	1a30      	subs	r0, r6, r0
 8017e7e:	f8d8 6000 	ldr.w	r6, [r8]
 8017e82:	42b0      	cmp	r0, r6
 8017e84:	dd63      	ble.n	8017f4e <__gethex+0x286>
 8017e86:	1b87      	subs	r7, r0, r6
 8017e88:	4639      	mov	r1, r7
 8017e8a:	4620      	mov	r0, r4
 8017e8c:	f000 fef2 	bl	8018c74 <__any_on>
 8017e90:	4682      	mov	sl, r0
 8017e92:	b1a8      	cbz	r0, 8017ec0 <__gethex+0x1f8>
 8017e94:	1e7b      	subs	r3, r7, #1
 8017e96:	1159      	asrs	r1, r3, #5
 8017e98:	f003 021f 	and.w	r2, r3, #31
 8017e9c:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8017ea0:	f04f 0a01 	mov.w	sl, #1
 8017ea4:	fa0a f202 	lsl.w	r2, sl, r2
 8017ea8:	420a      	tst	r2, r1
 8017eaa:	d009      	beq.n	8017ec0 <__gethex+0x1f8>
 8017eac:	4553      	cmp	r3, sl
 8017eae:	dd05      	ble.n	8017ebc <__gethex+0x1f4>
 8017eb0:	1eb9      	subs	r1, r7, #2
 8017eb2:	4620      	mov	r0, r4
 8017eb4:	f000 fede 	bl	8018c74 <__any_on>
 8017eb8:	2800      	cmp	r0, #0
 8017eba:	d145      	bne.n	8017f48 <__gethex+0x280>
 8017ebc:	f04f 0a02 	mov.w	sl, #2
 8017ec0:	4639      	mov	r1, r7
 8017ec2:	4620      	mov	r0, r4
 8017ec4:	f7ff fe98 	bl	8017bf8 <rshift>
 8017ec8:	443d      	add	r5, r7
 8017eca:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8017ece:	42ab      	cmp	r3, r5
 8017ed0:	da4c      	bge.n	8017f6c <__gethex+0x2a4>
 8017ed2:	ee18 0a10 	vmov	r0, s16
 8017ed6:	4621      	mov	r1, r4
 8017ed8:	f000 fa72 	bl	80183c0 <_Bfree>
 8017edc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8017ede:	2300      	movs	r3, #0
 8017ee0:	6013      	str	r3, [r2, #0]
 8017ee2:	27a3      	movs	r7, #163	; 0xa3
 8017ee4:	e785      	b.n	8017df2 <__gethex+0x12a>
 8017ee6:	1e73      	subs	r3, r6, #1
 8017ee8:	9a05      	ldr	r2, [sp, #20]
 8017eea:	9303      	str	r3, [sp, #12]
 8017eec:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8017ef0:	4293      	cmp	r3, r2
 8017ef2:	d019      	beq.n	8017f28 <__gethex+0x260>
 8017ef4:	f1bb 0f20 	cmp.w	fp, #32
 8017ef8:	d107      	bne.n	8017f0a <__gethex+0x242>
 8017efa:	9b02      	ldr	r3, [sp, #8]
 8017efc:	9a00      	ldr	r2, [sp, #0]
 8017efe:	f843 2b04 	str.w	r2, [r3], #4
 8017f02:	9302      	str	r3, [sp, #8]
 8017f04:	2300      	movs	r3, #0
 8017f06:	9300      	str	r3, [sp, #0]
 8017f08:	469b      	mov	fp, r3
 8017f0a:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8017f0e:	f7ff fec5 	bl	8017c9c <__hexdig_fun>
 8017f12:	9b00      	ldr	r3, [sp, #0]
 8017f14:	f000 000f 	and.w	r0, r0, #15
 8017f18:	fa00 f00b 	lsl.w	r0, r0, fp
 8017f1c:	4303      	orrs	r3, r0
 8017f1e:	9300      	str	r3, [sp, #0]
 8017f20:	f10b 0b04 	add.w	fp, fp, #4
 8017f24:	9b03      	ldr	r3, [sp, #12]
 8017f26:	e00d      	b.n	8017f44 <__gethex+0x27c>
 8017f28:	9b03      	ldr	r3, [sp, #12]
 8017f2a:	9a06      	ldr	r2, [sp, #24]
 8017f2c:	4413      	add	r3, r2
 8017f2e:	42bb      	cmp	r3, r7
 8017f30:	d3e0      	bcc.n	8017ef4 <__gethex+0x22c>
 8017f32:	4618      	mov	r0, r3
 8017f34:	9901      	ldr	r1, [sp, #4]
 8017f36:	9307      	str	r3, [sp, #28]
 8017f38:	4652      	mov	r2, sl
 8017f3a:	f7fe f8ca 	bl	80160d2 <strncmp>
 8017f3e:	9b07      	ldr	r3, [sp, #28]
 8017f40:	2800      	cmp	r0, #0
 8017f42:	d1d7      	bne.n	8017ef4 <__gethex+0x22c>
 8017f44:	461e      	mov	r6, r3
 8017f46:	e78b      	b.n	8017e60 <__gethex+0x198>
 8017f48:	f04f 0a03 	mov.w	sl, #3
 8017f4c:	e7b8      	b.n	8017ec0 <__gethex+0x1f8>
 8017f4e:	da0a      	bge.n	8017f66 <__gethex+0x29e>
 8017f50:	1a37      	subs	r7, r6, r0
 8017f52:	4621      	mov	r1, r4
 8017f54:	ee18 0a10 	vmov	r0, s16
 8017f58:	463a      	mov	r2, r7
 8017f5a:	f000 fc4d 	bl	80187f8 <__lshift>
 8017f5e:	1bed      	subs	r5, r5, r7
 8017f60:	4604      	mov	r4, r0
 8017f62:	f100 0914 	add.w	r9, r0, #20
 8017f66:	f04f 0a00 	mov.w	sl, #0
 8017f6a:	e7ae      	b.n	8017eca <__gethex+0x202>
 8017f6c:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8017f70:	42a8      	cmp	r0, r5
 8017f72:	dd72      	ble.n	801805a <__gethex+0x392>
 8017f74:	1b45      	subs	r5, r0, r5
 8017f76:	42ae      	cmp	r6, r5
 8017f78:	dc36      	bgt.n	8017fe8 <__gethex+0x320>
 8017f7a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8017f7e:	2b02      	cmp	r3, #2
 8017f80:	d02a      	beq.n	8017fd8 <__gethex+0x310>
 8017f82:	2b03      	cmp	r3, #3
 8017f84:	d02c      	beq.n	8017fe0 <__gethex+0x318>
 8017f86:	2b01      	cmp	r3, #1
 8017f88:	d115      	bne.n	8017fb6 <__gethex+0x2ee>
 8017f8a:	42ae      	cmp	r6, r5
 8017f8c:	d113      	bne.n	8017fb6 <__gethex+0x2ee>
 8017f8e:	2e01      	cmp	r6, #1
 8017f90:	d10b      	bne.n	8017faa <__gethex+0x2e2>
 8017f92:	9a04      	ldr	r2, [sp, #16]
 8017f94:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8017f98:	6013      	str	r3, [r2, #0]
 8017f9a:	2301      	movs	r3, #1
 8017f9c:	6123      	str	r3, [r4, #16]
 8017f9e:	f8c9 3000 	str.w	r3, [r9]
 8017fa2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8017fa4:	2762      	movs	r7, #98	; 0x62
 8017fa6:	601c      	str	r4, [r3, #0]
 8017fa8:	e723      	b.n	8017df2 <__gethex+0x12a>
 8017faa:	1e71      	subs	r1, r6, #1
 8017fac:	4620      	mov	r0, r4
 8017fae:	f000 fe61 	bl	8018c74 <__any_on>
 8017fb2:	2800      	cmp	r0, #0
 8017fb4:	d1ed      	bne.n	8017f92 <__gethex+0x2ca>
 8017fb6:	ee18 0a10 	vmov	r0, s16
 8017fba:	4621      	mov	r1, r4
 8017fbc:	f000 fa00 	bl	80183c0 <_Bfree>
 8017fc0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8017fc2:	2300      	movs	r3, #0
 8017fc4:	6013      	str	r3, [r2, #0]
 8017fc6:	2750      	movs	r7, #80	; 0x50
 8017fc8:	e713      	b.n	8017df2 <__gethex+0x12a>
 8017fca:	bf00      	nop
 8017fcc:	0801f818 	.word	0x0801f818
 8017fd0:	0801f79c 	.word	0x0801f79c
 8017fd4:	0801f7ad 	.word	0x0801f7ad
 8017fd8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8017fda:	2b00      	cmp	r3, #0
 8017fdc:	d1eb      	bne.n	8017fb6 <__gethex+0x2ee>
 8017fde:	e7d8      	b.n	8017f92 <__gethex+0x2ca>
 8017fe0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8017fe2:	2b00      	cmp	r3, #0
 8017fe4:	d1d5      	bne.n	8017f92 <__gethex+0x2ca>
 8017fe6:	e7e6      	b.n	8017fb6 <__gethex+0x2ee>
 8017fe8:	1e6f      	subs	r7, r5, #1
 8017fea:	f1ba 0f00 	cmp.w	sl, #0
 8017fee:	d131      	bne.n	8018054 <__gethex+0x38c>
 8017ff0:	b127      	cbz	r7, 8017ffc <__gethex+0x334>
 8017ff2:	4639      	mov	r1, r7
 8017ff4:	4620      	mov	r0, r4
 8017ff6:	f000 fe3d 	bl	8018c74 <__any_on>
 8017ffa:	4682      	mov	sl, r0
 8017ffc:	117b      	asrs	r3, r7, #5
 8017ffe:	2101      	movs	r1, #1
 8018000:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8018004:	f007 071f 	and.w	r7, r7, #31
 8018008:	fa01 f707 	lsl.w	r7, r1, r7
 801800c:	421f      	tst	r7, r3
 801800e:	4629      	mov	r1, r5
 8018010:	4620      	mov	r0, r4
 8018012:	bf18      	it	ne
 8018014:	f04a 0a02 	orrne.w	sl, sl, #2
 8018018:	1b76      	subs	r6, r6, r5
 801801a:	f7ff fded 	bl	8017bf8 <rshift>
 801801e:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8018022:	2702      	movs	r7, #2
 8018024:	f1ba 0f00 	cmp.w	sl, #0
 8018028:	d048      	beq.n	80180bc <__gethex+0x3f4>
 801802a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801802e:	2b02      	cmp	r3, #2
 8018030:	d015      	beq.n	801805e <__gethex+0x396>
 8018032:	2b03      	cmp	r3, #3
 8018034:	d017      	beq.n	8018066 <__gethex+0x39e>
 8018036:	2b01      	cmp	r3, #1
 8018038:	d109      	bne.n	801804e <__gethex+0x386>
 801803a:	f01a 0f02 	tst.w	sl, #2
 801803e:	d006      	beq.n	801804e <__gethex+0x386>
 8018040:	f8d9 0000 	ldr.w	r0, [r9]
 8018044:	ea4a 0a00 	orr.w	sl, sl, r0
 8018048:	f01a 0f01 	tst.w	sl, #1
 801804c:	d10e      	bne.n	801806c <__gethex+0x3a4>
 801804e:	f047 0710 	orr.w	r7, r7, #16
 8018052:	e033      	b.n	80180bc <__gethex+0x3f4>
 8018054:	f04f 0a01 	mov.w	sl, #1
 8018058:	e7d0      	b.n	8017ffc <__gethex+0x334>
 801805a:	2701      	movs	r7, #1
 801805c:	e7e2      	b.n	8018024 <__gethex+0x35c>
 801805e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8018060:	f1c3 0301 	rsb	r3, r3, #1
 8018064:	9315      	str	r3, [sp, #84]	; 0x54
 8018066:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8018068:	2b00      	cmp	r3, #0
 801806a:	d0f0      	beq.n	801804e <__gethex+0x386>
 801806c:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8018070:	f104 0314 	add.w	r3, r4, #20
 8018074:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8018078:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 801807c:	f04f 0c00 	mov.w	ip, #0
 8018080:	4618      	mov	r0, r3
 8018082:	f853 2b04 	ldr.w	r2, [r3], #4
 8018086:	f1b2 3fff 	cmp.w	r2, #4294967295
 801808a:	d01c      	beq.n	80180c6 <__gethex+0x3fe>
 801808c:	3201      	adds	r2, #1
 801808e:	6002      	str	r2, [r0, #0]
 8018090:	2f02      	cmp	r7, #2
 8018092:	f104 0314 	add.w	r3, r4, #20
 8018096:	d13f      	bne.n	8018118 <__gethex+0x450>
 8018098:	f8d8 2000 	ldr.w	r2, [r8]
 801809c:	3a01      	subs	r2, #1
 801809e:	42b2      	cmp	r2, r6
 80180a0:	d10a      	bne.n	80180b8 <__gethex+0x3f0>
 80180a2:	1171      	asrs	r1, r6, #5
 80180a4:	2201      	movs	r2, #1
 80180a6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80180aa:	f006 061f 	and.w	r6, r6, #31
 80180ae:	fa02 f606 	lsl.w	r6, r2, r6
 80180b2:	421e      	tst	r6, r3
 80180b4:	bf18      	it	ne
 80180b6:	4617      	movne	r7, r2
 80180b8:	f047 0720 	orr.w	r7, r7, #32
 80180bc:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80180be:	601c      	str	r4, [r3, #0]
 80180c0:	9b04      	ldr	r3, [sp, #16]
 80180c2:	601d      	str	r5, [r3, #0]
 80180c4:	e695      	b.n	8017df2 <__gethex+0x12a>
 80180c6:	4299      	cmp	r1, r3
 80180c8:	f843 cc04 	str.w	ip, [r3, #-4]
 80180cc:	d8d8      	bhi.n	8018080 <__gethex+0x3b8>
 80180ce:	68a3      	ldr	r3, [r4, #8]
 80180d0:	459b      	cmp	fp, r3
 80180d2:	db19      	blt.n	8018108 <__gethex+0x440>
 80180d4:	6861      	ldr	r1, [r4, #4]
 80180d6:	ee18 0a10 	vmov	r0, s16
 80180da:	3101      	adds	r1, #1
 80180dc:	f000 f930 	bl	8018340 <_Balloc>
 80180e0:	4681      	mov	r9, r0
 80180e2:	b918      	cbnz	r0, 80180ec <__gethex+0x424>
 80180e4:	4b1a      	ldr	r3, [pc, #104]	; (8018150 <__gethex+0x488>)
 80180e6:	4602      	mov	r2, r0
 80180e8:	2184      	movs	r1, #132	; 0x84
 80180ea:	e6a8      	b.n	8017e3e <__gethex+0x176>
 80180ec:	6922      	ldr	r2, [r4, #16]
 80180ee:	3202      	adds	r2, #2
 80180f0:	f104 010c 	add.w	r1, r4, #12
 80180f4:	0092      	lsls	r2, r2, #2
 80180f6:	300c      	adds	r0, #12
 80180f8:	f7fc ffd6 	bl	80150a8 <memcpy>
 80180fc:	4621      	mov	r1, r4
 80180fe:	ee18 0a10 	vmov	r0, s16
 8018102:	f000 f95d 	bl	80183c0 <_Bfree>
 8018106:	464c      	mov	r4, r9
 8018108:	6923      	ldr	r3, [r4, #16]
 801810a:	1c5a      	adds	r2, r3, #1
 801810c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8018110:	6122      	str	r2, [r4, #16]
 8018112:	2201      	movs	r2, #1
 8018114:	615a      	str	r2, [r3, #20]
 8018116:	e7bb      	b.n	8018090 <__gethex+0x3c8>
 8018118:	6922      	ldr	r2, [r4, #16]
 801811a:	455a      	cmp	r2, fp
 801811c:	dd0b      	ble.n	8018136 <__gethex+0x46e>
 801811e:	2101      	movs	r1, #1
 8018120:	4620      	mov	r0, r4
 8018122:	f7ff fd69 	bl	8017bf8 <rshift>
 8018126:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801812a:	3501      	adds	r5, #1
 801812c:	42ab      	cmp	r3, r5
 801812e:	f6ff aed0 	blt.w	8017ed2 <__gethex+0x20a>
 8018132:	2701      	movs	r7, #1
 8018134:	e7c0      	b.n	80180b8 <__gethex+0x3f0>
 8018136:	f016 061f 	ands.w	r6, r6, #31
 801813a:	d0fa      	beq.n	8018132 <__gethex+0x46a>
 801813c:	449a      	add	sl, r3
 801813e:	f1c6 0620 	rsb	r6, r6, #32
 8018142:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8018146:	f000 f9f1 	bl	801852c <__hi0bits>
 801814a:	42b0      	cmp	r0, r6
 801814c:	dbe7      	blt.n	801811e <__gethex+0x456>
 801814e:	e7f0      	b.n	8018132 <__gethex+0x46a>
 8018150:	0801f79c 	.word	0x0801f79c

08018154 <L_shift>:
 8018154:	f1c2 0208 	rsb	r2, r2, #8
 8018158:	0092      	lsls	r2, r2, #2
 801815a:	b570      	push	{r4, r5, r6, lr}
 801815c:	f1c2 0620 	rsb	r6, r2, #32
 8018160:	6843      	ldr	r3, [r0, #4]
 8018162:	6804      	ldr	r4, [r0, #0]
 8018164:	fa03 f506 	lsl.w	r5, r3, r6
 8018168:	432c      	orrs	r4, r5
 801816a:	40d3      	lsrs	r3, r2
 801816c:	6004      	str	r4, [r0, #0]
 801816e:	f840 3f04 	str.w	r3, [r0, #4]!
 8018172:	4288      	cmp	r0, r1
 8018174:	d3f4      	bcc.n	8018160 <L_shift+0xc>
 8018176:	bd70      	pop	{r4, r5, r6, pc}

08018178 <__match>:
 8018178:	b530      	push	{r4, r5, lr}
 801817a:	6803      	ldr	r3, [r0, #0]
 801817c:	3301      	adds	r3, #1
 801817e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8018182:	b914      	cbnz	r4, 801818a <__match+0x12>
 8018184:	6003      	str	r3, [r0, #0]
 8018186:	2001      	movs	r0, #1
 8018188:	bd30      	pop	{r4, r5, pc}
 801818a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801818e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8018192:	2d19      	cmp	r5, #25
 8018194:	bf98      	it	ls
 8018196:	3220      	addls	r2, #32
 8018198:	42a2      	cmp	r2, r4
 801819a:	d0f0      	beq.n	801817e <__match+0x6>
 801819c:	2000      	movs	r0, #0
 801819e:	e7f3      	b.n	8018188 <__match+0x10>

080181a0 <__hexnan>:
 80181a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80181a4:	680b      	ldr	r3, [r1, #0]
 80181a6:	6801      	ldr	r1, [r0, #0]
 80181a8:	115e      	asrs	r6, r3, #5
 80181aa:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80181ae:	f013 031f 	ands.w	r3, r3, #31
 80181b2:	b087      	sub	sp, #28
 80181b4:	bf18      	it	ne
 80181b6:	3604      	addne	r6, #4
 80181b8:	2500      	movs	r5, #0
 80181ba:	1f37      	subs	r7, r6, #4
 80181bc:	4682      	mov	sl, r0
 80181be:	4690      	mov	r8, r2
 80181c0:	9301      	str	r3, [sp, #4]
 80181c2:	f846 5c04 	str.w	r5, [r6, #-4]
 80181c6:	46b9      	mov	r9, r7
 80181c8:	463c      	mov	r4, r7
 80181ca:	9502      	str	r5, [sp, #8]
 80181cc:	46ab      	mov	fp, r5
 80181ce:	784a      	ldrb	r2, [r1, #1]
 80181d0:	1c4b      	adds	r3, r1, #1
 80181d2:	9303      	str	r3, [sp, #12]
 80181d4:	b342      	cbz	r2, 8018228 <__hexnan+0x88>
 80181d6:	4610      	mov	r0, r2
 80181d8:	9105      	str	r1, [sp, #20]
 80181da:	9204      	str	r2, [sp, #16]
 80181dc:	f7ff fd5e 	bl	8017c9c <__hexdig_fun>
 80181e0:	2800      	cmp	r0, #0
 80181e2:	d14f      	bne.n	8018284 <__hexnan+0xe4>
 80181e4:	9a04      	ldr	r2, [sp, #16]
 80181e6:	9905      	ldr	r1, [sp, #20]
 80181e8:	2a20      	cmp	r2, #32
 80181ea:	d818      	bhi.n	801821e <__hexnan+0x7e>
 80181ec:	9b02      	ldr	r3, [sp, #8]
 80181ee:	459b      	cmp	fp, r3
 80181f0:	dd13      	ble.n	801821a <__hexnan+0x7a>
 80181f2:	454c      	cmp	r4, r9
 80181f4:	d206      	bcs.n	8018204 <__hexnan+0x64>
 80181f6:	2d07      	cmp	r5, #7
 80181f8:	dc04      	bgt.n	8018204 <__hexnan+0x64>
 80181fa:	462a      	mov	r2, r5
 80181fc:	4649      	mov	r1, r9
 80181fe:	4620      	mov	r0, r4
 8018200:	f7ff ffa8 	bl	8018154 <L_shift>
 8018204:	4544      	cmp	r4, r8
 8018206:	d950      	bls.n	80182aa <__hexnan+0x10a>
 8018208:	2300      	movs	r3, #0
 801820a:	f1a4 0904 	sub.w	r9, r4, #4
 801820e:	f844 3c04 	str.w	r3, [r4, #-4]
 8018212:	f8cd b008 	str.w	fp, [sp, #8]
 8018216:	464c      	mov	r4, r9
 8018218:	461d      	mov	r5, r3
 801821a:	9903      	ldr	r1, [sp, #12]
 801821c:	e7d7      	b.n	80181ce <__hexnan+0x2e>
 801821e:	2a29      	cmp	r2, #41	; 0x29
 8018220:	d156      	bne.n	80182d0 <__hexnan+0x130>
 8018222:	3102      	adds	r1, #2
 8018224:	f8ca 1000 	str.w	r1, [sl]
 8018228:	f1bb 0f00 	cmp.w	fp, #0
 801822c:	d050      	beq.n	80182d0 <__hexnan+0x130>
 801822e:	454c      	cmp	r4, r9
 8018230:	d206      	bcs.n	8018240 <__hexnan+0xa0>
 8018232:	2d07      	cmp	r5, #7
 8018234:	dc04      	bgt.n	8018240 <__hexnan+0xa0>
 8018236:	462a      	mov	r2, r5
 8018238:	4649      	mov	r1, r9
 801823a:	4620      	mov	r0, r4
 801823c:	f7ff ff8a 	bl	8018154 <L_shift>
 8018240:	4544      	cmp	r4, r8
 8018242:	d934      	bls.n	80182ae <__hexnan+0x10e>
 8018244:	f1a8 0204 	sub.w	r2, r8, #4
 8018248:	4623      	mov	r3, r4
 801824a:	f853 1b04 	ldr.w	r1, [r3], #4
 801824e:	f842 1f04 	str.w	r1, [r2, #4]!
 8018252:	429f      	cmp	r7, r3
 8018254:	d2f9      	bcs.n	801824a <__hexnan+0xaa>
 8018256:	1b3b      	subs	r3, r7, r4
 8018258:	f023 0303 	bic.w	r3, r3, #3
 801825c:	3304      	adds	r3, #4
 801825e:	3401      	adds	r4, #1
 8018260:	3e03      	subs	r6, #3
 8018262:	42b4      	cmp	r4, r6
 8018264:	bf88      	it	hi
 8018266:	2304      	movhi	r3, #4
 8018268:	4443      	add	r3, r8
 801826a:	2200      	movs	r2, #0
 801826c:	f843 2b04 	str.w	r2, [r3], #4
 8018270:	429f      	cmp	r7, r3
 8018272:	d2fb      	bcs.n	801826c <__hexnan+0xcc>
 8018274:	683b      	ldr	r3, [r7, #0]
 8018276:	b91b      	cbnz	r3, 8018280 <__hexnan+0xe0>
 8018278:	4547      	cmp	r7, r8
 801827a:	d127      	bne.n	80182cc <__hexnan+0x12c>
 801827c:	2301      	movs	r3, #1
 801827e:	603b      	str	r3, [r7, #0]
 8018280:	2005      	movs	r0, #5
 8018282:	e026      	b.n	80182d2 <__hexnan+0x132>
 8018284:	3501      	adds	r5, #1
 8018286:	2d08      	cmp	r5, #8
 8018288:	f10b 0b01 	add.w	fp, fp, #1
 801828c:	dd06      	ble.n	801829c <__hexnan+0xfc>
 801828e:	4544      	cmp	r4, r8
 8018290:	d9c3      	bls.n	801821a <__hexnan+0x7a>
 8018292:	2300      	movs	r3, #0
 8018294:	f844 3c04 	str.w	r3, [r4, #-4]
 8018298:	2501      	movs	r5, #1
 801829a:	3c04      	subs	r4, #4
 801829c:	6822      	ldr	r2, [r4, #0]
 801829e:	f000 000f 	and.w	r0, r0, #15
 80182a2:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 80182a6:	6022      	str	r2, [r4, #0]
 80182a8:	e7b7      	b.n	801821a <__hexnan+0x7a>
 80182aa:	2508      	movs	r5, #8
 80182ac:	e7b5      	b.n	801821a <__hexnan+0x7a>
 80182ae:	9b01      	ldr	r3, [sp, #4]
 80182b0:	2b00      	cmp	r3, #0
 80182b2:	d0df      	beq.n	8018274 <__hexnan+0xd4>
 80182b4:	f04f 32ff 	mov.w	r2, #4294967295
 80182b8:	f1c3 0320 	rsb	r3, r3, #32
 80182bc:	fa22 f303 	lsr.w	r3, r2, r3
 80182c0:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80182c4:	401a      	ands	r2, r3
 80182c6:	f846 2c04 	str.w	r2, [r6, #-4]
 80182ca:	e7d3      	b.n	8018274 <__hexnan+0xd4>
 80182cc:	3f04      	subs	r7, #4
 80182ce:	e7d1      	b.n	8018274 <__hexnan+0xd4>
 80182d0:	2004      	movs	r0, #4
 80182d2:	b007      	add	sp, #28
 80182d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080182d8 <_localeconv_r>:
 80182d8:	4800      	ldr	r0, [pc, #0]	; (80182dc <_localeconv_r+0x4>)
 80182da:	4770      	bx	lr
 80182dc:	200002ac 	.word	0x200002ac

080182e0 <_lseek_r>:
 80182e0:	b538      	push	{r3, r4, r5, lr}
 80182e2:	4d07      	ldr	r5, [pc, #28]	; (8018300 <_lseek_r+0x20>)
 80182e4:	4604      	mov	r4, r0
 80182e6:	4608      	mov	r0, r1
 80182e8:	4611      	mov	r1, r2
 80182ea:	2200      	movs	r2, #0
 80182ec:	602a      	str	r2, [r5, #0]
 80182ee:	461a      	mov	r2, r3
 80182f0:	f7e9 f9bd 	bl	800166e <_lseek>
 80182f4:	1c43      	adds	r3, r0, #1
 80182f6:	d102      	bne.n	80182fe <_lseek_r+0x1e>
 80182f8:	682b      	ldr	r3, [r5, #0]
 80182fa:	b103      	cbz	r3, 80182fe <_lseek_r+0x1e>
 80182fc:	6023      	str	r3, [r4, #0]
 80182fe:	bd38      	pop	{r3, r4, r5, pc}
 8018300:	20005868 	.word	0x20005868

08018304 <__ascii_mbtowc>:
 8018304:	b082      	sub	sp, #8
 8018306:	b901      	cbnz	r1, 801830a <__ascii_mbtowc+0x6>
 8018308:	a901      	add	r1, sp, #4
 801830a:	b142      	cbz	r2, 801831e <__ascii_mbtowc+0x1a>
 801830c:	b14b      	cbz	r3, 8018322 <__ascii_mbtowc+0x1e>
 801830e:	7813      	ldrb	r3, [r2, #0]
 8018310:	600b      	str	r3, [r1, #0]
 8018312:	7812      	ldrb	r2, [r2, #0]
 8018314:	1e10      	subs	r0, r2, #0
 8018316:	bf18      	it	ne
 8018318:	2001      	movne	r0, #1
 801831a:	b002      	add	sp, #8
 801831c:	4770      	bx	lr
 801831e:	4610      	mov	r0, r2
 8018320:	e7fb      	b.n	801831a <__ascii_mbtowc+0x16>
 8018322:	f06f 0001 	mvn.w	r0, #1
 8018326:	e7f8      	b.n	801831a <__ascii_mbtowc+0x16>

08018328 <__malloc_lock>:
 8018328:	4801      	ldr	r0, [pc, #4]	; (8018330 <__malloc_lock+0x8>)
 801832a:	f001 bc51 	b.w	8019bd0 <__retarget_lock_acquire_recursive>
 801832e:	bf00      	nop
 8018330:	20005870 	.word	0x20005870

08018334 <__malloc_unlock>:
 8018334:	4801      	ldr	r0, [pc, #4]	; (801833c <__malloc_unlock+0x8>)
 8018336:	f001 bc4c 	b.w	8019bd2 <__retarget_lock_release_recursive>
 801833a:	bf00      	nop
 801833c:	20005870 	.word	0x20005870

08018340 <_Balloc>:
 8018340:	b570      	push	{r4, r5, r6, lr}
 8018342:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8018344:	4604      	mov	r4, r0
 8018346:	460d      	mov	r5, r1
 8018348:	b976      	cbnz	r6, 8018368 <_Balloc+0x28>
 801834a:	2010      	movs	r0, #16
 801834c:	f7fc fe96 	bl	801507c <malloc>
 8018350:	4602      	mov	r2, r0
 8018352:	6260      	str	r0, [r4, #36]	; 0x24
 8018354:	b920      	cbnz	r0, 8018360 <_Balloc+0x20>
 8018356:	4b18      	ldr	r3, [pc, #96]	; (80183b8 <_Balloc+0x78>)
 8018358:	4818      	ldr	r0, [pc, #96]	; (80183bc <_Balloc+0x7c>)
 801835a:	2166      	movs	r1, #102	; 0x66
 801835c:	f001 fa50 	bl	8019800 <__assert_func>
 8018360:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8018364:	6006      	str	r6, [r0, #0]
 8018366:	60c6      	str	r6, [r0, #12]
 8018368:	6a66      	ldr	r6, [r4, #36]	; 0x24
 801836a:	68f3      	ldr	r3, [r6, #12]
 801836c:	b183      	cbz	r3, 8018390 <_Balloc+0x50>
 801836e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8018370:	68db      	ldr	r3, [r3, #12]
 8018372:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8018376:	b9b8      	cbnz	r0, 80183a8 <_Balloc+0x68>
 8018378:	2101      	movs	r1, #1
 801837a:	fa01 f605 	lsl.w	r6, r1, r5
 801837e:	1d72      	adds	r2, r6, #5
 8018380:	0092      	lsls	r2, r2, #2
 8018382:	4620      	mov	r0, r4
 8018384:	f000 fc97 	bl	8018cb6 <_calloc_r>
 8018388:	b160      	cbz	r0, 80183a4 <_Balloc+0x64>
 801838a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801838e:	e00e      	b.n	80183ae <_Balloc+0x6e>
 8018390:	2221      	movs	r2, #33	; 0x21
 8018392:	2104      	movs	r1, #4
 8018394:	4620      	mov	r0, r4
 8018396:	f000 fc8e 	bl	8018cb6 <_calloc_r>
 801839a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801839c:	60f0      	str	r0, [r6, #12]
 801839e:	68db      	ldr	r3, [r3, #12]
 80183a0:	2b00      	cmp	r3, #0
 80183a2:	d1e4      	bne.n	801836e <_Balloc+0x2e>
 80183a4:	2000      	movs	r0, #0
 80183a6:	bd70      	pop	{r4, r5, r6, pc}
 80183a8:	6802      	ldr	r2, [r0, #0]
 80183aa:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80183ae:	2300      	movs	r3, #0
 80183b0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80183b4:	e7f7      	b.n	80183a6 <_Balloc+0x66>
 80183b6:	bf00      	nop
 80183b8:	0801f726 	.word	0x0801f726
 80183bc:	0801f82c 	.word	0x0801f82c

080183c0 <_Bfree>:
 80183c0:	b570      	push	{r4, r5, r6, lr}
 80183c2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80183c4:	4605      	mov	r5, r0
 80183c6:	460c      	mov	r4, r1
 80183c8:	b976      	cbnz	r6, 80183e8 <_Bfree+0x28>
 80183ca:	2010      	movs	r0, #16
 80183cc:	f7fc fe56 	bl	801507c <malloc>
 80183d0:	4602      	mov	r2, r0
 80183d2:	6268      	str	r0, [r5, #36]	; 0x24
 80183d4:	b920      	cbnz	r0, 80183e0 <_Bfree+0x20>
 80183d6:	4b09      	ldr	r3, [pc, #36]	; (80183fc <_Bfree+0x3c>)
 80183d8:	4809      	ldr	r0, [pc, #36]	; (8018400 <_Bfree+0x40>)
 80183da:	218a      	movs	r1, #138	; 0x8a
 80183dc:	f001 fa10 	bl	8019800 <__assert_func>
 80183e0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80183e4:	6006      	str	r6, [r0, #0]
 80183e6:	60c6      	str	r6, [r0, #12]
 80183e8:	b13c      	cbz	r4, 80183fa <_Bfree+0x3a>
 80183ea:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80183ec:	6862      	ldr	r2, [r4, #4]
 80183ee:	68db      	ldr	r3, [r3, #12]
 80183f0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80183f4:	6021      	str	r1, [r4, #0]
 80183f6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80183fa:	bd70      	pop	{r4, r5, r6, pc}
 80183fc:	0801f726 	.word	0x0801f726
 8018400:	0801f82c 	.word	0x0801f82c

08018404 <__multadd>:
 8018404:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018408:	690e      	ldr	r6, [r1, #16]
 801840a:	4607      	mov	r7, r0
 801840c:	4698      	mov	r8, r3
 801840e:	460c      	mov	r4, r1
 8018410:	f101 0014 	add.w	r0, r1, #20
 8018414:	2300      	movs	r3, #0
 8018416:	6805      	ldr	r5, [r0, #0]
 8018418:	b2a9      	uxth	r1, r5
 801841a:	fb02 8101 	mla	r1, r2, r1, r8
 801841e:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8018422:	0c2d      	lsrs	r5, r5, #16
 8018424:	fb02 c505 	mla	r5, r2, r5, ip
 8018428:	b289      	uxth	r1, r1
 801842a:	3301      	adds	r3, #1
 801842c:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8018430:	429e      	cmp	r6, r3
 8018432:	f840 1b04 	str.w	r1, [r0], #4
 8018436:	ea4f 4815 	mov.w	r8, r5, lsr #16
 801843a:	dcec      	bgt.n	8018416 <__multadd+0x12>
 801843c:	f1b8 0f00 	cmp.w	r8, #0
 8018440:	d022      	beq.n	8018488 <__multadd+0x84>
 8018442:	68a3      	ldr	r3, [r4, #8]
 8018444:	42b3      	cmp	r3, r6
 8018446:	dc19      	bgt.n	801847c <__multadd+0x78>
 8018448:	6861      	ldr	r1, [r4, #4]
 801844a:	4638      	mov	r0, r7
 801844c:	3101      	adds	r1, #1
 801844e:	f7ff ff77 	bl	8018340 <_Balloc>
 8018452:	4605      	mov	r5, r0
 8018454:	b928      	cbnz	r0, 8018462 <__multadd+0x5e>
 8018456:	4602      	mov	r2, r0
 8018458:	4b0d      	ldr	r3, [pc, #52]	; (8018490 <__multadd+0x8c>)
 801845a:	480e      	ldr	r0, [pc, #56]	; (8018494 <__multadd+0x90>)
 801845c:	21b5      	movs	r1, #181	; 0xb5
 801845e:	f001 f9cf 	bl	8019800 <__assert_func>
 8018462:	6922      	ldr	r2, [r4, #16]
 8018464:	3202      	adds	r2, #2
 8018466:	f104 010c 	add.w	r1, r4, #12
 801846a:	0092      	lsls	r2, r2, #2
 801846c:	300c      	adds	r0, #12
 801846e:	f7fc fe1b 	bl	80150a8 <memcpy>
 8018472:	4621      	mov	r1, r4
 8018474:	4638      	mov	r0, r7
 8018476:	f7ff ffa3 	bl	80183c0 <_Bfree>
 801847a:	462c      	mov	r4, r5
 801847c:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8018480:	3601      	adds	r6, #1
 8018482:	f8c3 8014 	str.w	r8, [r3, #20]
 8018486:	6126      	str	r6, [r4, #16]
 8018488:	4620      	mov	r0, r4
 801848a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801848e:	bf00      	nop
 8018490:	0801f79c 	.word	0x0801f79c
 8018494:	0801f82c 	.word	0x0801f82c

08018498 <__s2b>:
 8018498:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801849c:	460c      	mov	r4, r1
 801849e:	4615      	mov	r5, r2
 80184a0:	461f      	mov	r7, r3
 80184a2:	2209      	movs	r2, #9
 80184a4:	3308      	adds	r3, #8
 80184a6:	4606      	mov	r6, r0
 80184a8:	fb93 f3f2 	sdiv	r3, r3, r2
 80184ac:	2100      	movs	r1, #0
 80184ae:	2201      	movs	r2, #1
 80184b0:	429a      	cmp	r2, r3
 80184b2:	db09      	blt.n	80184c8 <__s2b+0x30>
 80184b4:	4630      	mov	r0, r6
 80184b6:	f7ff ff43 	bl	8018340 <_Balloc>
 80184ba:	b940      	cbnz	r0, 80184ce <__s2b+0x36>
 80184bc:	4602      	mov	r2, r0
 80184be:	4b19      	ldr	r3, [pc, #100]	; (8018524 <__s2b+0x8c>)
 80184c0:	4819      	ldr	r0, [pc, #100]	; (8018528 <__s2b+0x90>)
 80184c2:	21ce      	movs	r1, #206	; 0xce
 80184c4:	f001 f99c 	bl	8019800 <__assert_func>
 80184c8:	0052      	lsls	r2, r2, #1
 80184ca:	3101      	adds	r1, #1
 80184cc:	e7f0      	b.n	80184b0 <__s2b+0x18>
 80184ce:	9b08      	ldr	r3, [sp, #32]
 80184d0:	6143      	str	r3, [r0, #20]
 80184d2:	2d09      	cmp	r5, #9
 80184d4:	f04f 0301 	mov.w	r3, #1
 80184d8:	6103      	str	r3, [r0, #16]
 80184da:	dd16      	ble.n	801850a <__s2b+0x72>
 80184dc:	f104 0909 	add.w	r9, r4, #9
 80184e0:	46c8      	mov	r8, r9
 80184e2:	442c      	add	r4, r5
 80184e4:	f818 3b01 	ldrb.w	r3, [r8], #1
 80184e8:	4601      	mov	r1, r0
 80184ea:	3b30      	subs	r3, #48	; 0x30
 80184ec:	220a      	movs	r2, #10
 80184ee:	4630      	mov	r0, r6
 80184f0:	f7ff ff88 	bl	8018404 <__multadd>
 80184f4:	45a0      	cmp	r8, r4
 80184f6:	d1f5      	bne.n	80184e4 <__s2b+0x4c>
 80184f8:	f1a5 0408 	sub.w	r4, r5, #8
 80184fc:	444c      	add	r4, r9
 80184fe:	1b2d      	subs	r5, r5, r4
 8018500:	1963      	adds	r3, r4, r5
 8018502:	42bb      	cmp	r3, r7
 8018504:	db04      	blt.n	8018510 <__s2b+0x78>
 8018506:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801850a:	340a      	adds	r4, #10
 801850c:	2509      	movs	r5, #9
 801850e:	e7f6      	b.n	80184fe <__s2b+0x66>
 8018510:	f814 3b01 	ldrb.w	r3, [r4], #1
 8018514:	4601      	mov	r1, r0
 8018516:	3b30      	subs	r3, #48	; 0x30
 8018518:	220a      	movs	r2, #10
 801851a:	4630      	mov	r0, r6
 801851c:	f7ff ff72 	bl	8018404 <__multadd>
 8018520:	e7ee      	b.n	8018500 <__s2b+0x68>
 8018522:	bf00      	nop
 8018524:	0801f79c 	.word	0x0801f79c
 8018528:	0801f82c 	.word	0x0801f82c

0801852c <__hi0bits>:
 801852c:	0c03      	lsrs	r3, r0, #16
 801852e:	041b      	lsls	r3, r3, #16
 8018530:	b9d3      	cbnz	r3, 8018568 <__hi0bits+0x3c>
 8018532:	0400      	lsls	r0, r0, #16
 8018534:	2310      	movs	r3, #16
 8018536:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801853a:	bf04      	itt	eq
 801853c:	0200      	lsleq	r0, r0, #8
 801853e:	3308      	addeq	r3, #8
 8018540:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8018544:	bf04      	itt	eq
 8018546:	0100      	lsleq	r0, r0, #4
 8018548:	3304      	addeq	r3, #4
 801854a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801854e:	bf04      	itt	eq
 8018550:	0080      	lsleq	r0, r0, #2
 8018552:	3302      	addeq	r3, #2
 8018554:	2800      	cmp	r0, #0
 8018556:	db05      	blt.n	8018564 <__hi0bits+0x38>
 8018558:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 801855c:	f103 0301 	add.w	r3, r3, #1
 8018560:	bf08      	it	eq
 8018562:	2320      	moveq	r3, #32
 8018564:	4618      	mov	r0, r3
 8018566:	4770      	bx	lr
 8018568:	2300      	movs	r3, #0
 801856a:	e7e4      	b.n	8018536 <__hi0bits+0xa>

0801856c <__lo0bits>:
 801856c:	6803      	ldr	r3, [r0, #0]
 801856e:	f013 0207 	ands.w	r2, r3, #7
 8018572:	4601      	mov	r1, r0
 8018574:	d00b      	beq.n	801858e <__lo0bits+0x22>
 8018576:	07da      	lsls	r2, r3, #31
 8018578:	d424      	bmi.n	80185c4 <__lo0bits+0x58>
 801857a:	0798      	lsls	r0, r3, #30
 801857c:	bf49      	itett	mi
 801857e:	085b      	lsrmi	r3, r3, #1
 8018580:	089b      	lsrpl	r3, r3, #2
 8018582:	2001      	movmi	r0, #1
 8018584:	600b      	strmi	r3, [r1, #0]
 8018586:	bf5c      	itt	pl
 8018588:	600b      	strpl	r3, [r1, #0]
 801858a:	2002      	movpl	r0, #2
 801858c:	4770      	bx	lr
 801858e:	b298      	uxth	r0, r3
 8018590:	b9b0      	cbnz	r0, 80185c0 <__lo0bits+0x54>
 8018592:	0c1b      	lsrs	r3, r3, #16
 8018594:	2010      	movs	r0, #16
 8018596:	f013 0fff 	tst.w	r3, #255	; 0xff
 801859a:	bf04      	itt	eq
 801859c:	0a1b      	lsreq	r3, r3, #8
 801859e:	3008      	addeq	r0, #8
 80185a0:	071a      	lsls	r2, r3, #28
 80185a2:	bf04      	itt	eq
 80185a4:	091b      	lsreq	r3, r3, #4
 80185a6:	3004      	addeq	r0, #4
 80185a8:	079a      	lsls	r2, r3, #30
 80185aa:	bf04      	itt	eq
 80185ac:	089b      	lsreq	r3, r3, #2
 80185ae:	3002      	addeq	r0, #2
 80185b0:	07da      	lsls	r2, r3, #31
 80185b2:	d403      	bmi.n	80185bc <__lo0bits+0x50>
 80185b4:	085b      	lsrs	r3, r3, #1
 80185b6:	f100 0001 	add.w	r0, r0, #1
 80185ba:	d005      	beq.n	80185c8 <__lo0bits+0x5c>
 80185bc:	600b      	str	r3, [r1, #0]
 80185be:	4770      	bx	lr
 80185c0:	4610      	mov	r0, r2
 80185c2:	e7e8      	b.n	8018596 <__lo0bits+0x2a>
 80185c4:	2000      	movs	r0, #0
 80185c6:	4770      	bx	lr
 80185c8:	2020      	movs	r0, #32
 80185ca:	4770      	bx	lr

080185cc <__i2b>:
 80185cc:	b510      	push	{r4, lr}
 80185ce:	460c      	mov	r4, r1
 80185d0:	2101      	movs	r1, #1
 80185d2:	f7ff feb5 	bl	8018340 <_Balloc>
 80185d6:	4602      	mov	r2, r0
 80185d8:	b928      	cbnz	r0, 80185e6 <__i2b+0x1a>
 80185da:	4b05      	ldr	r3, [pc, #20]	; (80185f0 <__i2b+0x24>)
 80185dc:	4805      	ldr	r0, [pc, #20]	; (80185f4 <__i2b+0x28>)
 80185de:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80185e2:	f001 f90d 	bl	8019800 <__assert_func>
 80185e6:	2301      	movs	r3, #1
 80185e8:	6144      	str	r4, [r0, #20]
 80185ea:	6103      	str	r3, [r0, #16]
 80185ec:	bd10      	pop	{r4, pc}
 80185ee:	bf00      	nop
 80185f0:	0801f79c 	.word	0x0801f79c
 80185f4:	0801f82c 	.word	0x0801f82c

080185f8 <__multiply>:
 80185f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80185fc:	4614      	mov	r4, r2
 80185fe:	690a      	ldr	r2, [r1, #16]
 8018600:	6923      	ldr	r3, [r4, #16]
 8018602:	429a      	cmp	r2, r3
 8018604:	bfb8      	it	lt
 8018606:	460b      	movlt	r3, r1
 8018608:	460d      	mov	r5, r1
 801860a:	bfbc      	itt	lt
 801860c:	4625      	movlt	r5, r4
 801860e:	461c      	movlt	r4, r3
 8018610:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8018614:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8018618:	68ab      	ldr	r3, [r5, #8]
 801861a:	6869      	ldr	r1, [r5, #4]
 801861c:	eb0a 0709 	add.w	r7, sl, r9
 8018620:	42bb      	cmp	r3, r7
 8018622:	b085      	sub	sp, #20
 8018624:	bfb8      	it	lt
 8018626:	3101      	addlt	r1, #1
 8018628:	f7ff fe8a 	bl	8018340 <_Balloc>
 801862c:	b930      	cbnz	r0, 801863c <__multiply+0x44>
 801862e:	4602      	mov	r2, r0
 8018630:	4b42      	ldr	r3, [pc, #264]	; (801873c <__multiply+0x144>)
 8018632:	4843      	ldr	r0, [pc, #268]	; (8018740 <__multiply+0x148>)
 8018634:	f240 115d 	movw	r1, #349	; 0x15d
 8018638:	f001 f8e2 	bl	8019800 <__assert_func>
 801863c:	f100 0614 	add.w	r6, r0, #20
 8018640:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8018644:	4633      	mov	r3, r6
 8018646:	2200      	movs	r2, #0
 8018648:	4543      	cmp	r3, r8
 801864a:	d31e      	bcc.n	801868a <__multiply+0x92>
 801864c:	f105 0c14 	add.w	ip, r5, #20
 8018650:	f104 0314 	add.w	r3, r4, #20
 8018654:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8018658:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 801865c:	9202      	str	r2, [sp, #8]
 801865e:	ebac 0205 	sub.w	r2, ip, r5
 8018662:	3a15      	subs	r2, #21
 8018664:	f022 0203 	bic.w	r2, r2, #3
 8018668:	3204      	adds	r2, #4
 801866a:	f105 0115 	add.w	r1, r5, #21
 801866e:	458c      	cmp	ip, r1
 8018670:	bf38      	it	cc
 8018672:	2204      	movcc	r2, #4
 8018674:	9201      	str	r2, [sp, #4]
 8018676:	9a02      	ldr	r2, [sp, #8]
 8018678:	9303      	str	r3, [sp, #12]
 801867a:	429a      	cmp	r2, r3
 801867c:	d808      	bhi.n	8018690 <__multiply+0x98>
 801867e:	2f00      	cmp	r7, #0
 8018680:	dc55      	bgt.n	801872e <__multiply+0x136>
 8018682:	6107      	str	r7, [r0, #16]
 8018684:	b005      	add	sp, #20
 8018686:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801868a:	f843 2b04 	str.w	r2, [r3], #4
 801868e:	e7db      	b.n	8018648 <__multiply+0x50>
 8018690:	f8b3 a000 	ldrh.w	sl, [r3]
 8018694:	f1ba 0f00 	cmp.w	sl, #0
 8018698:	d020      	beq.n	80186dc <__multiply+0xe4>
 801869a:	f105 0e14 	add.w	lr, r5, #20
 801869e:	46b1      	mov	r9, r6
 80186a0:	2200      	movs	r2, #0
 80186a2:	f85e 4b04 	ldr.w	r4, [lr], #4
 80186a6:	f8d9 b000 	ldr.w	fp, [r9]
 80186aa:	b2a1      	uxth	r1, r4
 80186ac:	fa1f fb8b 	uxth.w	fp, fp
 80186b0:	fb0a b101 	mla	r1, sl, r1, fp
 80186b4:	4411      	add	r1, r2
 80186b6:	f8d9 2000 	ldr.w	r2, [r9]
 80186ba:	0c24      	lsrs	r4, r4, #16
 80186bc:	0c12      	lsrs	r2, r2, #16
 80186be:	fb0a 2404 	mla	r4, sl, r4, r2
 80186c2:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 80186c6:	b289      	uxth	r1, r1
 80186c8:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80186cc:	45f4      	cmp	ip, lr
 80186ce:	f849 1b04 	str.w	r1, [r9], #4
 80186d2:	ea4f 4214 	mov.w	r2, r4, lsr #16
 80186d6:	d8e4      	bhi.n	80186a2 <__multiply+0xaa>
 80186d8:	9901      	ldr	r1, [sp, #4]
 80186da:	5072      	str	r2, [r6, r1]
 80186dc:	9a03      	ldr	r2, [sp, #12]
 80186de:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80186e2:	3304      	adds	r3, #4
 80186e4:	f1b9 0f00 	cmp.w	r9, #0
 80186e8:	d01f      	beq.n	801872a <__multiply+0x132>
 80186ea:	6834      	ldr	r4, [r6, #0]
 80186ec:	f105 0114 	add.w	r1, r5, #20
 80186f0:	46b6      	mov	lr, r6
 80186f2:	f04f 0a00 	mov.w	sl, #0
 80186f6:	880a      	ldrh	r2, [r1, #0]
 80186f8:	f8be b002 	ldrh.w	fp, [lr, #2]
 80186fc:	fb09 b202 	mla	r2, r9, r2, fp
 8018700:	4492      	add	sl, r2
 8018702:	b2a4      	uxth	r4, r4
 8018704:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8018708:	f84e 4b04 	str.w	r4, [lr], #4
 801870c:	f851 4b04 	ldr.w	r4, [r1], #4
 8018710:	f8be 2000 	ldrh.w	r2, [lr]
 8018714:	0c24      	lsrs	r4, r4, #16
 8018716:	fb09 2404 	mla	r4, r9, r4, r2
 801871a:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 801871e:	458c      	cmp	ip, r1
 8018720:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8018724:	d8e7      	bhi.n	80186f6 <__multiply+0xfe>
 8018726:	9a01      	ldr	r2, [sp, #4]
 8018728:	50b4      	str	r4, [r6, r2]
 801872a:	3604      	adds	r6, #4
 801872c:	e7a3      	b.n	8018676 <__multiply+0x7e>
 801872e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8018732:	2b00      	cmp	r3, #0
 8018734:	d1a5      	bne.n	8018682 <__multiply+0x8a>
 8018736:	3f01      	subs	r7, #1
 8018738:	e7a1      	b.n	801867e <__multiply+0x86>
 801873a:	bf00      	nop
 801873c:	0801f79c 	.word	0x0801f79c
 8018740:	0801f82c 	.word	0x0801f82c

08018744 <__pow5mult>:
 8018744:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018748:	4615      	mov	r5, r2
 801874a:	f012 0203 	ands.w	r2, r2, #3
 801874e:	4606      	mov	r6, r0
 8018750:	460f      	mov	r7, r1
 8018752:	d007      	beq.n	8018764 <__pow5mult+0x20>
 8018754:	4c25      	ldr	r4, [pc, #148]	; (80187ec <__pow5mult+0xa8>)
 8018756:	3a01      	subs	r2, #1
 8018758:	2300      	movs	r3, #0
 801875a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801875e:	f7ff fe51 	bl	8018404 <__multadd>
 8018762:	4607      	mov	r7, r0
 8018764:	10ad      	asrs	r5, r5, #2
 8018766:	d03d      	beq.n	80187e4 <__pow5mult+0xa0>
 8018768:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801876a:	b97c      	cbnz	r4, 801878c <__pow5mult+0x48>
 801876c:	2010      	movs	r0, #16
 801876e:	f7fc fc85 	bl	801507c <malloc>
 8018772:	4602      	mov	r2, r0
 8018774:	6270      	str	r0, [r6, #36]	; 0x24
 8018776:	b928      	cbnz	r0, 8018784 <__pow5mult+0x40>
 8018778:	4b1d      	ldr	r3, [pc, #116]	; (80187f0 <__pow5mult+0xac>)
 801877a:	481e      	ldr	r0, [pc, #120]	; (80187f4 <__pow5mult+0xb0>)
 801877c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8018780:	f001 f83e 	bl	8019800 <__assert_func>
 8018784:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8018788:	6004      	str	r4, [r0, #0]
 801878a:	60c4      	str	r4, [r0, #12]
 801878c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8018790:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8018794:	b94c      	cbnz	r4, 80187aa <__pow5mult+0x66>
 8018796:	f240 2171 	movw	r1, #625	; 0x271
 801879a:	4630      	mov	r0, r6
 801879c:	f7ff ff16 	bl	80185cc <__i2b>
 80187a0:	2300      	movs	r3, #0
 80187a2:	f8c8 0008 	str.w	r0, [r8, #8]
 80187a6:	4604      	mov	r4, r0
 80187a8:	6003      	str	r3, [r0, #0]
 80187aa:	f04f 0900 	mov.w	r9, #0
 80187ae:	07eb      	lsls	r3, r5, #31
 80187b0:	d50a      	bpl.n	80187c8 <__pow5mult+0x84>
 80187b2:	4639      	mov	r1, r7
 80187b4:	4622      	mov	r2, r4
 80187b6:	4630      	mov	r0, r6
 80187b8:	f7ff ff1e 	bl	80185f8 <__multiply>
 80187bc:	4639      	mov	r1, r7
 80187be:	4680      	mov	r8, r0
 80187c0:	4630      	mov	r0, r6
 80187c2:	f7ff fdfd 	bl	80183c0 <_Bfree>
 80187c6:	4647      	mov	r7, r8
 80187c8:	106d      	asrs	r5, r5, #1
 80187ca:	d00b      	beq.n	80187e4 <__pow5mult+0xa0>
 80187cc:	6820      	ldr	r0, [r4, #0]
 80187ce:	b938      	cbnz	r0, 80187e0 <__pow5mult+0x9c>
 80187d0:	4622      	mov	r2, r4
 80187d2:	4621      	mov	r1, r4
 80187d4:	4630      	mov	r0, r6
 80187d6:	f7ff ff0f 	bl	80185f8 <__multiply>
 80187da:	6020      	str	r0, [r4, #0]
 80187dc:	f8c0 9000 	str.w	r9, [r0]
 80187e0:	4604      	mov	r4, r0
 80187e2:	e7e4      	b.n	80187ae <__pow5mult+0x6a>
 80187e4:	4638      	mov	r0, r7
 80187e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80187ea:	bf00      	nop
 80187ec:	0801f980 	.word	0x0801f980
 80187f0:	0801f726 	.word	0x0801f726
 80187f4:	0801f82c 	.word	0x0801f82c

080187f8 <__lshift>:
 80187f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80187fc:	460c      	mov	r4, r1
 80187fe:	6849      	ldr	r1, [r1, #4]
 8018800:	6923      	ldr	r3, [r4, #16]
 8018802:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8018806:	68a3      	ldr	r3, [r4, #8]
 8018808:	4607      	mov	r7, r0
 801880a:	4691      	mov	r9, r2
 801880c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8018810:	f108 0601 	add.w	r6, r8, #1
 8018814:	42b3      	cmp	r3, r6
 8018816:	db0b      	blt.n	8018830 <__lshift+0x38>
 8018818:	4638      	mov	r0, r7
 801881a:	f7ff fd91 	bl	8018340 <_Balloc>
 801881e:	4605      	mov	r5, r0
 8018820:	b948      	cbnz	r0, 8018836 <__lshift+0x3e>
 8018822:	4602      	mov	r2, r0
 8018824:	4b28      	ldr	r3, [pc, #160]	; (80188c8 <__lshift+0xd0>)
 8018826:	4829      	ldr	r0, [pc, #164]	; (80188cc <__lshift+0xd4>)
 8018828:	f240 11d9 	movw	r1, #473	; 0x1d9
 801882c:	f000 ffe8 	bl	8019800 <__assert_func>
 8018830:	3101      	adds	r1, #1
 8018832:	005b      	lsls	r3, r3, #1
 8018834:	e7ee      	b.n	8018814 <__lshift+0x1c>
 8018836:	2300      	movs	r3, #0
 8018838:	f100 0114 	add.w	r1, r0, #20
 801883c:	f100 0210 	add.w	r2, r0, #16
 8018840:	4618      	mov	r0, r3
 8018842:	4553      	cmp	r3, sl
 8018844:	db33      	blt.n	80188ae <__lshift+0xb6>
 8018846:	6920      	ldr	r0, [r4, #16]
 8018848:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801884c:	f104 0314 	add.w	r3, r4, #20
 8018850:	f019 091f 	ands.w	r9, r9, #31
 8018854:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8018858:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801885c:	d02b      	beq.n	80188b6 <__lshift+0xbe>
 801885e:	f1c9 0e20 	rsb	lr, r9, #32
 8018862:	468a      	mov	sl, r1
 8018864:	2200      	movs	r2, #0
 8018866:	6818      	ldr	r0, [r3, #0]
 8018868:	fa00 f009 	lsl.w	r0, r0, r9
 801886c:	4302      	orrs	r2, r0
 801886e:	f84a 2b04 	str.w	r2, [sl], #4
 8018872:	f853 2b04 	ldr.w	r2, [r3], #4
 8018876:	459c      	cmp	ip, r3
 8018878:	fa22 f20e 	lsr.w	r2, r2, lr
 801887c:	d8f3      	bhi.n	8018866 <__lshift+0x6e>
 801887e:	ebac 0304 	sub.w	r3, ip, r4
 8018882:	3b15      	subs	r3, #21
 8018884:	f023 0303 	bic.w	r3, r3, #3
 8018888:	3304      	adds	r3, #4
 801888a:	f104 0015 	add.w	r0, r4, #21
 801888e:	4584      	cmp	ip, r0
 8018890:	bf38      	it	cc
 8018892:	2304      	movcc	r3, #4
 8018894:	50ca      	str	r2, [r1, r3]
 8018896:	b10a      	cbz	r2, 801889c <__lshift+0xa4>
 8018898:	f108 0602 	add.w	r6, r8, #2
 801889c:	3e01      	subs	r6, #1
 801889e:	4638      	mov	r0, r7
 80188a0:	612e      	str	r6, [r5, #16]
 80188a2:	4621      	mov	r1, r4
 80188a4:	f7ff fd8c 	bl	80183c0 <_Bfree>
 80188a8:	4628      	mov	r0, r5
 80188aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80188ae:	f842 0f04 	str.w	r0, [r2, #4]!
 80188b2:	3301      	adds	r3, #1
 80188b4:	e7c5      	b.n	8018842 <__lshift+0x4a>
 80188b6:	3904      	subs	r1, #4
 80188b8:	f853 2b04 	ldr.w	r2, [r3], #4
 80188bc:	f841 2f04 	str.w	r2, [r1, #4]!
 80188c0:	459c      	cmp	ip, r3
 80188c2:	d8f9      	bhi.n	80188b8 <__lshift+0xc0>
 80188c4:	e7ea      	b.n	801889c <__lshift+0xa4>
 80188c6:	bf00      	nop
 80188c8:	0801f79c 	.word	0x0801f79c
 80188cc:	0801f82c 	.word	0x0801f82c

080188d0 <__mcmp>:
 80188d0:	b530      	push	{r4, r5, lr}
 80188d2:	6902      	ldr	r2, [r0, #16]
 80188d4:	690c      	ldr	r4, [r1, #16]
 80188d6:	1b12      	subs	r2, r2, r4
 80188d8:	d10e      	bne.n	80188f8 <__mcmp+0x28>
 80188da:	f100 0314 	add.w	r3, r0, #20
 80188de:	3114      	adds	r1, #20
 80188e0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80188e4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80188e8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80188ec:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80188f0:	42a5      	cmp	r5, r4
 80188f2:	d003      	beq.n	80188fc <__mcmp+0x2c>
 80188f4:	d305      	bcc.n	8018902 <__mcmp+0x32>
 80188f6:	2201      	movs	r2, #1
 80188f8:	4610      	mov	r0, r2
 80188fa:	bd30      	pop	{r4, r5, pc}
 80188fc:	4283      	cmp	r3, r0
 80188fe:	d3f3      	bcc.n	80188e8 <__mcmp+0x18>
 8018900:	e7fa      	b.n	80188f8 <__mcmp+0x28>
 8018902:	f04f 32ff 	mov.w	r2, #4294967295
 8018906:	e7f7      	b.n	80188f8 <__mcmp+0x28>

08018908 <__mdiff>:
 8018908:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801890c:	460c      	mov	r4, r1
 801890e:	4606      	mov	r6, r0
 8018910:	4611      	mov	r1, r2
 8018912:	4620      	mov	r0, r4
 8018914:	4617      	mov	r7, r2
 8018916:	f7ff ffdb 	bl	80188d0 <__mcmp>
 801891a:	1e05      	subs	r5, r0, #0
 801891c:	d110      	bne.n	8018940 <__mdiff+0x38>
 801891e:	4629      	mov	r1, r5
 8018920:	4630      	mov	r0, r6
 8018922:	f7ff fd0d 	bl	8018340 <_Balloc>
 8018926:	b930      	cbnz	r0, 8018936 <__mdiff+0x2e>
 8018928:	4b39      	ldr	r3, [pc, #228]	; (8018a10 <__mdiff+0x108>)
 801892a:	4602      	mov	r2, r0
 801892c:	f240 2132 	movw	r1, #562	; 0x232
 8018930:	4838      	ldr	r0, [pc, #224]	; (8018a14 <__mdiff+0x10c>)
 8018932:	f000 ff65 	bl	8019800 <__assert_func>
 8018936:	2301      	movs	r3, #1
 8018938:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801893c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018940:	bfa4      	itt	ge
 8018942:	463b      	movge	r3, r7
 8018944:	4627      	movge	r7, r4
 8018946:	4630      	mov	r0, r6
 8018948:	6879      	ldr	r1, [r7, #4]
 801894a:	bfa6      	itte	ge
 801894c:	461c      	movge	r4, r3
 801894e:	2500      	movge	r5, #0
 8018950:	2501      	movlt	r5, #1
 8018952:	f7ff fcf5 	bl	8018340 <_Balloc>
 8018956:	b920      	cbnz	r0, 8018962 <__mdiff+0x5a>
 8018958:	4b2d      	ldr	r3, [pc, #180]	; (8018a10 <__mdiff+0x108>)
 801895a:	4602      	mov	r2, r0
 801895c:	f44f 7110 	mov.w	r1, #576	; 0x240
 8018960:	e7e6      	b.n	8018930 <__mdiff+0x28>
 8018962:	693e      	ldr	r6, [r7, #16]
 8018964:	60c5      	str	r5, [r0, #12]
 8018966:	6925      	ldr	r5, [r4, #16]
 8018968:	f107 0114 	add.w	r1, r7, #20
 801896c:	f104 0914 	add.w	r9, r4, #20
 8018970:	f100 0e14 	add.w	lr, r0, #20
 8018974:	f107 0210 	add.w	r2, r7, #16
 8018978:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 801897c:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8018980:	46f2      	mov	sl, lr
 8018982:	2700      	movs	r7, #0
 8018984:	f859 3b04 	ldr.w	r3, [r9], #4
 8018988:	f852 bf04 	ldr.w	fp, [r2, #4]!
 801898c:	fa1f f883 	uxth.w	r8, r3
 8018990:	fa17 f78b 	uxtah	r7, r7, fp
 8018994:	0c1b      	lsrs	r3, r3, #16
 8018996:	eba7 0808 	sub.w	r8, r7, r8
 801899a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801899e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80189a2:	fa1f f888 	uxth.w	r8, r8
 80189a6:	141f      	asrs	r7, r3, #16
 80189a8:	454d      	cmp	r5, r9
 80189aa:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80189ae:	f84a 3b04 	str.w	r3, [sl], #4
 80189b2:	d8e7      	bhi.n	8018984 <__mdiff+0x7c>
 80189b4:	1b2b      	subs	r3, r5, r4
 80189b6:	3b15      	subs	r3, #21
 80189b8:	f023 0303 	bic.w	r3, r3, #3
 80189bc:	3304      	adds	r3, #4
 80189be:	3415      	adds	r4, #21
 80189c0:	42a5      	cmp	r5, r4
 80189c2:	bf38      	it	cc
 80189c4:	2304      	movcc	r3, #4
 80189c6:	4419      	add	r1, r3
 80189c8:	4473      	add	r3, lr
 80189ca:	469e      	mov	lr, r3
 80189cc:	460d      	mov	r5, r1
 80189ce:	4565      	cmp	r5, ip
 80189d0:	d30e      	bcc.n	80189f0 <__mdiff+0xe8>
 80189d2:	f10c 0203 	add.w	r2, ip, #3
 80189d6:	1a52      	subs	r2, r2, r1
 80189d8:	f022 0203 	bic.w	r2, r2, #3
 80189dc:	3903      	subs	r1, #3
 80189de:	458c      	cmp	ip, r1
 80189e0:	bf38      	it	cc
 80189e2:	2200      	movcc	r2, #0
 80189e4:	441a      	add	r2, r3
 80189e6:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80189ea:	b17b      	cbz	r3, 8018a0c <__mdiff+0x104>
 80189ec:	6106      	str	r6, [r0, #16]
 80189ee:	e7a5      	b.n	801893c <__mdiff+0x34>
 80189f0:	f855 8b04 	ldr.w	r8, [r5], #4
 80189f4:	fa17 f488 	uxtah	r4, r7, r8
 80189f8:	1422      	asrs	r2, r4, #16
 80189fa:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 80189fe:	b2a4      	uxth	r4, r4
 8018a00:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8018a04:	f84e 4b04 	str.w	r4, [lr], #4
 8018a08:	1417      	asrs	r7, r2, #16
 8018a0a:	e7e0      	b.n	80189ce <__mdiff+0xc6>
 8018a0c:	3e01      	subs	r6, #1
 8018a0e:	e7ea      	b.n	80189e6 <__mdiff+0xde>
 8018a10:	0801f79c 	.word	0x0801f79c
 8018a14:	0801f82c 	.word	0x0801f82c

08018a18 <__ulp>:
 8018a18:	b082      	sub	sp, #8
 8018a1a:	ed8d 0b00 	vstr	d0, [sp]
 8018a1e:	9b01      	ldr	r3, [sp, #4]
 8018a20:	4912      	ldr	r1, [pc, #72]	; (8018a6c <__ulp+0x54>)
 8018a22:	4019      	ands	r1, r3
 8018a24:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8018a28:	2900      	cmp	r1, #0
 8018a2a:	dd05      	ble.n	8018a38 <__ulp+0x20>
 8018a2c:	2200      	movs	r2, #0
 8018a2e:	460b      	mov	r3, r1
 8018a30:	ec43 2b10 	vmov	d0, r2, r3
 8018a34:	b002      	add	sp, #8
 8018a36:	4770      	bx	lr
 8018a38:	4249      	negs	r1, r1
 8018a3a:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8018a3e:	ea4f 5021 	mov.w	r0, r1, asr #20
 8018a42:	f04f 0200 	mov.w	r2, #0
 8018a46:	f04f 0300 	mov.w	r3, #0
 8018a4a:	da04      	bge.n	8018a56 <__ulp+0x3e>
 8018a4c:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8018a50:	fa41 f300 	asr.w	r3, r1, r0
 8018a54:	e7ec      	b.n	8018a30 <__ulp+0x18>
 8018a56:	f1a0 0114 	sub.w	r1, r0, #20
 8018a5a:	291e      	cmp	r1, #30
 8018a5c:	bfda      	itte	le
 8018a5e:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8018a62:	fa20 f101 	lsrle.w	r1, r0, r1
 8018a66:	2101      	movgt	r1, #1
 8018a68:	460a      	mov	r2, r1
 8018a6a:	e7e1      	b.n	8018a30 <__ulp+0x18>
 8018a6c:	7ff00000 	.word	0x7ff00000

08018a70 <__b2d>:
 8018a70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018a72:	6905      	ldr	r5, [r0, #16]
 8018a74:	f100 0714 	add.w	r7, r0, #20
 8018a78:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8018a7c:	1f2e      	subs	r6, r5, #4
 8018a7e:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8018a82:	4620      	mov	r0, r4
 8018a84:	f7ff fd52 	bl	801852c <__hi0bits>
 8018a88:	f1c0 0320 	rsb	r3, r0, #32
 8018a8c:	280a      	cmp	r0, #10
 8018a8e:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8018b0c <__b2d+0x9c>
 8018a92:	600b      	str	r3, [r1, #0]
 8018a94:	dc14      	bgt.n	8018ac0 <__b2d+0x50>
 8018a96:	f1c0 0e0b 	rsb	lr, r0, #11
 8018a9a:	fa24 f10e 	lsr.w	r1, r4, lr
 8018a9e:	42b7      	cmp	r7, r6
 8018aa0:	ea41 030c 	orr.w	r3, r1, ip
 8018aa4:	bf34      	ite	cc
 8018aa6:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8018aaa:	2100      	movcs	r1, #0
 8018aac:	3015      	adds	r0, #21
 8018aae:	fa04 f000 	lsl.w	r0, r4, r0
 8018ab2:	fa21 f10e 	lsr.w	r1, r1, lr
 8018ab6:	ea40 0201 	orr.w	r2, r0, r1
 8018aba:	ec43 2b10 	vmov	d0, r2, r3
 8018abe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018ac0:	42b7      	cmp	r7, r6
 8018ac2:	bf3a      	itte	cc
 8018ac4:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8018ac8:	f1a5 0608 	subcc.w	r6, r5, #8
 8018acc:	2100      	movcs	r1, #0
 8018ace:	380b      	subs	r0, #11
 8018ad0:	d017      	beq.n	8018b02 <__b2d+0x92>
 8018ad2:	f1c0 0c20 	rsb	ip, r0, #32
 8018ad6:	fa04 f500 	lsl.w	r5, r4, r0
 8018ada:	42be      	cmp	r6, r7
 8018adc:	fa21 f40c 	lsr.w	r4, r1, ip
 8018ae0:	ea45 0504 	orr.w	r5, r5, r4
 8018ae4:	bf8c      	ite	hi
 8018ae6:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8018aea:	2400      	movls	r4, #0
 8018aec:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8018af0:	fa01 f000 	lsl.w	r0, r1, r0
 8018af4:	fa24 f40c 	lsr.w	r4, r4, ip
 8018af8:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8018afc:	ea40 0204 	orr.w	r2, r0, r4
 8018b00:	e7db      	b.n	8018aba <__b2d+0x4a>
 8018b02:	ea44 030c 	orr.w	r3, r4, ip
 8018b06:	460a      	mov	r2, r1
 8018b08:	e7d7      	b.n	8018aba <__b2d+0x4a>
 8018b0a:	bf00      	nop
 8018b0c:	3ff00000 	.word	0x3ff00000

08018b10 <__d2b>:
 8018b10:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8018b14:	4689      	mov	r9, r1
 8018b16:	2101      	movs	r1, #1
 8018b18:	ec57 6b10 	vmov	r6, r7, d0
 8018b1c:	4690      	mov	r8, r2
 8018b1e:	f7ff fc0f 	bl	8018340 <_Balloc>
 8018b22:	4604      	mov	r4, r0
 8018b24:	b930      	cbnz	r0, 8018b34 <__d2b+0x24>
 8018b26:	4602      	mov	r2, r0
 8018b28:	4b25      	ldr	r3, [pc, #148]	; (8018bc0 <__d2b+0xb0>)
 8018b2a:	4826      	ldr	r0, [pc, #152]	; (8018bc4 <__d2b+0xb4>)
 8018b2c:	f240 310a 	movw	r1, #778	; 0x30a
 8018b30:	f000 fe66 	bl	8019800 <__assert_func>
 8018b34:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8018b38:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8018b3c:	bb35      	cbnz	r5, 8018b8c <__d2b+0x7c>
 8018b3e:	2e00      	cmp	r6, #0
 8018b40:	9301      	str	r3, [sp, #4]
 8018b42:	d028      	beq.n	8018b96 <__d2b+0x86>
 8018b44:	4668      	mov	r0, sp
 8018b46:	9600      	str	r6, [sp, #0]
 8018b48:	f7ff fd10 	bl	801856c <__lo0bits>
 8018b4c:	9900      	ldr	r1, [sp, #0]
 8018b4e:	b300      	cbz	r0, 8018b92 <__d2b+0x82>
 8018b50:	9a01      	ldr	r2, [sp, #4]
 8018b52:	f1c0 0320 	rsb	r3, r0, #32
 8018b56:	fa02 f303 	lsl.w	r3, r2, r3
 8018b5a:	430b      	orrs	r3, r1
 8018b5c:	40c2      	lsrs	r2, r0
 8018b5e:	6163      	str	r3, [r4, #20]
 8018b60:	9201      	str	r2, [sp, #4]
 8018b62:	9b01      	ldr	r3, [sp, #4]
 8018b64:	61a3      	str	r3, [r4, #24]
 8018b66:	2b00      	cmp	r3, #0
 8018b68:	bf14      	ite	ne
 8018b6a:	2202      	movne	r2, #2
 8018b6c:	2201      	moveq	r2, #1
 8018b6e:	6122      	str	r2, [r4, #16]
 8018b70:	b1d5      	cbz	r5, 8018ba8 <__d2b+0x98>
 8018b72:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8018b76:	4405      	add	r5, r0
 8018b78:	f8c9 5000 	str.w	r5, [r9]
 8018b7c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8018b80:	f8c8 0000 	str.w	r0, [r8]
 8018b84:	4620      	mov	r0, r4
 8018b86:	b003      	add	sp, #12
 8018b88:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018b8c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8018b90:	e7d5      	b.n	8018b3e <__d2b+0x2e>
 8018b92:	6161      	str	r1, [r4, #20]
 8018b94:	e7e5      	b.n	8018b62 <__d2b+0x52>
 8018b96:	a801      	add	r0, sp, #4
 8018b98:	f7ff fce8 	bl	801856c <__lo0bits>
 8018b9c:	9b01      	ldr	r3, [sp, #4]
 8018b9e:	6163      	str	r3, [r4, #20]
 8018ba0:	2201      	movs	r2, #1
 8018ba2:	6122      	str	r2, [r4, #16]
 8018ba4:	3020      	adds	r0, #32
 8018ba6:	e7e3      	b.n	8018b70 <__d2b+0x60>
 8018ba8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8018bac:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8018bb0:	f8c9 0000 	str.w	r0, [r9]
 8018bb4:	6918      	ldr	r0, [r3, #16]
 8018bb6:	f7ff fcb9 	bl	801852c <__hi0bits>
 8018bba:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8018bbe:	e7df      	b.n	8018b80 <__d2b+0x70>
 8018bc0:	0801f79c 	.word	0x0801f79c
 8018bc4:	0801f82c 	.word	0x0801f82c

08018bc8 <__ratio>:
 8018bc8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018bcc:	4688      	mov	r8, r1
 8018bce:	4669      	mov	r1, sp
 8018bd0:	4681      	mov	r9, r0
 8018bd2:	f7ff ff4d 	bl	8018a70 <__b2d>
 8018bd6:	a901      	add	r1, sp, #4
 8018bd8:	4640      	mov	r0, r8
 8018bda:	ec55 4b10 	vmov	r4, r5, d0
 8018bde:	f7ff ff47 	bl	8018a70 <__b2d>
 8018be2:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8018be6:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8018bea:	eba3 0c02 	sub.w	ip, r3, r2
 8018bee:	e9dd 3200 	ldrd	r3, r2, [sp]
 8018bf2:	1a9b      	subs	r3, r3, r2
 8018bf4:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8018bf8:	ec51 0b10 	vmov	r0, r1, d0
 8018bfc:	2b00      	cmp	r3, #0
 8018bfe:	bfd6      	itet	le
 8018c00:	460a      	movle	r2, r1
 8018c02:	462a      	movgt	r2, r5
 8018c04:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8018c08:	468b      	mov	fp, r1
 8018c0a:	462f      	mov	r7, r5
 8018c0c:	bfd4      	ite	le
 8018c0e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8018c12:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8018c16:	4620      	mov	r0, r4
 8018c18:	ee10 2a10 	vmov	r2, s0
 8018c1c:	465b      	mov	r3, fp
 8018c1e:	4639      	mov	r1, r7
 8018c20:	f7e7 fe44 	bl	80008ac <__aeabi_ddiv>
 8018c24:	ec41 0b10 	vmov	d0, r0, r1
 8018c28:	b003      	add	sp, #12
 8018c2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08018c2e <__copybits>:
 8018c2e:	3901      	subs	r1, #1
 8018c30:	b570      	push	{r4, r5, r6, lr}
 8018c32:	1149      	asrs	r1, r1, #5
 8018c34:	6914      	ldr	r4, [r2, #16]
 8018c36:	3101      	adds	r1, #1
 8018c38:	f102 0314 	add.w	r3, r2, #20
 8018c3c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8018c40:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8018c44:	1f05      	subs	r5, r0, #4
 8018c46:	42a3      	cmp	r3, r4
 8018c48:	d30c      	bcc.n	8018c64 <__copybits+0x36>
 8018c4a:	1aa3      	subs	r3, r4, r2
 8018c4c:	3b11      	subs	r3, #17
 8018c4e:	f023 0303 	bic.w	r3, r3, #3
 8018c52:	3211      	adds	r2, #17
 8018c54:	42a2      	cmp	r2, r4
 8018c56:	bf88      	it	hi
 8018c58:	2300      	movhi	r3, #0
 8018c5a:	4418      	add	r0, r3
 8018c5c:	2300      	movs	r3, #0
 8018c5e:	4288      	cmp	r0, r1
 8018c60:	d305      	bcc.n	8018c6e <__copybits+0x40>
 8018c62:	bd70      	pop	{r4, r5, r6, pc}
 8018c64:	f853 6b04 	ldr.w	r6, [r3], #4
 8018c68:	f845 6f04 	str.w	r6, [r5, #4]!
 8018c6c:	e7eb      	b.n	8018c46 <__copybits+0x18>
 8018c6e:	f840 3b04 	str.w	r3, [r0], #4
 8018c72:	e7f4      	b.n	8018c5e <__copybits+0x30>

08018c74 <__any_on>:
 8018c74:	f100 0214 	add.w	r2, r0, #20
 8018c78:	6900      	ldr	r0, [r0, #16]
 8018c7a:	114b      	asrs	r3, r1, #5
 8018c7c:	4298      	cmp	r0, r3
 8018c7e:	b510      	push	{r4, lr}
 8018c80:	db11      	blt.n	8018ca6 <__any_on+0x32>
 8018c82:	dd0a      	ble.n	8018c9a <__any_on+0x26>
 8018c84:	f011 011f 	ands.w	r1, r1, #31
 8018c88:	d007      	beq.n	8018c9a <__any_on+0x26>
 8018c8a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8018c8e:	fa24 f001 	lsr.w	r0, r4, r1
 8018c92:	fa00 f101 	lsl.w	r1, r0, r1
 8018c96:	428c      	cmp	r4, r1
 8018c98:	d10b      	bne.n	8018cb2 <__any_on+0x3e>
 8018c9a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8018c9e:	4293      	cmp	r3, r2
 8018ca0:	d803      	bhi.n	8018caa <__any_on+0x36>
 8018ca2:	2000      	movs	r0, #0
 8018ca4:	bd10      	pop	{r4, pc}
 8018ca6:	4603      	mov	r3, r0
 8018ca8:	e7f7      	b.n	8018c9a <__any_on+0x26>
 8018caa:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8018cae:	2900      	cmp	r1, #0
 8018cb0:	d0f5      	beq.n	8018c9e <__any_on+0x2a>
 8018cb2:	2001      	movs	r0, #1
 8018cb4:	e7f6      	b.n	8018ca4 <__any_on+0x30>

08018cb6 <_calloc_r>:
 8018cb6:	b513      	push	{r0, r1, r4, lr}
 8018cb8:	434a      	muls	r2, r1
 8018cba:	4611      	mov	r1, r2
 8018cbc:	9201      	str	r2, [sp, #4]
 8018cbe:	f7fc fa59 	bl	8015174 <_malloc_r>
 8018cc2:	4604      	mov	r4, r0
 8018cc4:	b118      	cbz	r0, 8018cce <_calloc_r+0x18>
 8018cc6:	9a01      	ldr	r2, [sp, #4]
 8018cc8:	2100      	movs	r1, #0
 8018cca:	f7fc f9fb 	bl	80150c4 <memset>
 8018cce:	4620      	mov	r0, r4
 8018cd0:	b002      	add	sp, #8
 8018cd2:	bd10      	pop	{r4, pc}

08018cd4 <__ssputs_r>:
 8018cd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018cd8:	688e      	ldr	r6, [r1, #8]
 8018cda:	429e      	cmp	r6, r3
 8018cdc:	4682      	mov	sl, r0
 8018cde:	460c      	mov	r4, r1
 8018ce0:	4690      	mov	r8, r2
 8018ce2:	461f      	mov	r7, r3
 8018ce4:	d838      	bhi.n	8018d58 <__ssputs_r+0x84>
 8018ce6:	898a      	ldrh	r2, [r1, #12]
 8018ce8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8018cec:	d032      	beq.n	8018d54 <__ssputs_r+0x80>
 8018cee:	6825      	ldr	r5, [r4, #0]
 8018cf0:	6909      	ldr	r1, [r1, #16]
 8018cf2:	eba5 0901 	sub.w	r9, r5, r1
 8018cf6:	6965      	ldr	r5, [r4, #20]
 8018cf8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8018cfc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8018d00:	3301      	adds	r3, #1
 8018d02:	444b      	add	r3, r9
 8018d04:	106d      	asrs	r5, r5, #1
 8018d06:	429d      	cmp	r5, r3
 8018d08:	bf38      	it	cc
 8018d0a:	461d      	movcc	r5, r3
 8018d0c:	0553      	lsls	r3, r2, #21
 8018d0e:	d531      	bpl.n	8018d74 <__ssputs_r+0xa0>
 8018d10:	4629      	mov	r1, r5
 8018d12:	f7fc fa2f 	bl	8015174 <_malloc_r>
 8018d16:	4606      	mov	r6, r0
 8018d18:	b950      	cbnz	r0, 8018d30 <__ssputs_r+0x5c>
 8018d1a:	230c      	movs	r3, #12
 8018d1c:	f8ca 3000 	str.w	r3, [sl]
 8018d20:	89a3      	ldrh	r3, [r4, #12]
 8018d22:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018d26:	81a3      	strh	r3, [r4, #12]
 8018d28:	f04f 30ff 	mov.w	r0, #4294967295
 8018d2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018d30:	6921      	ldr	r1, [r4, #16]
 8018d32:	464a      	mov	r2, r9
 8018d34:	f7fc f9b8 	bl	80150a8 <memcpy>
 8018d38:	89a3      	ldrh	r3, [r4, #12]
 8018d3a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8018d3e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8018d42:	81a3      	strh	r3, [r4, #12]
 8018d44:	6126      	str	r6, [r4, #16]
 8018d46:	6165      	str	r5, [r4, #20]
 8018d48:	444e      	add	r6, r9
 8018d4a:	eba5 0509 	sub.w	r5, r5, r9
 8018d4e:	6026      	str	r6, [r4, #0]
 8018d50:	60a5      	str	r5, [r4, #8]
 8018d52:	463e      	mov	r6, r7
 8018d54:	42be      	cmp	r6, r7
 8018d56:	d900      	bls.n	8018d5a <__ssputs_r+0x86>
 8018d58:	463e      	mov	r6, r7
 8018d5a:	4632      	mov	r2, r6
 8018d5c:	6820      	ldr	r0, [r4, #0]
 8018d5e:	4641      	mov	r1, r8
 8018d60:	f000 ff38 	bl	8019bd4 <memmove>
 8018d64:	68a3      	ldr	r3, [r4, #8]
 8018d66:	6822      	ldr	r2, [r4, #0]
 8018d68:	1b9b      	subs	r3, r3, r6
 8018d6a:	4432      	add	r2, r6
 8018d6c:	60a3      	str	r3, [r4, #8]
 8018d6e:	6022      	str	r2, [r4, #0]
 8018d70:	2000      	movs	r0, #0
 8018d72:	e7db      	b.n	8018d2c <__ssputs_r+0x58>
 8018d74:	462a      	mov	r2, r5
 8018d76:	f000 ff47 	bl	8019c08 <_realloc_r>
 8018d7a:	4606      	mov	r6, r0
 8018d7c:	2800      	cmp	r0, #0
 8018d7e:	d1e1      	bne.n	8018d44 <__ssputs_r+0x70>
 8018d80:	6921      	ldr	r1, [r4, #16]
 8018d82:	4650      	mov	r0, sl
 8018d84:	f7fc f9a6 	bl	80150d4 <_free_r>
 8018d88:	e7c7      	b.n	8018d1a <__ssputs_r+0x46>
	...

08018d8c <_svfiprintf_r>:
 8018d8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018d90:	4698      	mov	r8, r3
 8018d92:	898b      	ldrh	r3, [r1, #12]
 8018d94:	061b      	lsls	r3, r3, #24
 8018d96:	b09d      	sub	sp, #116	; 0x74
 8018d98:	4607      	mov	r7, r0
 8018d9a:	460d      	mov	r5, r1
 8018d9c:	4614      	mov	r4, r2
 8018d9e:	d50e      	bpl.n	8018dbe <_svfiprintf_r+0x32>
 8018da0:	690b      	ldr	r3, [r1, #16]
 8018da2:	b963      	cbnz	r3, 8018dbe <_svfiprintf_r+0x32>
 8018da4:	2140      	movs	r1, #64	; 0x40
 8018da6:	f7fc f9e5 	bl	8015174 <_malloc_r>
 8018daa:	6028      	str	r0, [r5, #0]
 8018dac:	6128      	str	r0, [r5, #16]
 8018dae:	b920      	cbnz	r0, 8018dba <_svfiprintf_r+0x2e>
 8018db0:	230c      	movs	r3, #12
 8018db2:	603b      	str	r3, [r7, #0]
 8018db4:	f04f 30ff 	mov.w	r0, #4294967295
 8018db8:	e0d1      	b.n	8018f5e <_svfiprintf_r+0x1d2>
 8018dba:	2340      	movs	r3, #64	; 0x40
 8018dbc:	616b      	str	r3, [r5, #20]
 8018dbe:	2300      	movs	r3, #0
 8018dc0:	9309      	str	r3, [sp, #36]	; 0x24
 8018dc2:	2320      	movs	r3, #32
 8018dc4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8018dc8:	f8cd 800c 	str.w	r8, [sp, #12]
 8018dcc:	2330      	movs	r3, #48	; 0x30
 8018dce:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8018f78 <_svfiprintf_r+0x1ec>
 8018dd2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8018dd6:	f04f 0901 	mov.w	r9, #1
 8018dda:	4623      	mov	r3, r4
 8018ddc:	469a      	mov	sl, r3
 8018dde:	f813 2b01 	ldrb.w	r2, [r3], #1
 8018de2:	b10a      	cbz	r2, 8018de8 <_svfiprintf_r+0x5c>
 8018de4:	2a25      	cmp	r2, #37	; 0x25
 8018de6:	d1f9      	bne.n	8018ddc <_svfiprintf_r+0x50>
 8018de8:	ebba 0b04 	subs.w	fp, sl, r4
 8018dec:	d00b      	beq.n	8018e06 <_svfiprintf_r+0x7a>
 8018dee:	465b      	mov	r3, fp
 8018df0:	4622      	mov	r2, r4
 8018df2:	4629      	mov	r1, r5
 8018df4:	4638      	mov	r0, r7
 8018df6:	f7ff ff6d 	bl	8018cd4 <__ssputs_r>
 8018dfa:	3001      	adds	r0, #1
 8018dfc:	f000 80aa 	beq.w	8018f54 <_svfiprintf_r+0x1c8>
 8018e00:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8018e02:	445a      	add	r2, fp
 8018e04:	9209      	str	r2, [sp, #36]	; 0x24
 8018e06:	f89a 3000 	ldrb.w	r3, [sl]
 8018e0a:	2b00      	cmp	r3, #0
 8018e0c:	f000 80a2 	beq.w	8018f54 <_svfiprintf_r+0x1c8>
 8018e10:	2300      	movs	r3, #0
 8018e12:	f04f 32ff 	mov.w	r2, #4294967295
 8018e16:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8018e1a:	f10a 0a01 	add.w	sl, sl, #1
 8018e1e:	9304      	str	r3, [sp, #16]
 8018e20:	9307      	str	r3, [sp, #28]
 8018e22:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8018e26:	931a      	str	r3, [sp, #104]	; 0x68
 8018e28:	4654      	mov	r4, sl
 8018e2a:	2205      	movs	r2, #5
 8018e2c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018e30:	4851      	ldr	r0, [pc, #324]	; (8018f78 <_svfiprintf_r+0x1ec>)
 8018e32:	f7e7 fa05 	bl	8000240 <memchr>
 8018e36:	9a04      	ldr	r2, [sp, #16]
 8018e38:	b9d8      	cbnz	r0, 8018e72 <_svfiprintf_r+0xe6>
 8018e3a:	06d0      	lsls	r0, r2, #27
 8018e3c:	bf44      	itt	mi
 8018e3e:	2320      	movmi	r3, #32
 8018e40:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8018e44:	0711      	lsls	r1, r2, #28
 8018e46:	bf44      	itt	mi
 8018e48:	232b      	movmi	r3, #43	; 0x2b
 8018e4a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8018e4e:	f89a 3000 	ldrb.w	r3, [sl]
 8018e52:	2b2a      	cmp	r3, #42	; 0x2a
 8018e54:	d015      	beq.n	8018e82 <_svfiprintf_r+0xf6>
 8018e56:	9a07      	ldr	r2, [sp, #28]
 8018e58:	4654      	mov	r4, sl
 8018e5a:	2000      	movs	r0, #0
 8018e5c:	f04f 0c0a 	mov.w	ip, #10
 8018e60:	4621      	mov	r1, r4
 8018e62:	f811 3b01 	ldrb.w	r3, [r1], #1
 8018e66:	3b30      	subs	r3, #48	; 0x30
 8018e68:	2b09      	cmp	r3, #9
 8018e6a:	d94e      	bls.n	8018f0a <_svfiprintf_r+0x17e>
 8018e6c:	b1b0      	cbz	r0, 8018e9c <_svfiprintf_r+0x110>
 8018e6e:	9207      	str	r2, [sp, #28]
 8018e70:	e014      	b.n	8018e9c <_svfiprintf_r+0x110>
 8018e72:	eba0 0308 	sub.w	r3, r0, r8
 8018e76:	fa09 f303 	lsl.w	r3, r9, r3
 8018e7a:	4313      	orrs	r3, r2
 8018e7c:	9304      	str	r3, [sp, #16]
 8018e7e:	46a2      	mov	sl, r4
 8018e80:	e7d2      	b.n	8018e28 <_svfiprintf_r+0x9c>
 8018e82:	9b03      	ldr	r3, [sp, #12]
 8018e84:	1d19      	adds	r1, r3, #4
 8018e86:	681b      	ldr	r3, [r3, #0]
 8018e88:	9103      	str	r1, [sp, #12]
 8018e8a:	2b00      	cmp	r3, #0
 8018e8c:	bfbb      	ittet	lt
 8018e8e:	425b      	neglt	r3, r3
 8018e90:	f042 0202 	orrlt.w	r2, r2, #2
 8018e94:	9307      	strge	r3, [sp, #28]
 8018e96:	9307      	strlt	r3, [sp, #28]
 8018e98:	bfb8      	it	lt
 8018e9a:	9204      	strlt	r2, [sp, #16]
 8018e9c:	7823      	ldrb	r3, [r4, #0]
 8018e9e:	2b2e      	cmp	r3, #46	; 0x2e
 8018ea0:	d10c      	bne.n	8018ebc <_svfiprintf_r+0x130>
 8018ea2:	7863      	ldrb	r3, [r4, #1]
 8018ea4:	2b2a      	cmp	r3, #42	; 0x2a
 8018ea6:	d135      	bne.n	8018f14 <_svfiprintf_r+0x188>
 8018ea8:	9b03      	ldr	r3, [sp, #12]
 8018eaa:	1d1a      	adds	r2, r3, #4
 8018eac:	681b      	ldr	r3, [r3, #0]
 8018eae:	9203      	str	r2, [sp, #12]
 8018eb0:	2b00      	cmp	r3, #0
 8018eb2:	bfb8      	it	lt
 8018eb4:	f04f 33ff 	movlt.w	r3, #4294967295
 8018eb8:	3402      	adds	r4, #2
 8018eba:	9305      	str	r3, [sp, #20]
 8018ebc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8018f88 <_svfiprintf_r+0x1fc>
 8018ec0:	7821      	ldrb	r1, [r4, #0]
 8018ec2:	2203      	movs	r2, #3
 8018ec4:	4650      	mov	r0, sl
 8018ec6:	f7e7 f9bb 	bl	8000240 <memchr>
 8018eca:	b140      	cbz	r0, 8018ede <_svfiprintf_r+0x152>
 8018ecc:	2340      	movs	r3, #64	; 0x40
 8018ece:	eba0 000a 	sub.w	r0, r0, sl
 8018ed2:	fa03 f000 	lsl.w	r0, r3, r0
 8018ed6:	9b04      	ldr	r3, [sp, #16]
 8018ed8:	4303      	orrs	r3, r0
 8018eda:	3401      	adds	r4, #1
 8018edc:	9304      	str	r3, [sp, #16]
 8018ede:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018ee2:	4826      	ldr	r0, [pc, #152]	; (8018f7c <_svfiprintf_r+0x1f0>)
 8018ee4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8018ee8:	2206      	movs	r2, #6
 8018eea:	f7e7 f9a9 	bl	8000240 <memchr>
 8018eee:	2800      	cmp	r0, #0
 8018ef0:	d038      	beq.n	8018f64 <_svfiprintf_r+0x1d8>
 8018ef2:	4b23      	ldr	r3, [pc, #140]	; (8018f80 <_svfiprintf_r+0x1f4>)
 8018ef4:	bb1b      	cbnz	r3, 8018f3e <_svfiprintf_r+0x1b2>
 8018ef6:	9b03      	ldr	r3, [sp, #12]
 8018ef8:	3307      	adds	r3, #7
 8018efa:	f023 0307 	bic.w	r3, r3, #7
 8018efe:	3308      	adds	r3, #8
 8018f00:	9303      	str	r3, [sp, #12]
 8018f02:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018f04:	4433      	add	r3, r6
 8018f06:	9309      	str	r3, [sp, #36]	; 0x24
 8018f08:	e767      	b.n	8018dda <_svfiprintf_r+0x4e>
 8018f0a:	fb0c 3202 	mla	r2, ip, r2, r3
 8018f0e:	460c      	mov	r4, r1
 8018f10:	2001      	movs	r0, #1
 8018f12:	e7a5      	b.n	8018e60 <_svfiprintf_r+0xd4>
 8018f14:	2300      	movs	r3, #0
 8018f16:	3401      	adds	r4, #1
 8018f18:	9305      	str	r3, [sp, #20]
 8018f1a:	4619      	mov	r1, r3
 8018f1c:	f04f 0c0a 	mov.w	ip, #10
 8018f20:	4620      	mov	r0, r4
 8018f22:	f810 2b01 	ldrb.w	r2, [r0], #1
 8018f26:	3a30      	subs	r2, #48	; 0x30
 8018f28:	2a09      	cmp	r2, #9
 8018f2a:	d903      	bls.n	8018f34 <_svfiprintf_r+0x1a8>
 8018f2c:	2b00      	cmp	r3, #0
 8018f2e:	d0c5      	beq.n	8018ebc <_svfiprintf_r+0x130>
 8018f30:	9105      	str	r1, [sp, #20]
 8018f32:	e7c3      	b.n	8018ebc <_svfiprintf_r+0x130>
 8018f34:	fb0c 2101 	mla	r1, ip, r1, r2
 8018f38:	4604      	mov	r4, r0
 8018f3a:	2301      	movs	r3, #1
 8018f3c:	e7f0      	b.n	8018f20 <_svfiprintf_r+0x194>
 8018f3e:	ab03      	add	r3, sp, #12
 8018f40:	9300      	str	r3, [sp, #0]
 8018f42:	462a      	mov	r2, r5
 8018f44:	4b0f      	ldr	r3, [pc, #60]	; (8018f84 <_svfiprintf_r+0x1f8>)
 8018f46:	a904      	add	r1, sp, #16
 8018f48:	4638      	mov	r0, r7
 8018f4a:	f7fc fa0d 	bl	8015368 <_printf_float>
 8018f4e:	1c42      	adds	r2, r0, #1
 8018f50:	4606      	mov	r6, r0
 8018f52:	d1d6      	bne.n	8018f02 <_svfiprintf_r+0x176>
 8018f54:	89ab      	ldrh	r3, [r5, #12]
 8018f56:	065b      	lsls	r3, r3, #25
 8018f58:	f53f af2c 	bmi.w	8018db4 <_svfiprintf_r+0x28>
 8018f5c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8018f5e:	b01d      	add	sp, #116	; 0x74
 8018f60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018f64:	ab03      	add	r3, sp, #12
 8018f66:	9300      	str	r3, [sp, #0]
 8018f68:	462a      	mov	r2, r5
 8018f6a:	4b06      	ldr	r3, [pc, #24]	; (8018f84 <_svfiprintf_r+0x1f8>)
 8018f6c:	a904      	add	r1, sp, #16
 8018f6e:	4638      	mov	r0, r7
 8018f70:	f7fc fc9e 	bl	80158b0 <_printf_i>
 8018f74:	e7eb      	b.n	8018f4e <_svfiprintf_r+0x1c2>
 8018f76:	bf00      	nop
 8018f78:	0801f98c 	.word	0x0801f98c
 8018f7c:	0801f996 	.word	0x0801f996
 8018f80:	08015369 	.word	0x08015369
 8018f84:	08018cd5 	.word	0x08018cd5
 8018f88:	0801f992 	.word	0x0801f992

08018f8c <_sungetc_r>:
 8018f8c:	b538      	push	{r3, r4, r5, lr}
 8018f8e:	1c4b      	adds	r3, r1, #1
 8018f90:	4614      	mov	r4, r2
 8018f92:	d103      	bne.n	8018f9c <_sungetc_r+0x10>
 8018f94:	f04f 35ff 	mov.w	r5, #4294967295
 8018f98:	4628      	mov	r0, r5
 8018f9a:	bd38      	pop	{r3, r4, r5, pc}
 8018f9c:	8993      	ldrh	r3, [r2, #12]
 8018f9e:	f023 0320 	bic.w	r3, r3, #32
 8018fa2:	8193      	strh	r3, [r2, #12]
 8018fa4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8018fa6:	6852      	ldr	r2, [r2, #4]
 8018fa8:	b2cd      	uxtb	r5, r1
 8018faa:	b18b      	cbz	r3, 8018fd0 <_sungetc_r+0x44>
 8018fac:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8018fae:	4293      	cmp	r3, r2
 8018fb0:	dd08      	ble.n	8018fc4 <_sungetc_r+0x38>
 8018fb2:	6823      	ldr	r3, [r4, #0]
 8018fb4:	1e5a      	subs	r2, r3, #1
 8018fb6:	6022      	str	r2, [r4, #0]
 8018fb8:	f803 5c01 	strb.w	r5, [r3, #-1]
 8018fbc:	6863      	ldr	r3, [r4, #4]
 8018fbe:	3301      	adds	r3, #1
 8018fc0:	6063      	str	r3, [r4, #4]
 8018fc2:	e7e9      	b.n	8018f98 <_sungetc_r+0xc>
 8018fc4:	4621      	mov	r1, r4
 8018fc6:	f000 fbd3 	bl	8019770 <__submore>
 8018fca:	2800      	cmp	r0, #0
 8018fcc:	d0f1      	beq.n	8018fb2 <_sungetc_r+0x26>
 8018fce:	e7e1      	b.n	8018f94 <_sungetc_r+0x8>
 8018fd0:	6921      	ldr	r1, [r4, #16]
 8018fd2:	6823      	ldr	r3, [r4, #0]
 8018fd4:	b151      	cbz	r1, 8018fec <_sungetc_r+0x60>
 8018fd6:	4299      	cmp	r1, r3
 8018fd8:	d208      	bcs.n	8018fec <_sungetc_r+0x60>
 8018fda:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8018fde:	42a9      	cmp	r1, r5
 8018fe0:	d104      	bne.n	8018fec <_sungetc_r+0x60>
 8018fe2:	3b01      	subs	r3, #1
 8018fe4:	3201      	adds	r2, #1
 8018fe6:	6023      	str	r3, [r4, #0]
 8018fe8:	6062      	str	r2, [r4, #4]
 8018fea:	e7d5      	b.n	8018f98 <_sungetc_r+0xc>
 8018fec:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8018ff0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8018ff4:	6363      	str	r3, [r4, #52]	; 0x34
 8018ff6:	2303      	movs	r3, #3
 8018ff8:	63a3      	str	r3, [r4, #56]	; 0x38
 8018ffa:	4623      	mov	r3, r4
 8018ffc:	f803 5f46 	strb.w	r5, [r3, #70]!
 8019000:	6023      	str	r3, [r4, #0]
 8019002:	2301      	movs	r3, #1
 8019004:	e7dc      	b.n	8018fc0 <_sungetc_r+0x34>

08019006 <__ssrefill_r>:
 8019006:	b510      	push	{r4, lr}
 8019008:	460c      	mov	r4, r1
 801900a:	6b49      	ldr	r1, [r1, #52]	; 0x34
 801900c:	b169      	cbz	r1, 801902a <__ssrefill_r+0x24>
 801900e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8019012:	4299      	cmp	r1, r3
 8019014:	d001      	beq.n	801901a <__ssrefill_r+0x14>
 8019016:	f7fc f85d 	bl	80150d4 <_free_r>
 801901a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801901c:	6063      	str	r3, [r4, #4]
 801901e:	2000      	movs	r0, #0
 8019020:	6360      	str	r0, [r4, #52]	; 0x34
 8019022:	b113      	cbz	r3, 801902a <__ssrefill_r+0x24>
 8019024:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8019026:	6023      	str	r3, [r4, #0]
 8019028:	bd10      	pop	{r4, pc}
 801902a:	6923      	ldr	r3, [r4, #16]
 801902c:	6023      	str	r3, [r4, #0]
 801902e:	2300      	movs	r3, #0
 8019030:	6063      	str	r3, [r4, #4]
 8019032:	89a3      	ldrh	r3, [r4, #12]
 8019034:	f043 0320 	orr.w	r3, r3, #32
 8019038:	81a3      	strh	r3, [r4, #12]
 801903a:	f04f 30ff 	mov.w	r0, #4294967295
 801903e:	e7f3      	b.n	8019028 <__ssrefill_r+0x22>

08019040 <__ssvfiscanf_r>:
 8019040:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019044:	460c      	mov	r4, r1
 8019046:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 801904a:	2100      	movs	r1, #0
 801904c:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8019050:	49b2      	ldr	r1, [pc, #712]	; (801931c <__ssvfiscanf_r+0x2dc>)
 8019052:	91a0      	str	r1, [sp, #640]	; 0x280
 8019054:	f10d 0804 	add.w	r8, sp, #4
 8019058:	49b1      	ldr	r1, [pc, #708]	; (8019320 <__ssvfiscanf_r+0x2e0>)
 801905a:	4fb2      	ldr	r7, [pc, #712]	; (8019324 <__ssvfiscanf_r+0x2e4>)
 801905c:	f8df 92c8 	ldr.w	r9, [pc, #712]	; 8019328 <__ssvfiscanf_r+0x2e8>
 8019060:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8019064:	4606      	mov	r6, r0
 8019066:	91a1      	str	r1, [sp, #644]	; 0x284
 8019068:	9300      	str	r3, [sp, #0]
 801906a:	f892 a000 	ldrb.w	sl, [r2]
 801906e:	f1ba 0f00 	cmp.w	sl, #0
 8019072:	f000 8151 	beq.w	8019318 <__ssvfiscanf_r+0x2d8>
 8019076:	f81a 3007 	ldrb.w	r3, [sl, r7]
 801907a:	f013 0308 	ands.w	r3, r3, #8
 801907e:	f102 0501 	add.w	r5, r2, #1
 8019082:	d019      	beq.n	80190b8 <__ssvfiscanf_r+0x78>
 8019084:	6863      	ldr	r3, [r4, #4]
 8019086:	2b00      	cmp	r3, #0
 8019088:	dd0f      	ble.n	80190aa <__ssvfiscanf_r+0x6a>
 801908a:	6823      	ldr	r3, [r4, #0]
 801908c:	781a      	ldrb	r2, [r3, #0]
 801908e:	5cba      	ldrb	r2, [r7, r2]
 8019090:	0712      	lsls	r2, r2, #28
 8019092:	d401      	bmi.n	8019098 <__ssvfiscanf_r+0x58>
 8019094:	462a      	mov	r2, r5
 8019096:	e7e8      	b.n	801906a <__ssvfiscanf_r+0x2a>
 8019098:	9a45      	ldr	r2, [sp, #276]	; 0x114
 801909a:	3201      	adds	r2, #1
 801909c:	9245      	str	r2, [sp, #276]	; 0x114
 801909e:	6862      	ldr	r2, [r4, #4]
 80190a0:	3301      	adds	r3, #1
 80190a2:	3a01      	subs	r2, #1
 80190a4:	6062      	str	r2, [r4, #4]
 80190a6:	6023      	str	r3, [r4, #0]
 80190a8:	e7ec      	b.n	8019084 <__ssvfiscanf_r+0x44>
 80190aa:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80190ac:	4621      	mov	r1, r4
 80190ae:	4630      	mov	r0, r6
 80190b0:	4798      	blx	r3
 80190b2:	2800      	cmp	r0, #0
 80190b4:	d0e9      	beq.n	801908a <__ssvfiscanf_r+0x4a>
 80190b6:	e7ed      	b.n	8019094 <__ssvfiscanf_r+0x54>
 80190b8:	f1ba 0f25 	cmp.w	sl, #37	; 0x25
 80190bc:	f040 8083 	bne.w	80191c6 <__ssvfiscanf_r+0x186>
 80190c0:	9341      	str	r3, [sp, #260]	; 0x104
 80190c2:	9343      	str	r3, [sp, #268]	; 0x10c
 80190c4:	7853      	ldrb	r3, [r2, #1]
 80190c6:	2b2a      	cmp	r3, #42	; 0x2a
 80190c8:	bf02      	ittt	eq
 80190ca:	2310      	moveq	r3, #16
 80190cc:	1c95      	addeq	r5, r2, #2
 80190ce:	9341      	streq	r3, [sp, #260]	; 0x104
 80190d0:	220a      	movs	r2, #10
 80190d2:	46ab      	mov	fp, r5
 80190d4:	f81b 1b01 	ldrb.w	r1, [fp], #1
 80190d8:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 80190dc:	2b09      	cmp	r3, #9
 80190de:	d91d      	bls.n	801911c <__ssvfiscanf_r+0xdc>
 80190e0:	4891      	ldr	r0, [pc, #580]	; (8019328 <__ssvfiscanf_r+0x2e8>)
 80190e2:	2203      	movs	r2, #3
 80190e4:	f7e7 f8ac 	bl	8000240 <memchr>
 80190e8:	b140      	cbz	r0, 80190fc <__ssvfiscanf_r+0xbc>
 80190ea:	2301      	movs	r3, #1
 80190ec:	eba0 0009 	sub.w	r0, r0, r9
 80190f0:	fa03 f000 	lsl.w	r0, r3, r0
 80190f4:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80190f6:	4318      	orrs	r0, r3
 80190f8:	9041      	str	r0, [sp, #260]	; 0x104
 80190fa:	465d      	mov	r5, fp
 80190fc:	f815 3b01 	ldrb.w	r3, [r5], #1
 8019100:	2b78      	cmp	r3, #120	; 0x78
 8019102:	d806      	bhi.n	8019112 <__ssvfiscanf_r+0xd2>
 8019104:	2b57      	cmp	r3, #87	; 0x57
 8019106:	d810      	bhi.n	801912a <__ssvfiscanf_r+0xea>
 8019108:	2b25      	cmp	r3, #37	; 0x25
 801910a:	d05c      	beq.n	80191c6 <__ssvfiscanf_r+0x186>
 801910c:	d856      	bhi.n	80191bc <__ssvfiscanf_r+0x17c>
 801910e:	2b00      	cmp	r3, #0
 8019110:	d074      	beq.n	80191fc <__ssvfiscanf_r+0x1bc>
 8019112:	2303      	movs	r3, #3
 8019114:	9347      	str	r3, [sp, #284]	; 0x11c
 8019116:	230a      	movs	r3, #10
 8019118:	9342      	str	r3, [sp, #264]	; 0x108
 801911a:	e081      	b.n	8019220 <__ssvfiscanf_r+0x1e0>
 801911c:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 801911e:	fb02 1303 	mla	r3, r2, r3, r1
 8019122:	3b30      	subs	r3, #48	; 0x30
 8019124:	9343      	str	r3, [sp, #268]	; 0x10c
 8019126:	465d      	mov	r5, fp
 8019128:	e7d3      	b.n	80190d2 <__ssvfiscanf_r+0x92>
 801912a:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 801912e:	2a20      	cmp	r2, #32
 8019130:	d8ef      	bhi.n	8019112 <__ssvfiscanf_r+0xd2>
 8019132:	a101      	add	r1, pc, #4	; (adr r1, 8019138 <__ssvfiscanf_r+0xf8>)
 8019134:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8019138:	0801920b 	.word	0x0801920b
 801913c:	08019113 	.word	0x08019113
 8019140:	08019113 	.word	0x08019113
 8019144:	08019269 	.word	0x08019269
 8019148:	08019113 	.word	0x08019113
 801914c:	08019113 	.word	0x08019113
 8019150:	08019113 	.word	0x08019113
 8019154:	08019113 	.word	0x08019113
 8019158:	08019113 	.word	0x08019113
 801915c:	08019113 	.word	0x08019113
 8019160:	08019113 	.word	0x08019113
 8019164:	0801927f 	.word	0x0801927f
 8019168:	08019255 	.word	0x08019255
 801916c:	080191c3 	.word	0x080191c3
 8019170:	080191c3 	.word	0x080191c3
 8019174:	080191c3 	.word	0x080191c3
 8019178:	08019113 	.word	0x08019113
 801917c:	08019259 	.word	0x08019259
 8019180:	08019113 	.word	0x08019113
 8019184:	08019113 	.word	0x08019113
 8019188:	08019113 	.word	0x08019113
 801918c:	08019113 	.word	0x08019113
 8019190:	0801928f 	.word	0x0801928f
 8019194:	08019261 	.word	0x08019261
 8019198:	08019203 	.word	0x08019203
 801919c:	08019113 	.word	0x08019113
 80191a0:	08019113 	.word	0x08019113
 80191a4:	0801928b 	.word	0x0801928b
 80191a8:	08019113 	.word	0x08019113
 80191ac:	08019255 	.word	0x08019255
 80191b0:	08019113 	.word	0x08019113
 80191b4:	08019113 	.word	0x08019113
 80191b8:	0801920b 	.word	0x0801920b
 80191bc:	3b45      	subs	r3, #69	; 0x45
 80191be:	2b02      	cmp	r3, #2
 80191c0:	d8a7      	bhi.n	8019112 <__ssvfiscanf_r+0xd2>
 80191c2:	2305      	movs	r3, #5
 80191c4:	e02b      	b.n	801921e <__ssvfiscanf_r+0x1de>
 80191c6:	6863      	ldr	r3, [r4, #4]
 80191c8:	2b00      	cmp	r3, #0
 80191ca:	dd0d      	ble.n	80191e8 <__ssvfiscanf_r+0x1a8>
 80191cc:	6823      	ldr	r3, [r4, #0]
 80191ce:	781a      	ldrb	r2, [r3, #0]
 80191d0:	4552      	cmp	r2, sl
 80191d2:	f040 80a1 	bne.w	8019318 <__ssvfiscanf_r+0x2d8>
 80191d6:	3301      	adds	r3, #1
 80191d8:	6862      	ldr	r2, [r4, #4]
 80191da:	6023      	str	r3, [r4, #0]
 80191dc:	9b45      	ldr	r3, [sp, #276]	; 0x114
 80191de:	3a01      	subs	r2, #1
 80191e0:	3301      	adds	r3, #1
 80191e2:	6062      	str	r2, [r4, #4]
 80191e4:	9345      	str	r3, [sp, #276]	; 0x114
 80191e6:	e755      	b.n	8019094 <__ssvfiscanf_r+0x54>
 80191e8:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80191ea:	4621      	mov	r1, r4
 80191ec:	4630      	mov	r0, r6
 80191ee:	4798      	blx	r3
 80191f0:	2800      	cmp	r0, #0
 80191f2:	d0eb      	beq.n	80191cc <__ssvfiscanf_r+0x18c>
 80191f4:	9844      	ldr	r0, [sp, #272]	; 0x110
 80191f6:	2800      	cmp	r0, #0
 80191f8:	f040 8084 	bne.w	8019304 <__ssvfiscanf_r+0x2c4>
 80191fc:	f04f 30ff 	mov.w	r0, #4294967295
 8019200:	e086      	b.n	8019310 <__ssvfiscanf_r+0x2d0>
 8019202:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8019204:	f042 0220 	orr.w	r2, r2, #32
 8019208:	9241      	str	r2, [sp, #260]	; 0x104
 801920a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 801920c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8019210:	9241      	str	r2, [sp, #260]	; 0x104
 8019212:	2210      	movs	r2, #16
 8019214:	2b6f      	cmp	r3, #111	; 0x6f
 8019216:	9242      	str	r2, [sp, #264]	; 0x108
 8019218:	bf34      	ite	cc
 801921a:	2303      	movcc	r3, #3
 801921c:	2304      	movcs	r3, #4
 801921e:	9347      	str	r3, [sp, #284]	; 0x11c
 8019220:	6863      	ldr	r3, [r4, #4]
 8019222:	2b00      	cmp	r3, #0
 8019224:	dd41      	ble.n	80192aa <__ssvfiscanf_r+0x26a>
 8019226:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8019228:	0659      	lsls	r1, r3, #25
 801922a:	d404      	bmi.n	8019236 <__ssvfiscanf_r+0x1f6>
 801922c:	6823      	ldr	r3, [r4, #0]
 801922e:	781a      	ldrb	r2, [r3, #0]
 8019230:	5cba      	ldrb	r2, [r7, r2]
 8019232:	0712      	lsls	r2, r2, #28
 8019234:	d440      	bmi.n	80192b8 <__ssvfiscanf_r+0x278>
 8019236:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8019238:	2b02      	cmp	r3, #2
 801923a:	dc4f      	bgt.n	80192dc <__ssvfiscanf_r+0x29c>
 801923c:	466b      	mov	r3, sp
 801923e:	4622      	mov	r2, r4
 8019240:	a941      	add	r1, sp, #260	; 0x104
 8019242:	4630      	mov	r0, r6
 8019244:	f000 f874 	bl	8019330 <_scanf_chars>
 8019248:	2801      	cmp	r0, #1
 801924a:	d065      	beq.n	8019318 <__ssvfiscanf_r+0x2d8>
 801924c:	2802      	cmp	r0, #2
 801924e:	f47f af21 	bne.w	8019094 <__ssvfiscanf_r+0x54>
 8019252:	e7cf      	b.n	80191f4 <__ssvfiscanf_r+0x1b4>
 8019254:	220a      	movs	r2, #10
 8019256:	e7dd      	b.n	8019214 <__ssvfiscanf_r+0x1d4>
 8019258:	2300      	movs	r3, #0
 801925a:	9342      	str	r3, [sp, #264]	; 0x108
 801925c:	2303      	movs	r3, #3
 801925e:	e7de      	b.n	801921e <__ssvfiscanf_r+0x1de>
 8019260:	2308      	movs	r3, #8
 8019262:	9342      	str	r3, [sp, #264]	; 0x108
 8019264:	2304      	movs	r3, #4
 8019266:	e7da      	b.n	801921e <__ssvfiscanf_r+0x1de>
 8019268:	4629      	mov	r1, r5
 801926a:	4640      	mov	r0, r8
 801926c:	f000 f9c8 	bl	8019600 <__sccl>
 8019270:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8019272:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019276:	9341      	str	r3, [sp, #260]	; 0x104
 8019278:	4605      	mov	r5, r0
 801927a:	2301      	movs	r3, #1
 801927c:	e7cf      	b.n	801921e <__ssvfiscanf_r+0x1de>
 801927e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8019280:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019284:	9341      	str	r3, [sp, #260]	; 0x104
 8019286:	2300      	movs	r3, #0
 8019288:	e7c9      	b.n	801921e <__ssvfiscanf_r+0x1de>
 801928a:	2302      	movs	r3, #2
 801928c:	e7c7      	b.n	801921e <__ssvfiscanf_r+0x1de>
 801928e:	9841      	ldr	r0, [sp, #260]	; 0x104
 8019290:	06c3      	lsls	r3, r0, #27
 8019292:	f53f aeff 	bmi.w	8019094 <__ssvfiscanf_r+0x54>
 8019296:	9b00      	ldr	r3, [sp, #0]
 8019298:	9a45      	ldr	r2, [sp, #276]	; 0x114
 801929a:	1d19      	adds	r1, r3, #4
 801929c:	9100      	str	r1, [sp, #0]
 801929e:	681b      	ldr	r3, [r3, #0]
 80192a0:	07c0      	lsls	r0, r0, #31
 80192a2:	bf4c      	ite	mi
 80192a4:	801a      	strhmi	r2, [r3, #0]
 80192a6:	601a      	strpl	r2, [r3, #0]
 80192a8:	e6f4      	b.n	8019094 <__ssvfiscanf_r+0x54>
 80192aa:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80192ac:	4621      	mov	r1, r4
 80192ae:	4630      	mov	r0, r6
 80192b0:	4798      	blx	r3
 80192b2:	2800      	cmp	r0, #0
 80192b4:	d0b7      	beq.n	8019226 <__ssvfiscanf_r+0x1e6>
 80192b6:	e79d      	b.n	80191f4 <__ssvfiscanf_r+0x1b4>
 80192b8:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80192ba:	3201      	adds	r2, #1
 80192bc:	9245      	str	r2, [sp, #276]	; 0x114
 80192be:	6862      	ldr	r2, [r4, #4]
 80192c0:	3a01      	subs	r2, #1
 80192c2:	2a00      	cmp	r2, #0
 80192c4:	6062      	str	r2, [r4, #4]
 80192c6:	dd02      	ble.n	80192ce <__ssvfiscanf_r+0x28e>
 80192c8:	3301      	adds	r3, #1
 80192ca:	6023      	str	r3, [r4, #0]
 80192cc:	e7ae      	b.n	801922c <__ssvfiscanf_r+0x1ec>
 80192ce:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80192d0:	4621      	mov	r1, r4
 80192d2:	4630      	mov	r0, r6
 80192d4:	4798      	blx	r3
 80192d6:	2800      	cmp	r0, #0
 80192d8:	d0a8      	beq.n	801922c <__ssvfiscanf_r+0x1ec>
 80192da:	e78b      	b.n	80191f4 <__ssvfiscanf_r+0x1b4>
 80192dc:	2b04      	cmp	r3, #4
 80192de:	dc06      	bgt.n	80192ee <__ssvfiscanf_r+0x2ae>
 80192e0:	466b      	mov	r3, sp
 80192e2:	4622      	mov	r2, r4
 80192e4:	a941      	add	r1, sp, #260	; 0x104
 80192e6:	4630      	mov	r0, r6
 80192e8:	f000 f87a 	bl	80193e0 <_scanf_i>
 80192ec:	e7ac      	b.n	8019248 <__ssvfiscanf_r+0x208>
 80192ee:	4b0f      	ldr	r3, [pc, #60]	; (801932c <__ssvfiscanf_r+0x2ec>)
 80192f0:	2b00      	cmp	r3, #0
 80192f2:	f43f aecf 	beq.w	8019094 <__ssvfiscanf_r+0x54>
 80192f6:	466b      	mov	r3, sp
 80192f8:	4622      	mov	r2, r4
 80192fa:	a941      	add	r1, sp, #260	; 0x104
 80192fc:	4630      	mov	r0, r6
 80192fe:	f7fc fbfd 	bl	8015afc <_scanf_float>
 8019302:	e7a1      	b.n	8019248 <__ssvfiscanf_r+0x208>
 8019304:	89a3      	ldrh	r3, [r4, #12]
 8019306:	f013 0f40 	tst.w	r3, #64	; 0x40
 801930a:	bf18      	it	ne
 801930c:	f04f 30ff 	movne.w	r0, #4294967295
 8019310:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 8019314:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019318:	9844      	ldr	r0, [sp, #272]	; 0x110
 801931a:	e7f9      	b.n	8019310 <__ssvfiscanf_r+0x2d0>
 801931c:	08018f8d 	.word	0x08018f8d
 8019320:	08019007 	.word	0x08019007
 8019324:	0801f619 	.word	0x0801f619
 8019328:	0801f992 	.word	0x0801f992
 801932c:	08015afd 	.word	0x08015afd

08019330 <_scanf_chars>:
 8019330:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019334:	4615      	mov	r5, r2
 8019336:	688a      	ldr	r2, [r1, #8]
 8019338:	4680      	mov	r8, r0
 801933a:	460c      	mov	r4, r1
 801933c:	b932      	cbnz	r2, 801934c <_scanf_chars+0x1c>
 801933e:	698a      	ldr	r2, [r1, #24]
 8019340:	2a00      	cmp	r2, #0
 8019342:	bf0c      	ite	eq
 8019344:	2201      	moveq	r2, #1
 8019346:	f04f 32ff 	movne.w	r2, #4294967295
 801934a:	608a      	str	r2, [r1, #8]
 801934c:	6822      	ldr	r2, [r4, #0]
 801934e:	f8df 908c 	ldr.w	r9, [pc, #140]	; 80193dc <_scanf_chars+0xac>
 8019352:	06d1      	lsls	r1, r2, #27
 8019354:	bf5f      	itttt	pl
 8019356:	681a      	ldrpl	r2, [r3, #0]
 8019358:	1d11      	addpl	r1, r2, #4
 801935a:	6019      	strpl	r1, [r3, #0]
 801935c:	6816      	ldrpl	r6, [r2, #0]
 801935e:	2700      	movs	r7, #0
 8019360:	69a0      	ldr	r0, [r4, #24]
 8019362:	b188      	cbz	r0, 8019388 <_scanf_chars+0x58>
 8019364:	2801      	cmp	r0, #1
 8019366:	d107      	bne.n	8019378 <_scanf_chars+0x48>
 8019368:	682b      	ldr	r3, [r5, #0]
 801936a:	781a      	ldrb	r2, [r3, #0]
 801936c:	6963      	ldr	r3, [r4, #20]
 801936e:	5c9b      	ldrb	r3, [r3, r2]
 8019370:	b953      	cbnz	r3, 8019388 <_scanf_chars+0x58>
 8019372:	bb27      	cbnz	r7, 80193be <_scanf_chars+0x8e>
 8019374:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019378:	2802      	cmp	r0, #2
 801937a:	d120      	bne.n	80193be <_scanf_chars+0x8e>
 801937c:	682b      	ldr	r3, [r5, #0]
 801937e:	781b      	ldrb	r3, [r3, #0]
 8019380:	f813 3009 	ldrb.w	r3, [r3, r9]
 8019384:	071b      	lsls	r3, r3, #28
 8019386:	d41a      	bmi.n	80193be <_scanf_chars+0x8e>
 8019388:	6823      	ldr	r3, [r4, #0]
 801938a:	06da      	lsls	r2, r3, #27
 801938c:	bf5e      	ittt	pl
 801938e:	682b      	ldrpl	r3, [r5, #0]
 8019390:	781b      	ldrbpl	r3, [r3, #0]
 8019392:	f806 3b01 	strbpl.w	r3, [r6], #1
 8019396:	682a      	ldr	r2, [r5, #0]
 8019398:	686b      	ldr	r3, [r5, #4]
 801939a:	3201      	adds	r2, #1
 801939c:	602a      	str	r2, [r5, #0]
 801939e:	68a2      	ldr	r2, [r4, #8]
 80193a0:	3b01      	subs	r3, #1
 80193a2:	3a01      	subs	r2, #1
 80193a4:	606b      	str	r3, [r5, #4]
 80193a6:	3701      	adds	r7, #1
 80193a8:	60a2      	str	r2, [r4, #8]
 80193aa:	b142      	cbz	r2, 80193be <_scanf_chars+0x8e>
 80193ac:	2b00      	cmp	r3, #0
 80193ae:	dcd7      	bgt.n	8019360 <_scanf_chars+0x30>
 80193b0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80193b4:	4629      	mov	r1, r5
 80193b6:	4640      	mov	r0, r8
 80193b8:	4798      	blx	r3
 80193ba:	2800      	cmp	r0, #0
 80193bc:	d0d0      	beq.n	8019360 <_scanf_chars+0x30>
 80193be:	6823      	ldr	r3, [r4, #0]
 80193c0:	f013 0310 	ands.w	r3, r3, #16
 80193c4:	d105      	bne.n	80193d2 <_scanf_chars+0xa2>
 80193c6:	68e2      	ldr	r2, [r4, #12]
 80193c8:	3201      	adds	r2, #1
 80193ca:	60e2      	str	r2, [r4, #12]
 80193cc:	69a2      	ldr	r2, [r4, #24]
 80193ce:	b102      	cbz	r2, 80193d2 <_scanf_chars+0xa2>
 80193d0:	7033      	strb	r3, [r6, #0]
 80193d2:	6923      	ldr	r3, [r4, #16]
 80193d4:	441f      	add	r7, r3
 80193d6:	6127      	str	r7, [r4, #16]
 80193d8:	2000      	movs	r0, #0
 80193da:	e7cb      	b.n	8019374 <_scanf_chars+0x44>
 80193dc:	0801f619 	.word	0x0801f619

080193e0 <_scanf_i>:
 80193e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80193e4:	4698      	mov	r8, r3
 80193e6:	4b74      	ldr	r3, [pc, #464]	; (80195b8 <_scanf_i+0x1d8>)
 80193e8:	460c      	mov	r4, r1
 80193ea:	4682      	mov	sl, r0
 80193ec:	4616      	mov	r6, r2
 80193ee:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80193f2:	b087      	sub	sp, #28
 80193f4:	ab03      	add	r3, sp, #12
 80193f6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80193fa:	4b70      	ldr	r3, [pc, #448]	; (80195bc <_scanf_i+0x1dc>)
 80193fc:	69a1      	ldr	r1, [r4, #24]
 80193fe:	4a70      	ldr	r2, [pc, #448]	; (80195c0 <_scanf_i+0x1e0>)
 8019400:	2903      	cmp	r1, #3
 8019402:	bf18      	it	ne
 8019404:	461a      	movne	r2, r3
 8019406:	68a3      	ldr	r3, [r4, #8]
 8019408:	9201      	str	r2, [sp, #4]
 801940a:	1e5a      	subs	r2, r3, #1
 801940c:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8019410:	bf88      	it	hi
 8019412:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8019416:	4627      	mov	r7, r4
 8019418:	bf82      	ittt	hi
 801941a:	eb03 0905 	addhi.w	r9, r3, r5
 801941e:	f240 135d 	movwhi	r3, #349	; 0x15d
 8019422:	60a3      	strhi	r3, [r4, #8]
 8019424:	f857 3b1c 	ldr.w	r3, [r7], #28
 8019428:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 801942c:	bf98      	it	ls
 801942e:	f04f 0900 	movls.w	r9, #0
 8019432:	6023      	str	r3, [r4, #0]
 8019434:	463d      	mov	r5, r7
 8019436:	f04f 0b00 	mov.w	fp, #0
 801943a:	6831      	ldr	r1, [r6, #0]
 801943c:	ab03      	add	r3, sp, #12
 801943e:	7809      	ldrb	r1, [r1, #0]
 8019440:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8019444:	2202      	movs	r2, #2
 8019446:	f7e6 fefb 	bl	8000240 <memchr>
 801944a:	b328      	cbz	r0, 8019498 <_scanf_i+0xb8>
 801944c:	f1bb 0f01 	cmp.w	fp, #1
 8019450:	d159      	bne.n	8019506 <_scanf_i+0x126>
 8019452:	6862      	ldr	r2, [r4, #4]
 8019454:	b92a      	cbnz	r2, 8019462 <_scanf_i+0x82>
 8019456:	6822      	ldr	r2, [r4, #0]
 8019458:	2308      	movs	r3, #8
 801945a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801945e:	6063      	str	r3, [r4, #4]
 8019460:	6022      	str	r2, [r4, #0]
 8019462:	6822      	ldr	r2, [r4, #0]
 8019464:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8019468:	6022      	str	r2, [r4, #0]
 801946a:	68a2      	ldr	r2, [r4, #8]
 801946c:	1e51      	subs	r1, r2, #1
 801946e:	60a1      	str	r1, [r4, #8]
 8019470:	b192      	cbz	r2, 8019498 <_scanf_i+0xb8>
 8019472:	6832      	ldr	r2, [r6, #0]
 8019474:	1c51      	adds	r1, r2, #1
 8019476:	6031      	str	r1, [r6, #0]
 8019478:	7812      	ldrb	r2, [r2, #0]
 801947a:	f805 2b01 	strb.w	r2, [r5], #1
 801947e:	6872      	ldr	r2, [r6, #4]
 8019480:	3a01      	subs	r2, #1
 8019482:	2a00      	cmp	r2, #0
 8019484:	6072      	str	r2, [r6, #4]
 8019486:	dc07      	bgt.n	8019498 <_scanf_i+0xb8>
 8019488:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 801948c:	4631      	mov	r1, r6
 801948e:	4650      	mov	r0, sl
 8019490:	4790      	blx	r2
 8019492:	2800      	cmp	r0, #0
 8019494:	f040 8085 	bne.w	80195a2 <_scanf_i+0x1c2>
 8019498:	f10b 0b01 	add.w	fp, fp, #1
 801949c:	f1bb 0f03 	cmp.w	fp, #3
 80194a0:	d1cb      	bne.n	801943a <_scanf_i+0x5a>
 80194a2:	6863      	ldr	r3, [r4, #4]
 80194a4:	b90b      	cbnz	r3, 80194aa <_scanf_i+0xca>
 80194a6:	230a      	movs	r3, #10
 80194a8:	6063      	str	r3, [r4, #4]
 80194aa:	6863      	ldr	r3, [r4, #4]
 80194ac:	4945      	ldr	r1, [pc, #276]	; (80195c4 <_scanf_i+0x1e4>)
 80194ae:	6960      	ldr	r0, [r4, #20]
 80194b0:	1ac9      	subs	r1, r1, r3
 80194b2:	f000 f8a5 	bl	8019600 <__sccl>
 80194b6:	f04f 0b00 	mov.w	fp, #0
 80194ba:	68a3      	ldr	r3, [r4, #8]
 80194bc:	6822      	ldr	r2, [r4, #0]
 80194be:	2b00      	cmp	r3, #0
 80194c0:	d03d      	beq.n	801953e <_scanf_i+0x15e>
 80194c2:	6831      	ldr	r1, [r6, #0]
 80194c4:	6960      	ldr	r0, [r4, #20]
 80194c6:	f891 c000 	ldrb.w	ip, [r1]
 80194ca:	f810 000c 	ldrb.w	r0, [r0, ip]
 80194ce:	2800      	cmp	r0, #0
 80194d0:	d035      	beq.n	801953e <_scanf_i+0x15e>
 80194d2:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 80194d6:	d124      	bne.n	8019522 <_scanf_i+0x142>
 80194d8:	0510      	lsls	r0, r2, #20
 80194da:	d522      	bpl.n	8019522 <_scanf_i+0x142>
 80194dc:	f10b 0b01 	add.w	fp, fp, #1
 80194e0:	f1b9 0f00 	cmp.w	r9, #0
 80194e4:	d003      	beq.n	80194ee <_scanf_i+0x10e>
 80194e6:	3301      	adds	r3, #1
 80194e8:	f109 39ff 	add.w	r9, r9, #4294967295
 80194ec:	60a3      	str	r3, [r4, #8]
 80194ee:	6873      	ldr	r3, [r6, #4]
 80194f0:	3b01      	subs	r3, #1
 80194f2:	2b00      	cmp	r3, #0
 80194f4:	6073      	str	r3, [r6, #4]
 80194f6:	dd1b      	ble.n	8019530 <_scanf_i+0x150>
 80194f8:	6833      	ldr	r3, [r6, #0]
 80194fa:	3301      	adds	r3, #1
 80194fc:	6033      	str	r3, [r6, #0]
 80194fe:	68a3      	ldr	r3, [r4, #8]
 8019500:	3b01      	subs	r3, #1
 8019502:	60a3      	str	r3, [r4, #8]
 8019504:	e7d9      	b.n	80194ba <_scanf_i+0xda>
 8019506:	f1bb 0f02 	cmp.w	fp, #2
 801950a:	d1ae      	bne.n	801946a <_scanf_i+0x8a>
 801950c:	6822      	ldr	r2, [r4, #0]
 801950e:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8019512:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8019516:	d1bf      	bne.n	8019498 <_scanf_i+0xb8>
 8019518:	2310      	movs	r3, #16
 801951a:	6063      	str	r3, [r4, #4]
 801951c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8019520:	e7a2      	b.n	8019468 <_scanf_i+0x88>
 8019522:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8019526:	6022      	str	r2, [r4, #0]
 8019528:	780b      	ldrb	r3, [r1, #0]
 801952a:	f805 3b01 	strb.w	r3, [r5], #1
 801952e:	e7de      	b.n	80194ee <_scanf_i+0x10e>
 8019530:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8019534:	4631      	mov	r1, r6
 8019536:	4650      	mov	r0, sl
 8019538:	4798      	blx	r3
 801953a:	2800      	cmp	r0, #0
 801953c:	d0df      	beq.n	80194fe <_scanf_i+0x11e>
 801953e:	6823      	ldr	r3, [r4, #0]
 8019540:	05d9      	lsls	r1, r3, #23
 8019542:	d50d      	bpl.n	8019560 <_scanf_i+0x180>
 8019544:	42bd      	cmp	r5, r7
 8019546:	d909      	bls.n	801955c <_scanf_i+0x17c>
 8019548:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 801954c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8019550:	4632      	mov	r2, r6
 8019552:	4650      	mov	r0, sl
 8019554:	4798      	blx	r3
 8019556:	f105 39ff 	add.w	r9, r5, #4294967295
 801955a:	464d      	mov	r5, r9
 801955c:	42bd      	cmp	r5, r7
 801955e:	d028      	beq.n	80195b2 <_scanf_i+0x1d2>
 8019560:	6822      	ldr	r2, [r4, #0]
 8019562:	f012 0210 	ands.w	r2, r2, #16
 8019566:	d113      	bne.n	8019590 <_scanf_i+0x1b0>
 8019568:	702a      	strb	r2, [r5, #0]
 801956a:	6863      	ldr	r3, [r4, #4]
 801956c:	9e01      	ldr	r6, [sp, #4]
 801956e:	4639      	mov	r1, r7
 8019570:	4650      	mov	r0, sl
 8019572:	47b0      	blx	r6
 8019574:	f8d8 3000 	ldr.w	r3, [r8]
 8019578:	6821      	ldr	r1, [r4, #0]
 801957a:	1d1a      	adds	r2, r3, #4
 801957c:	f8c8 2000 	str.w	r2, [r8]
 8019580:	f011 0f20 	tst.w	r1, #32
 8019584:	681b      	ldr	r3, [r3, #0]
 8019586:	d00f      	beq.n	80195a8 <_scanf_i+0x1c8>
 8019588:	6018      	str	r0, [r3, #0]
 801958a:	68e3      	ldr	r3, [r4, #12]
 801958c:	3301      	adds	r3, #1
 801958e:	60e3      	str	r3, [r4, #12]
 8019590:	1bed      	subs	r5, r5, r7
 8019592:	44ab      	add	fp, r5
 8019594:	6925      	ldr	r5, [r4, #16]
 8019596:	445d      	add	r5, fp
 8019598:	6125      	str	r5, [r4, #16]
 801959a:	2000      	movs	r0, #0
 801959c:	b007      	add	sp, #28
 801959e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80195a2:	f04f 0b00 	mov.w	fp, #0
 80195a6:	e7ca      	b.n	801953e <_scanf_i+0x15e>
 80195a8:	07ca      	lsls	r2, r1, #31
 80195aa:	bf4c      	ite	mi
 80195ac:	8018      	strhmi	r0, [r3, #0]
 80195ae:	6018      	strpl	r0, [r3, #0]
 80195b0:	e7eb      	b.n	801958a <_scanf_i+0x1aa>
 80195b2:	2001      	movs	r0, #1
 80195b4:	e7f2      	b.n	801959c <_scanf_i+0x1bc>
 80195b6:	bf00      	nop
 80195b8:	0801b004 	.word	0x0801b004
 80195bc:	0801976d 	.word	0x0801976d
 80195c0:	08016e81 	.word	0x08016e81
 80195c4:	0801f9b6 	.word	0x0801f9b6

080195c8 <_read_r>:
 80195c8:	b538      	push	{r3, r4, r5, lr}
 80195ca:	4d07      	ldr	r5, [pc, #28]	; (80195e8 <_read_r+0x20>)
 80195cc:	4604      	mov	r4, r0
 80195ce:	4608      	mov	r0, r1
 80195d0:	4611      	mov	r1, r2
 80195d2:	2200      	movs	r2, #0
 80195d4:	602a      	str	r2, [r5, #0]
 80195d6:	461a      	mov	r2, r3
 80195d8:	f7e7 ffe9 	bl	80015ae <_read>
 80195dc:	1c43      	adds	r3, r0, #1
 80195de:	d102      	bne.n	80195e6 <_read_r+0x1e>
 80195e0:	682b      	ldr	r3, [r5, #0]
 80195e2:	b103      	cbz	r3, 80195e6 <_read_r+0x1e>
 80195e4:	6023      	str	r3, [r4, #0]
 80195e6:	bd38      	pop	{r3, r4, r5, pc}
 80195e8:	20005868 	.word	0x20005868
 80195ec:	00000000 	.word	0x00000000

080195f0 <nan>:
 80195f0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80195f8 <nan+0x8>
 80195f4:	4770      	bx	lr
 80195f6:	bf00      	nop
 80195f8:	00000000 	.word	0x00000000
 80195fc:	7ff80000 	.word	0x7ff80000

08019600 <__sccl>:
 8019600:	b570      	push	{r4, r5, r6, lr}
 8019602:	780b      	ldrb	r3, [r1, #0]
 8019604:	4604      	mov	r4, r0
 8019606:	2b5e      	cmp	r3, #94	; 0x5e
 8019608:	bf0b      	itete	eq
 801960a:	784b      	ldrbeq	r3, [r1, #1]
 801960c:	1c48      	addne	r0, r1, #1
 801960e:	1c88      	addeq	r0, r1, #2
 8019610:	2200      	movne	r2, #0
 8019612:	bf08      	it	eq
 8019614:	2201      	moveq	r2, #1
 8019616:	1e61      	subs	r1, r4, #1
 8019618:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 801961c:	f801 2f01 	strb.w	r2, [r1, #1]!
 8019620:	42a9      	cmp	r1, r5
 8019622:	d1fb      	bne.n	801961c <__sccl+0x1c>
 8019624:	b90b      	cbnz	r3, 801962a <__sccl+0x2a>
 8019626:	3801      	subs	r0, #1
 8019628:	bd70      	pop	{r4, r5, r6, pc}
 801962a:	f082 0101 	eor.w	r1, r2, #1
 801962e:	54e1      	strb	r1, [r4, r3]
 8019630:	1c42      	adds	r2, r0, #1
 8019632:	f812 5c01 	ldrb.w	r5, [r2, #-1]
 8019636:	2d2d      	cmp	r5, #45	; 0x2d
 8019638:	f102 36ff 	add.w	r6, r2, #4294967295
 801963c:	4610      	mov	r0, r2
 801963e:	d006      	beq.n	801964e <__sccl+0x4e>
 8019640:	2d5d      	cmp	r5, #93	; 0x5d
 8019642:	d0f1      	beq.n	8019628 <__sccl+0x28>
 8019644:	b90d      	cbnz	r5, 801964a <__sccl+0x4a>
 8019646:	4630      	mov	r0, r6
 8019648:	e7ee      	b.n	8019628 <__sccl+0x28>
 801964a:	462b      	mov	r3, r5
 801964c:	e7ef      	b.n	801962e <__sccl+0x2e>
 801964e:	7816      	ldrb	r6, [r2, #0]
 8019650:	2e5d      	cmp	r6, #93	; 0x5d
 8019652:	d0fa      	beq.n	801964a <__sccl+0x4a>
 8019654:	42b3      	cmp	r3, r6
 8019656:	dcf8      	bgt.n	801964a <__sccl+0x4a>
 8019658:	4618      	mov	r0, r3
 801965a:	3001      	adds	r0, #1
 801965c:	4286      	cmp	r6, r0
 801965e:	5421      	strb	r1, [r4, r0]
 8019660:	dcfb      	bgt.n	801965a <__sccl+0x5a>
 8019662:	43d8      	mvns	r0, r3
 8019664:	4430      	add	r0, r6
 8019666:	1c5d      	adds	r5, r3, #1
 8019668:	42b3      	cmp	r3, r6
 801966a:	bfa8      	it	ge
 801966c:	2000      	movge	r0, #0
 801966e:	182b      	adds	r3, r5, r0
 8019670:	3202      	adds	r2, #2
 8019672:	e7de      	b.n	8019632 <__sccl+0x32>

08019674 <_strtoul_l.isra.0>:
 8019674:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8019678:	4e3b      	ldr	r6, [pc, #236]	; (8019768 <_strtoul_l.isra.0+0xf4>)
 801967a:	4686      	mov	lr, r0
 801967c:	468c      	mov	ip, r1
 801967e:	4660      	mov	r0, ip
 8019680:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8019684:	5da5      	ldrb	r5, [r4, r6]
 8019686:	f015 0508 	ands.w	r5, r5, #8
 801968a:	d1f8      	bne.n	801967e <_strtoul_l.isra.0+0xa>
 801968c:	2c2d      	cmp	r4, #45	; 0x2d
 801968e:	d134      	bne.n	80196fa <_strtoul_l.isra.0+0x86>
 8019690:	f89c 4000 	ldrb.w	r4, [ip]
 8019694:	f04f 0801 	mov.w	r8, #1
 8019698:	f100 0c02 	add.w	ip, r0, #2
 801969c:	2b00      	cmp	r3, #0
 801969e:	d05e      	beq.n	801975e <_strtoul_l.isra.0+0xea>
 80196a0:	2b10      	cmp	r3, #16
 80196a2:	d10c      	bne.n	80196be <_strtoul_l.isra.0+0x4a>
 80196a4:	2c30      	cmp	r4, #48	; 0x30
 80196a6:	d10a      	bne.n	80196be <_strtoul_l.isra.0+0x4a>
 80196a8:	f89c 0000 	ldrb.w	r0, [ip]
 80196ac:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80196b0:	2858      	cmp	r0, #88	; 0x58
 80196b2:	d14f      	bne.n	8019754 <_strtoul_l.isra.0+0xe0>
 80196b4:	f89c 4001 	ldrb.w	r4, [ip, #1]
 80196b8:	2310      	movs	r3, #16
 80196ba:	f10c 0c02 	add.w	ip, ip, #2
 80196be:	f04f 37ff 	mov.w	r7, #4294967295
 80196c2:	2500      	movs	r5, #0
 80196c4:	fbb7 f7f3 	udiv	r7, r7, r3
 80196c8:	fb03 f907 	mul.w	r9, r3, r7
 80196cc:	ea6f 0909 	mvn.w	r9, r9
 80196d0:	4628      	mov	r0, r5
 80196d2:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 80196d6:	2e09      	cmp	r6, #9
 80196d8:	d818      	bhi.n	801970c <_strtoul_l.isra.0+0x98>
 80196da:	4634      	mov	r4, r6
 80196dc:	42a3      	cmp	r3, r4
 80196de:	dd24      	ble.n	801972a <_strtoul_l.isra.0+0xb6>
 80196e0:	2d00      	cmp	r5, #0
 80196e2:	db1f      	blt.n	8019724 <_strtoul_l.isra.0+0xb0>
 80196e4:	4287      	cmp	r7, r0
 80196e6:	d31d      	bcc.n	8019724 <_strtoul_l.isra.0+0xb0>
 80196e8:	d101      	bne.n	80196ee <_strtoul_l.isra.0+0x7a>
 80196ea:	45a1      	cmp	r9, r4
 80196ec:	db1a      	blt.n	8019724 <_strtoul_l.isra.0+0xb0>
 80196ee:	fb00 4003 	mla	r0, r0, r3, r4
 80196f2:	2501      	movs	r5, #1
 80196f4:	f81c 4b01 	ldrb.w	r4, [ip], #1
 80196f8:	e7eb      	b.n	80196d2 <_strtoul_l.isra.0+0x5e>
 80196fa:	2c2b      	cmp	r4, #43	; 0x2b
 80196fc:	bf08      	it	eq
 80196fe:	f89c 4000 	ldrbeq.w	r4, [ip]
 8019702:	46a8      	mov	r8, r5
 8019704:	bf08      	it	eq
 8019706:	f100 0c02 	addeq.w	ip, r0, #2
 801970a:	e7c7      	b.n	801969c <_strtoul_l.isra.0+0x28>
 801970c:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 8019710:	2e19      	cmp	r6, #25
 8019712:	d801      	bhi.n	8019718 <_strtoul_l.isra.0+0xa4>
 8019714:	3c37      	subs	r4, #55	; 0x37
 8019716:	e7e1      	b.n	80196dc <_strtoul_l.isra.0+0x68>
 8019718:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 801971c:	2e19      	cmp	r6, #25
 801971e:	d804      	bhi.n	801972a <_strtoul_l.isra.0+0xb6>
 8019720:	3c57      	subs	r4, #87	; 0x57
 8019722:	e7db      	b.n	80196dc <_strtoul_l.isra.0+0x68>
 8019724:	f04f 35ff 	mov.w	r5, #4294967295
 8019728:	e7e4      	b.n	80196f4 <_strtoul_l.isra.0+0x80>
 801972a:	2d00      	cmp	r5, #0
 801972c:	da07      	bge.n	801973e <_strtoul_l.isra.0+0xca>
 801972e:	2322      	movs	r3, #34	; 0x22
 8019730:	f8ce 3000 	str.w	r3, [lr]
 8019734:	f04f 30ff 	mov.w	r0, #4294967295
 8019738:	b942      	cbnz	r2, 801974c <_strtoul_l.isra.0+0xd8>
 801973a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801973e:	f1b8 0f00 	cmp.w	r8, #0
 8019742:	d000      	beq.n	8019746 <_strtoul_l.isra.0+0xd2>
 8019744:	4240      	negs	r0, r0
 8019746:	2a00      	cmp	r2, #0
 8019748:	d0f7      	beq.n	801973a <_strtoul_l.isra.0+0xc6>
 801974a:	b10d      	cbz	r5, 8019750 <_strtoul_l.isra.0+0xdc>
 801974c:	f10c 31ff 	add.w	r1, ip, #4294967295
 8019750:	6011      	str	r1, [r2, #0]
 8019752:	e7f2      	b.n	801973a <_strtoul_l.isra.0+0xc6>
 8019754:	2430      	movs	r4, #48	; 0x30
 8019756:	2b00      	cmp	r3, #0
 8019758:	d1b1      	bne.n	80196be <_strtoul_l.isra.0+0x4a>
 801975a:	2308      	movs	r3, #8
 801975c:	e7af      	b.n	80196be <_strtoul_l.isra.0+0x4a>
 801975e:	2c30      	cmp	r4, #48	; 0x30
 8019760:	d0a2      	beq.n	80196a8 <_strtoul_l.isra.0+0x34>
 8019762:	230a      	movs	r3, #10
 8019764:	e7ab      	b.n	80196be <_strtoul_l.isra.0+0x4a>
 8019766:	bf00      	nop
 8019768:	0801f619 	.word	0x0801f619

0801976c <_strtoul_r>:
 801976c:	f7ff bf82 	b.w	8019674 <_strtoul_l.isra.0>

08019770 <__submore>:
 8019770:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019774:	460c      	mov	r4, r1
 8019776:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8019778:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801977c:	4299      	cmp	r1, r3
 801977e:	d11d      	bne.n	80197bc <__submore+0x4c>
 8019780:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8019784:	f7fb fcf6 	bl	8015174 <_malloc_r>
 8019788:	b918      	cbnz	r0, 8019792 <__submore+0x22>
 801978a:	f04f 30ff 	mov.w	r0, #4294967295
 801978e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019792:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8019796:	63a3      	str	r3, [r4, #56]	; 0x38
 8019798:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 801979c:	6360      	str	r0, [r4, #52]	; 0x34
 801979e:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 80197a2:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80197a6:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 80197aa:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80197ae:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 80197b2:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 80197b6:	6020      	str	r0, [r4, #0]
 80197b8:	2000      	movs	r0, #0
 80197ba:	e7e8      	b.n	801978e <__submore+0x1e>
 80197bc:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 80197be:	0077      	lsls	r7, r6, #1
 80197c0:	463a      	mov	r2, r7
 80197c2:	f000 fa21 	bl	8019c08 <_realloc_r>
 80197c6:	4605      	mov	r5, r0
 80197c8:	2800      	cmp	r0, #0
 80197ca:	d0de      	beq.n	801978a <__submore+0x1a>
 80197cc:	eb00 0806 	add.w	r8, r0, r6
 80197d0:	4601      	mov	r1, r0
 80197d2:	4632      	mov	r2, r6
 80197d4:	4640      	mov	r0, r8
 80197d6:	f7fb fc67 	bl	80150a8 <memcpy>
 80197da:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 80197de:	f8c4 8000 	str.w	r8, [r4]
 80197e2:	e7e9      	b.n	80197b8 <__submore+0x48>

080197e4 <__ascii_wctomb>:
 80197e4:	b149      	cbz	r1, 80197fa <__ascii_wctomb+0x16>
 80197e6:	2aff      	cmp	r2, #255	; 0xff
 80197e8:	bf85      	ittet	hi
 80197ea:	238a      	movhi	r3, #138	; 0x8a
 80197ec:	6003      	strhi	r3, [r0, #0]
 80197ee:	700a      	strbls	r2, [r1, #0]
 80197f0:	f04f 30ff 	movhi.w	r0, #4294967295
 80197f4:	bf98      	it	ls
 80197f6:	2001      	movls	r0, #1
 80197f8:	4770      	bx	lr
 80197fa:	4608      	mov	r0, r1
 80197fc:	4770      	bx	lr
	...

08019800 <__assert_func>:
 8019800:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8019802:	4614      	mov	r4, r2
 8019804:	461a      	mov	r2, r3
 8019806:	4b09      	ldr	r3, [pc, #36]	; (801982c <__assert_func+0x2c>)
 8019808:	681b      	ldr	r3, [r3, #0]
 801980a:	4605      	mov	r5, r0
 801980c:	68d8      	ldr	r0, [r3, #12]
 801980e:	b14c      	cbz	r4, 8019824 <__assert_func+0x24>
 8019810:	4b07      	ldr	r3, [pc, #28]	; (8019830 <__assert_func+0x30>)
 8019812:	9100      	str	r1, [sp, #0]
 8019814:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8019818:	4906      	ldr	r1, [pc, #24]	; (8019834 <__assert_func+0x34>)
 801981a:	462b      	mov	r3, r5
 801981c:	f000 f9a6 	bl	8019b6c <fiprintf>
 8019820:	f000 fc32 	bl	801a088 <abort>
 8019824:	4b04      	ldr	r3, [pc, #16]	; (8019838 <__assert_func+0x38>)
 8019826:	461c      	mov	r4, r3
 8019828:	e7f3      	b.n	8019812 <__assert_func+0x12>
 801982a:	bf00      	nop
 801982c:	20000154 	.word	0x20000154
 8019830:	0801f9b8 	.word	0x0801f9b8
 8019834:	0801f9c5 	.word	0x0801f9c5
 8019838:	0801f9f3 	.word	0x0801f9f3

0801983c <__sflush_r>:
 801983c:	898a      	ldrh	r2, [r1, #12]
 801983e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019842:	4605      	mov	r5, r0
 8019844:	0710      	lsls	r0, r2, #28
 8019846:	460c      	mov	r4, r1
 8019848:	d458      	bmi.n	80198fc <__sflush_r+0xc0>
 801984a:	684b      	ldr	r3, [r1, #4]
 801984c:	2b00      	cmp	r3, #0
 801984e:	dc05      	bgt.n	801985c <__sflush_r+0x20>
 8019850:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8019852:	2b00      	cmp	r3, #0
 8019854:	dc02      	bgt.n	801985c <__sflush_r+0x20>
 8019856:	2000      	movs	r0, #0
 8019858:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801985c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801985e:	2e00      	cmp	r6, #0
 8019860:	d0f9      	beq.n	8019856 <__sflush_r+0x1a>
 8019862:	2300      	movs	r3, #0
 8019864:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8019868:	682f      	ldr	r7, [r5, #0]
 801986a:	602b      	str	r3, [r5, #0]
 801986c:	d032      	beq.n	80198d4 <__sflush_r+0x98>
 801986e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8019870:	89a3      	ldrh	r3, [r4, #12]
 8019872:	075a      	lsls	r2, r3, #29
 8019874:	d505      	bpl.n	8019882 <__sflush_r+0x46>
 8019876:	6863      	ldr	r3, [r4, #4]
 8019878:	1ac0      	subs	r0, r0, r3
 801987a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801987c:	b10b      	cbz	r3, 8019882 <__sflush_r+0x46>
 801987e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8019880:	1ac0      	subs	r0, r0, r3
 8019882:	2300      	movs	r3, #0
 8019884:	4602      	mov	r2, r0
 8019886:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8019888:	6a21      	ldr	r1, [r4, #32]
 801988a:	4628      	mov	r0, r5
 801988c:	47b0      	blx	r6
 801988e:	1c43      	adds	r3, r0, #1
 8019890:	89a3      	ldrh	r3, [r4, #12]
 8019892:	d106      	bne.n	80198a2 <__sflush_r+0x66>
 8019894:	6829      	ldr	r1, [r5, #0]
 8019896:	291d      	cmp	r1, #29
 8019898:	d82c      	bhi.n	80198f4 <__sflush_r+0xb8>
 801989a:	4a2a      	ldr	r2, [pc, #168]	; (8019944 <__sflush_r+0x108>)
 801989c:	40ca      	lsrs	r2, r1
 801989e:	07d6      	lsls	r6, r2, #31
 80198a0:	d528      	bpl.n	80198f4 <__sflush_r+0xb8>
 80198a2:	2200      	movs	r2, #0
 80198a4:	6062      	str	r2, [r4, #4]
 80198a6:	04d9      	lsls	r1, r3, #19
 80198a8:	6922      	ldr	r2, [r4, #16]
 80198aa:	6022      	str	r2, [r4, #0]
 80198ac:	d504      	bpl.n	80198b8 <__sflush_r+0x7c>
 80198ae:	1c42      	adds	r2, r0, #1
 80198b0:	d101      	bne.n	80198b6 <__sflush_r+0x7a>
 80198b2:	682b      	ldr	r3, [r5, #0]
 80198b4:	b903      	cbnz	r3, 80198b8 <__sflush_r+0x7c>
 80198b6:	6560      	str	r0, [r4, #84]	; 0x54
 80198b8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80198ba:	602f      	str	r7, [r5, #0]
 80198bc:	2900      	cmp	r1, #0
 80198be:	d0ca      	beq.n	8019856 <__sflush_r+0x1a>
 80198c0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80198c4:	4299      	cmp	r1, r3
 80198c6:	d002      	beq.n	80198ce <__sflush_r+0x92>
 80198c8:	4628      	mov	r0, r5
 80198ca:	f7fb fc03 	bl	80150d4 <_free_r>
 80198ce:	2000      	movs	r0, #0
 80198d0:	6360      	str	r0, [r4, #52]	; 0x34
 80198d2:	e7c1      	b.n	8019858 <__sflush_r+0x1c>
 80198d4:	6a21      	ldr	r1, [r4, #32]
 80198d6:	2301      	movs	r3, #1
 80198d8:	4628      	mov	r0, r5
 80198da:	47b0      	blx	r6
 80198dc:	1c41      	adds	r1, r0, #1
 80198de:	d1c7      	bne.n	8019870 <__sflush_r+0x34>
 80198e0:	682b      	ldr	r3, [r5, #0]
 80198e2:	2b00      	cmp	r3, #0
 80198e4:	d0c4      	beq.n	8019870 <__sflush_r+0x34>
 80198e6:	2b1d      	cmp	r3, #29
 80198e8:	d001      	beq.n	80198ee <__sflush_r+0xb2>
 80198ea:	2b16      	cmp	r3, #22
 80198ec:	d101      	bne.n	80198f2 <__sflush_r+0xb6>
 80198ee:	602f      	str	r7, [r5, #0]
 80198f0:	e7b1      	b.n	8019856 <__sflush_r+0x1a>
 80198f2:	89a3      	ldrh	r3, [r4, #12]
 80198f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80198f8:	81a3      	strh	r3, [r4, #12]
 80198fa:	e7ad      	b.n	8019858 <__sflush_r+0x1c>
 80198fc:	690f      	ldr	r7, [r1, #16]
 80198fe:	2f00      	cmp	r7, #0
 8019900:	d0a9      	beq.n	8019856 <__sflush_r+0x1a>
 8019902:	0793      	lsls	r3, r2, #30
 8019904:	680e      	ldr	r6, [r1, #0]
 8019906:	bf08      	it	eq
 8019908:	694b      	ldreq	r3, [r1, #20]
 801990a:	600f      	str	r7, [r1, #0]
 801990c:	bf18      	it	ne
 801990e:	2300      	movne	r3, #0
 8019910:	eba6 0807 	sub.w	r8, r6, r7
 8019914:	608b      	str	r3, [r1, #8]
 8019916:	f1b8 0f00 	cmp.w	r8, #0
 801991a:	dd9c      	ble.n	8019856 <__sflush_r+0x1a>
 801991c:	6a21      	ldr	r1, [r4, #32]
 801991e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8019920:	4643      	mov	r3, r8
 8019922:	463a      	mov	r2, r7
 8019924:	4628      	mov	r0, r5
 8019926:	47b0      	blx	r6
 8019928:	2800      	cmp	r0, #0
 801992a:	dc06      	bgt.n	801993a <__sflush_r+0xfe>
 801992c:	89a3      	ldrh	r3, [r4, #12]
 801992e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019932:	81a3      	strh	r3, [r4, #12]
 8019934:	f04f 30ff 	mov.w	r0, #4294967295
 8019938:	e78e      	b.n	8019858 <__sflush_r+0x1c>
 801993a:	4407      	add	r7, r0
 801993c:	eba8 0800 	sub.w	r8, r8, r0
 8019940:	e7e9      	b.n	8019916 <__sflush_r+0xda>
 8019942:	bf00      	nop
 8019944:	20400001 	.word	0x20400001

08019948 <_fflush_r>:
 8019948:	b538      	push	{r3, r4, r5, lr}
 801994a:	690b      	ldr	r3, [r1, #16]
 801994c:	4605      	mov	r5, r0
 801994e:	460c      	mov	r4, r1
 8019950:	b913      	cbnz	r3, 8019958 <_fflush_r+0x10>
 8019952:	2500      	movs	r5, #0
 8019954:	4628      	mov	r0, r5
 8019956:	bd38      	pop	{r3, r4, r5, pc}
 8019958:	b118      	cbz	r0, 8019962 <_fflush_r+0x1a>
 801995a:	6983      	ldr	r3, [r0, #24]
 801995c:	b90b      	cbnz	r3, 8019962 <_fflush_r+0x1a>
 801995e:	f000 f887 	bl	8019a70 <__sinit>
 8019962:	4b14      	ldr	r3, [pc, #80]	; (80199b4 <_fflush_r+0x6c>)
 8019964:	429c      	cmp	r4, r3
 8019966:	d11b      	bne.n	80199a0 <_fflush_r+0x58>
 8019968:	686c      	ldr	r4, [r5, #4]
 801996a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801996e:	2b00      	cmp	r3, #0
 8019970:	d0ef      	beq.n	8019952 <_fflush_r+0xa>
 8019972:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8019974:	07d0      	lsls	r0, r2, #31
 8019976:	d404      	bmi.n	8019982 <_fflush_r+0x3a>
 8019978:	0599      	lsls	r1, r3, #22
 801997a:	d402      	bmi.n	8019982 <_fflush_r+0x3a>
 801997c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801997e:	f000 f927 	bl	8019bd0 <__retarget_lock_acquire_recursive>
 8019982:	4628      	mov	r0, r5
 8019984:	4621      	mov	r1, r4
 8019986:	f7ff ff59 	bl	801983c <__sflush_r>
 801998a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801998c:	07da      	lsls	r2, r3, #31
 801998e:	4605      	mov	r5, r0
 8019990:	d4e0      	bmi.n	8019954 <_fflush_r+0xc>
 8019992:	89a3      	ldrh	r3, [r4, #12]
 8019994:	059b      	lsls	r3, r3, #22
 8019996:	d4dd      	bmi.n	8019954 <_fflush_r+0xc>
 8019998:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801999a:	f000 f91a 	bl	8019bd2 <__retarget_lock_release_recursive>
 801999e:	e7d9      	b.n	8019954 <_fflush_r+0xc>
 80199a0:	4b05      	ldr	r3, [pc, #20]	; (80199b8 <_fflush_r+0x70>)
 80199a2:	429c      	cmp	r4, r3
 80199a4:	d101      	bne.n	80199aa <_fflush_r+0x62>
 80199a6:	68ac      	ldr	r4, [r5, #8]
 80199a8:	e7df      	b.n	801996a <_fflush_r+0x22>
 80199aa:	4b04      	ldr	r3, [pc, #16]	; (80199bc <_fflush_r+0x74>)
 80199ac:	429c      	cmp	r4, r3
 80199ae:	bf08      	it	eq
 80199b0:	68ec      	ldreq	r4, [r5, #12]
 80199b2:	e7da      	b.n	801996a <_fflush_r+0x22>
 80199b4:	0801fa14 	.word	0x0801fa14
 80199b8:	0801fa34 	.word	0x0801fa34
 80199bc:	0801f9f4 	.word	0x0801f9f4

080199c0 <std>:
 80199c0:	2300      	movs	r3, #0
 80199c2:	b510      	push	{r4, lr}
 80199c4:	4604      	mov	r4, r0
 80199c6:	e9c0 3300 	strd	r3, r3, [r0]
 80199ca:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80199ce:	6083      	str	r3, [r0, #8]
 80199d0:	8181      	strh	r1, [r0, #12]
 80199d2:	6643      	str	r3, [r0, #100]	; 0x64
 80199d4:	81c2      	strh	r2, [r0, #14]
 80199d6:	6183      	str	r3, [r0, #24]
 80199d8:	4619      	mov	r1, r3
 80199da:	2208      	movs	r2, #8
 80199dc:	305c      	adds	r0, #92	; 0x5c
 80199de:	f7fb fb71 	bl	80150c4 <memset>
 80199e2:	4b05      	ldr	r3, [pc, #20]	; (80199f8 <std+0x38>)
 80199e4:	6263      	str	r3, [r4, #36]	; 0x24
 80199e6:	4b05      	ldr	r3, [pc, #20]	; (80199fc <std+0x3c>)
 80199e8:	62a3      	str	r3, [r4, #40]	; 0x28
 80199ea:	4b05      	ldr	r3, [pc, #20]	; (8019a00 <std+0x40>)
 80199ec:	62e3      	str	r3, [r4, #44]	; 0x2c
 80199ee:	4b05      	ldr	r3, [pc, #20]	; (8019a04 <std+0x44>)
 80199f0:	6224      	str	r4, [r4, #32]
 80199f2:	6323      	str	r3, [r4, #48]	; 0x30
 80199f4:	bd10      	pop	{r4, pc}
 80199f6:	bf00      	nop
 80199f8:	08016049 	.word	0x08016049
 80199fc:	0801606f 	.word	0x0801606f
 8019a00:	080160a7 	.word	0x080160a7
 8019a04:	080160cb 	.word	0x080160cb

08019a08 <_cleanup_r>:
 8019a08:	4901      	ldr	r1, [pc, #4]	; (8019a10 <_cleanup_r+0x8>)
 8019a0a:	f000 b8c1 	b.w	8019b90 <_fwalk_reent>
 8019a0e:	bf00      	nop
 8019a10:	08019949 	.word	0x08019949

08019a14 <__sfmoreglue>:
 8019a14:	b570      	push	{r4, r5, r6, lr}
 8019a16:	1e4a      	subs	r2, r1, #1
 8019a18:	2568      	movs	r5, #104	; 0x68
 8019a1a:	4355      	muls	r5, r2
 8019a1c:	460e      	mov	r6, r1
 8019a1e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8019a22:	f7fb fba7 	bl	8015174 <_malloc_r>
 8019a26:	4604      	mov	r4, r0
 8019a28:	b140      	cbz	r0, 8019a3c <__sfmoreglue+0x28>
 8019a2a:	2100      	movs	r1, #0
 8019a2c:	e9c0 1600 	strd	r1, r6, [r0]
 8019a30:	300c      	adds	r0, #12
 8019a32:	60a0      	str	r0, [r4, #8]
 8019a34:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8019a38:	f7fb fb44 	bl	80150c4 <memset>
 8019a3c:	4620      	mov	r0, r4
 8019a3e:	bd70      	pop	{r4, r5, r6, pc}

08019a40 <__sfp_lock_acquire>:
 8019a40:	4801      	ldr	r0, [pc, #4]	; (8019a48 <__sfp_lock_acquire+0x8>)
 8019a42:	f000 b8c5 	b.w	8019bd0 <__retarget_lock_acquire_recursive>
 8019a46:	bf00      	nop
 8019a48:	20005874 	.word	0x20005874

08019a4c <__sfp_lock_release>:
 8019a4c:	4801      	ldr	r0, [pc, #4]	; (8019a54 <__sfp_lock_release+0x8>)
 8019a4e:	f000 b8c0 	b.w	8019bd2 <__retarget_lock_release_recursive>
 8019a52:	bf00      	nop
 8019a54:	20005874 	.word	0x20005874

08019a58 <__sinit_lock_acquire>:
 8019a58:	4801      	ldr	r0, [pc, #4]	; (8019a60 <__sinit_lock_acquire+0x8>)
 8019a5a:	f000 b8b9 	b.w	8019bd0 <__retarget_lock_acquire_recursive>
 8019a5e:	bf00      	nop
 8019a60:	2000586f 	.word	0x2000586f

08019a64 <__sinit_lock_release>:
 8019a64:	4801      	ldr	r0, [pc, #4]	; (8019a6c <__sinit_lock_release+0x8>)
 8019a66:	f000 b8b4 	b.w	8019bd2 <__retarget_lock_release_recursive>
 8019a6a:	bf00      	nop
 8019a6c:	2000586f 	.word	0x2000586f

08019a70 <__sinit>:
 8019a70:	b510      	push	{r4, lr}
 8019a72:	4604      	mov	r4, r0
 8019a74:	f7ff fff0 	bl	8019a58 <__sinit_lock_acquire>
 8019a78:	69a3      	ldr	r3, [r4, #24]
 8019a7a:	b11b      	cbz	r3, 8019a84 <__sinit+0x14>
 8019a7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019a80:	f7ff bff0 	b.w	8019a64 <__sinit_lock_release>
 8019a84:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8019a88:	6523      	str	r3, [r4, #80]	; 0x50
 8019a8a:	4b13      	ldr	r3, [pc, #76]	; (8019ad8 <__sinit+0x68>)
 8019a8c:	4a13      	ldr	r2, [pc, #76]	; (8019adc <__sinit+0x6c>)
 8019a8e:	681b      	ldr	r3, [r3, #0]
 8019a90:	62a2      	str	r2, [r4, #40]	; 0x28
 8019a92:	42a3      	cmp	r3, r4
 8019a94:	bf04      	itt	eq
 8019a96:	2301      	moveq	r3, #1
 8019a98:	61a3      	streq	r3, [r4, #24]
 8019a9a:	4620      	mov	r0, r4
 8019a9c:	f000 f820 	bl	8019ae0 <__sfp>
 8019aa0:	6060      	str	r0, [r4, #4]
 8019aa2:	4620      	mov	r0, r4
 8019aa4:	f000 f81c 	bl	8019ae0 <__sfp>
 8019aa8:	60a0      	str	r0, [r4, #8]
 8019aaa:	4620      	mov	r0, r4
 8019aac:	f000 f818 	bl	8019ae0 <__sfp>
 8019ab0:	2200      	movs	r2, #0
 8019ab2:	60e0      	str	r0, [r4, #12]
 8019ab4:	2104      	movs	r1, #4
 8019ab6:	6860      	ldr	r0, [r4, #4]
 8019ab8:	f7ff ff82 	bl	80199c0 <std>
 8019abc:	68a0      	ldr	r0, [r4, #8]
 8019abe:	2201      	movs	r2, #1
 8019ac0:	2109      	movs	r1, #9
 8019ac2:	f7ff ff7d 	bl	80199c0 <std>
 8019ac6:	68e0      	ldr	r0, [r4, #12]
 8019ac8:	2202      	movs	r2, #2
 8019aca:	2112      	movs	r1, #18
 8019acc:	f7ff ff78 	bl	80199c0 <std>
 8019ad0:	2301      	movs	r3, #1
 8019ad2:	61a3      	str	r3, [r4, #24]
 8019ad4:	e7d2      	b.n	8019a7c <__sinit+0xc>
 8019ad6:	bf00      	nop
 8019ad8:	0801f58c 	.word	0x0801f58c
 8019adc:	08019a09 	.word	0x08019a09

08019ae0 <__sfp>:
 8019ae0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019ae2:	4607      	mov	r7, r0
 8019ae4:	f7ff ffac 	bl	8019a40 <__sfp_lock_acquire>
 8019ae8:	4b1e      	ldr	r3, [pc, #120]	; (8019b64 <__sfp+0x84>)
 8019aea:	681e      	ldr	r6, [r3, #0]
 8019aec:	69b3      	ldr	r3, [r6, #24]
 8019aee:	b913      	cbnz	r3, 8019af6 <__sfp+0x16>
 8019af0:	4630      	mov	r0, r6
 8019af2:	f7ff ffbd 	bl	8019a70 <__sinit>
 8019af6:	3648      	adds	r6, #72	; 0x48
 8019af8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8019afc:	3b01      	subs	r3, #1
 8019afe:	d503      	bpl.n	8019b08 <__sfp+0x28>
 8019b00:	6833      	ldr	r3, [r6, #0]
 8019b02:	b30b      	cbz	r3, 8019b48 <__sfp+0x68>
 8019b04:	6836      	ldr	r6, [r6, #0]
 8019b06:	e7f7      	b.n	8019af8 <__sfp+0x18>
 8019b08:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8019b0c:	b9d5      	cbnz	r5, 8019b44 <__sfp+0x64>
 8019b0e:	4b16      	ldr	r3, [pc, #88]	; (8019b68 <__sfp+0x88>)
 8019b10:	60e3      	str	r3, [r4, #12]
 8019b12:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8019b16:	6665      	str	r5, [r4, #100]	; 0x64
 8019b18:	f000 f859 	bl	8019bce <__retarget_lock_init_recursive>
 8019b1c:	f7ff ff96 	bl	8019a4c <__sfp_lock_release>
 8019b20:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8019b24:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8019b28:	6025      	str	r5, [r4, #0]
 8019b2a:	61a5      	str	r5, [r4, #24]
 8019b2c:	2208      	movs	r2, #8
 8019b2e:	4629      	mov	r1, r5
 8019b30:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8019b34:	f7fb fac6 	bl	80150c4 <memset>
 8019b38:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8019b3c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8019b40:	4620      	mov	r0, r4
 8019b42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019b44:	3468      	adds	r4, #104	; 0x68
 8019b46:	e7d9      	b.n	8019afc <__sfp+0x1c>
 8019b48:	2104      	movs	r1, #4
 8019b4a:	4638      	mov	r0, r7
 8019b4c:	f7ff ff62 	bl	8019a14 <__sfmoreglue>
 8019b50:	4604      	mov	r4, r0
 8019b52:	6030      	str	r0, [r6, #0]
 8019b54:	2800      	cmp	r0, #0
 8019b56:	d1d5      	bne.n	8019b04 <__sfp+0x24>
 8019b58:	f7ff ff78 	bl	8019a4c <__sfp_lock_release>
 8019b5c:	230c      	movs	r3, #12
 8019b5e:	603b      	str	r3, [r7, #0]
 8019b60:	e7ee      	b.n	8019b40 <__sfp+0x60>
 8019b62:	bf00      	nop
 8019b64:	0801f58c 	.word	0x0801f58c
 8019b68:	ffff0001 	.word	0xffff0001

08019b6c <fiprintf>:
 8019b6c:	b40e      	push	{r1, r2, r3}
 8019b6e:	b503      	push	{r0, r1, lr}
 8019b70:	4601      	mov	r1, r0
 8019b72:	ab03      	add	r3, sp, #12
 8019b74:	4805      	ldr	r0, [pc, #20]	; (8019b8c <fiprintf+0x20>)
 8019b76:	f853 2b04 	ldr.w	r2, [r3], #4
 8019b7a:	6800      	ldr	r0, [r0, #0]
 8019b7c:	9301      	str	r3, [sp, #4]
 8019b7e:	f000 f893 	bl	8019ca8 <_vfiprintf_r>
 8019b82:	b002      	add	sp, #8
 8019b84:	f85d eb04 	ldr.w	lr, [sp], #4
 8019b88:	b003      	add	sp, #12
 8019b8a:	4770      	bx	lr
 8019b8c:	20000154 	.word	0x20000154

08019b90 <_fwalk_reent>:
 8019b90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019b94:	4606      	mov	r6, r0
 8019b96:	4688      	mov	r8, r1
 8019b98:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8019b9c:	2700      	movs	r7, #0
 8019b9e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8019ba2:	f1b9 0901 	subs.w	r9, r9, #1
 8019ba6:	d505      	bpl.n	8019bb4 <_fwalk_reent+0x24>
 8019ba8:	6824      	ldr	r4, [r4, #0]
 8019baa:	2c00      	cmp	r4, #0
 8019bac:	d1f7      	bne.n	8019b9e <_fwalk_reent+0xe>
 8019bae:	4638      	mov	r0, r7
 8019bb0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019bb4:	89ab      	ldrh	r3, [r5, #12]
 8019bb6:	2b01      	cmp	r3, #1
 8019bb8:	d907      	bls.n	8019bca <_fwalk_reent+0x3a>
 8019bba:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8019bbe:	3301      	adds	r3, #1
 8019bc0:	d003      	beq.n	8019bca <_fwalk_reent+0x3a>
 8019bc2:	4629      	mov	r1, r5
 8019bc4:	4630      	mov	r0, r6
 8019bc6:	47c0      	blx	r8
 8019bc8:	4307      	orrs	r7, r0
 8019bca:	3568      	adds	r5, #104	; 0x68
 8019bcc:	e7e9      	b.n	8019ba2 <_fwalk_reent+0x12>

08019bce <__retarget_lock_init_recursive>:
 8019bce:	4770      	bx	lr

08019bd0 <__retarget_lock_acquire_recursive>:
 8019bd0:	4770      	bx	lr

08019bd2 <__retarget_lock_release_recursive>:
 8019bd2:	4770      	bx	lr

08019bd4 <memmove>:
 8019bd4:	4288      	cmp	r0, r1
 8019bd6:	b510      	push	{r4, lr}
 8019bd8:	eb01 0402 	add.w	r4, r1, r2
 8019bdc:	d902      	bls.n	8019be4 <memmove+0x10>
 8019bde:	4284      	cmp	r4, r0
 8019be0:	4623      	mov	r3, r4
 8019be2:	d807      	bhi.n	8019bf4 <memmove+0x20>
 8019be4:	1e43      	subs	r3, r0, #1
 8019be6:	42a1      	cmp	r1, r4
 8019be8:	d008      	beq.n	8019bfc <memmove+0x28>
 8019bea:	f811 2b01 	ldrb.w	r2, [r1], #1
 8019bee:	f803 2f01 	strb.w	r2, [r3, #1]!
 8019bf2:	e7f8      	b.n	8019be6 <memmove+0x12>
 8019bf4:	4402      	add	r2, r0
 8019bf6:	4601      	mov	r1, r0
 8019bf8:	428a      	cmp	r2, r1
 8019bfa:	d100      	bne.n	8019bfe <memmove+0x2a>
 8019bfc:	bd10      	pop	{r4, pc}
 8019bfe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8019c02:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8019c06:	e7f7      	b.n	8019bf8 <memmove+0x24>

08019c08 <_realloc_r>:
 8019c08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019c0a:	4607      	mov	r7, r0
 8019c0c:	4614      	mov	r4, r2
 8019c0e:	460e      	mov	r6, r1
 8019c10:	b921      	cbnz	r1, 8019c1c <_realloc_r+0x14>
 8019c12:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8019c16:	4611      	mov	r1, r2
 8019c18:	f7fb baac 	b.w	8015174 <_malloc_r>
 8019c1c:	b922      	cbnz	r2, 8019c28 <_realloc_r+0x20>
 8019c1e:	f7fb fa59 	bl	80150d4 <_free_r>
 8019c22:	4625      	mov	r5, r4
 8019c24:	4628      	mov	r0, r5
 8019c26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019c28:	f000 fa9a 	bl	801a160 <_malloc_usable_size_r>
 8019c2c:	42a0      	cmp	r0, r4
 8019c2e:	d20f      	bcs.n	8019c50 <_realloc_r+0x48>
 8019c30:	4621      	mov	r1, r4
 8019c32:	4638      	mov	r0, r7
 8019c34:	f7fb fa9e 	bl	8015174 <_malloc_r>
 8019c38:	4605      	mov	r5, r0
 8019c3a:	2800      	cmp	r0, #0
 8019c3c:	d0f2      	beq.n	8019c24 <_realloc_r+0x1c>
 8019c3e:	4631      	mov	r1, r6
 8019c40:	4622      	mov	r2, r4
 8019c42:	f7fb fa31 	bl	80150a8 <memcpy>
 8019c46:	4631      	mov	r1, r6
 8019c48:	4638      	mov	r0, r7
 8019c4a:	f7fb fa43 	bl	80150d4 <_free_r>
 8019c4e:	e7e9      	b.n	8019c24 <_realloc_r+0x1c>
 8019c50:	4635      	mov	r5, r6
 8019c52:	e7e7      	b.n	8019c24 <_realloc_r+0x1c>

08019c54 <__sfputc_r>:
 8019c54:	6893      	ldr	r3, [r2, #8]
 8019c56:	3b01      	subs	r3, #1
 8019c58:	2b00      	cmp	r3, #0
 8019c5a:	b410      	push	{r4}
 8019c5c:	6093      	str	r3, [r2, #8]
 8019c5e:	da08      	bge.n	8019c72 <__sfputc_r+0x1e>
 8019c60:	6994      	ldr	r4, [r2, #24]
 8019c62:	42a3      	cmp	r3, r4
 8019c64:	db01      	blt.n	8019c6a <__sfputc_r+0x16>
 8019c66:	290a      	cmp	r1, #10
 8019c68:	d103      	bne.n	8019c72 <__sfputc_r+0x1e>
 8019c6a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019c6e:	f000 b94b 	b.w	8019f08 <__swbuf_r>
 8019c72:	6813      	ldr	r3, [r2, #0]
 8019c74:	1c58      	adds	r0, r3, #1
 8019c76:	6010      	str	r0, [r2, #0]
 8019c78:	7019      	strb	r1, [r3, #0]
 8019c7a:	4608      	mov	r0, r1
 8019c7c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019c80:	4770      	bx	lr

08019c82 <__sfputs_r>:
 8019c82:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019c84:	4606      	mov	r6, r0
 8019c86:	460f      	mov	r7, r1
 8019c88:	4614      	mov	r4, r2
 8019c8a:	18d5      	adds	r5, r2, r3
 8019c8c:	42ac      	cmp	r4, r5
 8019c8e:	d101      	bne.n	8019c94 <__sfputs_r+0x12>
 8019c90:	2000      	movs	r0, #0
 8019c92:	e007      	b.n	8019ca4 <__sfputs_r+0x22>
 8019c94:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019c98:	463a      	mov	r2, r7
 8019c9a:	4630      	mov	r0, r6
 8019c9c:	f7ff ffda 	bl	8019c54 <__sfputc_r>
 8019ca0:	1c43      	adds	r3, r0, #1
 8019ca2:	d1f3      	bne.n	8019c8c <__sfputs_r+0xa>
 8019ca4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08019ca8 <_vfiprintf_r>:
 8019ca8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019cac:	460d      	mov	r5, r1
 8019cae:	b09d      	sub	sp, #116	; 0x74
 8019cb0:	4614      	mov	r4, r2
 8019cb2:	4698      	mov	r8, r3
 8019cb4:	4606      	mov	r6, r0
 8019cb6:	b118      	cbz	r0, 8019cc0 <_vfiprintf_r+0x18>
 8019cb8:	6983      	ldr	r3, [r0, #24]
 8019cba:	b90b      	cbnz	r3, 8019cc0 <_vfiprintf_r+0x18>
 8019cbc:	f7ff fed8 	bl	8019a70 <__sinit>
 8019cc0:	4b89      	ldr	r3, [pc, #548]	; (8019ee8 <_vfiprintf_r+0x240>)
 8019cc2:	429d      	cmp	r5, r3
 8019cc4:	d11b      	bne.n	8019cfe <_vfiprintf_r+0x56>
 8019cc6:	6875      	ldr	r5, [r6, #4]
 8019cc8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8019cca:	07d9      	lsls	r1, r3, #31
 8019ccc:	d405      	bmi.n	8019cda <_vfiprintf_r+0x32>
 8019cce:	89ab      	ldrh	r3, [r5, #12]
 8019cd0:	059a      	lsls	r2, r3, #22
 8019cd2:	d402      	bmi.n	8019cda <_vfiprintf_r+0x32>
 8019cd4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8019cd6:	f7ff ff7b 	bl	8019bd0 <__retarget_lock_acquire_recursive>
 8019cda:	89ab      	ldrh	r3, [r5, #12]
 8019cdc:	071b      	lsls	r3, r3, #28
 8019cde:	d501      	bpl.n	8019ce4 <_vfiprintf_r+0x3c>
 8019ce0:	692b      	ldr	r3, [r5, #16]
 8019ce2:	b9eb      	cbnz	r3, 8019d20 <_vfiprintf_r+0x78>
 8019ce4:	4629      	mov	r1, r5
 8019ce6:	4630      	mov	r0, r6
 8019ce8:	f000 f960 	bl	8019fac <__swsetup_r>
 8019cec:	b1c0      	cbz	r0, 8019d20 <_vfiprintf_r+0x78>
 8019cee:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8019cf0:	07dc      	lsls	r4, r3, #31
 8019cf2:	d50e      	bpl.n	8019d12 <_vfiprintf_r+0x6a>
 8019cf4:	f04f 30ff 	mov.w	r0, #4294967295
 8019cf8:	b01d      	add	sp, #116	; 0x74
 8019cfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019cfe:	4b7b      	ldr	r3, [pc, #492]	; (8019eec <_vfiprintf_r+0x244>)
 8019d00:	429d      	cmp	r5, r3
 8019d02:	d101      	bne.n	8019d08 <_vfiprintf_r+0x60>
 8019d04:	68b5      	ldr	r5, [r6, #8]
 8019d06:	e7df      	b.n	8019cc8 <_vfiprintf_r+0x20>
 8019d08:	4b79      	ldr	r3, [pc, #484]	; (8019ef0 <_vfiprintf_r+0x248>)
 8019d0a:	429d      	cmp	r5, r3
 8019d0c:	bf08      	it	eq
 8019d0e:	68f5      	ldreq	r5, [r6, #12]
 8019d10:	e7da      	b.n	8019cc8 <_vfiprintf_r+0x20>
 8019d12:	89ab      	ldrh	r3, [r5, #12]
 8019d14:	0598      	lsls	r0, r3, #22
 8019d16:	d4ed      	bmi.n	8019cf4 <_vfiprintf_r+0x4c>
 8019d18:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8019d1a:	f7ff ff5a 	bl	8019bd2 <__retarget_lock_release_recursive>
 8019d1e:	e7e9      	b.n	8019cf4 <_vfiprintf_r+0x4c>
 8019d20:	2300      	movs	r3, #0
 8019d22:	9309      	str	r3, [sp, #36]	; 0x24
 8019d24:	2320      	movs	r3, #32
 8019d26:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8019d2a:	f8cd 800c 	str.w	r8, [sp, #12]
 8019d2e:	2330      	movs	r3, #48	; 0x30
 8019d30:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8019ef4 <_vfiprintf_r+0x24c>
 8019d34:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8019d38:	f04f 0901 	mov.w	r9, #1
 8019d3c:	4623      	mov	r3, r4
 8019d3e:	469a      	mov	sl, r3
 8019d40:	f813 2b01 	ldrb.w	r2, [r3], #1
 8019d44:	b10a      	cbz	r2, 8019d4a <_vfiprintf_r+0xa2>
 8019d46:	2a25      	cmp	r2, #37	; 0x25
 8019d48:	d1f9      	bne.n	8019d3e <_vfiprintf_r+0x96>
 8019d4a:	ebba 0b04 	subs.w	fp, sl, r4
 8019d4e:	d00b      	beq.n	8019d68 <_vfiprintf_r+0xc0>
 8019d50:	465b      	mov	r3, fp
 8019d52:	4622      	mov	r2, r4
 8019d54:	4629      	mov	r1, r5
 8019d56:	4630      	mov	r0, r6
 8019d58:	f7ff ff93 	bl	8019c82 <__sfputs_r>
 8019d5c:	3001      	adds	r0, #1
 8019d5e:	f000 80aa 	beq.w	8019eb6 <_vfiprintf_r+0x20e>
 8019d62:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8019d64:	445a      	add	r2, fp
 8019d66:	9209      	str	r2, [sp, #36]	; 0x24
 8019d68:	f89a 3000 	ldrb.w	r3, [sl]
 8019d6c:	2b00      	cmp	r3, #0
 8019d6e:	f000 80a2 	beq.w	8019eb6 <_vfiprintf_r+0x20e>
 8019d72:	2300      	movs	r3, #0
 8019d74:	f04f 32ff 	mov.w	r2, #4294967295
 8019d78:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8019d7c:	f10a 0a01 	add.w	sl, sl, #1
 8019d80:	9304      	str	r3, [sp, #16]
 8019d82:	9307      	str	r3, [sp, #28]
 8019d84:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8019d88:	931a      	str	r3, [sp, #104]	; 0x68
 8019d8a:	4654      	mov	r4, sl
 8019d8c:	2205      	movs	r2, #5
 8019d8e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019d92:	4858      	ldr	r0, [pc, #352]	; (8019ef4 <_vfiprintf_r+0x24c>)
 8019d94:	f7e6 fa54 	bl	8000240 <memchr>
 8019d98:	9a04      	ldr	r2, [sp, #16]
 8019d9a:	b9d8      	cbnz	r0, 8019dd4 <_vfiprintf_r+0x12c>
 8019d9c:	06d1      	lsls	r1, r2, #27
 8019d9e:	bf44      	itt	mi
 8019da0:	2320      	movmi	r3, #32
 8019da2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8019da6:	0713      	lsls	r3, r2, #28
 8019da8:	bf44      	itt	mi
 8019daa:	232b      	movmi	r3, #43	; 0x2b
 8019dac:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8019db0:	f89a 3000 	ldrb.w	r3, [sl]
 8019db4:	2b2a      	cmp	r3, #42	; 0x2a
 8019db6:	d015      	beq.n	8019de4 <_vfiprintf_r+0x13c>
 8019db8:	9a07      	ldr	r2, [sp, #28]
 8019dba:	4654      	mov	r4, sl
 8019dbc:	2000      	movs	r0, #0
 8019dbe:	f04f 0c0a 	mov.w	ip, #10
 8019dc2:	4621      	mov	r1, r4
 8019dc4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8019dc8:	3b30      	subs	r3, #48	; 0x30
 8019dca:	2b09      	cmp	r3, #9
 8019dcc:	d94e      	bls.n	8019e6c <_vfiprintf_r+0x1c4>
 8019dce:	b1b0      	cbz	r0, 8019dfe <_vfiprintf_r+0x156>
 8019dd0:	9207      	str	r2, [sp, #28]
 8019dd2:	e014      	b.n	8019dfe <_vfiprintf_r+0x156>
 8019dd4:	eba0 0308 	sub.w	r3, r0, r8
 8019dd8:	fa09 f303 	lsl.w	r3, r9, r3
 8019ddc:	4313      	orrs	r3, r2
 8019dde:	9304      	str	r3, [sp, #16]
 8019de0:	46a2      	mov	sl, r4
 8019de2:	e7d2      	b.n	8019d8a <_vfiprintf_r+0xe2>
 8019de4:	9b03      	ldr	r3, [sp, #12]
 8019de6:	1d19      	adds	r1, r3, #4
 8019de8:	681b      	ldr	r3, [r3, #0]
 8019dea:	9103      	str	r1, [sp, #12]
 8019dec:	2b00      	cmp	r3, #0
 8019dee:	bfbb      	ittet	lt
 8019df0:	425b      	neglt	r3, r3
 8019df2:	f042 0202 	orrlt.w	r2, r2, #2
 8019df6:	9307      	strge	r3, [sp, #28]
 8019df8:	9307      	strlt	r3, [sp, #28]
 8019dfa:	bfb8      	it	lt
 8019dfc:	9204      	strlt	r2, [sp, #16]
 8019dfe:	7823      	ldrb	r3, [r4, #0]
 8019e00:	2b2e      	cmp	r3, #46	; 0x2e
 8019e02:	d10c      	bne.n	8019e1e <_vfiprintf_r+0x176>
 8019e04:	7863      	ldrb	r3, [r4, #1]
 8019e06:	2b2a      	cmp	r3, #42	; 0x2a
 8019e08:	d135      	bne.n	8019e76 <_vfiprintf_r+0x1ce>
 8019e0a:	9b03      	ldr	r3, [sp, #12]
 8019e0c:	1d1a      	adds	r2, r3, #4
 8019e0e:	681b      	ldr	r3, [r3, #0]
 8019e10:	9203      	str	r2, [sp, #12]
 8019e12:	2b00      	cmp	r3, #0
 8019e14:	bfb8      	it	lt
 8019e16:	f04f 33ff 	movlt.w	r3, #4294967295
 8019e1a:	3402      	adds	r4, #2
 8019e1c:	9305      	str	r3, [sp, #20]
 8019e1e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8019f04 <_vfiprintf_r+0x25c>
 8019e22:	7821      	ldrb	r1, [r4, #0]
 8019e24:	2203      	movs	r2, #3
 8019e26:	4650      	mov	r0, sl
 8019e28:	f7e6 fa0a 	bl	8000240 <memchr>
 8019e2c:	b140      	cbz	r0, 8019e40 <_vfiprintf_r+0x198>
 8019e2e:	2340      	movs	r3, #64	; 0x40
 8019e30:	eba0 000a 	sub.w	r0, r0, sl
 8019e34:	fa03 f000 	lsl.w	r0, r3, r0
 8019e38:	9b04      	ldr	r3, [sp, #16]
 8019e3a:	4303      	orrs	r3, r0
 8019e3c:	3401      	adds	r4, #1
 8019e3e:	9304      	str	r3, [sp, #16]
 8019e40:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019e44:	482c      	ldr	r0, [pc, #176]	; (8019ef8 <_vfiprintf_r+0x250>)
 8019e46:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8019e4a:	2206      	movs	r2, #6
 8019e4c:	f7e6 f9f8 	bl	8000240 <memchr>
 8019e50:	2800      	cmp	r0, #0
 8019e52:	d03f      	beq.n	8019ed4 <_vfiprintf_r+0x22c>
 8019e54:	4b29      	ldr	r3, [pc, #164]	; (8019efc <_vfiprintf_r+0x254>)
 8019e56:	bb1b      	cbnz	r3, 8019ea0 <_vfiprintf_r+0x1f8>
 8019e58:	9b03      	ldr	r3, [sp, #12]
 8019e5a:	3307      	adds	r3, #7
 8019e5c:	f023 0307 	bic.w	r3, r3, #7
 8019e60:	3308      	adds	r3, #8
 8019e62:	9303      	str	r3, [sp, #12]
 8019e64:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019e66:	443b      	add	r3, r7
 8019e68:	9309      	str	r3, [sp, #36]	; 0x24
 8019e6a:	e767      	b.n	8019d3c <_vfiprintf_r+0x94>
 8019e6c:	fb0c 3202 	mla	r2, ip, r2, r3
 8019e70:	460c      	mov	r4, r1
 8019e72:	2001      	movs	r0, #1
 8019e74:	e7a5      	b.n	8019dc2 <_vfiprintf_r+0x11a>
 8019e76:	2300      	movs	r3, #0
 8019e78:	3401      	adds	r4, #1
 8019e7a:	9305      	str	r3, [sp, #20]
 8019e7c:	4619      	mov	r1, r3
 8019e7e:	f04f 0c0a 	mov.w	ip, #10
 8019e82:	4620      	mov	r0, r4
 8019e84:	f810 2b01 	ldrb.w	r2, [r0], #1
 8019e88:	3a30      	subs	r2, #48	; 0x30
 8019e8a:	2a09      	cmp	r2, #9
 8019e8c:	d903      	bls.n	8019e96 <_vfiprintf_r+0x1ee>
 8019e8e:	2b00      	cmp	r3, #0
 8019e90:	d0c5      	beq.n	8019e1e <_vfiprintf_r+0x176>
 8019e92:	9105      	str	r1, [sp, #20]
 8019e94:	e7c3      	b.n	8019e1e <_vfiprintf_r+0x176>
 8019e96:	fb0c 2101 	mla	r1, ip, r1, r2
 8019e9a:	4604      	mov	r4, r0
 8019e9c:	2301      	movs	r3, #1
 8019e9e:	e7f0      	b.n	8019e82 <_vfiprintf_r+0x1da>
 8019ea0:	ab03      	add	r3, sp, #12
 8019ea2:	9300      	str	r3, [sp, #0]
 8019ea4:	462a      	mov	r2, r5
 8019ea6:	4b16      	ldr	r3, [pc, #88]	; (8019f00 <_vfiprintf_r+0x258>)
 8019ea8:	a904      	add	r1, sp, #16
 8019eaa:	4630      	mov	r0, r6
 8019eac:	f7fb fa5c 	bl	8015368 <_printf_float>
 8019eb0:	4607      	mov	r7, r0
 8019eb2:	1c78      	adds	r0, r7, #1
 8019eb4:	d1d6      	bne.n	8019e64 <_vfiprintf_r+0x1bc>
 8019eb6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8019eb8:	07d9      	lsls	r1, r3, #31
 8019eba:	d405      	bmi.n	8019ec8 <_vfiprintf_r+0x220>
 8019ebc:	89ab      	ldrh	r3, [r5, #12]
 8019ebe:	059a      	lsls	r2, r3, #22
 8019ec0:	d402      	bmi.n	8019ec8 <_vfiprintf_r+0x220>
 8019ec2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8019ec4:	f7ff fe85 	bl	8019bd2 <__retarget_lock_release_recursive>
 8019ec8:	89ab      	ldrh	r3, [r5, #12]
 8019eca:	065b      	lsls	r3, r3, #25
 8019ecc:	f53f af12 	bmi.w	8019cf4 <_vfiprintf_r+0x4c>
 8019ed0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8019ed2:	e711      	b.n	8019cf8 <_vfiprintf_r+0x50>
 8019ed4:	ab03      	add	r3, sp, #12
 8019ed6:	9300      	str	r3, [sp, #0]
 8019ed8:	462a      	mov	r2, r5
 8019eda:	4b09      	ldr	r3, [pc, #36]	; (8019f00 <_vfiprintf_r+0x258>)
 8019edc:	a904      	add	r1, sp, #16
 8019ede:	4630      	mov	r0, r6
 8019ee0:	f7fb fce6 	bl	80158b0 <_printf_i>
 8019ee4:	e7e4      	b.n	8019eb0 <_vfiprintf_r+0x208>
 8019ee6:	bf00      	nop
 8019ee8:	0801fa14 	.word	0x0801fa14
 8019eec:	0801fa34 	.word	0x0801fa34
 8019ef0:	0801f9f4 	.word	0x0801f9f4
 8019ef4:	0801f98c 	.word	0x0801f98c
 8019ef8:	0801f996 	.word	0x0801f996
 8019efc:	08015369 	.word	0x08015369
 8019f00:	08019c83 	.word	0x08019c83
 8019f04:	0801f992 	.word	0x0801f992

08019f08 <__swbuf_r>:
 8019f08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019f0a:	460e      	mov	r6, r1
 8019f0c:	4614      	mov	r4, r2
 8019f0e:	4605      	mov	r5, r0
 8019f10:	b118      	cbz	r0, 8019f1a <__swbuf_r+0x12>
 8019f12:	6983      	ldr	r3, [r0, #24]
 8019f14:	b90b      	cbnz	r3, 8019f1a <__swbuf_r+0x12>
 8019f16:	f7ff fdab 	bl	8019a70 <__sinit>
 8019f1a:	4b21      	ldr	r3, [pc, #132]	; (8019fa0 <__swbuf_r+0x98>)
 8019f1c:	429c      	cmp	r4, r3
 8019f1e:	d12b      	bne.n	8019f78 <__swbuf_r+0x70>
 8019f20:	686c      	ldr	r4, [r5, #4]
 8019f22:	69a3      	ldr	r3, [r4, #24]
 8019f24:	60a3      	str	r3, [r4, #8]
 8019f26:	89a3      	ldrh	r3, [r4, #12]
 8019f28:	071a      	lsls	r2, r3, #28
 8019f2a:	d52f      	bpl.n	8019f8c <__swbuf_r+0x84>
 8019f2c:	6923      	ldr	r3, [r4, #16]
 8019f2e:	b36b      	cbz	r3, 8019f8c <__swbuf_r+0x84>
 8019f30:	6923      	ldr	r3, [r4, #16]
 8019f32:	6820      	ldr	r0, [r4, #0]
 8019f34:	1ac0      	subs	r0, r0, r3
 8019f36:	6963      	ldr	r3, [r4, #20]
 8019f38:	b2f6      	uxtb	r6, r6
 8019f3a:	4283      	cmp	r3, r0
 8019f3c:	4637      	mov	r7, r6
 8019f3e:	dc04      	bgt.n	8019f4a <__swbuf_r+0x42>
 8019f40:	4621      	mov	r1, r4
 8019f42:	4628      	mov	r0, r5
 8019f44:	f7ff fd00 	bl	8019948 <_fflush_r>
 8019f48:	bb30      	cbnz	r0, 8019f98 <__swbuf_r+0x90>
 8019f4a:	68a3      	ldr	r3, [r4, #8]
 8019f4c:	3b01      	subs	r3, #1
 8019f4e:	60a3      	str	r3, [r4, #8]
 8019f50:	6823      	ldr	r3, [r4, #0]
 8019f52:	1c5a      	adds	r2, r3, #1
 8019f54:	6022      	str	r2, [r4, #0]
 8019f56:	701e      	strb	r6, [r3, #0]
 8019f58:	6963      	ldr	r3, [r4, #20]
 8019f5a:	3001      	adds	r0, #1
 8019f5c:	4283      	cmp	r3, r0
 8019f5e:	d004      	beq.n	8019f6a <__swbuf_r+0x62>
 8019f60:	89a3      	ldrh	r3, [r4, #12]
 8019f62:	07db      	lsls	r3, r3, #31
 8019f64:	d506      	bpl.n	8019f74 <__swbuf_r+0x6c>
 8019f66:	2e0a      	cmp	r6, #10
 8019f68:	d104      	bne.n	8019f74 <__swbuf_r+0x6c>
 8019f6a:	4621      	mov	r1, r4
 8019f6c:	4628      	mov	r0, r5
 8019f6e:	f7ff fceb 	bl	8019948 <_fflush_r>
 8019f72:	b988      	cbnz	r0, 8019f98 <__swbuf_r+0x90>
 8019f74:	4638      	mov	r0, r7
 8019f76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019f78:	4b0a      	ldr	r3, [pc, #40]	; (8019fa4 <__swbuf_r+0x9c>)
 8019f7a:	429c      	cmp	r4, r3
 8019f7c:	d101      	bne.n	8019f82 <__swbuf_r+0x7a>
 8019f7e:	68ac      	ldr	r4, [r5, #8]
 8019f80:	e7cf      	b.n	8019f22 <__swbuf_r+0x1a>
 8019f82:	4b09      	ldr	r3, [pc, #36]	; (8019fa8 <__swbuf_r+0xa0>)
 8019f84:	429c      	cmp	r4, r3
 8019f86:	bf08      	it	eq
 8019f88:	68ec      	ldreq	r4, [r5, #12]
 8019f8a:	e7ca      	b.n	8019f22 <__swbuf_r+0x1a>
 8019f8c:	4621      	mov	r1, r4
 8019f8e:	4628      	mov	r0, r5
 8019f90:	f000 f80c 	bl	8019fac <__swsetup_r>
 8019f94:	2800      	cmp	r0, #0
 8019f96:	d0cb      	beq.n	8019f30 <__swbuf_r+0x28>
 8019f98:	f04f 37ff 	mov.w	r7, #4294967295
 8019f9c:	e7ea      	b.n	8019f74 <__swbuf_r+0x6c>
 8019f9e:	bf00      	nop
 8019fa0:	0801fa14 	.word	0x0801fa14
 8019fa4:	0801fa34 	.word	0x0801fa34
 8019fa8:	0801f9f4 	.word	0x0801f9f4

08019fac <__swsetup_r>:
 8019fac:	4b32      	ldr	r3, [pc, #200]	; (801a078 <__swsetup_r+0xcc>)
 8019fae:	b570      	push	{r4, r5, r6, lr}
 8019fb0:	681d      	ldr	r5, [r3, #0]
 8019fb2:	4606      	mov	r6, r0
 8019fb4:	460c      	mov	r4, r1
 8019fb6:	b125      	cbz	r5, 8019fc2 <__swsetup_r+0x16>
 8019fb8:	69ab      	ldr	r3, [r5, #24]
 8019fba:	b913      	cbnz	r3, 8019fc2 <__swsetup_r+0x16>
 8019fbc:	4628      	mov	r0, r5
 8019fbe:	f7ff fd57 	bl	8019a70 <__sinit>
 8019fc2:	4b2e      	ldr	r3, [pc, #184]	; (801a07c <__swsetup_r+0xd0>)
 8019fc4:	429c      	cmp	r4, r3
 8019fc6:	d10f      	bne.n	8019fe8 <__swsetup_r+0x3c>
 8019fc8:	686c      	ldr	r4, [r5, #4]
 8019fca:	89a3      	ldrh	r3, [r4, #12]
 8019fcc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8019fd0:	0719      	lsls	r1, r3, #28
 8019fd2:	d42c      	bmi.n	801a02e <__swsetup_r+0x82>
 8019fd4:	06dd      	lsls	r5, r3, #27
 8019fd6:	d411      	bmi.n	8019ffc <__swsetup_r+0x50>
 8019fd8:	2309      	movs	r3, #9
 8019fda:	6033      	str	r3, [r6, #0]
 8019fdc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8019fe0:	81a3      	strh	r3, [r4, #12]
 8019fe2:	f04f 30ff 	mov.w	r0, #4294967295
 8019fe6:	e03e      	b.n	801a066 <__swsetup_r+0xba>
 8019fe8:	4b25      	ldr	r3, [pc, #148]	; (801a080 <__swsetup_r+0xd4>)
 8019fea:	429c      	cmp	r4, r3
 8019fec:	d101      	bne.n	8019ff2 <__swsetup_r+0x46>
 8019fee:	68ac      	ldr	r4, [r5, #8]
 8019ff0:	e7eb      	b.n	8019fca <__swsetup_r+0x1e>
 8019ff2:	4b24      	ldr	r3, [pc, #144]	; (801a084 <__swsetup_r+0xd8>)
 8019ff4:	429c      	cmp	r4, r3
 8019ff6:	bf08      	it	eq
 8019ff8:	68ec      	ldreq	r4, [r5, #12]
 8019ffa:	e7e6      	b.n	8019fca <__swsetup_r+0x1e>
 8019ffc:	0758      	lsls	r0, r3, #29
 8019ffe:	d512      	bpl.n	801a026 <__swsetup_r+0x7a>
 801a000:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801a002:	b141      	cbz	r1, 801a016 <__swsetup_r+0x6a>
 801a004:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801a008:	4299      	cmp	r1, r3
 801a00a:	d002      	beq.n	801a012 <__swsetup_r+0x66>
 801a00c:	4630      	mov	r0, r6
 801a00e:	f7fb f861 	bl	80150d4 <_free_r>
 801a012:	2300      	movs	r3, #0
 801a014:	6363      	str	r3, [r4, #52]	; 0x34
 801a016:	89a3      	ldrh	r3, [r4, #12]
 801a018:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801a01c:	81a3      	strh	r3, [r4, #12]
 801a01e:	2300      	movs	r3, #0
 801a020:	6063      	str	r3, [r4, #4]
 801a022:	6923      	ldr	r3, [r4, #16]
 801a024:	6023      	str	r3, [r4, #0]
 801a026:	89a3      	ldrh	r3, [r4, #12]
 801a028:	f043 0308 	orr.w	r3, r3, #8
 801a02c:	81a3      	strh	r3, [r4, #12]
 801a02e:	6923      	ldr	r3, [r4, #16]
 801a030:	b94b      	cbnz	r3, 801a046 <__swsetup_r+0x9a>
 801a032:	89a3      	ldrh	r3, [r4, #12]
 801a034:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801a038:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801a03c:	d003      	beq.n	801a046 <__swsetup_r+0x9a>
 801a03e:	4621      	mov	r1, r4
 801a040:	4630      	mov	r0, r6
 801a042:	f000 f84d 	bl	801a0e0 <__smakebuf_r>
 801a046:	89a0      	ldrh	r0, [r4, #12]
 801a048:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801a04c:	f010 0301 	ands.w	r3, r0, #1
 801a050:	d00a      	beq.n	801a068 <__swsetup_r+0xbc>
 801a052:	2300      	movs	r3, #0
 801a054:	60a3      	str	r3, [r4, #8]
 801a056:	6963      	ldr	r3, [r4, #20]
 801a058:	425b      	negs	r3, r3
 801a05a:	61a3      	str	r3, [r4, #24]
 801a05c:	6923      	ldr	r3, [r4, #16]
 801a05e:	b943      	cbnz	r3, 801a072 <__swsetup_r+0xc6>
 801a060:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801a064:	d1ba      	bne.n	8019fdc <__swsetup_r+0x30>
 801a066:	bd70      	pop	{r4, r5, r6, pc}
 801a068:	0781      	lsls	r1, r0, #30
 801a06a:	bf58      	it	pl
 801a06c:	6963      	ldrpl	r3, [r4, #20]
 801a06e:	60a3      	str	r3, [r4, #8]
 801a070:	e7f4      	b.n	801a05c <__swsetup_r+0xb0>
 801a072:	2000      	movs	r0, #0
 801a074:	e7f7      	b.n	801a066 <__swsetup_r+0xba>
 801a076:	bf00      	nop
 801a078:	20000154 	.word	0x20000154
 801a07c:	0801fa14 	.word	0x0801fa14
 801a080:	0801fa34 	.word	0x0801fa34
 801a084:	0801f9f4 	.word	0x0801f9f4

0801a088 <abort>:
 801a088:	b508      	push	{r3, lr}
 801a08a:	2006      	movs	r0, #6
 801a08c:	f000 f898 	bl	801a1c0 <raise>
 801a090:	2001      	movs	r0, #1
 801a092:	f7e7 fa82 	bl	800159a <_exit>

0801a096 <__swhatbuf_r>:
 801a096:	b570      	push	{r4, r5, r6, lr}
 801a098:	460e      	mov	r6, r1
 801a09a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a09e:	2900      	cmp	r1, #0
 801a0a0:	b096      	sub	sp, #88	; 0x58
 801a0a2:	4614      	mov	r4, r2
 801a0a4:	461d      	mov	r5, r3
 801a0a6:	da07      	bge.n	801a0b8 <__swhatbuf_r+0x22>
 801a0a8:	2300      	movs	r3, #0
 801a0aa:	602b      	str	r3, [r5, #0]
 801a0ac:	89b3      	ldrh	r3, [r6, #12]
 801a0ae:	061a      	lsls	r2, r3, #24
 801a0b0:	d410      	bmi.n	801a0d4 <__swhatbuf_r+0x3e>
 801a0b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801a0b6:	e00e      	b.n	801a0d6 <__swhatbuf_r+0x40>
 801a0b8:	466a      	mov	r2, sp
 801a0ba:	f000 f89d 	bl	801a1f8 <_fstat_r>
 801a0be:	2800      	cmp	r0, #0
 801a0c0:	dbf2      	blt.n	801a0a8 <__swhatbuf_r+0x12>
 801a0c2:	9a01      	ldr	r2, [sp, #4]
 801a0c4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801a0c8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801a0cc:	425a      	negs	r2, r3
 801a0ce:	415a      	adcs	r2, r3
 801a0d0:	602a      	str	r2, [r5, #0]
 801a0d2:	e7ee      	b.n	801a0b2 <__swhatbuf_r+0x1c>
 801a0d4:	2340      	movs	r3, #64	; 0x40
 801a0d6:	2000      	movs	r0, #0
 801a0d8:	6023      	str	r3, [r4, #0]
 801a0da:	b016      	add	sp, #88	; 0x58
 801a0dc:	bd70      	pop	{r4, r5, r6, pc}
	...

0801a0e0 <__smakebuf_r>:
 801a0e0:	898b      	ldrh	r3, [r1, #12]
 801a0e2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801a0e4:	079d      	lsls	r5, r3, #30
 801a0e6:	4606      	mov	r6, r0
 801a0e8:	460c      	mov	r4, r1
 801a0ea:	d507      	bpl.n	801a0fc <__smakebuf_r+0x1c>
 801a0ec:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801a0f0:	6023      	str	r3, [r4, #0]
 801a0f2:	6123      	str	r3, [r4, #16]
 801a0f4:	2301      	movs	r3, #1
 801a0f6:	6163      	str	r3, [r4, #20]
 801a0f8:	b002      	add	sp, #8
 801a0fa:	bd70      	pop	{r4, r5, r6, pc}
 801a0fc:	ab01      	add	r3, sp, #4
 801a0fe:	466a      	mov	r2, sp
 801a100:	f7ff ffc9 	bl	801a096 <__swhatbuf_r>
 801a104:	9900      	ldr	r1, [sp, #0]
 801a106:	4605      	mov	r5, r0
 801a108:	4630      	mov	r0, r6
 801a10a:	f7fb f833 	bl	8015174 <_malloc_r>
 801a10e:	b948      	cbnz	r0, 801a124 <__smakebuf_r+0x44>
 801a110:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801a114:	059a      	lsls	r2, r3, #22
 801a116:	d4ef      	bmi.n	801a0f8 <__smakebuf_r+0x18>
 801a118:	f023 0303 	bic.w	r3, r3, #3
 801a11c:	f043 0302 	orr.w	r3, r3, #2
 801a120:	81a3      	strh	r3, [r4, #12]
 801a122:	e7e3      	b.n	801a0ec <__smakebuf_r+0xc>
 801a124:	4b0d      	ldr	r3, [pc, #52]	; (801a15c <__smakebuf_r+0x7c>)
 801a126:	62b3      	str	r3, [r6, #40]	; 0x28
 801a128:	89a3      	ldrh	r3, [r4, #12]
 801a12a:	6020      	str	r0, [r4, #0]
 801a12c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801a130:	81a3      	strh	r3, [r4, #12]
 801a132:	9b00      	ldr	r3, [sp, #0]
 801a134:	6163      	str	r3, [r4, #20]
 801a136:	9b01      	ldr	r3, [sp, #4]
 801a138:	6120      	str	r0, [r4, #16]
 801a13a:	b15b      	cbz	r3, 801a154 <__smakebuf_r+0x74>
 801a13c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801a140:	4630      	mov	r0, r6
 801a142:	f000 f86b 	bl	801a21c <_isatty_r>
 801a146:	b128      	cbz	r0, 801a154 <__smakebuf_r+0x74>
 801a148:	89a3      	ldrh	r3, [r4, #12]
 801a14a:	f023 0303 	bic.w	r3, r3, #3
 801a14e:	f043 0301 	orr.w	r3, r3, #1
 801a152:	81a3      	strh	r3, [r4, #12]
 801a154:	89a0      	ldrh	r0, [r4, #12]
 801a156:	4305      	orrs	r5, r0
 801a158:	81a5      	strh	r5, [r4, #12]
 801a15a:	e7cd      	b.n	801a0f8 <__smakebuf_r+0x18>
 801a15c:	08019a09 	.word	0x08019a09

0801a160 <_malloc_usable_size_r>:
 801a160:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801a164:	1f18      	subs	r0, r3, #4
 801a166:	2b00      	cmp	r3, #0
 801a168:	bfbc      	itt	lt
 801a16a:	580b      	ldrlt	r3, [r1, r0]
 801a16c:	18c0      	addlt	r0, r0, r3
 801a16e:	4770      	bx	lr

0801a170 <_raise_r>:
 801a170:	291f      	cmp	r1, #31
 801a172:	b538      	push	{r3, r4, r5, lr}
 801a174:	4604      	mov	r4, r0
 801a176:	460d      	mov	r5, r1
 801a178:	d904      	bls.n	801a184 <_raise_r+0x14>
 801a17a:	2316      	movs	r3, #22
 801a17c:	6003      	str	r3, [r0, #0]
 801a17e:	f04f 30ff 	mov.w	r0, #4294967295
 801a182:	bd38      	pop	{r3, r4, r5, pc}
 801a184:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801a186:	b112      	cbz	r2, 801a18e <_raise_r+0x1e>
 801a188:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801a18c:	b94b      	cbnz	r3, 801a1a2 <_raise_r+0x32>
 801a18e:	4620      	mov	r0, r4
 801a190:	f000 f830 	bl	801a1f4 <_getpid_r>
 801a194:	462a      	mov	r2, r5
 801a196:	4601      	mov	r1, r0
 801a198:	4620      	mov	r0, r4
 801a19a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801a19e:	f000 b817 	b.w	801a1d0 <_kill_r>
 801a1a2:	2b01      	cmp	r3, #1
 801a1a4:	d00a      	beq.n	801a1bc <_raise_r+0x4c>
 801a1a6:	1c59      	adds	r1, r3, #1
 801a1a8:	d103      	bne.n	801a1b2 <_raise_r+0x42>
 801a1aa:	2316      	movs	r3, #22
 801a1ac:	6003      	str	r3, [r0, #0]
 801a1ae:	2001      	movs	r0, #1
 801a1b0:	e7e7      	b.n	801a182 <_raise_r+0x12>
 801a1b2:	2400      	movs	r4, #0
 801a1b4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801a1b8:	4628      	mov	r0, r5
 801a1ba:	4798      	blx	r3
 801a1bc:	2000      	movs	r0, #0
 801a1be:	e7e0      	b.n	801a182 <_raise_r+0x12>

0801a1c0 <raise>:
 801a1c0:	4b02      	ldr	r3, [pc, #8]	; (801a1cc <raise+0xc>)
 801a1c2:	4601      	mov	r1, r0
 801a1c4:	6818      	ldr	r0, [r3, #0]
 801a1c6:	f7ff bfd3 	b.w	801a170 <_raise_r>
 801a1ca:	bf00      	nop
 801a1cc:	20000154 	.word	0x20000154

0801a1d0 <_kill_r>:
 801a1d0:	b538      	push	{r3, r4, r5, lr}
 801a1d2:	4d07      	ldr	r5, [pc, #28]	; (801a1f0 <_kill_r+0x20>)
 801a1d4:	2300      	movs	r3, #0
 801a1d6:	4604      	mov	r4, r0
 801a1d8:	4608      	mov	r0, r1
 801a1da:	4611      	mov	r1, r2
 801a1dc:	602b      	str	r3, [r5, #0]
 801a1de:	f7e7 f9cc 	bl	800157a <_kill>
 801a1e2:	1c43      	adds	r3, r0, #1
 801a1e4:	d102      	bne.n	801a1ec <_kill_r+0x1c>
 801a1e6:	682b      	ldr	r3, [r5, #0]
 801a1e8:	b103      	cbz	r3, 801a1ec <_kill_r+0x1c>
 801a1ea:	6023      	str	r3, [r4, #0]
 801a1ec:	bd38      	pop	{r3, r4, r5, pc}
 801a1ee:	bf00      	nop
 801a1f0:	20005868 	.word	0x20005868

0801a1f4 <_getpid_r>:
 801a1f4:	f7e7 b9b9 	b.w	800156a <_getpid>

0801a1f8 <_fstat_r>:
 801a1f8:	b538      	push	{r3, r4, r5, lr}
 801a1fa:	4d07      	ldr	r5, [pc, #28]	; (801a218 <_fstat_r+0x20>)
 801a1fc:	2300      	movs	r3, #0
 801a1fe:	4604      	mov	r4, r0
 801a200:	4608      	mov	r0, r1
 801a202:	4611      	mov	r1, r2
 801a204:	602b      	str	r3, [r5, #0]
 801a206:	f7e7 fa17 	bl	8001638 <_fstat>
 801a20a:	1c43      	adds	r3, r0, #1
 801a20c:	d102      	bne.n	801a214 <_fstat_r+0x1c>
 801a20e:	682b      	ldr	r3, [r5, #0]
 801a210:	b103      	cbz	r3, 801a214 <_fstat_r+0x1c>
 801a212:	6023      	str	r3, [r4, #0]
 801a214:	bd38      	pop	{r3, r4, r5, pc}
 801a216:	bf00      	nop
 801a218:	20005868 	.word	0x20005868

0801a21c <_isatty_r>:
 801a21c:	b538      	push	{r3, r4, r5, lr}
 801a21e:	4d06      	ldr	r5, [pc, #24]	; (801a238 <_isatty_r+0x1c>)
 801a220:	2300      	movs	r3, #0
 801a222:	4604      	mov	r4, r0
 801a224:	4608      	mov	r0, r1
 801a226:	602b      	str	r3, [r5, #0]
 801a228:	f7e7 fa16 	bl	8001658 <_isatty>
 801a22c:	1c43      	adds	r3, r0, #1
 801a22e:	d102      	bne.n	801a236 <_isatty_r+0x1a>
 801a230:	682b      	ldr	r3, [r5, #0]
 801a232:	b103      	cbz	r3, 801a236 <_isatty_r+0x1a>
 801a234:	6023      	str	r3, [r4, #0]
 801a236:	bd38      	pop	{r3, r4, r5, pc}
 801a238:	20005868 	.word	0x20005868

0801a23c <_init>:
 801a23c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a23e:	bf00      	nop
 801a240:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801a242:	bc08      	pop	{r3}
 801a244:	469e      	mov	lr, r3
 801a246:	4770      	bx	lr

0801a248 <_fini>:
 801a248:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a24a:	bf00      	nop
 801a24c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801a24e:	bc08      	pop	{r3}
 801a250:	469e      	mov	lr, r3
 801a252:	4770      	bx	lr
